//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "miHoYo/miHoYo_Scenes/Scenes_DLC/LightMapUnity_Matcap_Emission" {
Properties {
[MHYHeaderBox(OPTIONS)] [Enum(UnityEngine.Rendering.CullMode)] _CullMode ("Cull Mode", Float) = 2
[Toggle(_ALPHATEST_ON)] _EnableAlphaCutoff ("Enable Alpha Cutoff", Float) = 0
[MHYKeywordFilter(_ALPHATEST_ON On)] _AlphaCutoff ("Alpha Cutoff", Range(0, 1)) = 0.5
[MHYHeaderBox(MAPS)] [MHYSingleLineTextureNoScaleOffset(_Color)] _MainTex ("Albedo", 2D) = "white" { }
_Color ("Color", Color) = (1,1,1,1)
[MHYTextureScaleOffset] _MainMaps_ST ("Main Maps ST", Vector) = (1,1,0,0)
[MHYSingleLineTextureNoScaleOffset] _PropertyLightmapTex ("LightMap", 2D) = "gray" { }
[MHYTextureScaleOffset] _PropertyLightmapTexTS ("PropertyLightmapTexTS", Vector) = (0,0,0,0)
_ShadowColor ("Shadow Color", Color) = (0.5,0.5,0.5,1)
_ShadowIntegration ("Shadow Integration", Range(0, 1)) = 0.2
[MHYHeaderBox(LIGHTING)] _BloomIntensity ("Bloom Intensity", Range(0, 50)) = 1
_LightMapIntensity ("Light Map Intensity", Range(0, 5)) = 1.5
_FogTune ("Fog Tune", Range(0, 1)) = 1
_LightingColor ("Lighting Color", Color) = (0.2,0.2,0.2,1)
[MHYHeaderBox(MATCAP)] [Toggle(MATCAP_ON)] _EnableMatcap ("Enable Matcap", Float) = 0
_MatcapMaskMap ("MatcapMask Map", 2D) = "white" { }
[Toggle(BUMPMAP_ON)] _EnableBumpMap ("Enable Bump Map", Float) = 0
_BumpMap ("Normal Map", 2D) = "bump" { }
_MatCap ("MatCap (RGB)", 2D) = "white" { }
_MetalRef ("MetalRef", Range(0, 1)) = 0
_EmissionMask ("Emission Mask", 2D) = "black" { }
[Enum(R,0,G,1,B,2)] _UseChannel ("Use Channel", Float) = 1
[Enum(UV1st,0,UV2nd,1)] _UseSet ("UV Set", Float) = 1
_Emission ("Emission Color", Color) = (0,0,0,0.5)
_EmissionGIIntensity ("Emission GI Intensity", Range(0, 10)) = 2
[MHYHeaderBox(MATCAP SPECULAR)] [Toggle(SPECULAR_ON)] _EnableMatcapSpecular ("Enable Matcap Specular", Float) = 0
_SpecularMap ("Specular MatCap", 2D) = "black" { }
_SpecularIntensity ("Specular Intensity", Range(0, 1)) = 0
_LightmapThreshold ("Lightmap Threshold", Range(0, 1)) = 0.5
_IntensityInLightmap ("Intensity In Lightmap", Range(0, 1)) = 0.1
[MHYHeaderBox(LIGHTMAP)] [Toggle(LIGHTMAPCOLOR_ON)] _EnableLightmapColor ("Enable LightmapColor Change", Float) = 0
_LightmapColorScale ("LightmapColorScale", Range(0, 4)) = 1.85
_LightmapColorIns ("LightmapColorIns", Range(0, 2)) = 0.9
_LightmapColorChange ("LightmapColorChange (RGB)", 2D) = "white" { }
_LightmapColorLerp ("LightmapColorLerp", Range(0, 1)) = 1
_LightmapDarkArea ("LightmapDarkArea", Range(0, 0.5)) = 0
_LightmapDarkPromotion ("LightmapDarkPromotion", Range(0, 1)) = 0
[MHYHeaderBox(ADDLIGHT)] _AdditiveLightPower ("Additive Light Power", Range(0.1, 5)) = 1
_AdditiveLightIntensity ("Additive Light Intensity", Range(0, 1)) = 1
_Transparent ("_Trans", Range(0, 1)) = 1
}
SubShader {
 Tags { "PerformanceChecks" = "False" "QUEUE" = "Geometry" "RenderType" = "Opaque" }
 Pass {
  Name "FORWARDONLY"
  Tags { "LIGHTMODE" = "FORWARDBASE" "PerformanceChecks" = "False" "QUEUE" = "Geometry" "RenderType" = "Opaque" }
  Cull Off
  GpuProgramID 26664
Program "vp" {
SubProgram "gles3 hw_tier00 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
bvec2 u_xlatb8;
bool u_xlatb12;
mediump float u_xlat16_13;
mediump float u_xlat16_14;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat4.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat4.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_13 = float(_UseChannel);
    u_xlat16_14 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_13 = u_xlat16_13 * u_xlat16_14 + u_xlat10_0.x;
    u_xlat16_13 = (u_xlatb12) ? u_xlat10_0.z : u_xlat16_13;
    u_xlat16_3.xyz = vec3(u_xlat16_13) * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
bvec2 u_xlatb8;
bool u_xlatb12;
mediump float u_xlat16_13;
mediump float u_xlat16_14;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat4.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat4.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_13 = float(_UseChannel);
    u_xlat16_14 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_13 = u_xlat16_13 * u_xlat16_14 + u_xlat10_0.x;
    u_xlat16_13 = (u_xlatb12) ? u_xlat10_0.z : u_xlat16_13;
    u_xlat16_3.xyz = vec3(u_xlat16_13) * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
bvec2 u_xlatb8;
bool u_xlatb12;
mediump float u_xlat16_13;
mediump float u_xlat16_14;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat4.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat4.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_13 = float(_UseChannel);
    u_xlat16_14 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_13 = u_xlat16_13 * u_xlat16_14 + u_xlat10_0.x;
    u_xlat16_13 = (u_xlatb12) ? u_xlat10_0.z : u_xlat16_13;
    u_xlat16_3.xyz = vec3(u_xlat16_13) * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "MATCAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
lowp vec3 u_xlat10_3;
mediump float u_xlat16_5;
float u_xlat8;
lowp float u_xlat10_8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat8 = dot(u_xlat0.xyz, vs_TEXCOORD5.xyz);
    u_xlat8 = u_xlat8 + u_xlat8;
    u_xlat0.xy = vs_TEXCOORD5.xy * (-vec2(u_xlat8)) + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + (-vs_TEXCOORD5.xy);
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat0.xy + vs_TEXCOORD5.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_8 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_1.xyz * u_xlat16_0.xyw + (-u_xlat16_1.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_8) * u_xlat16_0.xyw + u_xlat16_1.xyz;
    u_xlat12 = float(_UseSet);
    u_xlat3.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat3.xy = vec2(u_xlat12) * u_xlat3.xy + vs_TEXCOORD0.xy;
    u_xlat10_3.xyz = texture(_EmissionMask, u_xlat3.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_5 = (-u_xlat10_3.x) + u_xlat10_3.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5 + u_xlat10_3.x;
    u_xlat16_1.x = (u_xlatb12) ? u_xlat10_3.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "MATCAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
lowp vec3 u_xlat10_3;
mediump float u_xlat16_5;
float u_xlat8;
lowp float u_xlat10_8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat8 = dot(u_xlat0.xyz, vs_TEXCOORD5.xyz);
    u_xlat8 = u_xlat8 + u_xlat8;
    u_xlat0.xy = vs_TEXCOORD5.xy * (-vec2(u_xlat8)) + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + (-vs_TEXCOORD5.xy);
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat0.xy + vs_TEXCOORD5.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_8 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_1.xyz * u_xlat16_0.xyw + (-u_xlat16_1.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_8) * u_xlat16_0.xyw + u_xlat16_1.xyz;
    u_xlat12 = float(_UseSet);
    u_xlat3.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat3.xy = vec2(u_xlat12) * u_xlat3.xy + vs_TEXCOORD0.xy;
    u_xlat10_3.xyz = texture(_EmissionMask, u_xlat3.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_5 = (-u_xlat10_3.x) + u_xlat10_3.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5 + u_xlat10_3.x;
    u_xlat16_1.x = (u_xlatb12) ? u_xlat10_3.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "MATCAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
lowp vec3 u_xlat10_3;
mediump float u_xlat16_5;
float u_xlat8;
lowp float u_xlat10_8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat8 = dot(u_xlat0.xyz, vs_TEXCOORD5.xyz);
    u_xlat8 = u_xlat8 + u_xlat8;
    u_xlat0.xy = vs_TEXCOORD5.xy * (-vec2(u_xlat8)) + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + (-vs_TEXCOORD5.xy);
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat0.xy + vs_TEXCOORD5.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_8 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_1.xyz * u_xlat16_0.xyw + (-u_xlat16_1.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_8) * u_xlat16_0.xyw + u_xlat16_1.xyz;
    u_xlat12 = float(_UseSet);
    u_xlat3.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat3.xy = vec2(u_xlat12) * u_xlat3.xy + vs_TEXCOORD0.xy;
    u_xlat10_3.xyz = texture(_EmissionMask, u_xlat3.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_5 = (-u_xlat10_3.x) + u_xlat10_3.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5 + u_xlat10_3.x;
    u_xlat16_1.x = (u_xlatb12) ? u_xlat10_3.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
mediump float u_xlat16_8;
vec2 u_xlat14;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
mediump float u_xlat16_24;
float u_xlat27;
int u_xlati27;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot(vs_TEXCOORD5.xyz, u_xlat16_5.xyz);
    u_xlat16_23 = dot(vs_TEXCOORD6.xyz, u_xlat16_5.xyz);
    u_xlat16_24 = dot(vs_TEXCOORD7.xyz, u_xlat16_5.xyz);
    u_xlat0.xyz = vec3(u_xlat16_23) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_22) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_24) + u_xlat0.xyz;
    u_xlat6.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat6.xyz = vec3(u_xlat21) * u_xlat6.xyz;
    u_xlat14.x = dot(u_xlat6.xyz, u_xlat0.xyz);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
    u_xlat14.xy = u_xlat0.xy * (-u_xlat14.xx) + u_xlat6.xy;
    u_xlat14.xy = (-u_xlat0.xy) + u_xlat14.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat14.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_14 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_6.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_6.xyz + u_xlat10_6.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat27 = (-u_xlat16_1.x) + _LightmapThreshold;
    u_xlat27 = u_xlat27 + 1.0;
    u_xlat27 = floor(u_xlat27);
    u_xlat27 = max(u_xlat27, 0.0);
    u_xlati27 = int(u_xlat27);
    u_xlat27 = (u_xlati27 != 0) ? 0.0 : 1.0;
    u_xlat27 = u_xlat27 + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * vec3(u_xlat27);
    u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_14) * u_xlat16_0.xyw + u_xlat16_4.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat6.xy = vec2(u_xlat21) * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_6.xyz = texture(_EmissionMask, u_xlat6.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_8 = (-u_xlat10_6.x) + u_xlat10_6.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + u_xlat10_6.x;
    u_xlat16_1.x = (u_xlatb21) ? u_xlat10_6.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
mediump float u_xlat16_8;
vec2 u_xlat14;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
mediump float u_xlat16_24;
float u_xlat27;
int u_xlati27;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot(vs_TEXCOORD5.xyz, u_xlat16_5.xyz);
    u_xlat16_23 = dot(vs_TEXCOORD6.xyz, u_xlat16_5.xyz);
    u_xlat16_24 = dot(vs_TEXCOORD7.xyz, u_xlat16_5.xyz);
    u_xlat0.xyz = vec3(u_xlat16_23) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_22) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_24) + u_xlat0.xyz;
    u_xlat6.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat6.xyz = vec3(u_xlat21) * u_xlat6.xyz;
    u_xlat14.x = dot(u_xlat6.xyz, u_xlat0.xyz);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
    u_xlat14.xy = u_xlat0.xy * (-u_xlat14.xx) + u_xlat6.xy;
    u_xlat14.xy = (-u_xlat0.xy) + u_xlat14.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat14.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_14 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_6.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_6.xyz + u_xlat10_6.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat27 = (-u_xlat16_1.x) + _LightmapThreshold;
    u_xlat27 = u_xlat27 + 1.0;
    u_xlat27 = floor(u_xlat27);
    u_xlat27 = max(u_xlat27, 0.0);
    u_xlati27 = int(u_xlat27);
    u_xlat27 = (u_xlati27 != 0) ? 0.0 : 1.0;
    u_xlat27 = u_xlat27 + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * vec3(u_xlat27);
    u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_14) * u_xlat16_0.xyw + u_xlat16_4.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat6.xy = vec2(u_xlat21) * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_6.xyz = texture(_EmissionMask, u_xlat6.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_8 = (-u_xlat10_6.x) + u_xlat10_6.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + u_xlat10_6.x;
    u_xlat16_1.x = (u_xlatb21) ? u_xlat10_6.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
mediump float u_xlat16_8;
vec2 u_xlat14;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
mediump float u_xlat16_24;
float u_xlat27;
int u_xlati27;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot(vs_TEXCOORD5.xyz, u_xlat16_5.xyz);
    u_xlat16_23 = dot(vs_TEXCOORD6.xyz, u_xlat16_5.xyz);
    u_xlat16_24 = dot(vs_TEXCOORD7.xyz, u_xlat16_5.xyz);
    u_xlat0.xyz = vec3(u_xlat16_23) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_22) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_24) + u_xlat0.xyz;
    u_xlat6.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat6.xyz = vec3(u_xlat21) * u_xlat6.xyz;
    u_xlat14.x = dot(u_xlat6.xyz, u_xlat0.xyz);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
    u_xlat14.xy = u_xlat0.xy * (-u_xlat14.xx) + u_xlat6.xy;
    u_xlat14.xy = (-u_xlat0.xy) + u_xlat14.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat14.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_14 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_6.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_6.xyz + u_xlat10_6.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat27 = (-u_xlat16_1.x) + _LightmapThreshold;
    u_xlat27 = u_xlat27 + 1.0;
    u_xlat27 = floor(u_xlat27);
    u_xlat27 = max(u_xlat27, 0.0);
    u_xlati27 = int(u_xlat27);
    u_xlat27 = (u_xlati27 != 0) ? 0.0 : 1.0;
    u_xlat27 = u_xlat27 + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * vec3(u_xlat27);
    u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_14) * u_xlat16_0.xyw + u_xlat16_4.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat6.xy = vec2(u_xlat21) * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_6.xyz = texture(_EmissionMask, u_xlat6.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_8 = (-u_xlat10_6.x) + u_xlat10_6.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + u_xlat10_6.x;
    u_xlat16_1.x = (u_xlatb21) ? u_xlat10_6.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bvec2 u_xlatb10;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
mediump float u_xlat16_16;
mediump float u_xlat16_17;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_15 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_15 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_1.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat15 = (-u_xlat16_15) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * vec3(_LightmapDarkPromotion) + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat5.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat5.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_16 = float(_UseChannel);
    u_xlat16_17 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_16 = u_xlat16_16 * u_xlat16_17 + u_xlat10_0.x;
    u_xlat16_16 = (u_xlatb15) ? u_xlat10_0.z : u_xlat16_16;
    u_xlat16_4.xyz = vec3(u_xlat16_16) * _Emission.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Emission.www;
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bvec2 u_xlatb10;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
mediump float u_xlat16_16;
mediump float u_xlat16_17;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_15 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_15 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_1.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat15 = (-u_xlat16_15) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * vec3(_LightmapDarkPromotion) + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat5.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat5.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_16 = float(_UseChannel);
    u_xlat16_17 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_16 = u_xlat16_16 * u_xlat16_17 + u_xlat10_0.x;
    u_xlat16_16 = (u_xlatb15) ? u_xlat10_0.z : u_xlat16_16;
    u_xlat16_4.xyz = vec3(u_xlat16_16) * _Emission.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Emission.www;
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bvec2 u_xlatb10;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
mediump float u_xlat16_16;
mediump float u_xlat16_17;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_15 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_15 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_1.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat15 = (-u_xlat16_15) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * vec3(_LightmapDarkPromotion) + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat5.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat5.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_16 = float(_UseChannel);
    u_xlat16_17 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_16 = u_xlat16_16 * u_xlat16_17 + u_xlat10_0.x;
    u_xlat16_16 = (u_xlatb15) ? u_xlat10_0.z : u_xlat16_16;
    u_xlat16_4.xyz = vec3(u_xlat16_16) * _Emission.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Emission.www;
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump float u_xlat16_5;
vec2 u_xlat8;
lowp float u_xlat10_8;
bvec2 u_xlatb8;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
mediump float u_xlat16_13;
mediump float u_xlat16_14;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_12 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_12 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_1.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat12 = (-u_xlat16_12) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat12) * vec3(_LightmapDarkPromotion) + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_13 = dot(vs_TEXCOORD5.xyz, u_xlat16_2.xyz);
    u_xlat16_14 = dot(vs_TEXCOORD6.xyz, u_xlat16_2.xyz);
    u_xlat16_2.x = dot(vs_TEXCOORD7.xyz, u_xlat16_2.xyz);
    u_xlat0.xyz = vec3(u_xlat16_14) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_13) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat16_2.xxx + u_xlat0.xyz;
    u_xlat3.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat8.x = u_xlat8.x + u_xlat8.x;
    u_xlat8.xy = u_xlat0.xy * (-u_xlat8.xx) + u_xlat3.xy;
    u_xlat8.xy = (-u_xlat0.xy) + u_xlat8.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat8.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_8 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_1.xyz * u_xlat16_0.xyw + (-u_xlat16_1.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_8) * u_xlat16_0.xyw + u_xlat16_1.xyz;
    u_xlat12 = float(_UseSet);
    u_xlat3.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat3.xy = vec2(u_xlat12) * u_xlat3.xy + vs_TEXCOORD0.xy;
    u_xlat10_3.xyz = texture(_EmissionMask, u_xlat3.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_5 = (-u_xlat10_3.x) + u_xlat10_3.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5 + u_xlat10_3.x;
    u_xlat16_1.x = (u_xlatb12) ? u_xlat10_3.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump float u_xlat16_5;
vec2 u_xlat8;
lowp float u_xlat10_8;
bvec2 u_xlatb8;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
mediump float u_xlat16_13;
mediump float u_xlat16_14;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_12 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_12 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_1.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat12 = (-u_xlat16_12) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat12) * vec3(_LightmapDarkPromotion) + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_13 = dot(vs_TEXCOORD5.xyz, u_xlat16_2.xyz);
    u_xlat16_14 = dot(vs_TEXCOORD6.xyz, u_xlat16_2.xyz);
    u_xlat16_2.x = dot(vs_TEXCOORD7.xyz, u_xlat16_2.xyz);
    u_xlat0.xyz = vec3(u_xlat16_14) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_13) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat16_2.xxx + u_xlat0.xyz;
    u_xlat3.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat8.x = u_xlat8.x + u_xlat8.x;
    u_xlat8.xy = u_xlat0.xy * (-u_xlat8.xx) + u_xlat3.xy;
    u_xlat8.xy = (-u_xlat0.xy) + u_xlat8.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat8.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_8 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_1.xyz * u_xlat16_0.xyw + (-u_xlat16_1.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_8) * u_xlat16_0.xyw + u_xlat16_1.xyz;
    u_xlat12 = float(_UseSet);
    u_xlat3.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat3.xy = vec2(u_xlat12) * u_xlat3.xy + vs_TEXCOORD0.xy;
    u_xlat10_3.xyz = texture(_EmissionMask, u_xlat3.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_5 = (-u_xlat10_3.x) + u_xlat10_3.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5 + u_xlat10_3.x;
    u_xlat16_1.x = (u_xlatb12) ? u_xlat10_3.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump float u_xlat16_5;
vec2 u_xlat8;
lowp float u_xlat10_8;
bvec2 u_xlatb8;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
mediump float u_xlat16_13;
mediump float u_xlat16_14;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_12 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_12 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_1.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat12 = (-u_xlat16_12) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat12) * vec3(_LightmapDarkPromotion) + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_13 = dot(vs_TEXCOORD5.xyz, u_xlat16_2.xyz);
    u_xlat16_14 = dot(vs_TEXCOORD6.xyz, u_xlat16_2.xyz);
    u_xlat16_2.x = dot(vs_TEXCOORD7.xyz, u_xlat16_2.xyz);
    u_xlat0.xyz = vec3(u_xlat16_14) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_13) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat16_2.xxx + u_xlat0.xyz;
    u_xlat3.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat8.x = u_xlat8.x + u_xlat8.x;
    u_xlat8.xy = u_xlat0.xy * (-u_xlat8.xx) + u_xlat3.xy;
    u_xlat8.xy = (-u_xlat0.xy) + u_xlat8.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat8.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_8 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_1.xyz * u_xlat16_0.xyw + (-u_xlat16_1.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_8) * u_xlat16_0.xyw + u_xlat16_1.xyz;
    u_xlat12 = float(_UseSet);
    u_xlat3.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat3.xy = vec2(u_xlat12) * u_xlat3.xy + vs_TEXCOORD0.xy;
    u_xlat10_3.xyz = texture(_EmissionMask, u_xlat3.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_5 = (-u_xlat10_3.x) + u_xlat10_3.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5 + u_xlat10_3.x;
    u_xlat16_1.x = (u_xlatb12) ? u_xlat10_3.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_8;
vec2 u_xlat14;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
float u_xlat21;
mediump float u_xlat16_21;
bool u_xlatb21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
float u_xlat24;
int u_xlati24;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_21 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_21 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat21 = (-u_xlat16_21) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat21) * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat0.xyz = vec3(u_xlat16_23) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_22) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_25) + u_xlat0.xyz;
    u_xlat3.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat14.x = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
    u_xlat14.xy = u_xlat0.xy * (-u_xlat14.xx) + u_xlat3.xy;
    u_xlat14.xy = (-u_xlat0.xy) + u_xlat14.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat14.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_14 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_3.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz + u_xlat10_3.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat24 = (-u_xlat16_1.x) + _LightmapThreshold;
    u_xlat24 = u_xlat24 + 1.0;
    u_xlat24 = floor(u_xlat24);
    u_xlat24 = max(u_xlat24, 0.0);
    u_xlati24 = int(u_xlat24);
    u_xlat24 = (u_xlati24 != 0) ? 0.0 : 1.0;
    u_xlat24 = u_xlat24 + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * vec3(u_xlat24);
    u_xlat16_1.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_2.xyz) * u_xlat16_4.xyz + u_xlat16_1.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_14) * u_xlat16_0.xyw + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat3.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat3.xy = vec2(u_xlat21) * u_xlat3.xy + vs_TEXCOORD0.xy;
    u_xlat10_3.xyz = texture(_EmissionMask, u_xlat3.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_8 = (-u_xlat10_3.x) + u_xlat10_3.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + u_xlat10_3.x;
    u_xlat16_1.x = (u_xlatb21) ? u_xlat10_3.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_8;
vec2 u_xlat14;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
float u_xlat21;
mediump float u_xlat16_21;
bool u_xlatb21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
float u_xlat24;
int u_xlati24;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_21 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_21 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat21 = (-u_xlat16_21) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat21) * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat0.xyz = vec3(u_xlat16_23) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_22) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_25) + u_xlat0.xyz;
    u_xlat3.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat14.x = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
    u_xlat14.xy = u_xlat0.xy * (-u_xlat14.xx) + u_xlat3.xy;
    u_xlat14.xy = (-u_xlat0.xy) + u_xlat14.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat14.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_14 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_3.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz + u_xlat10_3.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat24 = (-u_xlat16_1.x) + _LightmapThreshold;
    u_xlat24 = u_xlat24 + 1.0;
    u_xlat24 = floor(u_xlat24);
    u_xlat24 = max(u_xlat24, 0.0);
    u_xlati24 = int(u_xlat24);
    u_xlat24 = (u_xlati24 != 0) ? 0.0 : 1.0;
    u_xlat24 = u_xlat24 + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * vec3(u_xlat24);
    u_xlat16_1.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_2.xyz) * u_xlat16_4.xyz + u_xlat16_1.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_14) * u_xlat16_0.xyw + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat3.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat3.xy = vec2(u_xlat21) * u_xlat3.xy + vs_TEXCOORD0.xy;
    u_xlat10_3.xyz = texture(_EmissionMask, u_xlat3.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_8 = (-u_xlat10_3.x) + u_xlat10_3.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + u_xlat10_3.x;
    u_xlat16_1.x = (u_xlatb21) ? u_xlat10_3.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_8;
vec2 u_xlat14;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
float u_xlat21;
mediump float u_xlat16_21;
bool u_xlatb21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
float u_xlat24;
int u_xlati24;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_21 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_21 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat21 = (-u_xlat16_21) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat21) * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat0.xyz = vec3(u_xlat16_23) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_22) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_25) + u_xlat0.xyz;
    u_xlat3.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat14.x = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
    u_xlat14.xy = u_xlat0.xy * (-u_xlat14.xx) + u_xlat3.xy;
    u_xlat14.xy = (-u_xlat0.xy) + u_xlat14.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat14.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_14 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_3.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz + u_xlat10_3.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat24 = (-u_xlat16_1.x) + _LightmapThreshold;
    u_xlat24 = u_xlat24 + 1.0;
    u_xlat24 = floor(u_xlat24);
    u_xlat24 = max(u_xlat24, 0.0);
    u_xlati24 = int(u_xlat24);
    u_xlat24 = (u_xlati24 != 0) ? 0.0 : 1.0;
    u_xlat24 = u_xlat24 + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * vec3(u_xlat24);
    u_xlat16_1.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_2.xyz) * u_xlat16_4.xyz + u_xlat16_1.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_14) * u_xlat16_0.xyw + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat3.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat3.xy = vec2(u_xlat21) * u_xlat3.xy + vs_TEXCOORD0.xy;
    u_xlat10_3.xyz = texture(_EmissionMask, u_xlat3.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_8 = (-u_xlat10_3.x) + u_xlat10_3.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + u_xlat10_3.x;
    u_xlat16_1.x = (u_xlatb21) ? u_xlat10_3.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
bvec2 u_xlatb8;
bool u_xlatb12;
mediump float u_xlat16_13;
mediump float u_xlat16_14;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat4.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat4.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_13 = float(_UseChannel);
    u_xlat16_14 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_13 = u_xlat16_13 * u_xlat16_14 + u_xlat10_0.x;
    u_xlat16_13 = (u_xlatb12) ? u_xlat10_0.z : u_xlat16_13;
    u_xlat16_3.xyz = vec3(u_xlat16_13) * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
bvec2 u_xlatb8;
bool u_xlatb12;
mediump float u_xlat16_13;
mediump float u_xlat16_14;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat4.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat4.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_13 = float(_UseChannel);
    u_xlat16_14 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_13 = u_xlat16_13 * u_xlat16_14 + u_xlat10_0.x;
    u_xlat16_13 = (u_xlatb12) ? u_xlat10_0.z : u_xlat16_13;
    u_xlat16_3.xyz = vec3(u_xlat16_13) * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
bvec2 u_xlatb8;
bool u_xlatb12;
mediump float u_xlat16_13;
mediump float u_xlat16_14;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat4.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat4.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_13 = float(_UseChannel);
    u_xlat16_14 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_13 = u_xlat16_13 * u_xlat16_14 + u_xlat10_0.x;
    u_xlat16_13 = (u_xlatb12) ? u_xlat10_0.z : u_xlat16_13;
    u_xlat16_3.xyz = vec3(u_xlat16_13) * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "MATCAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
lowp vec3 u_xlat10_3;
mediump float u_xlat16_5;
float u_xlat8;
lowp float u_xlat10_8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat8 = dot(u_xlat0.xyz, vs_TEXCOORD5.xyz);
    u_xlat8 = u_xlat8 + u_xlat8;
    u_xlat0.xy = vs_TEXCOORD5.xy * (-vec2(u_xlat8)) + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + (-vs_TEXCOORD5.xy);
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat0.xy + vs_TEXCOORD5.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_8 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_1.xyz * u_xlat16_0.xyw + (-u_xlat16_1.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_8) * u_xlat16_0.xyw + u_xlat16_1.xyz;
    u_xlat12 = float(_UseSet);
    u_xlat3.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat3.xy = vec2(u_xlat12) * u_xlat3.xy + vs_TEXCOORD0.xy;
    u_xlat10_3.xyz = texture(_EmissionMask, u_xlat3.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_5 = (-u_xlat10_3.x) + u_xlat10_3.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5 + u_xlat10_3.x;
    u_xlat16_1.x = (u_xlatb12) ? u_xlat10_3.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "MATCAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
lowp vec3 u_xlat10_3;
mediump float u_xlat16_5;
float u_xlat8;
lowp float u_xlat10_8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat8 = dot(u_xlat0.xyz, vs_TEXCOORD5.xyz);
    u_xlat8 = u_xlat8 + u_xlat8;
    u_xlat0.xy = vs_TEXCOORD5.xy * (-vec2(u_xlat8)) + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + (-vs_TEXCOORD5.xy);
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat0.xy + vs_TEXCOORD5.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_8 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_1.xyz * u_xlat16_0.xyw + (-u_xlat16_1.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_8) * u_xlat16_0.xyw + u_xlat16_1.xyz;
    u_xlat12 = float(_UseSet);
    u_xlat3.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat3.xy = vec2(u_xlat12) * u_xlat3.xy + vs_TEXCOORD0.xy;
    u_xlat10_3.xyz = texture(_EmissionMask, u_xlat3.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_5 = (-u_xlat10_3.x) + u_xlat10_3.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5 + u_xlat10_3.x;
    u_xlat16_1.x = (u_xlatb12) ? u_xlat10_3.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "MATCAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
lowp vec3 u_xlat10_3;
mediump float u_xlat16_5;
float u_xlat8;
lowp float u_xlat10_8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat8 = dot(u_xlat0.xyz, vs_TEXCOORD5.xyz);
    u_xlat8 = u_xlat8 + u_xlat8;
    u_xlat0.xy = vs_TEXCOORD5.xy * (-vec2(u_xlat8)) + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + (-vs_TEXCOORD5.xy);
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat0.xy + vs_TEXCOORD5.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_8 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_1.xyz * u_xlat16_0.xyw + (-u_xlat16_1.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_8) * u_xlat16_0.xyw + u_xlat16_1.xyz;
    u_xlat12 = float(_UseSet);
    u_xlat3.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat3.xy = vec2(u_xlat12) * u_xlat3.xy + vs_TEXCOORD0.xy;
    u_xlat10_3.xyz = texture(_EmissionMask, u_xlat3.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_5 = (-u_xlat10_3.x) + u_xlat10_3.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5 + u_xlat10_3.x;
    u_xlat16_1.x = (u_xlatb12) ? u_xlat10_3.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
mediump float u_xlat16_8;
vec2 u_xlat14;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
mediump float u_xlat16_24;
float u_xlat27;
int u_xlati27;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot(vs_TEXCOORD5.xyz, u_xlat16_5.xyz);
    u_xlat16_23 = dot(vs_TEXCOORD6.xyz, u_xlat16_5.xyz);
    u_xlat16_24 = dot(vs_TEXCOORD7.xyz, u_xlat16_5.xyz);
    u_xlat0.xyz = vec3(u_xlat16_23) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_22) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_24) + u_xlat0.xyz;
    u_xlat6.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat6.xyz = vec3(u_xlat21) * u_xlat6.xyz;
    u_xlat14.x = dot(u_xlat6.xyz, u_xlat0.xyz);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
    u_xlat14.xy = u_xlat0.xy * (-u_xlat14.xx) + u_xlat6.xy;
    u_xlat14.xy = (-u_xlat0.xy) + u_xlat14.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat14.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_14 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_6.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_6.xyz + u_xlat10_6.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat27 = (-u_xlat16_1.x) + _LightmapThreshold;
    u_xlat27 = u_xlat27 + 1.0;
    u_xlat27 = floor(u_xlat27);
    u_xlat27 = max(u_xlat27, 0.0);
    u_xlati27 = int(u_xlat27);
    u_xlat27 = (u_xlati27 != 0) ? 0.0 : 1.0;
    u_xlat27 = u_xlat27 + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * vec3(u_xlat27);
    u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_14) * u_xlat16_0.xyw + u_xlat16_4.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat6.xy = vec2(u_xlat21) * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_6.xyz = texture(_EmissionMask, u_xlat6.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_8 = (-u_xlat10_6.x) + u_xlat10_6.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + u_xlat10_6.x;
    u_xlat16_1.x = (u_xlatb21) ? u_xlat10_6.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
mediump float u_xlat16_8;
vec2 u_xlat14;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
mediump float u_xlat16_24;
float u_xlat27;
int u_xlati27;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot(vs_TEXCOORD5.xyz, u_xlat16_5.xyz);
    u_xlat16_23 = dot(vs_TEXCOORD6.xyz, u_xlat16_5.xyz);
    u_xlat16_24 = dot(vs_TEXCOORD7.xyz, u_xlat16_5.xyz);
    u_xlat0.xyz = vec3(u_xlat16_23) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_22) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_24) + u_xlat0.xyz;
    u_xlat6.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat6.xyz = vec3(u_xlat21) * u_xlat6.xyz;
    u_xlat14.x = dot(u_xlat6.xyz, u_xlat0.xyz);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
    u_xlat14.xy = u_xlat0.xy * (-u_xlat14.xx) + u_xlat6.xy;
    u_xlat14.xy = (-u_xlat0.xy) + u_xlat14.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat14.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_14 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_6.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_6.xyz + u_xlat10_6.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat27 = (-u_xlat16_1.x) + _LightmapThreshold;
    u_xlat27 = u_xlat27 + 1.0;
    u_xlat27 = floor(u_xlat27);
    u_xlat27 = max(u_xlat27, 0.0);
    u_xlati27 = int(u_xlat27);
    u_xlat27 = (u_xlati27 != 0) ? 0.0 : 1.0;
    u_xlat27 = u_xlat27 + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * vec3(u_xlat27);
    u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_14) * u_xlat16_0.xyw + u_xlat16_4.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat6.xy = vec2(u_xlat21) * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_6.xyz = texture(_EmissionMask, u_xlat6.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_8 = (-u_xlat10_6.x) + u_xlat10_6.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + u_xlat10_6.x;
    u_xlat16_1.x = (u_xlatb21) ? u_xlat10_6.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
mediump float u_xlat16_8;
vec2 u_xlat14;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
mediump float u_xlat16_24;
float u_xlat27;
int u_xlati27;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot(vs_TEXCOORD5.xyz, u_xlat16_5.xyz);
    u_xlat16_23 = dot(vs_TEXCOORD6.xyz, u_xlat16_5.xyz);
    u_xlat16_24 = dot(vs_TEXCOORD7.xyz, u_xlat16_5.xyz);
    u_xlat0.xyz = vec3(u_xlat16_23) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_22) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_24) + u_xlat0.xyz;
    u_xlat6.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat6.xyz = vec3(u_xlat21) * u_xlat6.xyz;
    u_xlat14.x = dot(u_xlat6.xyz, u_xlat0.xyz);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
    u_xlat14.xy = u_xlat0.xy * (-u_xlat14.xx) + u_xlat6.xy;
    u_xlat14.xy = (-u_xlat0.xy) + u_xlat14.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat14.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_14 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_6.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_6.xyz + u_xlat10_6.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat27 = (-u_xlat16_1.x) + _LightmapThreshold;
    u_xlat27 = u_xlat27 + 1.0;
    u_xlat27 = floor(u_xlat27);
    u_xlat27 = max(u_xlat27, 0.0);
    u_xlati27 = int(u_xlat27);
    u_xlat27 = (u_xlati27 != 0) ? 0.0 : 1.0;
    u_xlat27 = u_xlat27 + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * vec3(u_xlat27);
    u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_14) * u_xlat16_0.xyw + u_xlat16_4.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat6.xy = vec2(u_xlat21) * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_6.xyz = texture(_EmissionMask, u_xlat6.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_8 = (-u_xlat10_6.x) + u_xlat10_6.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + u_xlat10_6.x;
    u_xlat16_1.x = (u_xlatb21) ? u_xlat10_6.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bvec2 u_xlatb10;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
mediump float u_xlat16_16;
mediump float u_xlat16_17;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_15 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_15 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_1.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat15 = (-u_xlat16_15) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * vec3(_LightmapDarkPromotion) + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat5.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat5.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_16 = float(_UseChannel);
    u_xlat16_17 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_16 = u_xlat16_16 * u_xlat16_17 + u_xlat10_0.x;
    u_xlat16_16 = (u_xlatb15) ? u_xlat10_0.z : u_xlat16_16;
    u_xlat16_4.xyz = vec3(u_xlat16_16) * _Emission.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Emission.www;
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bvec2 u_xlatb10;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
mediump float u_xlat16_16;
mediump float u_xlat16_17;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_15 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_15 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_1.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat15 = (-u_xlat16_15) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * vec3(_LightmapDarkPromotion) + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat5.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat5.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_16 = float(_UseChannel);
    u_xlat16_17 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_16 = u_xlat16_16 * u_xlat16_17 + u_xlat10_0.x;
    u_xlat16_16 = (u_xlatb15) ? u_xlat10_0.z : u_xlat16_16;
    u_xlat16_4.xyz = vec3(u_xlat16_16) * _Emission.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Emission.www;
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bvec2 u_xlatb10;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
mediump float u_xlat16_16;
mediump float u_xlat16_17;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_15 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_15 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_1.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat15 = (-u_xlat16_15) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * vec3(_LightmapDarkPromotion) + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat5.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat5.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_16 = float(_UseChannel);
    u_xlat16_17 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_16 = u_xlat16_16 * u_xlat16_17 + u_xlat10_0.x;
    u_xlat16_16 = (u_xlatb15) ? u_xlat10_0.z : u_xlat16_16;
    u_xlat16_4.xyz = vec3(u_xlat16_16) * _Emission.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Emission.www;
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump float u_xlat16_5;
vec2 u_xlat8;
lowp float u_xlat10_8;
bvec2 u_xlatb8;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
mediump float u_xlat16_13;
mediump float u_xlat16_14;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_12 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_12 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_1.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat12 = (-u_xlat16_12) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat12) * vec3(_LightmapDarkPromotion) + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_13 = dot(vs_TEXCOORD5.xyz, u_xlat16_2.xyz);
    u_xlat16_14 = dot(vs_TEXCOORD6.xyz, u_xlat16_2.xyz);
    u_xlat16_2.x = dot(vs_TEXCOORD7.xyz, u_xlat16_2.xyz);
    u_xlat0.xyz = vec3(u_xlat16_14) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_13) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat16_2.xxx + u_xlat0.xyz;
    u_xlat3.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat8.x = u_xlat8.x + u_xlat8.x;
    u_xlat8.xy = u_xlat0.xy * (-u_xlat8.xx) + u_xlat3.xy;
    u_xlat8.xy = (-u_xlat0.xy) + u_xlat8.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat8.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_8 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_1.xyz * u_xlat16_0.xyw + (-u_xlat16_1.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_8) * u_xlat16_0.xyw + u_xlat16_1.xyz;
    u_xlat12 = float(_UseSet);
    u_xlat3.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat3.xy = vec2(u_xlat12) * u_xlat3.xy + vs_TEXCOORD0.xy;
    u_xlat10_3.xyz = texture(_EmissionMask, u_xlat3.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_5 = (-u_xlat10_3.x) + u_xlat10_3.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5 + u_xlat10_3.x;
    u_xlat16_1.x = (u_xlatb12) ? u_xlat10_3.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump float u_xlat16_5;
vec2 u_xlat8;
lowp float u_xlat10_8;
bvec2 u_xlatb8;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
mediump float u_xlat16_13;
mediump float u_xlat16_14;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_12 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_12 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_1.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat12 = (-u_xlat16_12) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat12) * vec3(_LightmapDarkPromotion) + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_13 = dot(vs_TEXCOORD5.xyz, u_xlat16_2.xyz);
    u_xlat16_14 = dot(vs_TEXCOORD6.xyz, u_xlat16_2.xyz);
    u_xlat16_2.x = dot(vs_TEXCOORD7.xyz, u_xlat16_2.xyz);
    u_xlat0.xyz = vec3(u_xlat16_14) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_13) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat16_2.xxx + u_xlat0.xyz;
    u_xlat3.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat8.x = u_xlat8.x + u_xlat8.x;
    u_xlat8.xy = u_xlat0.xy * (-u_xlat8.xx) + u_xlat3.xy;
    u_xlat8.xy = (-u_xlat0.xy) + u_xlat8.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat8.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_8 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_1.xyz * u_xlat16_0.xyw + (-u_xlat16_1.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_8) * u_xlat16_0.xyw + u_xlat16_1.xyz;
    u_xlat12 = float(_UseSet);
    u_xlat3.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat3.xy = vec2(u_xlat12) * u_xlat3.xy + vs_TEXCOORD0.xy;
    u_xlat10_3.xyz = texture(_EmissionMask, u_xlat3.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_5 = (-u_xlat10_3.x) + u_xlat10_3.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5 + u_xlat10_3.x;
    u_xlat16_1.x = (u_xlatb12) ? u_xlat10_3.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump float u_xlat16_5;
vec2 u_xlat8;
lowp float u_xlat10_8;
bvec2 u_xlatb8;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
mediump float u_xlat16_13;
mediump float u_xlat16_14;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_12 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_12 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_1.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat12 = (-u_xlat16_12) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat12) * vec3(_LightmapDarkPromotion) + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_13 = dot(vs_TEXCOORD5.xyz, u_xlat16_2.xyz);
    u_xlat16_14 = dot(vs_TEXCOORD6.xyz, u_xlat16_2.xyz);
    u_xlat16_2.x = dot(vs_TEXCOORD7.xyz, u_xlat16_2.xyz);
    u_xlat0.xyz = vec3(u_xlat16_14) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_13) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat16_2.xxx + u_xlat0.xyz;
    u_xlat3.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat8.x = u_xlat8.x + u_xlat8.x;
    u_xlat8.xy = u_xlat0.xy * (-u_xlat8.xx) + u_xlat3.xy;
    u_xlat8.xy = (-u_xlat0.xy) + u_xlat8.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat8.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_8 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_1.xyz * u_xlat16_0.xyw + (-u_xlat16_1.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_8) * u_xlat16_0.xyw + u_xlat16_1.xyz;
    u_xlat12 = float(_UseSet);
    u_xlat3.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat3.xy = vec2(u_xlat12) * u_xlat3.xy + vs_TEXCOORD0.xy;
    u_xlat10_3.xyz = texture(_EmissionMask, u_xlat3.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_5 = (-u_xlat10_3.x) + u_xlat10_3.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5 + u_xlat10_3.x;
    u_xlat16_1.x = (u_xlatb12) ? u_xlat10_3.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_8;
vec2 u_xlat14;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
float u_xlat21;
mediump float u_xlat16_21;
bool u_xlatb21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
float u_xlat24;
int u_xlati24;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_21 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_21 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat21 = (-u_xlat16_21) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat21) * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat0.xyz = vec3(u_xlat16_23) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_22) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_25) + u_xlat0.xyz;
    u_xlat3.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat14.x = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
    u_xlat14.xy = u_xlat0.xy * (-u_xlat14.xx) + u_xlat3.xy;
    u_xlat14.xy = (-u_xlat0.xy) + u_xlat14.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat14.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_14 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_3.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz + u_xlat10_3.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat24 = (-u_xlat16_1.x) + _LightmapThreshold;
    u_xlat24 = u_xlat24 + 1.0;
    u_xlat24 = floor(u_xlat24);
    u_xlat24 = max(u_xlat24, 0.0);
    u_xlati24 = int(u_xlat24);
    u_xlat24 = (u_xlati24 != 0) ? 0.0 : 1.0;
    u_xlat24 = u_xlat24 + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * vec3(u_xlat24);
    u_xlat16_1.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_2.xyz) * u_xlat16_4.xyz + u_xlat16_1.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_14) * u_xlat16_0.xyw + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat3.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat3.xy = vec2(u_xlat21) * u_xlat3.xy + vs_TEXCOORD0.xy;
    u_xlat10_3.xyz = texture(_EmissionMask, u_xlat3.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_8 = (-u_xlat10_3.x) + u_xlat10_3.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + u_xlat10_3.x;
    u_xlat16_1.x = (u_xlatb21) ? u_xlat10_3.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_8;
vec2 u_xlat14;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
float u_xlat21;
mediump float u_xlat16_21;
bool u_xlatb21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
float u_xlat24;
int u_xlati24;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_21 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_21 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat21 = (-u_xlat16_21) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat21) * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat0.xyz = vec3(u_xlat16_23) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_22) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_25) + u_xlat0.xyz;
    u_xlat3.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat14.x = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
    u_xlat14.xy = u_xlat0.xy * (-u_xlat14.xx) + u_xlat3.xy;
    u_xlat14.xy = (-u_xlat0.xy) + u_xlat14.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat14.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_14 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_3.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz + u_xlat10_3.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat24 = (-u_xlat16_1.x) + _LightmapThreshold;
    u_xlat24 = u_xlat24 + 1.0;
    u_xlat24 = floor(u_xlat24);
    u_xlat24 = max(u_xlat24, 0.0);
    u_xlati24 = int(u_xlat24);
    u_xlat24 = (u_xlati24 != 0) ? 0.0 : 1.0;
    u_xlat24 = u_xlat24 + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * vec3(u_xlat24);
    u_xlat16_1.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_2.xyz) * u_xlat16_4.xyz + u_xlat16_1.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_14) * u_xlat16_0.xyw + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat3.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat3.xy = vec2(u_xlat21) * u_xlat3.xy + vs_TEXCOORD0.xy;
    u_xlat10_3.xyz = texture(_EmissionMask, u_xlat3.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_8 = (-u_xlat10_3.x) + u_xlat10_3.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + u_xlat10_3.x;
    u_xlat16_1.x = (u_xlatb21) ? u_xlat10_3.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_8;
vec2 u_xlat14;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
float u_xlat21;
mediump float u_xlat16_21;
bool u_xlatb21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
float u_xlat24;
int u_xlati24;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_21 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_21 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat21 = (-u_xlat16_21) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat21) * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat0.xyz = vec3(u_xlat16_23) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_22) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_25) + u_xlat0.xyz;
    u_xlat3.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat14.x = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
    u_xlat14.xy = u_xlat0.xy * (-u_xlat14.xx) + u_xlat3.xy;
    u_xlat14.xy = (-u_xlat0.xy) + u_xlat14.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat14.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_14 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_3.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz + u_xlat10_3.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat24 = (-u_xlat16_1.x) + _LightmapThreshold;
    u_xlat24 = u_xlat24 + 1.0;
    u_xlat24 = floor(u_xlat24);
    u_xlat24 = max(u_xlat24, 0.0);
    u_xlati24 = int(u_xlat24);
    u_xlat24 = (u_xlati24 != 0) ? 0.0 : 1.0;
    u_xlat24 = u_xlat24 + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * vec3(u_xlat24);
    u_xlat16_1.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_2.xyz) * u_xlat16_4.xyz + u_xlat16_1.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_14) * u_xlat16_0.xyw + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat3.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat3.xy = vec2(u_xlat21) * u_xlat3.xy + vs_TEXCOORD0.xy;
    u_xlat10_3.xyz = texture(_EmissionMask, u_xlat3.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_8 = (-u_xlat10_3.x) + u_xlat10_3.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + u_xlat10_3.x;
    u_xlat16_1.x = (u_xlatb21) ? u_xlat10_3.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_LightMap_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bvec2 u_xlatb10;
bool u_xlatb15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_3.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat5.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat5.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_17 = float(_UseChannel);
    u_xlat16_18 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_17 = u_xlat16_17 * u_xlat16_18 + u_xlat10_0.x;
    u_xlat16_17 = (u_xlatb15) ? u_xlat10_0.z : u_xlat16_17;
    u_xlat16_4.xyz = vec3(u_xlat16_17) * _Emission.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Emission.www;
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_LightMap_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bvec2 u_xlatb10;
bool u_xlatb15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_3.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat5.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat5.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_17 = float(_UseChannel);
    u_xlat16_18 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_17 = u_xlat16_17 * u_xlat16_18 + u_xlat10_0.x;
    u_xlat16_17 = (u_xlatb15) ? u_xlat10_0.z : u_xlat16_17;
    u_xlat16_4.xyz = vec3(u_xlat16_17) * _Emission.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Emission.www;
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_LightMap_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bvec2 u_xlatb10;
bool u_xlatb15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_3.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat5.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat5.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_17 = float(_UseChannel);
    u_xlat16_18 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_17 = u_xlat16_17 * u_xlat16_18 + u_xlat10_0.x;
    u_xlat16_17 = (u_xlatb15) ? u_xlat10_0.z : u_xlat16_17;
    u_xlat16_4.xyz = vec3(u_xlat16_17) * _Emission.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Emission.www;
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_LightMap_ON" "MATCAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec2 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump float u_xlat16_6;
float u_xlat8;
lowp float u_xlat10_8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_3.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat8 = dot(u_xlat0.xyz, vs_TEXCOORD5.xyz);
    u_xlat8 = u_xlat8 + u_xlat8;
    u_xlat0.xy = vs_TEXCOORD5.xy * (-vec2(u_xlat8)) + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + (-vs_TEXCOORD5.xy);
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat0.xy + vs_TEXCOORD5.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_8 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_2.xyz * u_xlat16_0.xyw + (-u_xlat16_2.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_8) * u_xlat16_0.xyw + u_xlat16_2.xyz;
    u_xlat12 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat12) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_6 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb12) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_LightMap_ON" "MATCAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec2 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump float u_xlat16_6;
float u_xlat8;
lowp float u_xlat10_8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_3.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat8 = dot(u_xlat0.xyz, vs_TEXCOORD5.xyz);
    u_xlat8 = u_xlat8 + u_xlat8;
    u_xlat0.xy = vs_TEXCOORD5.xy * (-vec2(u_xlat8)) + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + (-vs_TEXCOORD5.xy);
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat0.xy + vs_TEXCOORD5.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_8 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_2.xyz * u_xlat16_0.xyw + (-u_xlat16_2.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_8) * u_xlat16_0.xyw + u_xlat16_2.xyz;
    u_xlat12 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat12) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_6 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb12) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_LightMap_ON" "MATCAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec2 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump float u_xlat16_6;
float u_xlat8;
lowp float u_xlat10_8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_3.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat8 = dot(u_xlat0.xyz, vs_TEXCOORD5.xyz);
    u_xlat8 = u_xlat8 + u_xlat8;
    u_xlat0.xy = vs_TEXCOORD5.xy * (-vec2(u_xlat8)) + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + (-vs_TEXCOORD5.xy);
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat0.xy + vs_TEXCOORD5.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_8 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_2.xyz * u_xlat16_0.xyw + (-u_xlat16_2.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_8) * u_xlat16_0.xyw + u_xlat16_2.xyz;
    u_xlat12 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat12) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_6 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb12) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
mediump float u_xlat16_9;
bvec2 u_xlatb14;
vec2 u_xlat15;
float u_xlat21;
lowp float u_xlat10_21;
bool u_xlatb21;
mediump float u_xlat16_23;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_3.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_23 = dot(vs_TEXCOORD5.xyz, u_xlat16_5.xyz);
    u_xlat16_24 = dot(vs_TEXCOORD6.xyz, u_xlat16_5.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD7.xyz, u_xlat16_5.xyz);
    u_xlat1.xyz = vec3(u_xlat16_24) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_23) + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_25) + u_xlat1.xyz;
    u_xlat6.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat6.xyz = vec3(u_xlat21) * u_xlat6.xyz;
    u_xlat21 = dot(u_xlat6.xyz, u_xlat1.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat15.xy = u_xlat1.xy * (-vec2(u_xlat21)) + u_xlat6.xy;
    u_xlat15.xy = (-u_xlat1.xy) + u_xlat15.xy;
    u_xlat1.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat15.xy + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_21 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_6.xyz = texture(_MatCap, u_xlat1.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_6.xyz + u_xlat10_6.xyz;
    u_xlat1.xy = u_xlat1.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_1.xyz = texture(_SpecularMap, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SpecularIntensity);
    u_xlat16_23 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat0.x = (-u_xlat16_23) + _LightmapThreshold;
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    u_xlat0.x = (u_xlati0 != 0) ? 0.0 : 1.0;
    u_xlat0.x = u_xlat0.x + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_21) * u_xlat16_0.xyz + u_xlat16_4.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat21) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_9 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb21) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
mediump float u_xlat16_9;
bvec2 u_xlatb14;
vec2 u_xlat15;
float u_xlat21;
lowp float u_xlat10_21;
bool u_xlatb21;
mediump float u_xlat16_23;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_3.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_23 = dot(vs_TEXCOORD5.xyz, u_xlat16_5.xyz);
    u_xlat16_24 = dot(vs_TEXCOORD6.xyz, u_xlat16_5.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD7.xyz, u_xlat16_5.xyz);
    u_xlat1.xyz = vec3(u_xlat16_24) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_23) + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_25) + u_xlat1.xyz;
    u_xlat6.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat6.xyz = vec3(u_xlat21) * u_xlat6.xyz;
    u_xlat21 = dot(u_xlat6.xyz, u_xlat1.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat15.xy = u_xlat1.xy * (-vec2(u_xlat21)) + u_xlat6.xy;
    u_xlat15.xy = (-u_xlat1.xy) + u_xlat15.xy;
    u_xlat1.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat15.xy + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_21 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_6.xyz = texture(_MatCap, u_xlat1.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_6.xyz + u_xlat10_6.xyz;
    u_xlat1.xy = u_xlat1.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_1.xyz = texture(_SpecularMap, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SpecularIntensity);
    u_xlat16_23 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat0.x = (-u_xlat16_23) + _LightmapThreshold;
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    u_xlat0.x = (u_xlati0 != 0) ? 0.0 : 1.0;
    u_xlat0.x = u_xlat0.x + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_21) * u_xlat16_0.xyz + u_xlat16_4.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat21) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_9 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb21) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
mediump float u_xlat16_9;
bvec2 u_xlatb14;
vec2 u_xlat15;
float u_xlat21;
lowp float u_xlat10_21;
bool u_xlatb21;
mediump float u_xlat16_23;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_3.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_23 = dot(vs_TEXCOORD5.xyz, u_xlat16_5.xyz);
    u_xlat16_24 = dot(vs_TEXCOORD6.xyz, u_xlat16_5.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD7.xyz, u_xlat16_5.xyz);
    u_xlat1.xyz = vec3(u_xlat16_24) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_23) + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_25) + u_xlat1.xyz;
    u_xlat6.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat6.xyz = vec3(u_xlat21) * u_xlat6.xyz;
    u_xlat21 = dot(u_xlat6.xyz, u_xlat1.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat15.xy = u_xlat1.xy * (-vec2(u_xlat21)) + u_xlat6.xy;
    u_xlat15.xy = (-u_xlat1.xy) + u_xlat15.xy;
    u_xlat1.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat15.xy + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_21 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_6.xyz = texture(_MatCap, u_xlat1.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_6.xyz + u_xlat10_6.xyz;
    u_xlat1.xy = u_xlat1.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_1.xyz = texture(_SpecularMap, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SpecularIntensity);
    u_xlat16_23 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat0.x = (-u_xlat16_23) + _LightmapThreshold;
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    u_xlat0.x = (u_xlati0 != 0) ? 0.0 : 1.0;
    u_xlat0.x = u_xlat0.x + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_21) * u_xlat16_0.xyz + u_xlat16_4.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat21) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_9 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb21) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
bvec2 u_xlatb12;
mediump float u_xlat16_18;
bool u_xlatb18;
mediump float u_xlat16_20;
mediump float u_xlat16_22;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_18 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_18 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat0.x = (-u_xlat16_18) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UseChannel==2);
#else
    u_xlatb18 = _UseChannel==2;
#endif
    u_xlat16_20 = float(_UseChannel);
    u_xlat16_22 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_22 + u_xlat10_0.x;
    u_xlat16_20 = (u_xlatb18) ? u_xlat10_0.z : u_xlat16_20;
    u_xlat16_5.xyz = vec3(u_xlat16_20) * _Emission.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Emission.www;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
bvec2 u_xlatb12;
mediump float u_xlat16_18;
bool u_xlatb18;
mediump float u_xlat16_20;
mediump float u_xlat16_22;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_18 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_18 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat0.x = (-u_xlat16_18) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UseChannel==2);
#else
    u_xlatb18 = _UseChannel==2;
#endif
    u_xlat16_20 = float(_UseChannel);
    u_xlat16_22 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_22 + u_xlat10_0.x;
    u_xlat16_20 = (u_xlatb18) ? u_xlat10_0.z : u_xlat16_20;
    u_xlat16_5.xyz = vec3(u_xlat16_20) * _Emission.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Emission.www;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
bvec2 u_xlatb12;
mediump float u_xlat16_18;
bool u_xlatb18;
mediump float u_xlat16_20;
mediump float u_xlat16_22;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_18 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_18 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat0.x = (-u_xlat16_18) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UseChannel==2);
#else
    u_xlatb18 = _UseChannel==2;
#endif
    u_xlat16_20 = float(_UseChannel);
    u_xlat16_22 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_22 + u_xlat10_0.x;
    u_xlat16_20 = (u_xlatb18) ? u_xlat10_0.z : u_xlat16_20;
    u_xlat16_5.xyz = vec3(u_xlat16_20) * _Emission.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Emission.www;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_7;
vec2 u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
mediump float u_xlat16_17;
mediump float u_xlat16_19;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_15 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_15 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat0.x = (-u_xlat16_15) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_17 = dot(vs_TEXCOORD5.xyz, u_xlat16_4.xyz);
    u_xlat16_19 = dot(vs_TEXCOORD6.xyz, u_xlat16_4.xyz);
    u_xlat16_4.x = dot(vs_TEXCOORD7.xyz, u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(u_xlat16_19) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_17) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat16_4.xxx + u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat10.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat10.x = u_xlat10.x + u_xlat10.x;
    u_xlat10.xy = u_xlat0.xy * (-u_xlat10.xx) + u_xlat1.xy;
    u_xlat10.xy = (-u_xlat0.xy) + u_xlat10.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat10.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_10 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_2.xyz * u_xlat16_0.xyw + (-u_xlat16_2.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_10) * u_xlat16_0.xyw + u_xlat16_2.xyz;
    u_xlat15 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat15) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_7 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb15) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_7;
vec2 u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
mediump float u_xlat16_17;
mediump float u_xlat16_19;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_15 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_15 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat0.x = (-u_xlat16_15) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_17 = dot(vs_TEXCOORD5.xyz, u_xlat16_4.xyz);
    u_xlat16_19 = dot(vs_TEXCOORD6.xyz, u_xlat16_4.xyz);
    u_xlat16_4.x = dot(vs_TEXCOORD7.xyz, u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(u_xlat16_19) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_17) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat16_4.xxx + u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat10.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat10.x = u_xlat10.x + u_xlat10.x;
    u_xlat10.xy = u_xlat0.xy * (-u_xlat10.xx) + u_xlat1.xy;
    u_xlat10.xy = (-u_xlat0.xy) + u_xlat10.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat10.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_10 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_2.xyz * u_xlat16_0.xyw + (-u_xlat16_2.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_10) * u_xlat16_0.xyw + u_xlat16_2.xyz;
    u_xlat15 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat15) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_7 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb15) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_7;
vec2 u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
mediump float u_xlat16_17;
mediump float u_xlat16_19;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_15 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_15 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat0.x = (-u_xlat16_15) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_17 = dot(vs_TEXCOORD5.xyz, u_xlat16_4.xyz);
    u_xlat16_19 = dot(vs_TEXCOORD6.xyz, u_xlat16_4.xyz);
    u_xlat16_4.x = dot(vs_TEXCOORD7.xyz, u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(u_xlat16_19) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_17) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat16_4.xxx + u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat10.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat10.x = u_xlat10.x + u_xlat10.x;
    u_xlat10.xy = u_xlat0.xy * (-u_xlat10.xx) + u_xlat1.xy;
    u_xlat10.xy = (-u_xlat0.xy) + u_xlat10.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat10.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_10 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_2.xyz * u_xlat16_0.xyw + (-u_xlat16_2.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_10) * u_xlat16_0.xyw + u_xlat16_2.xyz;
    u_xlat15 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat15) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_7 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb15) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_9;
bvec2 u_xlatb14;
vec2 u_xlat15;
float u_xlat21;
mediump float u_xlat16_21;
lowp float u_xlat10_21;
bool u_xlatb21;
mediump float u_xlat16_23;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_21 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_21 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat21 = (-u_xlat16_21) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat21) * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_23 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat1.xyz = vec3(u_xlat16_25) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_23) + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_26) + u_xlat1.xyz;
    u_xlat3.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat15.xy = u_xlat1.xy * (-vec2(u_xlat21)) + u_xlat3.xy;
    u_xlat15.xy = (-u_xlat1.xy) + u_xlat15.xy;
    u_xlat1.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat15.xy + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_21 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_3.xyz = texture(_MatCap, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz + u_xlat10_3.xyz;
    u_xlat1.xy = u_xlat1.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_1.xyz = texture(_SpecularMap, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SpecularIntensity);
    u_xlat16_23 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat0.x = (-u_xlat16_23) + _LightmapThreshold;
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    u_xlat0.x = (u_xlati0 != 0) ? 0.0 : 1.0;
    u_xlat0.x = u_xlat0.x + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_2.xyz) * u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_21) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat21) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_9 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb21) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_9;
bvec2 u_xlatb14;
vec2 u_xlat15;
float u_xlat21;
mediump float u_xlat16_21;
lowp float u_xlat10_21;
bool u_xlatb21;
mediump float u_xlat16_23;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_21 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_21 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat21 = (-u_xlat16_21) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat21) * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_23 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat1.xyz = vec3(u_xlat16_25) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_23) + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_26) + u_xlat1.xyz;
    u_xlat3.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat15.xy = u_xlat1.xy * (-vec2(u_xlat21)) + u_xlat3.xy;
    u_xlat15.xy = (-u_xlat1.xy) + u_xlat15.xy;
    u_xlat1.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat15.xy + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_21 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_3.xyz = texture(_MatCap, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz + u_xlat10_3.xyz;
    u_xlat1.xy = u_xlat1.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_1.xyz = texture(_SpecularMap, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SpecularIntensity);
    u_xlat16_23 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat0.x = (-u_xlat16_23) + _LightmapThreshold;
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    u_xlat0.x = (u_xlati0 != 0) ? 0.0 : 1.0;
    u_xlat0.x = u_xlat0.x + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_2.xyz) * u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_21) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat21) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_9 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb21) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_9;
bvec2 u_xlatb14;
vec2 u_xlat15;
float u_xlat21;
mediump float u_xlat16_21;
lowp float u_xlat10_21;
bool u_xlatb21;
mediump float u_xlat16_23;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_21 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_21 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat21 = (-u_xlat16_21) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat21) * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_23 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat1.xyz = vec3(u_xlat16_25) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_23) + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_26) + u_xlat1.xyz;
    u_xlat3.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat15.xy = u_xlat1.xy * (-vec2(u_xlat21)) + u_xlat3.xy;
    u_xlat15.xy = (-u_xlat1.xy) + u_xlat15.xy;
    u_xlat1.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat15.xy + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_21 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_3.xyz = texture(_MatCap, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz + u_xlat10_3.xyz;
    u_xlat1.xy = u_xlat1.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_1.xyz = texture(_SpecularMap, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SpecularIntensity);
    u_xlat16_23 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat0.x = (-u_xlat16_23) + _LightmapThreshold;
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    u_xlat0.x = (u_xlati0 != 0) ? 0.0 : 1.0;
    u_xlat0.x = u_xlat0.x + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_2.xyz) * u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_21) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat21) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_9 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb21) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bvec2 u_xlatb10;
bool u_xlatb15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_3.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat5.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat5.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_17 = float(_UseChannel);
    u_xlat16_18 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_17 = u_xlat16_17 * u_xlat16_18 + u_xlat10_0.x;
    u_xlat16_17 = (u_xlatb15) ? u_xlat10_0.z : u_xlat16_17;
    u_xlat16_4.xyz = vec3(u_xlat16_17) * _Emission.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Emission.www;
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bvec2 u_xlatb10;
bool u_xlatb15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_3.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat5.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat5.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_17 = float(_UseChannel);
    u_xlat16_18 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_17 = u_xlat16_17 * u_xlat16_18 + u_xlat10_0.x;
    u_xlat16_17 = (u_xlatb15) ? u_xlat10_0.z : u_xlat16_17;
    u_xlat16_4.xyz = vec3(u_xlat16_17) * _Emission.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Emission.www;
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bvec2 u_xlatb10;
bool u_xlatb15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_3.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat5.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat5.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_17 = float(_UseChannel);
    u_xlat16_18 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_17 = u_xlat16_17 * u_xlat16_18 + u_xlat10_0.x;
    u_xlat16_17 = (u_xlatb15) ? u_xlat10_0.z : u_xlat16_17;
    u_xlat16_4.xyz = vec3(u_xlat16_17) * _Emission.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Emission.www;
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "_LightMap_ON" "MATCAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec2 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump float u_xlat16_6;
float u_xlat8;
lowp float u_xlat10_8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_3.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat8 = dot(u_xlat0.xyz, vs_TEXCOORD5.xyz);
    u_xlat8 = u_xlat8 + u_xlat8;
    u_xlat0.xy = vs_TEXCOORD5.xy * (-vec2(u_xlat8)) + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + (-vs_TEXCOORD5.xy);
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat0.xy + vs_TEXCOORD5.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_8 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_2.xyz * u_xlat16_0.xyw + (-u_xlat16_2.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_8) * u_xlat16_0.xyw + u_xlat16_2.xyz;
    u_xlat12 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat12) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_6 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb12) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "_LightMap_ON" "MATCAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec2 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump float u_xlat16_6;
float u_xlat8;
lowp float u_xlat10_8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_3.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat8 = dot(u_xlat0.xyz, vs_TEXCOORD5.xyz);
    u_xlat8 = u_xlat8 + u_xlat8;
    u_xlat0.xy = vs_TEXCOORD5.xy * (-vec2(u_xlat8)) + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + (-vs_TEXCOORD5.xy);
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat0.xy + vs_TEXCOORD5.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_8 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_2.xyz * u_xlat16_0.xyw + (-u_xlat16_2.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_8) * u_xlat16_0.xyw + u_xlat16_2.xyz;
    u_xlat12 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat12) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_6 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb12) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "_LightMap_ON" "MATCAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec2 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump float u_xlat16_6;
float u_xlat8;
lowp float u_xlat10_8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_3.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat8 = dot(u_xlat0.xyz, vs_TEXCOORD5.xyz);
    u_xlat8 = u_xlat8 + u_xlat8;
    u_xlat0.xy = vs_TEXCOORD5.xy * (-vec2(u_xlat8)) + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + (-vs_TEXCOORD5.xy);
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat0.xy + vs_TEXCOORD5.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_8 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_2.xyz * u_xlat16_0.xyw + (-u_xlat16_2.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_8) * u_xlat16_0.xyw + u_xlat16_2.xyz;
    u_xlat12 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat12) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_6 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb12) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
mediump float u_xlat16_9;
bvec2 u_xlatb14;
vec2 u_xlat15;
float u_xlat21;
lowp float u_xlat10_21;
bool u_xlatb21;
mediump float u_xlat16_23;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_3.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_23 = dot(vs_TEXCOORD5.xyz, u_xlat16_5.xyz);
    u_xlat16_24 = dot(vs_TEXCOORD6.xyz, u_xlat16_5.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD7.xyz, u_xlat16_5.xyz);
    u_xlat1.xyz = vec3(u_xlat16_24) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_23) + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_25) + u_xlat1.xyz;
    u_xlat6.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat6.xyz = vec3(u_xlat21) * u_xlat6.xyz;
    u_xlat21 = dot(u_xlat6.xyz, u_xlat1.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat15.xy = u_xlat1.xy * (-vec2(u_xlat21)) + u_xlat6.xy;
    u_xlat15.xy = (-u_xlat1.xy) + u_xlat15.xy;
    u_xlat1.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat15.xy + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_21 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_6.xyz = texture(_MatCap, u_xlat1.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_6.xyz + u_xlat10_6.xyz;
    u_xlat1.xy = u_xlat1.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_1.xyz = texture(_SpecularMap, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SpecularIntensity);
    u_xlat16_23 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat0.x = (-u_xlat16_23) + _LightmapThreshold;
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    u_xlat0.x = (u_xlati0 != 0) ? 0.0 : 1.0;
    u_xlat0.x = u_xlat0.x + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_21) * u_xlat16_0.xyz + u_xlat16_4.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat21) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_9 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb21) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
mediump float u_xlat16_9;
bvec2 u_xlatb14;
vec2 u_xlat15;
float u_xlat21;
lowp float u_xlat10_21;
bool u_xlatb21;
mediump float u_xlat16_23;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_3.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_23 = dot(vs_TEXCOORD5.xyz, u_xlat16_5.xyz);
    u_xlat16_24 = dot(vs_TEXCOORD6.xyz, u_xlat16_5.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD7.xyz, u_xlat16_5.xyz);
    u_xlat1.xyz = vec3(u_xlat16_24) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_23) + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_25) + u_xlat1.xyz;
    u_xlat6.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat6.xyz = vec3(u_xlat21) * u_xlat6.xyz;
    u_xlat21 = dot(u_xlat6.xyz, u_xlat1.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat15.xy = u_xlat1.xy * (-vec2(u_xlat21)) + u_xlat6.xy;
    u_xlat15.xy = (-u_xlat1.xy) + u_xlat15.xy;
    u_xlat1.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat15.xy + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_21 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_6.xyz = texture(_MatCap, u_xlat1.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_6.xyz + u_xlat10_6.xyz;
    u_xlat1.xy = u_xlat1.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_1.xyz = texture(_SpecularMap, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SpecularIntensity);
    u_xlat16_23 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat0.x = (-u_xlat16_23) + _LightmapThreshold;
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    u_xlat0.x = (u_xlati0 != 0) ? 0.0 : 1.0;
    u_xlat0.x = u_xlat0.x + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_21) * u_xlat16_0.xyz + u_xlat16_4.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat21) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_9 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb21) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
mediump float u_xlat16_9;
bvec2 u_xlatb14;
vec2 u_xlat15;
float u_xlat21;
lowp float u_xlat10_21;
bool u_xlatb21;
mediump float u_xlat16_23;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_3.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_23 = dot(vs_TEXCOORD5.xyz, u_xlat16_5.xyz);
    u_xlat16_24 = dot(vs_TEXCOORD6.xyz, u_xlat16_5.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD7.xyz, u_xlat16_5.xyz);
    u_xlat1.xyz = vec3(u_xlat16_24) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_23) + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_25) + u_xlat1.xyz;
    u_xlat6.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat6.xyz = vec3(u_xlat21) * u_xlat6.xyz;
    u_xlat21 = dot(u_xlat6.xyz, u_xlat1.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat15.xy = u_xlat1.xy * (-vec2(u_xlat21)) + u_xlat6.xy;
    u_xlat15.xy = (-u_xlat1.xy) + u_xlat15.xy;
    u_xlat1.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat15.xy + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_21 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_6.xyz = texture(_MatCap, u_xlat1.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_6.xyz + u_xlat10_6.xyz;
    u_xlat1.xy = u_xlat1.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_1.xyz = texture(_SpecularMap, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SpecularIntensity);
    u_xlat16_23 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat0.x = (-u_xlat16_23) + _LightmapThreshold;
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    u_xlat0.x = (u_xlati0 != 0) ? 0.0 : 1.0;
    u_xlat0.x = u_xlat0.x + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_21) * u_xlat16_0.xyz + u_xlat16_4.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat21) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_9 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb21) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
bvec2 u_xlatb12;
mediump float u_xlat16_18;
bool u_xlatb18;
mediump float u_xlat16_20;
mediump float u_xlat16_22;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_18 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_18 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat0.x = (-u_xlat16_18) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UseChannel==2);
#else
    u_xlatb18 = _UseChannel==2;
#endif
    u_xlat16_20 = float(_UseChannel);
    u_xlat16_22 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_22 + u_xlat10_0.x;
    u_xlat16_20 = (u_xlatb18) ? u_xlat10_0.z : u_xlat16_20;
    u_xlat16_5.xyz = vec3(u_xlat16_20) * _Emission.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Emission.www;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
bvec2 u_xlatb12;
mediump float u_xlat16_18;
bool u_xlatb18;
mediump float u_xlat16_20;
mediump float u_xlat16_22;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_18 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_18 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat0.x = (-u_xlat16_18) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UseChannel==2);
#else
    u_xlatb18 = _UseChannel==2;
#endif
    u_xlat16_20 = float(_UseChannel);
    u_xlat16_22 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_22 + u_xlat10_0.x;
    u_xlat16_20 = (u_xlatb18) ? u_xlat10_0.z : u_xlat16_20;
    u_xlat16_5.xyz = vec3(u_xlat16_20) * _Emission.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Emission.www;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
bvec2 u_xlatb12;
mediump float u_xlat16_18;
bool u_xlatb18;
mediump float u_xlat16_20;
mediump float u_xlat16_22;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_18 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_18 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat0.x = (-u_xlat16_18) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UseChannel==2);
#else
    u_xlatb18 = _UseChannel==2;
#endif
    u_xlat16_20 = float(_UseChannel);
    u_xlat16_22 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_22 + u_xlat10_0.x;
    u_xlat16_20 = (u_xlatb18) ? u_xlat10_0.z : u_xlat16_20;
    u_xlat16_5.xyz = vec3(u_xlat16_20) * _Emission.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Emission.www;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_7;
vec2 u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
mediump float u_xlat16_17;
mediump float u_xlat16_19;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_15 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_15 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat0.x = (-u_xlat16_15) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_17 = dot(vs_TEXCOORD5.xyz, u_xlat16_4.xyz);
    u_xlat16_19 = dot(vs_TEXCOORD6.xyz, u_xlat16_4.xyz);
    u_xlat16_4.x = dot(vs_TEXCOORD7.xyz, u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(u_xlat16_19) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_17) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat16_4.xxx + u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat10.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat10.x = u_xlat10.x + u_xlat10.x;
    u_xlat10.xy = u_xlat0.xy * (-u_xlat10.xx) + u_xlat1.xy;
    u_xlat10.xy = (-u_xlat0.xy) + u_xlat10.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat10.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_10 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_2.xyz * u_xlat16_0.xyw + (-u_xlat16_2.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_10) * u_xlat16_0.xyw + u_xlat16_2.xyz;
    u_xlat15 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat15) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_7 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb15) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_7;
vec2 u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
mediump float u_xlat16_17;
mediump float u_xlat16_19;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_15 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_15 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat0.x = (-u_xlat16_15) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_17 = dot(vs_TEXCOORD5.xyz, u_xlat16_4.xyz);
    u_xlat16_19 = dot(vs_TEXCOORD6.xyz, u_xlat16_4.xyz);
    u_xlat16_4.x = dot(vs_TEXCOORD7.xyz, u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(u_xlat16_19) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_17) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat16_4.xxx + u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat10.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat10.x = u_xlat10.x + u_xlat10.x;
    u_xlat10.xy = u_xlat0.xy * (-u_xlat10.xx) + u_xlat1.xy;
    u_xlat10.xy = (-u_xlat0.xy) + u_xlat10.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat10.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_10 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_2.xyz * u_xlat16_0.xyw + (-u_xlat16_2.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_10) * u_xlat16_0.xyw + u_xlat16_2.xyz;
    u_xlat15 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat15) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_7 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb15) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_7;
vec2 u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
mediump float u_xlat16_17;
mediump float u_xlat16_19;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_15 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_15 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat0.x = (-u_xlat16_15) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_17 = dot(vs_TEXCOORD5.xyz, u_xlat16_4.xyz);
    u_xlat16_19 = dot(vs_TEXCOORD6.xyz, u_xlat16_4.xyz);
    u_xlat16_4.x = dot(vs_TEXCOORD7.xyz, u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(u_xlat16_19) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_17) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat16_4.xxx + u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat10.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat10.x = u_xlat10.x + u_xlat10.x;
    u_xlat10.xy = u_xlat0.xy * (-u_xlat10.xx) + u_xlat1.xy;
    u_xlat10.xy = (-u_xlat0.xy) + u_xlat10.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat10.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_10 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_2.xyz * u_xlat16_0.xyw + (-u_xlat16_2.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_10) * u_xlat16_0.xyw + u_xlat16_2.xyz;
    u_xlat15 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat15) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_7 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb15) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_9;
bvec2 u_xlatb14;
vec2 u_xlat15;
float u_xlat21;
mediump float u_xlat16_21;
lowp float u_xlat10_21;
bool u_xlatb21;
mediump float u_xlat16_23;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_21 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_21 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat21 = (-u_xlat16_21) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat21) * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_23 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat1.xyz = vec3(u_xlat16_25) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_23) + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_26) + u_xlat1.xyz;
    u_xlat3.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat15.xy = u_xlat1.xy * (-vec2(u_xlat21)) + u_xlat3.xy;
    u_xlat15.xy = (-u_xlat1.xy) + u_xlat15.xy;
    u_xlat1.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat15.xy + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_21 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_3.xyz = texture(_MatCap, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz + u_xlat10_3.xyz;
    u_xlat1.xy = u_xlat1.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_1.xyz = texture(_SpecularMap, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SpecularIntensity);
    u_xlat16_23 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat0.x = (-u_xlat16_23) + _LightmapThreshold;
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    u_xlat0.x = (u_xlati0 != 0) ? 0.0 : 1.0;
    u_xlat0.x = u_xlat0.x + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_2.xyz) * u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_21) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat21) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_9 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb21) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_9;
bvec2 u_xlatb14;
vec2 u_xlat15;
float u_xlat21;
mediump float u_xlat16_21;
lowp float u_xlat10_21;
bool u_xlatb21;
mediump float u_xlat16_23;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_21 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_21 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat21 = (-u_xlat16_21) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat21) * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_23 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat1.xyz = vec3(u_xlat16_25) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_23) + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_26) + u_xlat1.xyz;
    u_xlat3.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat15.xy = u_xlat1.xy * (-vec2(u_xlat21)) + u_xlat3.xy;
    u_xlat15.xy = (-u_xlat1.xy) + u_xlat15.xy;
    u_xlat1.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat15.xy + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_21 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_3.xyz = texture(_MatCap, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz + u_xlat10_3.xyz;
    u_xlat1.xy = u_xlat1.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_1.xyz = texture(_SpecularMap, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SpecularIntensity);
    u_xlat16_23 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat0.x = (-u_xlat16_23) + _LightmapThreshold;
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    u_xlat0.x = (u_xlati0 != 0) ? 0.0 : 1.0;
    u_xlat0.x = u_xlat0.x + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_2.xyz) * u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_21) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat21) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_9 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb21) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump float u_xlat16_9;
bvec2 u_xlatb14;
vec2 u_xlat15;
float u_xlat21;
mediump float u_xlat16_21;
lowp float u_xlat10_21;
bool u_xlatb21;
mediump float u_xlat16_23;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_21 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_21 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat21 = (-u_xlat16_21) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat21) * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_23 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat1.xyz = vec3(u_xlat16_25) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_23) + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_26) + u_xlat1.xyz;
    u_xlat3.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat15.xy = u_xlat1.xy * (-vec2(u_xlat21)) + u_xlat3.xy;
    u_xlat15.xy = (-u_xlat1.xy) + u_xlat15.xy;
    u_xlat1.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat15.xy + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_21 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_3.xyz = texture(_MatCap, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz + u_xlat10_3.xyz;
    u_xlat1.xy = u_xlat1.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_1.xyz = texture(_SpecularMap, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SpecularIntensity);
    u_xlat16_23 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat0.x = (-u_xlat16_23) + _LightmapThreshold;
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    u_xlat0.x = (u_xlati0 != 0) ? 0.0 : 1.0;
    u_xlat0.x = u_xlat0.x + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_2.xyz) * u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_21) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat21) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_9 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb21) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
bvec2 u_xlatb8;
bool u_xlatb12;
mediump float u_xlat16_13;
mediump float u_xlat16_14;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat4.x = fract(u_xlat0.y);
    u_xlat0.z = u_xlat4.x * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat4.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat4.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_13 = float(_UseChannel);
    u_xlat16_14 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_13 = u_xlat16_13 * u_xlat16_14 + u_xlat10_0.x;
    u_xlat16_13 = (u_xlatb12) ? u_xlat10_0.z : u_xlat16_13;
    u_xlat16_3.xyz = vec3(u_xlat16_13) * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
bvec2 u_xlatb8;
bool u_xlatb12;
mediump float u_xlat16_13;
mediump float u_xlat16_14;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat4.x = fract(u_xlat0.y);
    u_xlat0.z = u_xlat4.x * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat4.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat4.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_13 = float(_UseChannel);
    u_xlat16_14 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_13 = u_xlat16_13 * u_xlat16_14 + u_xlat10_0.x;
    u_xlat16_13 = (u_xlatb12) ? u_xlat10_0.z : u_xlat16_13;
    u_xlat16_3.xyz = vec3(u_xlat16_13) * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
bvec2 u_xlatb8;
bool u_xlatb12;
mediump float u_xlat16_13;
mediump float u_xlat16_14;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat4.x = fract(u_xlat0.y);
    u_xlat0.z = u_xlat4.x * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat4.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat4.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_13 = float(_UseChannel);
    u_xlat16_14 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_13 = u_xlat16_13 * u_xlat16_14 + u_xlat10_0.x;
    u_xlat16_13 = (u_xlatb12) ? u_xlat10_0.z : u_xlat16_13;
    u_xlat16_3.xyz = vec3(u_xlat16_13) * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "MATCAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
lowp vec3 u_xlat10_3;
float u_xlat4;
mediump float u_xlat16_5;
float u_xlat8;
lowp float u_xlat10_8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat4 = fract(u_xlat0.y);
    u_xlat0.z = u_xlat4 * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat8 = dot(u_xlat0.xyz, vs_TEXCOORD5.xyz);
    u_xlat8 = u_xlat8 + u_xlat8;
    u_xlat0.xy = vs_TEXCOORD5.xy * (-vec2(u_xlat8)) + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + (-vs_TEXCOORD5.xy);
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat0.xy + vs_TEXCOORD5.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_8 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_1.xyz * u_xlat16_0.xyw + (-u_xlat16_1.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_8) * u_xlat16_0.xyw + u_xlat16_1.xyz;
    u_xlat12 = float(_UseSet);
    u_xlat3.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat3.xy = vec2(u_xlat12) * u_xlat3.xy + vs_TEXCOORD0.xy;
    u_xlat10_3.xyz = texture(_EmissionMask, u_xlat3.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_5 = (-u_xlat10_3.x) + u_xlat10_3.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5 + u_xlat10_3.x;
    u_xlat16_1.x = (u_xlatb12) ? u_xlat10_3.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "MATCAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
lowp vec3 u_xlat10_3;
float u_xlat4;
mediump float u_xlat16_5;
float u_xlat8;
lowp float u_xlat10_8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat4 = fract(u_xlat0.y);
    u_xlat0.z = u_xlat4 * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat8 = dot(u_xlat0.xyz, vs_TEXCOORD5.xyz);
    u_xlat8 = u_xlat8 + u_xlat8;
    u_xlat0.xy = vs_TEXCOORD5.xy * (-vec2(u_xlat8)) + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + (-vs_TEXCOORD5.xy);
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat0.xy + vs_TEXCOORD5.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_8 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_1.xyz * u_xlat16_0.xyw + (-u_xlat16_1.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_8) * u_xlat16_0.xyw + u_xlat16_1.xyz;
    u_xlat12 = float(_UseSet);
    u_xlat3.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat3.xy = vec2(u_xlat12) * u_xlat3.xy + vs_TEXCOORD0.xy;
    u_xlat10_3.xyz = texture(_EmissionMask, u_xlat3.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_5 = (-u_xlat10_3.x) + u_xlat10_3.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5 + u_xlat10_3.x;
    u_xlat16_1.x = (u_xlatb12) ? u_xlat10_3.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "MATCAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
lowp vec3 u_xlat10_3;
float u_xlat4;
mediump float u_xlat16_5;
float u_xlat8;
lowp float u_xlat10_8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat4 = fract(u_xlat0.y);
    u_xlat0.z = u_xlat4 * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat8 = dot(u_xlat0.xyz, vs_TEXCOORD5.xyz);
    u_xlat8 = u_xlat8 + u_xlat8;
    u_xlat0.xy = vs_TEXCOORD5.xy * (-vec2(u_xlat8)) + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + (-vs_TEXCOORD5.xy);
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat0.xy + vs_TEXCOORD5.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_8 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_1.xyz * u_xlat16_0.xyw + (-u_xlat16_1.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_8) * u_xlat16_0.xyw + u_xlat16_1.xyz;
    u_xlat12 = float(_UseSet);
    u_xlat3.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat3.xy = vec2(u_xlat12) * u_xlat3.xy + vs_TEXCOORD0.xy;
    u_xlat10_3.xyz = texture(_EmissionMask, u_xlat3.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_5 = (-u_xlat10_3.x) + u_xlat10_3.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5 + u_xlat10_3.x;
    u_xlat16_1.x = (u_xlatb12) ? u_xlat10_3.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
float u_xlat7;
mediump float u_xlat16_8;
vec2 u_xlat14;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
mediump float u_xlat16_24;
float u_xlat27;
int u_xlati27;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat7 = fract(u_xlat0.y);
    u_xlat0.z = u_xlat7 * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot(vs_TEXCOORD5.xyz, u_xlat16_5.xyz);
    u_xlat16_23 = dot(vs_TEXCOORD6.xyz, u_xlat16_5.xyz);
    u_xlat16_24 = dot(vs_TEXCOORD7.xyz, u_xlat16_5.xyz);
    u_xlat0.xyz = vec3(u_xlat16_23) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_22) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_24) + u_xlat0.xyz;
    u_xlat6.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat6.xyz = vec3(u_xlat21) * u_xlat6.xyz;
    u_xlat14.x = dot(u_xlat6.xyz, u_xlat0.xyz);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
    u_xlat14.xy = u_xlat0.xy * (-u_xlat14.xx) + u_xlat6.xy;
    u_xlat14.xy = (-u_xlat0.xy) + u_xlat14.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat14.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_14 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_6.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_6.xyz + u_xlat10_6.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat27 = (-u_xlat16_1.x) + _LightmapThreshold;
    u_xlat27 = u_xlat27 + 1.0;
    u_xlat27 = floor(u_xlat27);
    u_xlat27 = max(u_xlat27, 0.0);
    u_xlati27 = int(u_xlat27);
    u_xlat27 = (u_xlati27 != 0) ? 0.0 : 1.0;
    u_xlat27 = u_xlat27 + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * vec3(u_xlat27);
    u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_14) * u_xlat16_0.xyw + u_xlat16_4.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat6.xy = vec2(u_xlat21) * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_6.xyz = texture(_EmissionMask, u_xlat6.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_8 = (-u_xlat10_6.x) + u_xlat10_6.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + u_xlat10_6.x;
    u_xlat16_1.x = (u_xlatb21) ? u_xlat10_6.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
float u_xlat7;
mediump float u_xlat16_8;
vec2 u_xlat14;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
mediump float u_xlat16_24;
float u_xlat27;
int u_xlati27;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat7 = fract(u_xlat0.y);
    u_xlat0.z = u_xlat7 * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot(vs_TEXCOORD5.xyz, u_xlat16_5.xyz);
    u_xlat16_23 = dot(vs_TEXCOORD6.xyz, u_xlat16_5.xyz);
    u_xlat16_24 = dot(vs_TEXCOORD7.xyz, u_xlat16_5.xyz);
    u_xlat0.xyz = vec3(u_xlat16_23) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_22) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_24) + u_xlat0.xyz;
    u_xlat6.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat6.xyz = vec3(u_xlat21) * u_xlat6.xyz;
    u_xlat14.x = dot(u_xlat6.xyz, u_xlat0.xyz);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
    u_xlat14.xy = u_xlat0.xy * (-u_xlat14.xx) + u_xlat6.xy;
    u_xlat14.xy = (-u_xlat0.xy) + u_xlat14.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat14.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_14 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_6.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_6.xyz + u_xlat10_6.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat27 = (-u_xlat16_1.x) + _LightmapThreshold;
    u_xlat27 = u_xlat27 + 1.0;
    u_xlat27 = floor(u_xlat27);
    u_xlat27 = max(u_xlat27, 0.0);
    u_xlati27 = int(u_xlat27);
    u_xlat27 = (u_xlati27 != 0) ? 0.0 : 1.0;
    u_xlat27 = u_xlat27 + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * vec3(u_xlat27);
    u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_14) * u_xlat16_0.xyw + u_xlat16_4.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat6.xy = vec2(u_xlat21) * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_6.xyz = texture(_EmissionMask, u_xlat6.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_8 = (-u_xlat10_6.x) + u_xlat10_6.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + u_xlat10_6.x;
    u_xlat16_1.x = (u_xlatb21) ? u_xlat10_6.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
float u_xlat7;
mediump float u_xlat16_8;
vec2 u_xlat14;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
mediump float u_xlat16_24;
float u_xlat27;
int u_xlati27;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat7 = fract(u_xlat0.y);
    u_xlat0.z = u_xlat7 * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot(vs_TEXCOORD5.xyz, u_xlat16_5.xyz);
    u_xlat16_23 = dot(vs_TEXCOORD6.xyz, u_xlat16_5.xyz);
    u_xlat16_24 = dot(vs_TEXCOORD7.xyz, u_xlat16_5.xyz);
    u_xlat0.xyz = vec3(u_xlat16_23) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_22) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_24) + u_xlat0.xyz;
    u_xlat6.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat6.xyz = vec3(u_xlat21) * u_xlat6.xyz;
    u_xlat14.x = dot(u_xlat6.xyz, u_xlat0.xyz);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
    u_xlat14.xy = u_xlat0.xy * (-u_xlat14.xx) + u_xlat6.xy;
    u_xlat14.xy = (-u_xlat0.xy) + u_xlat14.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat14.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_14 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_6.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_6.xyz + u_xlat10_6.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat27 = (-u_xlat16_1.x) + _LightmapThreshold;
    u_xlat27 = u_xlat27 + 1.0;
    u_xlat27 = floor(u_xlat27);
    u_xlat27 = max(u_xlat27, 0.0);
    u_xlati27 = int(u_xlat27);
    u_xlat27 = (u_xlati27 != 0) ? 0.0 : 1.0;
    u_xlat27 = u_xlat27 + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * vec3(u_xlat27);
    u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_14) * u_xlat16_0.xyw + u_xlat16_4.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat6.xy = vec2(u_xlat21) * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_6.xyz = texture(_EmissionMask, u_xlat6.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_8 = (-u_xlat10_6.x) + u_xlat10_6.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + u_xlat10_6.x;
    u_xlat16_1.x = (u_xlatb21) ? u_xlat10_6.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bvec2 u_xlatb10;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
mediump float u_xlat16_16;
mediump float u_xlat16_17;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat5.x = fract(u_xlat0.y);
    u_xlat0.z = u_xlat5.x * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_15 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_15 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_1.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat15 = (-u_xlat16_15) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * vec3(_LightmapDarkPromotion) + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat5.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat5.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_16 = float(_UseChannel);
    u_xlat16_17 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_16 = u_xlat16_16 * u_xlat16_17 + u_xlat10_0.x;
    u_xlat16_16 = (u_xlatb15) ? u_xlat10_0.z : u_xlat16_16;
    u_xlat16_4.xyz = vec3(u_xlat16_16) * _Emission.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Emission.www;
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bvec2 u_xlatb10;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
mediump float u_xlat16_16;
mediump float u_xlat16_17;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat5.x = fract(u_xlat0.y);
    u_xlat0.z = u_xlat5.x * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_15 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_15 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_1.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat15 = (-u_xlat16_15) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * vec3(_LightmapDarkPromotion) + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat5.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat5.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_16 = float(_UseChannel);
    u_xlat16_17 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_16 = u_xlat16_16 * u_xlat16_17 + u_xlat10_0.x;
    u_xlat16_16 = (u_xlatb15) ? u_xlat10_0.z : u_xlat16_16;
    u_xlat16_4.xyz = vec3(u_xlat16_16) * _Emission.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Emission.www;
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bvec2 u_xlatb10;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
mediump float u_xlat16_16;
mediump float u_xlat16_17;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat5.x = fract(u_xlat0.y);
    u_xlat0.z = u_xlat5.x * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_15 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_15 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_1.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat15 = (-u_xlat16_15) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * vec3(_LightmapDarkPromotion) + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat5.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat5.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_16 = float(_UseChannel);
    u_xlat16_17 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_16 = u_xlat16_16 * u_xlat16_17 + u_xlat10_0.x;
    u_xlat16_16 = (u_xlatb15) ? u_xlat10_0.z : u_xlat16_16;
    u_xlat16_4.xyz = vec3(u_xlat16_16) * _Emission.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Emission.www;
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
float u_xlat4;
mediump float u_xlat16_5;
vec2 u_xlat8;
lowp float u_xlat10_8;
bvec2 u_xlatb8;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
mediump float u_xlat16_13;
mediump float u_xlat16_14;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat4 = fract(u_xlat0.y);
    u_xlat0.z = u_xlat4 * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_12 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_12 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_1.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat12 = (-u_xlat16_12) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat12) * vec3(_LightmapDarkPromotion) + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_13 = dot(vs_TEXCOORD5.xyz, u_xlat16_2.xyz);
    u_xlat16_14 = dot(vs_TEXCOORD6.xyz, u_xlat16_2.xyz);
    u_xlat16_2.x = dot(vs_TEXCOORD7.xyz, u_xlat16_2.xyz);
    u_xlat0.xyz = vec3(u_xlat16_14) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_13) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat16_2.xxx + u_xlat0.xyz;
    u_xlat3.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat8.x = u_xlat8.x + u_xlat8.x;
    u_xlat8.xy = u_xlat0.xy * (-u_xlat8.xx) + u_xlat3.xy;
    u_xlat8.xy = (-u_xlat0.xy) + u_xlat8.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat8.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_8 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_1.xyz * u_xlat16_0.xyw + (-u_xlat16_1.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_8) * u_xlat16_0.xyw + u_xlat16_1.xyz;
    u_xlat12 = float(_UseSet);
    u_xlat3.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat3.xy = vec2(u_xlat12) * u_xlat3.xy + vs_TEXCOORD0.xy;
    u_xlat10_3.xyz = texture(_EmissionMask, u_xlat3.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_5 = (-u_xlat10_3.x) + u_xlat10_3.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5 + u_xlat10_3.x;
    u_xlat16_1.x = (u_xlatb12) ? u_xlat10_3.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
float u_xlat4;
mediump float u_xlat16_5;
vec2 u_xlat8;
lowp float u_xlat10_8;
bvec2 u_xlatb8;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
mediump float u_xlat16_13;
mediump float u_xlat16_14;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat4 = fract(u_xlat0.y);
    u_xlat0.z = u_xlat4 * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_12 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_12 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_1.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat12 = (-u_xlat16_12) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat12) * vec3(_LightmapDarkPromotion) + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_13 = dot(vs_TEXCOORD5.xyz, u_xlat16_2.xyz);
    u_xlat16_14 = dot(vs_TEXCOORD6.xyz, u_xlat16_2.xyz);
    u_xlat16_2.x = dot(vs_TEXCOORD7.xyz, u_xlat16_2.xyz);
    u_xlat0.xyz = vec3(u_xlat16_14) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_13) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat16_2.xxx + u_xlat0.xyz;
    u_xlat3.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat8.x = u_xlat8.x + u_xlat8.x;
    u_xlat8.xy = u_xlat0.xy * (-u_xlat8.xx) + u_xlat3.xy;
    u_xlat8.xy = (-u_xlat0.xy) + u_xlat8.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat8.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_8 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_1.xyz * u_xlat16_0.xyw + (-u_xlat16_1.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_8) * u_xlat16_0.xyw + u_xlat16_1.xyz;
    u_xlat12 = float(_UseSet);
    u_xlat3.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat3.xy = vec2(u_xlat12) * u_xlat3.xy + vs_TEXCOORD0.xy;
    u_xlat10_3.xyz = texture(_EmissionMask, u_xlat3.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_5 = (-u_xlat10_3.x) + u_xlat10_3.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5 + u_xlat10_3.x;
    u_xlat16_1.x = (u_xlatb12) ? u_xlat10_3.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
float u_xlat4;
mediump float u_xlat16_5;
vec2 u_xlat8;
lowp float u_xlat10_8;
bvec2 u_xlatb8;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
mediump float u_xlat16_13;
mediump float u_xlat16_14;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat4 = fract(u_xlat0.y);
    u_xlat0.z = u_xlat4 * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_12 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_12 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_1.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat12 = (-u_xlat16_12) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat12) * vec3(_LightmapDarkPromotion) + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_13 = dot(vs_TEXCOORD5.xyz, u_xlat16_2.xyz);
    u_xlat16_14 = dot(vs_TEXCOORD6.xyz, u_xlat16_2.xyz);
    u_xlat16_2.x = dot(vs_TEXCOORD7.xyz, u_xlat16_2.xyz);
    u_xlat0.xyz = vec3(u_xlat16_14) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_13) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat16_2.xxx + u_xlat0.xyz;
    u_xlat3.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat8.x = u_xlat8.x + u_xlat8.x;
    u_xlat8.xy = u_xlat0.xy * (-u_xlat8.xx) + u_xlat3.xy;
    u_xlat8.xy = (-u_xlat0.xy) + u_xlat8.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat8.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_8 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_1.xyz * u_xlat16_0.xyw + (-u_xlat16_1.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_8) * u_xlat16_0.xyw + u_xlat16_1.xyz;
    u_xlat12 = float(_UseSet);
    u_xlat3.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat3.xy = vec2(u_xlat12) * u_xlat3.xy + vs_TEXCOORD0.xy;
    u_xlat10_3.xyz = texture(_EmissionMask, u_xlat3.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_5 = (-u_xlat10_3.x) + u_xlat10_3.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5 + u_xlat10_3.x;
    u_xlat16_1.x = (u_xlatb12) ? u_xlat10_3.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
vec2 u_xlat14;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
float u_xlat21;
mediump float u_xlat16_21;
bool u_xlatb21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
float u_xlat24;
int u_xlati24;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat7 = fract(u_xlat0.y);
    u_xlat0.z = u_xlat7 * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_21 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_21 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat21 = (-u_xlat16_21) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat21) * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat0.xyz = vec3(u_xlat16_23) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_22) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_25) + u_xlat0.xyz;
    u_xlat3.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat14.x = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
    u_xlat14.xy = u_xlat0.xy * (-u_xlat14.xx) + u_xlat3.xy;
    u_xlat14.xy = (-u_xlat0.xy) + u_xlat14.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat14.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_14 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_3.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz + u_xlat10_3.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat24 = (-u_xlat16_1.x) + _LightmapThreshold;
    u_xlat24 = u_xlat24 + 1.0;
    u_xlat24 = floor(u_xlat24);
    u_xlat24 = max(u_xlat24, 0.0);
    u_xlati24 = int(u_xlat24);
    u_xlat24 = (u_xlati24 != 0) ? 0.0 : 1.0;
    u_xlat24 = u_xlat24 + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * vec3(u_xlat24);
    u_xlat16_1.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_2.xyz) * u_xlat16_4.xyz + u_xlat16_1.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_14) * u_xlat16_0.xyw + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat3.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat3.xy = vec2(u_xlat21) * u_xlat3.xy + vs_TEXCOORD0.xy;
    u_xlat10_3.xyz = texture(_EmissionMask, u_xlat3.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_8 = (-u_xlat10_3.x) + u_xlat10_3.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + u_xlat10_3.x;
    u_xlat16_1.x = (u_xlatb21) ? u_xlat10_3.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
vec2 u_xlat14;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
float u_xlat21;
mediump float u_xlat16_21;
bool u_xlatb21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
float u_xlat24;
int u_xlati24;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat7 = fract(u_xlat0.y);
    u_xlat0.z = u_xlat7 * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_21 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_21 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat21 = (-u_xlat16_21) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat21) * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat0.xyz = vec3(u_xlat16_23) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_22) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_25) + u_xlat0.xyz;
    u_xlat3.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat14.x = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
    u_xlat14.xy = u_xlat0.xy * (-u_xlat14.xx) + u_xlat3.xy;
    u_xlat14.xy = (-u_xlat0.xy) + u_xlat14.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat14.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_14 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_3.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz + u_xlat10_3.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat24 = (-u_xlat16_1.x) + _LightmapThreshold;
    u_xlat24 = u_xlat24 + 1.0;
    u_xlat24 = floor(u_xlat24);
    u_xlat24 = max(u_xlat24, 0.0);
    u_xlati24 = int(u_xlat24);
    u_xlat24 = (u_xlati24 != 0) ? 0.0 : 1.0;
    u_xlat24 = u_xlat24 + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * vec3(u_xlat24);
    u_xlat16_1.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_2.xyz) * u_xlat16_4.xyz + u_xlat16_1.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_14) * u_xlat16_0.xyw + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat3.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat3.xy = vec2(u_xlat21) * u_xlat3.xy + vs_TEXCOORD0.xy;
    u_xlat10_3.xyz = texture(_EmissionMask, u_xlat3.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_8 = (-u_xlat10_3.x) + u_xlat10_3.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + u_xlat10_3.x;
    u_xlat16_1.x = (u_xlatb21) ? u_xlat10_3.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
vec2 u_xlat14;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
float u_xlat21;
mediump float u_xlat16_21;
bool u_xlatb21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
float u_xlat24;
int u_xlati24;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat7 = fract(u_xlat0.y);
    u_xlat0.z = u_xlat7 * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_21 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_21 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat21 = (-u_xlat16_21) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat21) * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat0.xyz = vec3(u_xlat16_23) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_22) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_25) + u_xlat0.xyz;
    u_xlat3.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat14.x = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
    u_xlat14.xy = u_xlat0.xy * (-u_xlat14.xx) + u_xlat3.xy;
    u_xlat14.xy = (-u_xlat0.xy) + u_xlat14.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat14.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_14 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_3.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz + u_xlat10_3.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat24 = (-u_xlat16_1.x) + _LightmapThreshold;
    u_xlat24 = u_xlat24 + 1.0;
    u_xlat24 = floor(u_xlat24);
    u_xlat24 = max(u_xlat24, 0.0);
    u_xlati24 = int(u_xlat24);
    u_xlat24 = (u_xlati24 != 0) ? 0.0 : 1.0;
    u_xlat24 = u_xlat24 + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * vec3(u_xlat24);
    u_xlat16_1.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_2.xyz) * u_xlat16_4.xyz + u_xlat16_1.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_14) * u_xlat16_0.xyw + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat3.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat3.xy = vec2(u_xlat21) * u_xlat3.xy + vs_TEXCOORD0.xy;
    u_xlat10_3.xyz = texture(_EmissionMask, u_xlat3.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_8 = (-u_xlat10_3.x) + u_xlat10_3.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + u_xlat10_3.x;
    u_xlat16_1.x = (u_xlatb21) ? u_xlat10_3.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
bvec2 u_xlatb8;
bool u_xlatb12;
mediump float u_xlat16_13;
mediump float u_xlat16_14;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat4.x = fract(u_xlat0.y);
    u_xlat0.z = u_xlat4.x * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat4.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat4.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_13 = float(_UseChannel);
    u_xlat16_14 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_13 = u_xlat16_13 * u_xlat16_14 + u_xlat10_0.x;
    u_xlat16_13 = (u_xlatb12) ? u_xlat10_0.z : u_xlat16_13;
    u_xlat16_3.xyz = vec3(u_xlat16_13) * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
bvec2 u_xlatb8;
bool u_xlatb12;
mediump float u_xlat16_13;
mediump float u_xlat16_14;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat4.x = fract(u_xlat0.y);
    u_xlat0.z = u_xlat4.x * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat4.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat4.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_13 = float(_UseChannel);
    u_xlat16_14 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_13 = u_xlat16_13 * u_xlat16_14 + u_xlat10_0.x;
    u_xlat16_13 = (u_xlatb12) ? u_xlat10_0.z : u_xlat16_13;
    u_xlat16_3.xyz = vec3(u_xlat16_13) * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
bvec2 u_xlatb8;
bool u_xlatb12;
mediump float u_xlat16_13;
mediump float u_xlat16_14;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat4.x = fract(u_xlat0.y);
    u_xlat0.z = u_xlat4.x * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat4.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat4.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_13 = float(_UseChannel);
    u_xlat16_14 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_13 = u_xlat16_13 * u_xlat16_14 + u_xlat10_0.x;
    u_xlat16_13 = (u_xlatb12) ? u_xlat10_0.z : u_xlat16_13;
    u_xlat16_3.xyz = vec3(u_xlat16_13) * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "MATCAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
lowp vec3 u_xlat10_3;
float u_xlat4;
mediump float u_xlat16_5;
float u_xlat8;
lowp float u_xlat10_8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat4 = fract(u_xlat0.y);
    u_xlat0.z = u_xlat4 * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat8 = dot(u_xlat0.xyz, vs_TEXCOORD5.xyz);
    u_xlat8 = u_xlat8 + u_xlat8;
    u_xlat0.xy = vs_TEXCOORD5.xy * (-vec2(u_xlat8)) + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + (-vs_TEXCOORD5.xy);
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat0.xy + vs_TEXCOORD5.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_8 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_1.xyz * u_xlat16_0.xyw + (-u_xlat16_1.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_8) * u_xlat16_0.xyw + u_xlat16_1.xyz;
    u_xlat12 = float(_UseSet);
    u_xlat3.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat3.xy = vec2(u_xlat12) * u_xlat3.xy + vs_TEXCOORD0.xy;
    u_xlat10_3.xyz = texture(_EmissionMask, u_xlat3.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_5 = (-u_xlat10_3.x) + u_xlat10_3.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5 + u_xlat10_3.x;
    u_xlat16_1.x = (u_xlatb12) ? u_xlat10_3.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "MATCAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
lowp vec3 u_xlat10_3;
float u_xlat4;
mediump float u_xlat16_5;
float u_xlat8;
lowp float u_xlat10_8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat4 = fract(u_xlat0.y);
    u_xlat0.z = u_xlat4 * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat8 = dot(u_xlat0.xyz, vs_TEXCOORD5.xyz);
    u_xlat8 = u_xlat8 + u_xlat8;
    u_xlat0.xy = vs_TEXCOORD5.xy * (-vec2(u_xlat8)) + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + (-vs_TEXCOORD5.xy);
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat0.xy + vs_TEXCOORD5.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_8 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_1.xyz * u_xlat16_0.xyw + (-u_xlat16_1.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_8) * u_xlat16_0.xyw + u_xlat16_1.xyz;
    u_xlat12 = float(_UseSet);
    u_xlat3.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat3.xy = vec2(u_xlat12) * u_xlat3.xy + vs_TEXCOORD0.xy;
    u_xlat10_3.xyz = texture(_EmissionMask, u_xlat3.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_5 = (-u_xlat10_3.x) + u_xlat10_3.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5 + u_xlat10_3.x;
    u_xlat16_1.x = (u_xlatb12) ? u_xlat10_3.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "MATCAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
lowp vec3 u_xlat10_3;
float u_xlat4;
mediump float u_xlat16_5;
float u_xlat8;
lowp float u_xlat10_8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat4 = fract(u_xlat0.y);
    u_xlat0.z = u_xlat4 * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat8 = dot(u_xlat0.xyz, vs_TEXCOORD5.xyz);
    u_xlat8 = u_xlat8 + u_xlat8;
    u_xlat0.xy = vs_TEXCOORD5.xy * (-vec2(u_xlat8)) + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + (-vs_TEXCOORD5.xy);
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat0.xy + vs_TEXCOORD5.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_8 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_1.xyz * u_xlat16_0.xyw + (-u_xlat16_1.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_8) * u_xlat16_0.xyw + u_xlat16_1.xyz;
    u_xlat12 = float(_UseSet);
    u_xlat3.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat3.xy = vec2(u_xlat12) * u_xlat3.xy + vs_TEXCOORD0.xy;
    u_xlat10_3.xyz = texture(_EmissionMask, u_xlat3.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_5 = (-u_xlat10_3.x) + u_xlat10_3.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5 + u_xlat10_3.x;
    u_xlat16_1.x = (u_xlatb12) ? u_xlat10_3.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
float u_xlat7;
mediump float u_xlat16_8;
vec2 u_xlat14;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
mediump float u_xlat16_24;
float u_xlat27;
int u_xlati27;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat7 = fract(u_xlat0.y);
    u_xlat0.z = u_xlat7 * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot(vs_TEXCOORD5.xyz, u_xlat16_5.xyz);
    u_xlat16_23 = dot(vs_TEXCOORD6.xyz, u_xlat16_5.xyz);
    u_xlat16_24 = dot(vs_TEXCOORD7.xyz, u_xlat16_5.xyz);
    u_xlat0.xyz = vec3(u_xlat16_23) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_22) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_24) + u_xlat0.xyz;
    u_xlat6.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat6.xyz = vec3(u_xlat21) * u_xlat6.xyz;
    u_xlat14.x = dot(u_xlat6.xyz, u_xlat0.xyz);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
    u_xlat14.xy = u_xlat0.xy * (-u_xlat14.xx) + u_xlat6.xy;
    u_xlat14.xy = (-u_xlat0.xy) + u_xlat14.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat14.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_14 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_6.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_6.xyz + u_xlat10_6.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat27 = (-u_xlat16_1.x) + _LightmapThreshold;
    u_xlat27 = u_xlat27 + 1.0;
    u_xlat27 = floor(u_xlat27);
    u_xlat27 = max(u_xlat27, 0.0);
    u_xlati27 = int(u_xlat27);
    u_xlat27 = (u_xlati27 != 0) ? 0.0 : 1.0;
    u_xlat27 = u_xlat27 + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * vec3(u_xlat27);
    u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_14) * u_xlat16_0.xyw + u_xlat16_4.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat6.xy = vec2(u_xlat21) * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_6.xyz = texture(_EmissionMask, u_xlat6.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_8 = (-u_xlat10_6.x) + u_xlat10_6.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + u_xlat10_6.x;
    u_xlat16_1.x = (u_xlatb21) ? u_xlat10_6.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
float u_xlat7;
mediump float u_xlat16_8;
vec2 u_xlat14;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
mediump float u_xlat16_24;
float u_xlat27;
int u_xlati27;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat7 = fract(u_xlat0.y);
    u_xlat0.z = u_xlat7 * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot(vs_TEXCOORD5.xyz, u_xlat16_5.xyz);
    u_xlat16_23 = dot(vs_TEXCOORD6.xyz, u_xlat16_5.xyz);
    u_xlat16_24 = dot(vs_TEXCOORD7.xyz, u_xlat16_5.xyz);
    u_xlat0.xyz = vec3(u_xlat16_23) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_22) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_24) + u_xlat0.xyz;
    u_xlat6.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat6.xyz = vec3(u_xlat21) * u_xlat6.xyz;
    u_xlat14.x = dot(u_xlat6.xyz, u_xlat0.xyz);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
    u_xlat14.xy = u_xlat0.xy * (-u_xlat14.xx) + u_xlat6.xy;
    u_xlat14.xy = (-u_xlat0.xy) + u_xlat14.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat14.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_14 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_6.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_6.xyz + u_xlat10_6.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat27 = (-u_xlat16_1.x) + _LightmapThreshold;
    u_xlat27 = u_xlat27 + 1.0;
    u_xlat27 = floor(u_xlat27);
    u_xlat27 = max(u_xlat27, 0.0);
    u_xlati27 = int(u_xlat27);
    u_xlat27 = (u_xlati27 != 0) ? 0.0 : 1.0;
    u_xlat27 = u_xlat27 + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * vec3(u_xlat27);
    u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_14) * u_xlat16_0.xyw + u_xlat16_4.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat6.xy = vec2(u_xlat21) * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_6.xyz = texture(_EmissionMask, u_xlat6.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_8 = (-u_xlat10_6.x) + u_xlat10_6.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + u_xlat10_6.x;
    u_xlat16_1.x = (u_xlatb21) ? u_xlat10_6.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
float u_xlat7;
mediump float u_xlat16_8;
vec2 u_xlat14;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
mediump float u_xlat16_24;
float u_xlat27;
int u_xlati27;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat7 = fract(u_xlat0.y);
    u_xlat0.z = u_xlat7 * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot(vs_TEXCOORD5.xyz, u_xlat16_5.xyz);
    u_xlat16_23 = dot(vs_TEXCOORD6.xyz, u_xlat16_5.xyz);
    u_xlat16_24 = dot(vs_TEXCOORD7.xyz, u_xlat16_5.xyz);
    u_xlat0.xyz = vec3(u_xlat16_23) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_22) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_24) + u_xlat0.xyz;
    u_xlat6.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat6.xyz = vec3(u_xlat21) * u_xlat6.xyz;
    u_xlat14.x = dot(u_xlat6.xyz, u_xlat0.xyz);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
    u_xlat14.xy = u_xlat0.xy * (-u_xlat14.xx) + u_xlat6.xy;
    u_xlat14.xy = (-u_xlat0.xy) + u_xlat14.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat14.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_14 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_6.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_6.xyz + u_xlat10_6.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat27 = (-u_xlat16_1.x) + _LightmapThreshold;
    u_xlat27 = u_xlat27 + 1.0;
    u_xlat27 = floor(u_xlat27);
    u_xlat27 = max(u_xlat27, 0.0);
    u_xlati27 = int(u_xlat27);
    u_xlat27 = (u_xlati27 != 0) ? 0.0 : 1.0;
    u_xlat27 = u_xlat27 + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * vec3(u_xlat27);
    u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_14) * u_xlat16_0.xyw + u_xlat16_4.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat6.xy = vec2(u_xlat21) * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_6.xyz = texture(_EmissionMask, u_xlat6.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_8 = (-u_xlat10_6.x) + u_xlat10_6.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + u_xlat10_6.x;
    u_xlat16_1.x = (u_xlatb21) ? u_xlat10_6.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bvec2 u_xlatb10;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
mediump float u_xlat16_16;
mediump float u_xlat16_17;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat5.x = fract(u_xlat0.y);
    u_xlat0.z = u_xlat5.x * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_15 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_15 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_1.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat15 = (-u_xlat16_15) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * vec3(_LightmapDarkPromotion) + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat5.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat5.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_16 = float(_UseChannel);
    u_xlat16_17 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_16 = u_xlat16_16 * u_xlat16_17 + u_xlat10_0.x;
    u_xlat16_16 = (u_xlatb15) ? u_xlat10_0.z : u_xlat16_16;
    u_xlat16_4.xyz = vec3(u_xlat16_16) * _Emission.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Emission.www;
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bvec2 u_xlatb10;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
mediump float u_xlat16_16;
mediump float u_xlat16_17;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat5.x = fract(u_xlat0.y);
    u_xlat0.z = u_xlat5.x * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_15 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_15 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_1.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat15 = (-u_xlat16_15) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * vec3(_LightmapDarkPromotion) + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat5.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat5.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_16 = float(_UseChannel);
    u_xlat16_17 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_16 = u_xlat16_16 * u_xlat16_17 + u_xlat10_0.x;
    u_xlat16_16 = (u_xlatb15) ? u_xlat10_0.z : u_xlat16_16;
    u_xlat16_4.xyz = vec3(u_xlat16_16) * _Emission.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Emission.www;
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bvec2 u_xlatb10;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
mediump float u_xlat16_16;
mediump float u_xlat16_17;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat5.x = fract(u_xlat0.y);
    u_xlat0.z = u_xlat5.x * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_15 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_15 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_1.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat15 = (-u_xlat16_15) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * vec3(_LightmapDarkPromotion) + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat5.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat5.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_16 = float(_UseChannel);
    u_xlat16_17 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_16 = u_xlat16_16 * u_xlat16_17 + u_xlat10_0.x;
    u_xlat16_16 = (u_xlatb15) ? u_xlat10_0.z : u_xlat16_16;
    u_xlat16_4.xyz = vec3(u_xlat16_16) * _Emission.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Emission.www;
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
float u_xlat4;
mediump float u_xlat16_5;
vec2 u_xlat8;
lowp float u_xlat10_8;
bvec2 u_xlatb8;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
mediump float u_xlat16_13;
mediump float u_xlat16_14;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat4 = fract(u_xlat0.y);
    u_xlat0.z = u_xlat4 * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_12 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_12 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_1.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat12 = (-u_xlat16_12) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat12) * vec3(_LightmapDarkPromotion) + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_13 = dot(vs_TEXCOORD5.xyz, u_xlat16_2.xyz);
    u_xlat16_14 = dot(vs_TEXCOORD6.xyz, u_xlat16_2.xyz);
    u_xlat16_2.x = dot(vs_TEXCOORD7.xyz, u_xlat16_2.xyz);
    u_xlat0.xyz = vec3(u_xlat16_14) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_13) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat16_2.xxx + u_xlat0.xyz;
    u_xlat3.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat8.x = u_xlat8.x + u_xlat8.x;
    u_xlat8.xy = u_xlat0.xy * (-u_xlat8.xx) + u_xlat3.xy;
    u_xlat8.xy = (-u_xlat0.xy) + u_xlat8.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat8.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_8 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_1.xyz * u_xlat16_0.xyw + (-u_xlat16_1.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_8) * u_xlat16_0.xyw + u_xlat16_1.xyz;
    u_xlat12 = float(_UseSet);
    u_xlat3.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat3.xy = vec2(u_xlat12) * u_xlat3.xy + vs_TEXCOORD0.xy;
    u_xlat10_3.xyz = texture(_EmissionMask, u_xlat3.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_5 = (-u_xlat10_3.x) + u_xlat10_3.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5 + u_xlat10_3.x;
    u_xlat16_1.x = (u_xlatb12) ? u_xlat10_3.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
float u_xlat4;
mediump float u_xlat16_5;
vec2 u_xlat8;
lowp float u_xlat10_8;
bvec2 u_xlatb8;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
mediump float u_xlat16_13;
mediump float u_xlat16_14;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat4 = fract(u_xlat0.y);
    u_xlat0.z = u_xlat4 * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_12 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_12 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_1.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat12 = (-u_xlat16_12) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat12) * vec3(_LightmapDarkPromotion) + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_13 = dot(vs_TEXCOORD5.xyz, u_xlat16_2.xyz);
    u_xlat16_14 = dot(vs_TEXCOORD6.xyz, u_xlat16_2.xyz);
    u_xlat16_2.x = dot(vs_TEXCOORD7.xyz, u_xlat16_2.xyz);
    u_xlat0.xyz = vec3(u_xlat16_14) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_13) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat16_2.xxx + u_xlat0.xyz;
    u_xlat3.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat8.x = u_xlat8.x + u_xlat8.x;
    u_xlat8.xy = u_xlat0.xy * (-u_xlat8.xx) + u_xlat3.xy;
    u_xlat8.xy = (-u_xlat0.xy) + u_xlat8.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat8.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_8 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_1.xyz * u_xlat16_0.xyw + (-u_xlat16_1.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_8) * u_xlat16_0.xyw + u_xlat16_1.xyz;
    u_xlat12 = float(_UseSet);
    u_xlat3.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat3.xy = vec2(u_xlat12) * u_xlat3.xy + vs_TEXCOORD0.xy;
    u_xlat10_3.xyz = texture(_EmissionMask, u_xlat3.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_5 = (-u_xlat10_3.x) + u_xlat10_3.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5 + u_xlat10_3.x;
    u_xlat16_1.x = (u_xlatb12) ? u_xlat10_3.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
float u_xlat4;
mediump float u_xlat16_5;
vec2 u_xlat8;
lowp float u_xlat10_8;
bvec2 u_xlatb8;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
mediump float u_xlat16_13;
mediump float u_xlat16_14;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat4 = fract(u_xlat0.y);
    u_xlat0.z = u_xlat4 * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_12 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_12 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_1.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat12 = (-u_xlat16_12) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat12) * vec3(_LightmapDarkPromotion) + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_13 = dot(vs_TEXCOORD5.xyz, u_xlat16_2.xyz);
    u_xlat16_14 = dot(vs_TEXCOORD6.xyz, u_xlat16_2.xyz);
    u_xlat16_2.x = dot(vs_TEXCOORD7.xyz, u_xlat16_2.xyz);
    u_xlat0.xyz = vec3(u_xlat16_14) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_13) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat16_2.xxx + u_xlat0.xyz;
    u_xlat3.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat8.x = u_xlat8.x + u_xlat8.x;
    u_xlat8.xy = u_xlat0.xy * (-u_xlat8.xx) + u_xlat3.xy;
    u_xlat8.xy = (-u_xlat0.xy) + u_xlat8.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat8.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_8 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_1.xyz * u_xlat16_0.xyw + (-u_xlat16_1.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_8) * u_xlat16_0.xyw + u_xlat16_1.xyz;
    u_xlat12 = float(_UseSet);
    u_xlat3.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat3.xy = vec2(u_xlat12) * u_xlat3.xy + vs_TEXCOORD0.xy;
    u_xlat10_3.xyz = texture(_EmissionMask, u_xlat3.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_5 = (-u_xlat10_3.x) + u_xlat10_3.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5 + u_xlat10_3.x;
    u_xlat16_1.x = (u_xlatb12) ? u_xlat10_3.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
vec2 u_xlat14;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
float u_xlat21;
mediump float u_xlat16_21;
bool u_xlatb21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
float u_xlat24;
int u_xlati24;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat7 = fract(u_xlat0.y);
    u_xlat0.z = u_xlat7 * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_21 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_21 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat21 = (-u_xlat16_21) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat21) * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat0.xyz = vec3(u_xlat16_23) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_22) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_25) + u_xlat0.xyz;
    u_xlat3.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat14.x = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
    u_xlat14.xy = u_xlat0.xy * (-u_xlat14.xx) + u_xlat3.xy;
    u_xlat14.xy = (-u_xlat0.xy) + u_xlat14.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat14.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_14 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_3.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz + u_xlat10_3.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat24 = (-u_xlat16_1.x) + _LightmapThreshold;
    u_xlat24 = u_xlat24 + 1.0;
    u_xlat24 = floor(u_xlat24);
    u_xlat24 = max(u_xlat24, 0.0);
    u_xlati24 = int(u_xlat24);
    u_xlat24 = (u_xlati24 != 0) ? 0.0 : 1.0;
    u_xlat24 = u_xlat24 + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * vec3(u_xlat24);
    u_xlat16_1.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_2.xyz) * u_xlat16_4.xyz + u_xlat16_1.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_14) * u_xlat16_0.xyw + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat3.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat3.xy = vec2(u_xlat21) * u_xlat3.xy + vs_TEXCOORD0.xy;
    u_xlat10_3.xyz = texture(_EmissionMask, u_xlat3.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_8 = (-u_xlat10_3.x) + u_xlat10_3.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + u_xlat10_3.x;
    u_xlat16_1.x = (u_xlatb21) ? u_xlat10_3.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
vec2 u_xlat14;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
float u_xlat21;
mediump float u_xlat16_21;
bool u_xlatb21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
float u_xlat24;
int u_xlati24;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat7 = fract(u_xlat0.y);
    u_xlat0.z = u_xlat7 * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_21 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_21 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat21 = (-u_xlat16_21) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat21) * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat0.xyz = vec3(u_xlat16_23) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_22) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_25) + u_xlat0.xyz;
    u_xlat3.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat14.x = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
    u_xlat14.xy = u_xlat0.xy * (-u_xlat14.xx) + u_xlat3.xy;
    u_xlat14.xy = (-u_xlat0.xy) + u_xlat14.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat14.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_14 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_3.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz + u_xlat10_3.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat24 = (-u_xlat16_1.x) + _LightmapThreshold;
    u_xlat24 = u_xlat24 + 1.0;
    u_xlat24 = floor(u_xlat24);
    u_xlat24 = max(u_xlat24, 0.0);
    u_xlati24 = int(u_xlat24);
    u_xlat24 = (u_xlati24 != 0) ? 0.0 : 1.0;
    u_xlat24 = u_xlat24 + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * vec3(u_xlat24);
    u_xlat16_1.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_2.xyz) * u_xlat16_4.xyz + u_xlat16_1.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_14) * u_xlat16_0.xyw + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat3.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat3.xy = vec2(u_xlat21) * u_xlat3.xy + vs_TEXCOORD0.xy;
    u_xlat10_3.xyz = texture(_EmissionMask, u_xlat3.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_8 = (-u_xlat10_3.x) + u_xlat10_3.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + u_xlat10_3.x;
    u_xlat16_1.x = (u_xlatb21) ? u_xlat10_3.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
vec2 u_xlat14;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
float u_xlat21;
mediump float u_xlat16_21;
bool u_xlatb21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
float u_xlat24;
int u_xlati24;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat7 = fract(u_xlat0.y);
    u_xlat0.z = u_xlat7 * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_21 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_21 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat21 = (-u_xlat16_21) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat21) * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat0.xyz = vec3(u_xlat16_23) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_22) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_25) + u_xlat0.xyz;
    u_xlat3.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat14.x = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
    u_xlat14.xy = u_xlat0.xy * (-u_xlat14.xx) + u_xlat3.xy;
    u_xlat14.xy = (-u_xlat0.xy) + u_xlat14.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat14.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_14 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_3.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz + u_xlat10_3.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat24 = (-u_xlat16_1.x) + _LightmapThreshold;
    u_xlat24 = u_xlat24 + 1.0;
    u_xlat24 = floor(u_xlat24);
    u_xlat24 = max(u_xlat24, 0.0);
    u_xlati24 = int(u_xlat24);
    u_xlat24 = (u_xlati24 != 0) ? 0.0 : 1.0;
    u_xlat24 = u_xlat24 + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * vec3(u_xlat24);
    u_xlat16_1.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_2.xyz) * u_xlat16_4.xyz + u_xlat16_1.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_14) * u_xlat16_0.xyw + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat3.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat3.xy = vec2(u_xlat21) * u_xlat3.xy + vs_TEXCOORD0.xy;
    u_xlat10_3.xyz = texture(_EmissionMask, u_xlat3.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_8 = (-u_xlat10_3.x) + u_xlat10_3.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + u_xlat10_3.x;
    u_xlat16_1.x = (u_xlatb21) ? u_xlat10_3.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bvec2 u_xlatb10;
bool u_xlatb15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat5.x = fract(u_xlat0.y);
    u_xlat0.z = u_xlat5.x * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_3.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat5.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat5.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_17 = float(_UseChannel);
    u_xlat16_18 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_17 = u_xlat16_17 * u_xlat16_18 + u_xlat10_0.x;
    u_xlat16_17 = (u_xlatb15) ? u_xlat10_0.z : u_xlat16_17;
    u_xlat16_4.xyz = vec3(u_xlat16_17) * _Emission.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Emission.www;
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bvec2 u_xlatb10;
bool u_xlatb15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat5.x = fract(u_xlat0.y);
    u_xlat0.z = u_xlat5.x * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_3.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat5.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat5.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_17 = float(_UseChannel);
    u_xlat16_18 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_17 = u_xlat16_17 * u_xlat16_18 + u_xlat10_0.x;
    u_xlat16_17 = (u_xlatb15) ? u_xlat10_0.z : u_xlat16_17;
    u_xlat16_4.xyz = vec3(u_xlat16_17) * _Emission.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Emission.www;
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bvec2 u_xlatb10;
bool u_xlatb15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat5.x = fract(u_xlat0.y);
    u_xlat0.z = u_xlat5.x * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_3.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat5.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat5.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_17 = float(_UseChannel);
    u_xlat16_18 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_17 = u_xlat16_17 * u_xlat16_18 + u_xlat10_0.x;
    u_xlat16_17 = (u_xlatb15) ? u_xlat10_0.z : u_xlat16_17;
    u_xlat16_4.xyz = vec3(u_xlat16_17) * _Emission.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Emission.www;
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "MATCAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec2 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat4;
mediump float u_xlat16_6;
float u_xlat8;
lowp float u_xlat10_8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat4 = fract(u_xlat0.y);
    u_xlat0.z = u_xlat4 * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_3.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat8 = dot(u_xlat0.xyz, vs_TEXCOORD5.xyz);
    u_xlat8 = u_xlat8 + u_xlat8;
    u_xlat0.xy = vs_TEXCOORD5.xy * (-vec2(u_xlat8)) + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + (-vs_TEXCOORD5.xy);
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat0.xy + vs_TEXCOORD5.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_8 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_2.xyz * u_xlat16_0.xyw + (-u_xlat16_2.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_8) * u_xlat16_0.xyw + u_xlat16_2.xyz;
    u_xlat12 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat12) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_6 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb12) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "MATCAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec2 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat4;
mediump float u_xlat16_6;
float u_xlat8;
lowp float u_xlat10_8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat4 = fract(u_xlat0.y);
    u_xlat0.z = u_xlat4 * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_3.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat8 = dot(u_xlat0.xyz, vs_TEXCOORD5.xyz);
    u_xlat8 = u_xlat8 + u_xlat8;
    u_xlat0.xy = vs_TEXCOORD5.xy * (-vec2(u_xlat8)) + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + (-vs_TEXCOORD5.xy);
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat0.xy + vs_TEXCOORD5.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_8 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_2.xyz * u_xlat16_0.xyw + (-u_xlat16_2.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_8) * u_xlat16_0.xyw + u_xlat16_2.xyz;
    u_xlat12 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat12) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_6 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb12) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "MATCAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec2 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat4;
mediump float u_xlat16_6;
float u_xlat8;
lowp float u_xlat10_8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat4 = fract(u_xlat0.y);
    u_xlat0.z = u_xlat4 * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_3.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat8 = dot(u_xlat0.xyz, vs_TEXCOORD5.xyz);
    u_xlat8 = u_xlat8 + u_xlat8;
    u_xlat0.xy = vs_TEXCOORD5.xy * (-vec2(u_xlat8)) + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + (-vs_TEXCOORD5.xy);
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat0.xy + vs_TEXCOORD5.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_8 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_2.xyz * u_xlat16_0.xyw + (-u_xlat16_2.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_8) * u_xlat16_0.xyw + u_xlat16_2.xyz;
    u_xlat12 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat12) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_6 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb12) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
float u_xlat7;
mediump float u_xlat16_9;
bvec2 u_xlatb14;
vec2 u_xlat15;
float u_xlat21;
lowp float u_xlat10_21;
bool u_xlatb21;
mediump float u_xlat16_23;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat7 = fract(u_xlat0.y);
    u_xlat0.z = u_xlat7 * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_3.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_23 = dot(vs_TEXCOORD5.xyz, u_xlat16_5.xyz);
    u_xlat16_24 = dot(vs_TEXCOORD6.xyz, u_xlat16_5.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD7.xyz, u_xlat16_5.xyz);
    u_xlat1.xyz = vec3(u_xlat16_24) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_23) + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_25) + u_xlat1.xyz;
    u_xlat6.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat6.xyz = vec3(u_xlat21) * u_xlat6.xyz;
    u_xlat21 = dot(u_xlat6.xyz, u_xlat1.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat15.xy = u_xlat1.xy * (-vec2(u_xlat21)) + u_xlat6.xy;
    u_xlat15.xy = (-u_xlat1.xy) + u_xlat15.xy;
    u_xlat1.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat15.xy + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_21 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_6.xyz = texture(_MatCap, u_xlat1.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_6.xyz + u_xlat10_6.xyz;
    u_xlat1.xy = u_xlat1.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_1.xyz = texture(_SpecularMap, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SpecularIntensity);
    u_xlat16_23 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat0.x = (-u_xlat16_23) + _LightmapThreshold;
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    u_xlat0.x = (u_xlati0 != 0) ? 0.0 : 1.0;
    u_xlat0.x = u_xlat0.x + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_21) * u_xlat16_0.xyz + u_xlat16_4.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat21) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_9 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb21) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
float u_xlat7;
mediump float u_xlat16_9;
bvec2 u_xlatb14;
vec2 u_xlat15;
float u_xlat21;
lowp float u_xlat10_21;
bool u_xlatb21;
mediump float u_xlat16_23;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat7 = fract(u_xlat0.y);
    u_xlat0.z = u_xlat7 * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_3.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_23 = dot(vs_TEXCOORD5.xyz, u_xlat16_5.xyz);
    u_xlat16_24 = dot(vs_TEXCOORD6.xyz, u_xlat16_5.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD7.xyz, u_xlat16_5.xyz);
    u_xlat1.xyz = vec3(u_xlat16_24) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_23) + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_25) + u_xlat1.xyz;
    u_xlat6.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat6.xyz = vec3(u_xlat21) * u_xlat6.xyz;
    u_xlat21 = dot(u_xlat6.xyz, u_xlat1.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat15.xy = u_xlat1.xy * (-vec2(u_xlat21)) + u_xlat6.xy;
    u_xlat15.xy = (-u_xlat1.xy) + u_xlat15.xy;
    u_xlat1.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat15.xy + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_21 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_6.xyz = texture(_MatCap, u_xlat1.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_6.xyz + u_xlat10_6.xyz;
    u_xlat1.xy = u_xlat1.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_1.xyz = texture(_SpecularMap, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SpecularIntensity);
    u_xlat16_23 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat0.x = (-u_xlat16_23) + _LightmapThreshold;
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    u_xlat0.x = (u_xlati0 != 0) ? 0.0 : 1.0;
    u_xlat0.x = u_xlat0.x + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_21) * u_xlat16_0.xyz + u_xlat16_4.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat21) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_9 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb21) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
float u_xlat7;
mediump float u_xlat16_9;
bvec2 u_xlatb14;
vec2 u_xlat15;
float u_xlat21;
lowp float u_xlat10_21;
bool u_xlatb21;
mediump float u_xlat16_23;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat7 = fract(u_xlat0.y);
    u_xlat0.z = u_xlat7 * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_3.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_23 = dot(vs_TEXCOORD5.xyz, u_xlat16_5.xyz);
    u_xlat16_24 = dot(vs_TEXCOORD6.xyz, u_xlat16_5.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD7.xyz, u_xlat16_5.xyz);
    u_xlat1.xyz = vec3(u_xlat16_24) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_23) + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_25) + u_xlat1.xyz;
    u_xlat6.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat6.xyz = vec3(u_xlat21) * u_xlat6.xyz;
    u_xlat21 = dot(u_xlat6.xyz, u_xlat1.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat15.xy = u_xlat1.xy * (-vec2(u_xlat21)) + u_xlat6.xy;
    u_xlat15.xy = (-u_xlat1.xy) + u_xlat15.xy;
    u_xlat1.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat15.xy + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_21 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_6.xyz = texture(_MatCap, u_xlat1.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_6.xyz + u_xlat10_6.xyz;
    u_xlat1.xy = u_xlat1.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_1.xyz = texture(_SpecularMap, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SpecularIntensity);
    u_xlat16_23 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat0.x = (-u_xlat16_23) + _LightmapThreshold;
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    u_xlat0.x = (u_xlati0 != 0) ? 0.0 : 1.0;
    u_xlat0.x = u_xlat0.x + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_21) * u_xlat16_0.xyz + u_xlat16_4.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat21) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_9 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb21) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
bvec2 u_xlatb12;
mediump float u_xlat16_18;
bool u_xlatb18;
mediump float u_xlat16_20;
mediump float u_xlat16_22;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat6.x = fract(u_xlat0.y);
    u_xlat0.z = u_xlat6.x * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_18 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_18 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat0.x = (-u_xlat16_18) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UseChannel==2);
#else
    u_xlatb18 = _UseChannel==2;
#endif
    u_xlat16_20 = float(_UseChannel);
    u_xlat16_22 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_22 + u_xlat10_0.x;
    u_xlat16_20 = (u_xlatb18) ? u_xlat10_0.z : u_xlat16_20;
    u_xlat16_5.xyz = vec3(u_xlat16_20) * _Emission.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Emission.www;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
bvec2 u_xlatb12;
mediump float u_xlat16_18;
bool u_xlatb18;
mediump float u_xlat16_20;
mediump float u_xlat16_22;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat6.x = fract(u_xlat0.y);
    u_xlat0.z = u_xlat6.x * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_18 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_18 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat0.x = (-u_xlat16_18) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UseChannel==2);
#else
    u_xlatb18 = _UseChannel==2;
#endif
    u_xlat16_20 = float(_UseChannel);
    u_xlat16_22 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_22 + u_xlat10_0.x;
    u_xlat16_20 = (u_xlatb18) ? u_xlat10_0.z : u_xlat16_20;
    u_xlat16_5.xyz = vec3(u_xlat16_20) * _Emission.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Emission.www;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
bvec2 u_xlatb12;
mediump float u_xlat16_18;
bool u_xlatb18;
mediump float u_xlat16_20;
mediump float u_xlat16_22;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat6.x = fract(u_xlat0.y);
    u_xlat0.z = u_xlat6.x * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_18 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_18 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat0.x = (-u_xlat16_18) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UseChannel==2);
#else
    u_xlatb18 = _UseChannel==2;
#endif
    u_xlat16_20 = float(_UseChannel);
    u_xlat16_22 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_22 + u_xlat10_0.x;
    u_xlat16_20 = (u_xlatb18) ? u_xlat10_0.z : u_xlat16_20;
    u_xlat16_5.xyz = vec3(u_xlat16_20) * _Emission.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Emission.www;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
float u_xlat5;
mediump float u_xlat16_7;
vec2 u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
mediump float u_xlat16_17;
mediump float u_xlat16_19;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat5 = fract(u_xlat0.y);
    u_xlat0.z = u_xlat5 * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_15 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_15 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat0.x = (-u_xlat16_15) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_17 = dot(vs_TEXCOORD5.xyz, u_xlat16_4.xyz);
    u_xlat16_19 = dot(vs_TEXCOORD6.xyz, u_xlat16_4.xyz);
    u_xlat16_4.x = dot(vs_TEXCOORD7.xyz, u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(u_xlat16_19) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_17) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat16_4.xxx + u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat10.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat10.x = u_xlat10.x + u_xlat10.x;
    u_xlat10.xy = u_xlat0.xy * (-u_xlat10.xx) + u_xlat1.xy;
    u_xlat10.xy = (-u_xlat0.xy) + u_xlat10.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat10.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_10 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_2.xyz * u_xlat16_0.xyw + (-u_xlat16_2.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_10) * u_xlat16_0.xyw + u_xlat16_2.xyz;
    u_xlat15 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat15) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_7 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb15) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
float u_xlat5;
mediump float u_xlat16_7;
vec2 u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
mediump float u_xlat16_17;
mediump float u_xlat16_19;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat5 = fract(u_xlat0.y);
    u_xlat0.z = u_xlat5 * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_15 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_15 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat0.x = (-u_xlat16_15) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_17 = dot(vs_TEXCOORD5.xyz, u_xlat16_4.xyz);
    u_xlat16_19 = dot(vs_TEXCOORD6.xyz, u_xlat16_4.xyz);
    u_xlat16_4.x = dot(vs_TEXCOORD7.xyz, u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(u_xlat16_19) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_17) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat16_4.xxx + u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat10.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat10.x = u_xlat10.x + u_xlat10.x;
    u_xlat10.xy = u_xlat0.xy * (-u_xlat10.xx) + u_xlat1.xy;
    u_xlat10.xy = (-u_xlat0.xy) + u_xlat10.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat10.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_10 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_2.xyz * u_xlat16_0.xyw + (-u_xlat16_2.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_10) * u_xlat16_0.xyw + u_xlat16_2.xyz;
    u_xlat15 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat15) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_7 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb15) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
float u_xlat5;
mediump float u_xlat16_7;
vec2 u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
mediump float u_xlat16_17;
mediump float u_xlat16_19;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat5 = fract(u_xlat0.y);
    u_xlat0.z = u_xlat5 * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_15 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_15 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat0.x = (-u_xlat16_15) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_17 = dot(vs_TEXCOORD5.xyz, u_xlat16_4.xyz);
    u_xlat16_19 = dot(vs_TEXCOORD6.xyz, u_xlat16_4.xyz);
    u_xlat16_4.x = dot(vs_TEXCOORD7.xyz, u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(u_xlat16_19) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_17) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat16_4.xxx + u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat10.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat10.x = u_xlat10.x + u_xlat10.x;
    u_xlat10.xy = u_xlat0.xy * (-u_xlat10.xx) + u_xlat1.xy;
    u_xlat10.xy = (-u_xlat0.xy) + u_xlat10.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat10.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_10 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_2.xyz * u_xlat16_0.xyw + (-u_xlat16_2.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_10) * u_xlat16_0.xyw + u_xlat16_2.xyz;
    u_xlat15 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat15) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_7 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb15) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_9;
bvec2 u_xlatb14;
vec2 u_xlat15;
float u_xlat21;
mediump float u_xlat16_21;
lowp float u_xlat10_21;
bool u_xlatb21;
mediump float u_xlat16_23;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat7 = fract(u_xlat0.y);
    u_xlat0.z = u_xlat7 * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_21 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_21 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat21 = (-u_xlat16_21) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat21) * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_23 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat1.xyz = vec3(u_xlat16_25) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_23) + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_26) + u_xlat1.xyz;
    u_xlat3.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat15.xy = u_xlat1.xy * (-vec2(u_xlat21)) + u_xlat3.xy;
    u_xlat15.xy = (-u_xlat1.xy) + u_xlat15.xy;
    u_xlat1.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat15.xy + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_21 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_3.xyz = texture(_MatCap, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz + u_xlat10_3.xyz;
    u_xlat1.xy = u_xlat1.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_1.xyz = texture(_SpecularMap, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SpecularIntensity);
    u_xlat16_23 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat0.x = (-u_xlat16_23) + _LightmapThreshold;
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    u_xlat0.x = (u_xlati0 != 0) ? 0.0 : 1.0;
    u_xlat0.x = u_xlat0.x + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_2.xyz) * u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_21) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat21) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_9 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb21) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_9;
bvec2 u_xlatb14;
vec2 u_xlat15;
float u_xlat21;
mediump float u_xlat16_21;
lowp float u_xlat10_21;
bool u_xlatb21;
mediump float u_xlat16_23;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat7 = fract(u_xlat0.y);
    u_xlat0.z = u_xlat7 * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_21 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_21 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat21 = (-u_xlat16_21) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat21) * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_23 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat1.xyz = vec3(u_xlat16_25) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_23) + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_26) + u_xlat1.xyz;
    u_xlat3.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat15.xy = u_xlat1.xy * (-vec2(u_xlat21)) + u_xlat3.xy;
    u_xlat15.xy = (-u_xlat1.xy) + u_xlat15.xy;
    u_xlat1.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat15.xy + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_21 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_3.xyz = texture(_MatCap, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz + u_xlat10_3.xyz;
    u_xlat1.xy = u_xlat1.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_1.xyz = texture(_SpecularMap, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SpecularIntensity);
    u_xlat16_23 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat0.x = (-u_xlat16_23) + _LightmapThreshold;
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    u_xlat0.x = (u_xlati0 != 0) ? 0.0 : 1.0;
    u_xlat0.x = u_xlat0.x + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_2.xyz) * u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_21) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat21) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_9 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb21) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_9;
bvec2 u_xlatb14;
vec2 u_xlat15;
float u_xlat21;
mediump float u_xlat16_21;
lowp float u_xlat10_21;
bool u_xlatb21;
mediump float u_xlat16_23;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat7 = fract(u_xlat0.y);
    u_xlat0.z = u_xlat7 * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_21 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_21 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat21 = (-u_xlat16_21) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat21) * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_23 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat1.xyz = vec3(u_xlat16_25) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_23) + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_26) + u_xlat1.xyz;
    u_xlat3.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat15.xy = u_xlat1.xy * (-vec2(u_xlat21)) + u_xlat3.xy;
    u_xlat15.xy = (-u_xlat1.xy) + u_xlat15.xy;
    u_xlat1.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat15.xy + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_21 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_3.xyz = texture(_MatCap, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz + u_xlat10_3.xyz;
    u_xlat1.xy = u_xlat1.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_1.xyz = texture(_SpecularMap, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SpecularIntensity);
    u_xlat16_23 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat0.x = (-u_xlat16_23) + _LightmapThreshold;
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    u_xlat0.x = (u_xlati0 != 0) ? 0.0 : 1.0;
    u_xlat0.x = u_xlat0.x + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_2.xyz) * u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_21) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat21) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_9 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb21) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bvec2 u_xlatb10;
bool u_xlatb15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat5.x = fract(u_xlat0.y);
    u_xlat0.z = u_xlat5.x * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_3.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat5.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat5.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_17 = float(_UseChannel);
    u_xlat16_18 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_17 = u_xlat16_17 * u_xlat16_18 + u_xlat10_0.x;
    u_xlat16_17 = (u_xlatb15) ? u_xlat10_0.z : u_xlat16_17;
    u_xlat16_4.xyz = vec3(u_xlat16_17) * _Emission.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Emission.www;
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bvec2 u_xlatb10;
bool u_xlatb15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat5.x = fract(u_xlat0.y);
    u_xlat0.z = u_xlat5.x * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_3.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat5.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat5.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_17 = float(_UseChannel);
    u_xlat16_18 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_17 = u_xlat16_17 * u_xlat16_18 + u_xlat10_0.x;
    u_xlat16_17 = (u_xlatb15) ? u_xlat10_0.z : u_xlat16_17;
    u_xlat16_4.xyz = vec3(u_xlat16_17) * _Emission.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Emission.www;
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bvec2 u_xlatb10;
bool u_xlatb15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat5.x = fract(u_xlat0.y);
    u_xlat0.z = u_xlat5.x * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_3.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat5.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat5.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_17 = float(_UseChannel);
    u_xlat16_18 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_17 = u_xlat16_17 * u_xlat16_18 + u_xlat10_0.x;
    u_xlat16_17 = (u_xlatb15) ? u_xlat10_0.z : u_xlat16_17;
    u_xlat16_4.xyz = vec3(u_xlat16_17) * _Emission.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Emission.www;
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "MATCAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec2 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat4;
mediump float u_xlat16_6;
float u_xlat8;
lowp float u_xlat10_8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat4 = fract(u_xlat0.y);
    u_xlat0.z = u_xlat4 * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_3.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat8 = dot(u_xlat0.xyz, vs_TEXCOORD5.xyz);
    u_xlat8 = u_xlat8 + u_xlat8;
    u_xlat0.xy = vs_TEXCOORD5.xy * (-vec2(u_xlat8)) + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + (-vs_TEXCOORD5.xy);
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat0.xy + vs_TEXCOORD5.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_8 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_2.xyz * u_xlat16_0.xyw + (-u_xlat16_2.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_8) * u_xlat16_0.xyw + u_xlat16_2.xyz;
    u_xlat12 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat12) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_6 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb12) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "MATCAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec2 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat4;
mediump float u_xlat16_6;
float u_xlat8;
lowp float u_xlat10_8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat4 = fract(u_xlat0.y);
    u_xlat0.z = u_xlat4 * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_3.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat8 = dot(u_xlat0.xyz, vs_TEXCOORD5.xyz);
    u_xlat8 = u_xlat8 + u_xlat8;
    u_xlat0.xy = vs_TEXCOORD5.xy * (-vec2(u_xlat8)) + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + (-vs_TEXCOORD5.xy);
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat0.xy + vs_TEXCOORD5.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_8 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_2.xyz * u_xlat16_0.xyw + (-u_xlat16_2.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_8) * u_xlat16_0.xyw + u_xlat16_2.xyz;
    u_xlat12 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat12) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_6 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb12) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "MATCAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec2 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat4;
mediump float u_xlat16_6;
float u_xlat8;
lowp float u_xlat10_8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat4 = fract(u_xlat0.y);
    u_xlat0.z = u_xlat4 * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_3.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat8 = dot(u_xlat0.xyz, vs_TEXCOORD5.xyz);
    u_xlat8 = u_xlat8 + u_xlat8;
    u_xlat0.xy = vs_TEXCOORD5.xy * (-vec2(u_xlat8)) + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + (-vs_TEXCOORD5.xy);
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat0.xy + vs_TEXCOORD5.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_8 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_2.xyz * u_xlat16_0.xyw + (-u_xlat16_2.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_8) * u_xlat16_0.xyw + u_xlat16_2.xyz;
    u_xlat12 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat12) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_6 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb12) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
float u_xlat7;
mediump float u_xlat16_9;
bvec2 u_xlatb14;
vec2 u_xlat15;
float u_xlat21;
lowp float u_xlat10_21;
bool u_xlatb21;
mediump float u_xlat16_23;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat7 = fract(u_xlat0.y);
    u_xlat0.z = u_xlat7 * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_3.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_23 = dot(vs_TEXCOORD5.xyz, u_xlat16_5.xyz);
    u_xlat16_24 = dot(vs_TEXCOORD6.xyz, u_xlat16_5.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD7.xyz, u_xlat16_5.xyz);
    u_xlat1.xyz = vec3(u_xlat16_24) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_23) + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_25) + u_xlat1.xyz;
    u_xlat6.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat6.xyz = vec3(u_xlat21) * u_xlat6.xyz;
    u_xlat21 = dot(u_xlat6.xyz, u_xlat1.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat15.xy = u_xlat1.xy * (-vec2(u_xlat21)) + u_xlat6.xy;
    u_xlat15.xy = (-u_xlat1.xy) + u_xlat15.xy;
    u_xlat1.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat15.xy + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_21 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_6.xyz = texture(_MatCap, u_xlat1.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_6.xyz + u_xlat10_6.xyz;
    u_xlat1.xy = u_xlat1.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_1.xyz = texture(_SpecularMap, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SpecularIntensity);
    u_xlat16_23 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat0.x = (-u_xlat16_23) + _LightmapThreshold;
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    u_xlat0.x = (u_xlati0 != 0) ? 0.0 : 1.0;
    u_xlat0.x = u_xlat0.x + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_21) * u_xlat16_0.xyz + u_xlat16_4.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat21) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_9 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb21) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
float u_xlat7;
mediump float u_xlat16_9;
bvec2 u_xlatb14;
vec2 u_xlat15;
float u_xlat21;
lowp float u_xlat10_21;
bool u_xlatb21;
mediump float u_xlat16_23;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat7 = fract(u_xlat0.y);
    u_xlat0.z = u_xlat7 * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_3.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_23 = dot(vs_TEXCOORD5.xyz, u_xlat16_5.xyz);
    u_xlat16_24 = dot(vs_TEXCOORD6.xyz, u_xlat16_5.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD7.xyz, u_xlat16_5.xyz);
    u_xlat1.xyz = vec3(u_xlat16_24) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_23) + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_25) + u_xlat1.xyz;
    u_xlat6.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat6.xyz = vec3(u_xlat21) * u_xlat6.xyz;
    u_xlat21 = dot(u_xlat6.xyz, u_xlat1.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat15.xy = u_xlat1.xy * (-vec2(u_xlat21)) + u_xlat6.xy;
    u_xlat15.xy = (-u_xlat1.xy) + u_xlat15.xy;
    u_xlat1.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat15.xy + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_21 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_6.xyz = texture(_MatCap, u_xlat1.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_6.xyz + u_xlat10_6.xyz;
    u_xlat1.xy = u_xlat1.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_1.xyz = texture(_SpecularMap, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SpecularIntensity);
    u_xlat16_23 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat0.x = (-u_xlat16_23) + _LightmapThreshold;
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    u_xlat0.x = (u_xlati0 != 0) ? 0.0 : 1.0;
    u_xlat0.x = u_xlat0.x + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_21) * u_xlat16_0.xyz + u_xlat16_4.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat21) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_9 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb21) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
float u_xlat7;
mediump float u_xlat16_9;
bvec2 u_xlatb14;
vec2 u_xlat15;
float u_xlat21;
lowp float u_xlat10_21;
bool u_xlatb21;
mediump float u_xlat16_23;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat7 = fract(u_xlat0.y);
    u_xlat0.z = u_xlat7 * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_3.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_23 = dot(vs_TEXCOORD5.xyz, u_xlat16_5.xyz);
    u_xlat16_24 = dot(vs_TEXCOORD6.xyz, u_xlat16_5.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD7.xyz, u_xlat16_5.xyz);
    u_xlat1.xyz = vec3(u_xlat16_24) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_23) + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_25) + u_xlat1.xyz;
    u_xlat6.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat6.xyz = vec3(u_xlat21) * u_xlat6.xyz;
    u_xlat21 = dot(u_xlat6.xyz, u_xlat1.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat15.xy = u_xlat1.xy * (-vec2(u_xlat21)) + u_xlat6.xy;
    u_xlat15.xy = (-u_xlat1.xy) + u_xlat15.xy;
    u_xlat1.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat15.xy + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_21 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_6.xyz = texture(_MatCap, u_xlat1.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_6.xyz + u_xlat10_6.xyz;
    u_xlat1.xy = u_xlat1.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_1.xyz = texture(_SpecularMap, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SpecularIntensity);
    u_xlat16_23 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat0.x = (-u_xlat16_23) + _LightmapThreshold;
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    u_xlat0.x = (u_xlati0 != 0) ? 0.0 : 1.0;
    u_xlat0.x = u_xlat0.x + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_21) * u_xlat16_0.xyz + u_xlat16_4.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat21) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_9 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb21) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
bvec2 u_xlatb12;
mediump float u_xlat16_18;
bool u_xlatb18;
mediump float u_xlat16_20;
mediump float u_xlat16_22;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat6.x = fract(u_xlat0.y);
    u_xlat0.z = u_xlat6.x * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_18 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_18 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat0.x = (-u_xlat16_18) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UseChannel==2);
#else
    u_xlatb18 = _UseChannel==2;
#endif
    u_xlat16_20 = float(_UseChannel);
    u_xlat16_22 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_22 + u_xlat10_0.x;
    u_xlat16_20 = (u_xlatb18) ? u_xlat10_0.z : u_xlat16_20;
    u_xlat16_5.xyz = vec3(u_xlat16_20) * _Emission.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Emission.www;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
bvec2 u_xlatb12;
mediump float u_xlat16_18;
bool u_xlatb18;
mediump float u_xlat16_20;
mediump float u_xlat16_22;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat6.x = fract(u_xlat0.y);
    u_xlat0.z = u_xlat6.x * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_18 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_18 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat0.x = (-u_xlat16_18) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UseChannel==2);
#else
    u_xlatb18 = _UseChannel==2;
#endif
    u_xlat16_20 = float(_UseChannel);
    u_xlat16_22 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_22 + u_xlat10_0.x;
    u_xlat16_20 = (u_xlatb18) ? u_xlat10_0.z : u_xlat16_20;
    u_xlat16_5.xyz = vec3(u_xlat16_20) * _Emission.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Emission.www;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
bvec2 u_xlatb12;
mediump float u_xlat16_18;
bool u_xlatb18;
mediump float u_xlat16_20;
mediump float u_xlat16_22;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat6.x = fract(u_xlat0.y);
    u_xlat0.z = u_xlat6.x * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_18 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_18 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat0.x = (-u_xlat16_18) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UseChannel==2);
#else
    u_xlatb18 = _UseChannel==2;
#endif
    u_xlat16_20 = float(_UseChannel);
    u_xlat16_22 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_22 + u_xlat10_0.x;
    u_xlat16_20 = (u_xlatb18) ? u_xlat10_0.z : u_xlat16_20;
    u_xlat16_5.xyz = vec3(u_xlat16_20) * _Emission.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Emission.www;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
float u_xlat5;
mediump float u_xlat16_7;
vec2 u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
mediump float u_xlat16_17;
mediump float u_xlat16_19;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat5 = fract(u_xlat0.y);
    u_xlat0.z = u_xlat5 * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_15 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_15 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat0.x = (-u_xlat16_15) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_17 = dot(vs_TEXCOORD5.xyz, u_xlat16_4.xyz);
    u_xlat16_19 = dot(vs_TEXCOORD6.xyz, u_xlat16_4.xyz);
    u_xlat16_4.x = dot(vs_TEXCOORD7.xyz, u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(u_xlat16_19) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_17) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat16_4.xxx + u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat10.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat10.x = u_xlat10.x + u_xlat10.x;
    u_xlat10.xy = u_xlat0.xy * (-u_xlat10.xx) + u_xlat1.xy;
    u_xlat10.xy = (-u_xlat0.xy) + u_xlat10.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat10.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_10 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_2.xyz * u_xlat16_0.xyw + (-u_xlat16_2.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_10) * u_xlat16_0.xyw + u_xlat16_2.xyz;
    u_xlat15 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat15) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_7 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb15) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
float u_xlat5;
mediump float u_xlat16_7;
vec2 u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
mediump float u_xlat16_17;
mediump float u_xlat16_19;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat5 = fract(u_xlat0.y);
    u_xlat0.z = u_xlat5 * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_15 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_15 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat0.x = (-u_xlat16_15) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_17 = dot(vs_TEXCOORD5.xyz, u_xlat16_4.xyz);
    u_xlat16_19 = dot(vs_TEXCOORD6.xyz, u_xlat16_4.xyz);
    u_xlat16_4.x = dot(vs_TEXCOORD7.xyz, u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(u_xlat16_19) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_17) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat16_4.xxx + u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat10.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat10.x = u_xlat10.x + u_xlat10.x;
    u_xlat10.xy = u_xlat0.xy * (-u_xlat10.xx) + u_xlat1.xy;
    u_xlat10.xy = (-u_xlat0.xy) + u_xlat10.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat10.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_10 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_2.xyz * u_xlat16_0.xyw + (-u_xlat16_2.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_10) * u_xlat16_0.xyw + u_xlat16_2.xyz;
    u_xlat15 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat15) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_7 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb15) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
float u_xlat5;
mediump float u_xlat16_7;
vec2 u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
mediump float u_xlat16_17;
mediump float u_xlat16_19;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat5 = fract(u_xlat0.y);
    u_xlat0.z = u_xlat5 * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_15 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_15 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat0.x = (-u_xlat16_15) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat0.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_17 = dot(vs_TEXCOORD5.xyz, u_xlat16_4.xyz);
    u_xlat16_19 = dot(vs_TEXCOORD6.xyz, u_xlat16_4.xyz);
    u_xlat16_4.x = dot(vs_TEXCOORD7.xyz, u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(u_xlat16_19) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_17) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat16_4.xxx + u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat10.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat10.x = u_xlat10.x + u_xlat10.x;
    u_xlat10.xy = u_xlat0.xy * (-u_xlat10.xx) + u_xlat1.xy;
    u_xlat10.xy = (-u_xlat0.xy) + u_xlat10.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat10.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_10 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_2.xyz * u_xlat16_0.xyw + (-u_xlat16_2.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_10) * u_xlat16_0.xyw + u_xlat16_2.xyz;
    u_xlat15 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat15) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_7 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb15) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_9;
bvec2 u_xlatb14;
vec2 u_xlat15;
float u_xlat21;
mediump float u_xlat16_21;
lowp float u_xlat10_21;
bool u_xlatb21;
mediump float u_xlat16_23;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat7 = fract(u_xlat0.y);
    u_xlat0.z = u_xlat7 * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_21 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_21 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat21 = (-u_xlat16_21) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat21) * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_23 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat1.xyz = vec3(u_xlat16_25) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_23) + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_26) + u_xlat1.xyz;
    u_xlat3.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat15.xy = u_xlat1.xy * (-vec2(u_xlat21)) + u_xlat3.xy;
    u_xlat15.xy = (-u_xlat1.xy) + u_xlat15.xy;
    u_xlat1.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat15.xy + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_21 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_3.xyz = texture(_MatCap, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz + u_xlat10_3.xyz;
    u_xlat1.xy = u_xlat1.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_1.xyz = texture(_SpecularMap, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SpecularIntensity);
    u_xlat16_23 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat0.x = (-u_xlat16_23) + _LightmapThreshold;
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    u_xlat0.x = (u_xlati0 != 0) ? 0.0 : 1.0;
    u_xlat0.x = u_xlat0.x + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_2.xyz) * u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_21) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat21) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_9 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb21) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_9;
bvec2 u_xlatb14;
vec2 u_xlat15;
float u_xlat21;
mediump float u_xlat16_21;
lowp float u_xlat10_21;
bool u_xlatb21;
mediump float u_xlat16_23;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat7 = fract(u_xlat0.y);
    u_xlat0.z = u_xlat7 * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_21 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_21 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat21 = (-u_xlat16_21) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat21) * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_23 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat1.xyz = vec3(u_xlat16_25) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_23) + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_26) + u_xlat1.xyz;
    u_xlat3.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat15.xy = u_xlat1.xy * (-vec2(u_xlat21)) + u_xlat3.xy;
    u_xlat15.xy = (-u_xlat1.xy) + u_xlat15.xy;
    u_xlat1.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat15.xy + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_21 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_3.xyz = texture(_MatCap, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz + u_xlat10_3.xyz;
    u_xlat1.xy = u_xlat1.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_1.xyz = texture(_SpecularMap, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SpecularIntensity);
    u_xlat16_23 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat0.x = (-u_xlat16_23) + _LightmapThreshold;
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    u_xlat0.x = (u_xlati0 != 0) ? 0.0 : 1.0;
    u_xlat0.x = u_xlat0.x + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_2.xyz) * u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_21) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat21) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_9 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb21) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_9;
bvec2 u_xlatb14;
vec2 u_xlat15;
float u_xlat21;
mediump float u_xlat16_21;
lowp float u_xlat10_21;
bool u_xlatb21;
mediump float u_xlat16_23;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
    u_xlat7 = fract(u_xlat0.y);
    u_xlat0.z = u_xlat7 * 0.0625 + unity_LODFade.y;
    u_xlat10_0.x = texture(_DitherMaskLOD2D, u_xlat0.xz).w;
    u_xlat0.x = u_xlat10_0.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_21 = dot(u_xlat16_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat3.x = u_xlat16_21 * _LightmapColorScale;
    u_xlat3.y = 0.5;
    u_xlat10_3.xyz = texture(_LightmapColorChange, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_2.xyz = u_xlat16_3.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat21 = (-u_xlat16_21) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat21) * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_23 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat1.xyz = vec3(u_xlat16_25) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_23) + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_26) + u_xlat1.xyz;
    u_xlat3.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat15.xy = u_xlat1.xy * (-vec2(u_xlat21)) + u_xlat3.xy;
    u_xlat15.xy = (-u_xlat1.xy) + u_xlat15.xy;
    u_xlat1.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat15.xy + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_21 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_3.xyz = texture(_MatCap, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz + u_xlat10_3.xyz;
    u_xlat1.xy = u_xlat1.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_1.xyz = texture(_SpecularMap, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SpecularIntensity);
    u_xlat16_23 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat0.x = (-u_xlat16_23) + _LightmapThreshold;
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    u_xlat0.x = (u_xlati0 != 0) ? 0.0 : 1.0;
    u_xlat0.x = u_xlat0.x + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_2.xyz) * u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_21) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat21) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_9 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb21) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
lowp float u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
lowp vec3 u_xlat10_5;
bvec2 u_xlatb10;
bool u_xlatb15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_5.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb2 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb2){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_2 = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_16 = u_xlat10_2;
    } else {
        u_xlat16_16 = 1.0;
    //ENDIF
    }
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_3.x = unity_Lightmap_HDR.x * u_xlat16_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_16 = (-u_xlat16_16) + 1.0;
    u_xlat16_16 = (-u_xlat16_3.x) * u_xlat16_16 + 1.0;
    u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;
    u_xlat16_3.xyz = u_xlat10_5.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat5.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat5.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_16 = float(_UseChannel);
    u_xlat16_18 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_16 = u_xlat16_16 * u_xlat16_18 + u_xlat10_0.x;
    u_xlat16_16 = (u_xlatb15) ? u_xlat10_0.z : u_xlat16_16;
    u_xlat16_4.xyz = vec3(u_xlat16_16) * _Emission.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Emission.www;
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_1.xyz + u_xlat16_4.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
lowp float u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
lowp vec3 u_xlat10_5;
bvec2 u_xlatb10;
bool u_xlatb15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_5.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb2 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb2){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_2 = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_16 = u_xlat10_2;
    } else {
        u_xlat16_16 = 1.0;
    //ENDIF
    }
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_3.x = unity_Lightmap_HDR.x * u_xlat16_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_16 = (-u_xlat16_16) + 1.0;
    u_xlat16_16 = (-u_xlat16_3.x) * u_xlat16_16 + 1.0;
    u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;
    u_xlat16_3.xyz = u_xlat10_5.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat5.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat5.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_16 = float(_UseChannel);
    u_xlat16_18 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_16 = u_xlat16_16 * u_xlat16_18 + u_xlat10_0.x;
    u_xlat16_16 = (u_xlatb15) ? u_xlat10_0.z : u_xlat16_16;
    u_xlat16_4.xyz = vec3(u_xlat16_16) * _Emission.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Emission.www;
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_1.xyz + u_xlat16_4.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
lowp float u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
lowp vec3 u_xlat10_5;
bvec2 u_xlatb10;
bool u_xlatb15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_5.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb2 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb2){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_2 = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_16 = u_xlat10_2;
    } else {
        u_xlat16_16 = 1.0;
    //ENDIF
    }
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_3.x = unity_Lightmap_HDR.x * u_xlat16_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_16 = (-u_xlat16_16) + 1.0;
    u_xlat16_16 = (-u_xlat16_3.x) * u_xlat16_16 + 1.0;
    u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;
    u_xlat16_3.xyz = u_xlat10_5.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat5.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat5.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_16 = float(_UseChannel);
    u_xlat16_18 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_16 = u_xlat16_16 * u_xlat16_18 + u_xlat10_0.x;
    u_xlat16_16 = (u_xlatb15) ? u_xlat10_0.z : u_xlat16_16;
    u_xlat16_4.xyz = vec3(u_xlat16_16) * _Emission.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Emission.www;
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_1.xyz + u_xlat16_4.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
lowp vec3 u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_4;
mediump float u_xlat16_5;
float u_xlat8;
lowp float u_xlat10_8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
mediump float u_xlat16_13;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb2 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb2){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_2.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_13 = u_xlat10_2.x;
    } else {
        u_xlat16_13 = 1.0;
    //ENDIF
    }
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_3.x = unity_Lightmap_HDR.x * u_xlat16_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_13 = (-u_xlat16_13) + 1.0;
    u_xlat16_13 = (-u_xlat16_3.x) * u_xlat16_13 + 1.0;
    u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
    u_xlat16_3.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat8 = dot(u_xlat0.xyz, vs_TEXCOORD5.xyz);
    u_xlat8 = u_xlat8 + u_xlat8;
    u_xlat0.xy = vs_TEXCOORD5.xy * (-vec2(u_xlat8)) + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + (-vs_TEXCOORD5.xy);
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat0.xy + vs_TEXCOORD5.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_8 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_1.xyz * u_xlat16_0.xyw + (-u_xlat16_1.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_8) * u_xlat16_0.xyw + u_xlat16_1.xyz;
    u_xlat12 = float(_UseSet);
    u_xlat2.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat2.xy = vec2(u_xlat12) * u_xlat2.xy + vs_TEXCOORD0.xy;
    u_xlat10_2.xyz = texture(_EmissionMask, u_xlat2.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_5 = (-u_xlat10_2.x) + u_xlat10_2.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5 + u_xlat10_2.x;
    u_xlat16_1.x = (u_xlatb12) ? u_xlat10_2.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
lowp vec3 u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_4;
mediump float u_xlat16_5;
float u_xlat8;
lowp float u_xlat10_8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
mediump float u_xlat16_13;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb2 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb2){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_2.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_13 = u_xlat10_2.x;
    } else {
        u_xlat16_13 = 1.0;
    //ENDIF
    }
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_3.x = unity_Lightmap_HDR.x * u_xlat16_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_13 = (-u_xlat16_13) + 1.0;
    u_xlat16_13 = (-u_xlat16_3.x) * u_xlat16_13 + 1.0;
    u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
    u_xlat16_3.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat8 = dot(u_xlat0.xyz, vs_TEXCOORD5.xyz);
    u_xlat8 = u_xlat8 + u_xlat8;
    u_xlat0.xy = vs_TEXCOORD5.xy * (-vec2(u_xlat8)) + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + (-vs_TEXCOORD5.xy);
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat0.xy + vs_TEXCOORD5.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_8 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_1.xyz * u_xlat16_0.xyw + (-u_xlat16_1.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_8) * u_xlat16_0.xyw + u_xlat16_1.xyz;
    u_xlat12 = float(_UseSet);
    u_xlat2.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat2.xy = vec2(u_xlat12) * u_xlat2.xy + vs_TEXCOORD0.xy;
    u_xlat10_2.xyz = texture(_EmissionMask, u_xlat2.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_5 = (-u_xlat10_2.x) + u_xlat10_2.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5 + u_xlat10_2.x;
    u_xlat16_1.x = (u_xlatb12) ? u_xlat10_2.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
lowp vec3 u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_4;
mediump float u_xlat16_5;
float u_xlat8;
lowp float u_xlat10_8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
mediump float u_xlat16_13;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb2 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb2){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_2.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_13 = u_xlat10_2.x;
    } else {
        u_xlat16_13 = 1.0;
    //ENDIF
    }
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_3.x = unity_Lightmap_HDR.x * u_xlat16_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_13 = (-u_xlat16_13) + 1.0;
    u_xlat16_13 = (-u_xlat16_3.x) * u_xlat16_13 + 1.0;
    u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
    u_xlat16_3.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat8 = dot(u_xlat0.xyz, vs_TEXCOORD5.xyz);
    u_xlat8 = u_xlat8 + u_xlat8;
    u_xlat0.xy = vs_TEXCOORD5.xy * (-vec2(u_xlat8)) + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + (-vs_TEXCOORD5.xy);
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat0.xy + vs_TEXCOORD5.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_8 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_1.xyz * u_xlat16_0.xyw + (-u_xlat16_1.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_8) * u_xlat16_0.xyw + u_xlat16_1.xyz;
    u_xlat12 = float(_UseSet);
    u_xlat2.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat2.xy = vec2(u_xlat12) * u_xlat2.xy + vs_TEXCOORD0.xy;
    u_xlat10_2.xyz = texture(_EmissionMask, u_xlat2.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_5 = (-u_xlat10_2.x) + u_xlat10_2.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5 + u_xlat10_2.x;
    u_xlat16_1.x = (u_xlatb12) ? u_xlat10_2.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_7;
mediump float u_xlat16_8;
vec2 u_xlat14;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_22;
float u_xlat23;
int u_xlati23;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_7.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb2 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb2){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_2.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_22 = u_xlat10_2.x;
    } else {
        u_xlat16_22 = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_24 = unity_Lightmap_HDR.x * u_xlat16_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
#else
    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
#endif
    u_xlat16_22 = (-u_xlat16_22) + 1.0;
    u_xlat16_22 = (-u_xlat16_24) * u_xlat16_22 + 1.0;
    u_xlat16_3.xyz = vec3(u_xlat16_22) * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat10_7.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_24 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat0.xyz = vec3(u_xlat16_24) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_22) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_25) + u_xlat0.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat14.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
    u_xlat14.xy = u_xlat0.xy * (-u_xlat14.xx) + u_xlat2.xy;
    u_xlat14.xy = (-u_xlat0.xy) + u_xlat14.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat14.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_14 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_2.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz + u_xlat10_2.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat23 = (-u_xlat16_1.x) + _LightmapThreshold;
    u_xlat23 = u_xlat23 + 1.0;
    u_xlat23 = floor(u_xlat23);
    u_xlat23 = max(u_xlat23, 0.0);
    u_xlati23 = int(u_xlat23);
    u_xlat23 = (u_xlati23 != 0) ? 0.0 : 1.0;
    u_xlat23 = u_xlat23 + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * vec3(u_xlat23);
    u_xlat16_1.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_4.xyz) * u_xlat16_3.xyz + u_xlat16_1.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_14) * u_xlat16_0.xyw + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat2.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat2.xy = vec2(u_xlat21) * u_xlat2.xy + vs_TEXCOORD0.xy;
    u_xlat10_2.xyz = texture(_EmissionMask, u_xlat2.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_8 = (-u_xlat10_2.x) + u_xlat10_2.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + u_xlat10_2.x;
    u_xlat16_1.x = (u_xlatb21) ? u_xlat10_2.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_7;
mediump float u_xlat16_8;
vec2 u_xlat14;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_22;
float u_xlat23;
int u_xlati23;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_7.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb2 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb2){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_2.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_22 = u_xlat10_2.x;
    } else {
        u_xlat16_22 = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_24 = unity_Lightmap_HDR.x * u_xlat16_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
#else
    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
#endif
    u_xlat16_22 = (-u_xlat16_22) + 1.0;
    u_xlat16_22 = (-u_xlat16_24) * u_xlat16_22 + 1.0;
    u_xlat16_3.xyz = vec3(u_xlat16_22) * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat10_7.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_24 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat0.xyz = vec3(u_xlat16_24) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_22) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_25) + u_xlat0.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat14.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
    u_xlat14.xy = u_xlat0.xy * (-u_xlat14.xx) + u_xlat2.xy;
    u_xlat14.xy = (-u_xlat0.xy) + u_xlat14.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat14.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_14 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_2.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz + u_xlat10_2.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat23 = (-u_xlat16_1.x) + _LightmapThreshold;
    u_xlat23 = u_xlat23 + 1.0;
    u_xlat23 = floor(u_xlat23);
    u_xlat23 = max(u_xlat23, 0.0);
    u_xlati23 = int(u_xlat23);
    u_xlat23 = (u_xlati23 != 0) ? 0.0 : 1.0;
    u_xlat23 = u_xlat23 + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * vec3(u_xlat23);
    u_xlat16_1.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_4.xyz) * u_xlat16_3.xyz + u_xlat16_1.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_14) * u_xlat16_0.xyw + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat2.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat2.xy = vec2(u_xlat21) * u_xlat2.xy + vs_TEXCOORD0.xy;
    u_xlat10_2.xyz = texture(_EmissionMask, u_xlat2.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_8 = (-u_xlat10_2.x) + u_xlat10_2.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + u_xlat10_2.x;
    u_xlat16_1.x = (u_xlatb21) ? u_xlat10_2.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_7;
mediump float u_xlat16_8;
vec2 u_xlat14;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_22;
float u_xlat23;
int u_xlati23;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_7.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb2 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb2){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_2.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_22 = u_xlat10_2.x;
    } else {
        u_xlat16_22 = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_24 = unity_Lightmap_HDR.x * u_xlat16_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
#else
    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
#endif
    u_xlat16_22 = (-u_xlat16_22) + 1.0;
    u_xlat16_22 = (-u_xlat16_24) * u_xlat16_22 + 1.0;
    u_xlat16_3.xyz = vec3(u_xlat16_22) * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat10_7.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_24 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat0.xyz = vec3(u_xlat16_24) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_22) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_25) + u_xlat0.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat14.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
    u_xlat14.xy = u_xlat0.xy * (-u_xlat14.xx) + u_xlat2.xy;
    u_xlat14.xy = (-u_xlat0.xy) + u_xlat14.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat14.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_14 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_2.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz + u_xlat10_2.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat23 = (-u_xlat16_1.x) + _LightmapThreshold;
    u_xlat23 = u_xlat23 + 1.0;
    u_xlat23 = floor(u_xlat23);
    u_xlat23 = max(u_xlat23, 0.0);
    u_xlati23 = int(u_xlat23);
    u_xlat23 = (u_xlati23 != 0) ? 0.0 : 1.0;
    u_xlat23 = u_xlat23 + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * vec3(u_xlat23);
    u_xlat16_1.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_4.xyz) * u_xlat16_3.xyz + u_xlat16_1.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_14) * u_xlat16_0.xyw + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat2.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat2.xy = vec2(u_xlat21) * u_xlat2.xy + vs_TEXCOORD0.xy;
    u_xlat10_2.xyz = texture(_EmissionMask, u_xlat2.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_8 = (-u_xlat10_2.x) + u_xlat10_2.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + u_xlat10_2.x;
    u_xlat16_1.x = (u_xlatb21) ? u_xlat10_2.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
lowp float u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
lowp vec3 u_xlat10_6;
mediump float u_xlat16_7;
mediump vec3 u_xlat16_8;
lowp vec3 u_xlat10_8;
bvec2 u_xlatb12;
bool u_xlatb18;
mediump float u_xlat16_19;
mediump float u_xlat16_21;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_6.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb2 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb2){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_2 = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_19 = u_xlat10_2;
    } else {
        u_xlat16_19 = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_2 = dot(u_xlat16_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_2 * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_8.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_8.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_3.xyz = u_xlat16_8.xyz * _ShadowColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_3.xyz);
    u_xlat16_1.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat2.x = (-u_xlat16_2) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_1.xyz;
    u_xlat16_1.x = unity_Lightmap_HDR.x * u_xlat16_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_7 = (-u_xlat16_19) + 1.0;
    u_xlat16_1.x = (-u_xlat16_1.x) * u_xlat16_7 + 1.0;
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat10_6.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UseChannel==2);
#else
    u_xlatb18 = _UseChannel==2;
#endif
    u_xlat16_19 = float(_UseChannel);
    u_xlat16_21 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_21 + u_xlat10_0.x;
    u_xlat16_19 = (u_xlatb18) ? u_xlat10_0.z : u_xlat16_19;
    u_xlat16_5.xyz = vec3(u_xlat16_19) * _Emission.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Emission.www;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_1.xyz + u_xlat16_5.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
lowp float u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
lowp vec3 u_xlat10_6;
mediump float u_xlat16_7;
mediump vec3 u_xlat16_8;
lowp vec3 u_xlat10_8;
bvec2 u_xlatb12;
bool u_xlatb18;
mediump float u_xlat16_19;
mediump float u_xlat16_21;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_6.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb2 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb2){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_2 = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_19 = u_xlat10_2;
    } else {
        u_xlat16_19 = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_2 = dot(u_xlat16_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_2 * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_8.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_8.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_3.xyz = u_xlat16_8.xyz * _ShadowColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_3.xyz);
    u_xlat16_1.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat2.x = (-u_xlat16_2) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_1.xyz;
    u_xlat16_1.x = unity_Lightmap_HDR.x * u_xlat16_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_7 = (-u_xlat16_19) + 1.0;
    u_xlat16_1.x = (-u_xlat16_1.x) * u_xlat16_7 + 1.0;
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat10_6.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UseChannel==2);
#else
    u_xlatb18 = _UseChannel==2;
#endif
    u_xlat16_19 = float(_UseChannel);
    u_xlat16_21 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_21 + u_xlat10_0.x;
    u_xlat16_19 = (u_xlatb18) ? u_xlat10_0.z : u_xlat16_19;
    u_xlat16_5.xyz = vec3(u_xlat16_19) * _Emission.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Emission.www;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_1.xyz + u_xlat16_5.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
lowp float u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
lowp vec3 u_xlat10_6;
mediump float u_xlat16_7;
mediump vec3 u_xlat16_8;
lowp vec3 u_xlat10_8;
bvec2 u_xlatb12;
bool u_xlatb18;
mediump float u_xlat16_19;
mediump float u_xlat16_21;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_6.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb2 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb2){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_2 = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_19 = u_xlat10_2;
    } else {
        u_xlat16_19 = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_2 = dot(u_xlat16_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_2 * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_8.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_8.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_3.xyz = u_xlat16_8.xyz * _ShadowColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_3.xyz);
    u_xlat16_1.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat2.x = (-u_xlat16_2) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_1.xyz;
    u_xlat16_1.x = unity_Lightmap_HDR.x * u_xlat16_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_7 = (-u_xlat16_19) + 1.0;
    u_xlat16_1.x = (-u_xlat16_1.x) * u_xlat16_7 + 1.0;
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat10_6.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UseChannel==2);
#else
    u_xlatb18 = _UseChannel==2;
#endif
    u_xlat16_19 = float(_UseChannel);
    u_xlat16_21 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_21 + u_xlat10_0.x;
    u_xlat16_19 = (u_xlatb18) ? u_xlat10_0.z : u_xlat16_19;
    u_xlat16_5.xyz = vec3(u_xlat16_19) * _Emission.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Emission.www;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_1.xyz + u_xlat16_5.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
lowp vec3 u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
lowp vec3 u_xlat10_5;
mediump float u_xlat16_6;
mediump vec3 u_xlat16_7;
lowp vec3 u_xlat10_7;
vec2 u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_5.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb2 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb2){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_2.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_16 = u_xlat10_2.x;
    } else {
        u_xlat16_16 = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_2 = dot(u_xlat16_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_2 * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_7.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_7.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_3.xyz = u_xlat16_7.xyz * _ShadowColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_3.xyz);
    u_xlat16_1.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat2.x = (-u_xlat16_2) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_1.xyz;
    u_xlat16_1.x = unity_Lightmap_HDR.x * u_xlat16_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6 = (-u_xlat16_16) + 1.0;
    u_xlat16_1.x = (-u_xlat16_1.x) * u_xlat16_6 + 1.0;
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat10_5.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_16 = dot(vs_TEXCOORD5.xyz, u_xlat16_3.xyz);
    u_xlat16_18 = dot(vs_TEXCOORD6.xyz, u_xlat16_3.xyz);
    u_xlat16_3.x = dot(vs_TEXCOORD7.xyz, u_xlat16_3.xyz);
    u_xlat0.xyz = vec3(u_xlat16_18) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_16) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat16_3.xxx + u_xlat0.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    u_xlat10.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat10.x = u_xlat10.x + u_xlat10.x;
    u_xlat10.xy = u_xlat0.xy * (-u_xlat10.xx) + u_xlat2.xy;
    u_xlat10.xy = (-u_xlat0.xy) + u_xlat10.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat10.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_10 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_1.xyz * u_xlat16_0.xyw + (-u_xlat16_1.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_10) * u_xlat16_0.xyw + u_xlat16_1.xyz;
    u_xlat15 = float(_UseSet);
    u_xlat2.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat2.xy = vec2(u_xlat15) * u_xlat2.xy + vs_TEXCOORD0.xy;
    u_xlat10_2.xyz = texture(_EmissionMask, u_xlat2.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_6 = (-u_xlat10_2.x) + u_xlat10_2.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6 + u_xlat10_2.x;
    u_xlat16_1.x = (u_xlatb15) ? u_xlat10_2.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
lowp vec3 u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
lowp vec3 u_xlat10_5;
mediump float u_xlat16_6;
mediump vec3 u_xlat16_7;
lowp vec3 u_xlat10_7;
vec2 u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_5.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb2 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb2){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_2.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_16 = u_xlat10_2.x;
    } else {
        u_xlat16_16 = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_2 = dot(u_xlat16_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_2 * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_7.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_7.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_3.xyz = u_xlat16_7.xyz * _ShadowColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_3.xyz);
    u_xlat16_1.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat2.x = (-u_xlat16_2) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_1.xyz;
    u_xlat16_1.x = unity_Lightmap_HDR.x * u_xlat16_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6 = (-u_xlat16_16) + 1.0;
    u_xlat16_1.x = (-u_xlat16_1.x) * u_xlat16_6 + 1.0;
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat10_5.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_16 = dot(vs_TEXCOORD5.xyz, u_xlat16_3.xyz);
    u_xlat16_18 = dot(vs_TEXCOORD6.xyz, u_xlat16_3.xyz);
    u_xlat16_3.x = dot(vs_TEXCOORD7.xyz, u_xlat16_3.xyz);
    u_xlat0.xyz = vec3(u_xlat16_18) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_16) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat16_3.xxx + u_xlat0.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    u_xlat10.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat10.x = u_xlat10.x + u_xlat10.x;
    u_xlat10.xy = u_xlat0.xy * (-u_xlat10.xx) + u_xlat2.xy;
    u_xlat10.xy = (-u_xlat0.xy) + u_xlat10.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat10.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_10 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_1.xyz * u_xlat16_0.xyw + (-u_xlat16_1.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_10) * u_xlat16_0.xyw + u_xlat16_1.xyz;
    u_xlat15 = float(_UseSet);
    u_xlat2.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat2.xy = vec2(u_xlat15) * u_xlat2.xy + vs_TEXCOORD0.xy;
    u_xlat10_2.xyz = texture(_EmissionMask, u_xlat2.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_6 = (-u_xlat10_2.x) + u_xlat10_2.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6 + u_xlat10_2.x;
    u_xlat16_1.x = (u_xlatb15) ? u_xlat10_2.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
lowp vec3 u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
lowp vec3 u_xlat10_5;
mediump float u_xlat16_6;
mediump vec3 u_xlat16_7;
lowp vec3 u_xlat10_7;
vec2 u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_5.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb2 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb2){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_2.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_16 = u_xlat10_2.x;
    } else {
        u_xlat16_16 = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_2 = dot(u_xlat16_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_2 * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_7.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_7.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_3.xyz = u_xlat16_7.xyz * _ShadowColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_3.xyz);
    u_xlat16_1.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat2.x = (-u_xlat16_2) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_1.xyz;
    u_xlat16_1.x = unity_Lightmap_HDR.x * u_xlat16_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6 = (-u_xlat16_16) + 1.0;
    u_xlat16_1.x = (-u_xlat16_1.x) * u_xlat16_6 + 1.0;
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat10_5.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_16 = dot(vs_TEXCOORD5.xyz, u_xlat16_3.xyz);
    u_xlat16_18 = dot(vs_TEXCOORD6.xyz, u_xlat16_3.xyz);
    u_xlat16_3.x = dot(vs_TEXCOORD7.xyz, u_xlat16_3.xyz);
    u_xlat0.xyz = vec3(u_xlat16_18) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_16) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat16_3.xxx + u_xlat0.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    u_xlat10.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat10.x = u_xlat10.x + u_xlat10.x;
    u_xlat10.xy = u_xlat0.xy * (-u_xlat10.xx) + u_xlat2.xy;
    u_xlat10.xy = (-u_xlat0.xy) + u_xlat10.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat10.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_10 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_1.xyz * u_xlat16_0.xyw + (-u_xlat16_1.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_10) * u_xlat16_0.xyw + u_xlat16_1.xyz;
    u_xlat15 = float(_UseSet);
    u_xlat2.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat2.xy = vec2(u_xlat15) * u_xlat2.xy + vs_TEXCOORD0.xy;
    u_xlat10_2.xyz = texture(_EmissionMask, u_xlat2.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_6 = (-u_xlat10_2.x) + u_xlat10_2.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6 + u_xlat10_2.x;
    u_xlat16_1.x = (u_xlatb15) ? u_xlat10_2.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
lowp vec3 u_xlat10_8;
mediump float u_xlat16_9;
mediump vec3 u_xlat16_10;
lowp vec3 u_xlat10_10;
vec2 u_xlat16;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_25;
float u_xlat26;
int u_xlati26;
mediump float u_xlat16_27;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_8.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb2 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb2){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_2.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_25 = u_xlat10_2.x;
    } else {
        u_xlat16_25 = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_2.x = dot(u_xlat16_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_2.x * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_10.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_10.xyz = u_xlat10_10.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_3.xyz = u_xlat16_10.xyz * _ShadowColor.xyz;
    u_xlat16_5.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_5.xyz + u_xlat16_3.xyz;
    u_xlat2.x = (-u_xlat16_2.x) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_3.xyz;
    u_xlat16_3.x = unity_Lightmap_HDR.x * u_xlat16_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_25 = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_3.x) * u_xlat16_25 + 1.0;
    u_xlat16_3.xyz = vec3(u_xlat16_25) * u_xlat2.xyz;
    u_xlat16_5.xyz = u_xlat10_8.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_6.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot(vs_TEXCOORD5.xyz, u_xlat16_7.xyz);
    u_xlat16_27 = dot(vs_TEXCOORD6.xyz, u_xlat16_7.xyz);
    u_xlat16_29 = dot(vs_TEXCOORD7.xyz, u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(u_xlat16_27) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_25) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_29) + u_xlat0.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat16.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16.x = u_xlat16.x + u_xlat16.x;
    u_xlat16.xy = u_xlat0.xy * (-u_xlat16.xx) + u_xlat2.xy;
    u_xlat16.xy = (-u_xlat0.xy) + u_xlat16.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat16.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_16 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_2.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz + u_xlat10_2.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat26 = (-u_xlat16_1.x) + _LightmapThreshold;
    u_xlat26 = u_xlat26 + 1.0;
    u_xlat26 = floor(u_xlat26);
    u_xlat26 = max(u_xlat26, 0.0);
    u_xlati26 = int(u_xlat26);
    u_xlat26 = (u_xlati26 != 0) ? 0.0 : 1.0;
    u_xlat26 = u_xlat26 + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
#else
    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * vec3(u_xlat26);
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_5.xyz) * u_xlat16_3.xyz + u_xlat16_1.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_16) * u_xlat16_0.xyw + u_xlat16_6.xyz;
    u_xlat24 = float(_UseSet);
    u_xlat2.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat2.xy = vec2(u_xlat24) * u_xlat2.xy + vs_TEXCOORD0.xy;
    u_xlat10_2.xyz = texture(_EmissionMask, u_xlat2.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_UseChannel==2);
#else
    u_xlatb24 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_9 = (-u_xlat10_2.x) + u_xlat10_2.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9 + u_xlat10_2.x;
    u_xlat16_1.x = (u_xlatb24) ? u_xlat10_2.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
lowp vec3 u_xlat10_8;
mediump float u_xlat16_9;
mediump vec3 u_xlat16_10;
lowp vec3 u_xlat10_10;
vec2 u_xlat16;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_25;
float u_xlat26;
int u_xlati26;
mediump float u_xlat16_27;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_8.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb2 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb2){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_2.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_25 = u_xlat10_2.x;
    } else {
        u_xlat16_25 = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_2.x = dot(u_xlat16_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_2.x * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_10.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_10.xyz = u_xlat10_10.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_3.xyz = u_xlat16_10.xyz * _ShadowColor.xyz;
    u_xlat16_5.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_5.xyz + u_xlat16_3.xyz;
    u_xlat2.x = (-u_xlat16_2.x) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_3.xyz;
    u_xlat16_3.x = unity_Lightmap_HDR.x * u_xlat16_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_25 = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_3.x) * u_xlat16_25 + 1.0;
    u_xlat16_3.xyz = vec3(u_xlat16_25) * u_xlat2.xyz;
    u_xlat16_5.xyz = u_xlat10_8.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_6.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot(vs_TEXCOORD5.xyz, u_xlat16_7.xyz);
    u_xlat16_27 = dot(vs_TEXCOORD6.xyz, u_xlat16_7.xyz);
    u_xlat16_29 = dot(vs_TEXCOORD7.xyz, u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(u_xlat16_27) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_25) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_29) + u_xlat0.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat16.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16.x = u_xlat16.x + u_xlat16.x;
    u_xlat16.xy = u_xlat0.xy * (-u_xlat16.xx) + u_xlat2.xy;
    u_xlat16.xy = (-u_xlat0.xy) + u_xlat16.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat16.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_16 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_2.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz + u_xlat10_2.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat26 = (-u_xlat16_1.x) + _LightmapThreshold;
    u_xlat26 = u_xlat26 + 1.0;
    u_xlat26 = floor(u_xlat26);
    u_xlat26 = max(u_xlat26, 0.0);
    u_xlati26 = int(u_xlat26);
    u_xlat26 = (u_xlati26 != 0) ? 0.0 : 1.0;
    u_xlat26 = u_xlat26 + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
#else
    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * vec3(u_xlat26);
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_5.xyz) * u_xlat16_3.xyz + u_xlat16_1.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_16) * u_xlat16_0.xyw + u_xlat16_6.xyz;
    u_xlat24 = float(_UseSet);
    u_xlat2.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat2.xy = vec2(u_xlat24) * u_xlat2.xy + vs_TEXCOORD0.xy;
    u_xlat10_2.xyz = texture(_EmissionMask, u_xlat2.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_UseChannel==2);
#else
    u_xlatb24 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_9 = (-u_xlat10_2.x) + u_xlat10_2.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9 + u_xlat10_2.x;
    u_xlat16_1.x = (u_xlatb24) ? u_xlat10_2.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
lowp vec3 u_xlat10_8;
mediump float u_xlat16_9;
mediump vec3 u_xlat16_10;
lowp vec3 u_xlat10_10;
vec2 u_xlat16;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_25;
float u_xlat26;
int u_xlati26;
mediump float u_xlat16_27;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_8.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb2 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb2){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_2.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_25 = u_xlat10_2.x;
    } else {
        u_xlat16_25 = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_2.x = dot(u_xlat16_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_2.x * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_10.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_10.xyz = u_xlat10_10.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_3.xyz = u_xlat16_10.xyz * _ShadowColor.xyz;
    u_xlat16_5.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_5.xyz + u_xlat16_3.xyz;
    u_xlat2.x = (-u_xlat16_2.x) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_3.xyz;
    u_xlat16_3.x = unity_Lightmap_HDR.x * u_xlat16_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_25 = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_3.x) * u_xlat16_25 + 1.0;
    u_xlat16_3.xyz = vec3(u_xlat16_25) * u_xlat2.xyz;
    u_xlat16_5.xyz = u_xlat10_8.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_6.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot(vs_TEXCOORD5.xyz, u_xlat16_7.xyz);
    u_xlat16_27 = dot(vs_TEXCOORD6.xyz, u_xlat16_7.xyz);
    u_xlat16_29 = dot(vs_TEXCOORD7.xyz, u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(u_xlat16_27) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_25) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_29) + u_xlat0.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat16.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16.x = u_xlat16.x + u_xlat16.x;
    u_xlat16.xy = u_xlat0.xy * (-u_xlat16.xx) + u_xlat2.xy;
    u_xlat16.xy = (-u_xlat0.xy) + u_xlat16.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat16.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_16 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_2.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz + u_xlat10_2.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat26 = (-u_xlat16_1.x) + _LightmapThreshold;
    u_xlat26 = u_xlat26 + 1.0;
    u_xlat26 = floor(u_xlat26);
    u_xlat26 = max(u_xlat26, 0.0);
    u_xlati26 = int(u_xlat26);
    u_xlat26 = (u_xlati26 != 0) ? 0.0 : 1.0;
    u_xlat26 = u_xlat26 + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
#else
    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * vec3(u_xlat26);
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_5.xyz) * u_xlat16_3.xyz + u_xlat16_1.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_16) * u_xlat16_0.xyw + u_xlat16_6.xyz;
    u_xlat24 = float(_UseSet);
    u_xlat2.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat2.xy = vec2(u_xlat24) * u_xlat2.xy + vs_TEXCOORD0.xy;
    u_xlat10_2.xyz = texture(_EmissionMask, u_xlat2.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_UseChannel==2);
#else
    u_xlatb24 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_9 = (-u_xlat10_2.x) + u_xlat10_2.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9 + u_xlat10_2.x;
    u_xlat16_1.x = (u_xlatb24) ? u_xlat10_2.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
lowp float u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
lowp vec3 u_xlat10_5;
bvec2 u_xlatb10;
bool u_xlatb15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_5.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb2 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb2){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_2 = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_16 = u_xlat10_2;
    } else {
        u_xlat16_16 = 1.0;
    //ENDIF
    }
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_3.x = unity_Lightmap_HDR.x * u_xlat16_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_16 = (-u_xlat16_16) + 1.0;
    u_xlat16_16 = (-u_xlat16_3.x) * u_xlat16_16 + 1.0;
    u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;
    u_xlat16_3.xyz = u_xlat10_5.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat5.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat5.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_16 = float(_UseChannel);
    u_xlat16_18 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_16 = u_xlat16_16 * u_xlat16_18 + u_xlat10_0.x;
    u_xlat16_16 = (u_xlatb15) ? u_xlat10_0.z : u_xlat16_16;
    u_xlat16_4.xyz = vec3(u_xlat16_16) * _Emission.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Emission.www;
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_1.xyz + u_xlat16_4.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
lowp float u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
lowp vec3 u_xlat10_5;
bvec2 u_xlatb10;
bool u_xlatb15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_5.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb2 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb2){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_2 = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_16 = u_xlat10_2;
    } else {
        u_xlat16_16 = 1.0;
    //ENDIF
    }
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_3.x = unity_Lightmap_HDR.x * u_xlat16_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_16 = (-u_xlat16_16) + 1.0;
    u_xlat16_16 = (-u_xlat16_3.x) * u_xlat16_16 + 1.0;
    u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;
    u_xlat16_3.xyz = u_xlat10_5.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat5.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat5.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_16 = float(_UseChannel);
    u_xlat16_18 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_16 = u_xlat16_16 * u_xlat16_18 + u_xlat10_0.x;
    u_xlat16_16 = (u_xlatb15) ? u_xlat10_0.z : u_xlat16_16;
    u_xlat16_4.xyz = vec3(u_xlat16_16) * _Emission.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Emission.www;
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_1.xyz + u_xlat16_4.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
lowp float u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
lowp vec3 u_xlat10_5;
bvec2 u_xlatb10;
bool u_xlatb15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_5.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb2 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb2){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_2 = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_16 = u_xlat10_2;
    } else {
        u_xlat16_16 = 1.0;
    //ENDIF
    }
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_3.x = unity_Lightmap_HDR.x * u_xlat16_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_16 = (-u_xlat16_16) + 1.0;
    u_xlat16_16 = (-u_xlat16_3.x) * u_xlat16_16 + 1.0;
    u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;
    u_xlat16_3.xyz = u_xlat10_5.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat5.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat5.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_16 = float(_UseChannel);
    u_xlat16_18 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_16 = u_xlat16_16 * u_xlat16_18 + u_xlat10_0.x;
    u_xlat16_16 = (u_xlatb15) ? u_xlat10_0.z : u_xlat16_16;
    u_xlat16_4.xyz = vec3(u_xlat16_16) * _Emission.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Emission.www;
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_1.xyz + u_xlat16_4.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
lowp vec3 u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_4;
mediump float u_xlat16_5;
float u_xlat8;
lowp float u_xlat10_8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
mediump float u_xlat16_13;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb2 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb2){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_2.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_13 = u_xlat10_2.x;
    } else {
        u_xlat16_13 = 1.0;
    //ENDIF
    }
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_3.x = unity_Lightmap_HDR.x * u_xlat16_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_13 = (-u_xlat16_13) + 1.0;
    u_xlat16_13 = (-u_xlat16_3.x) * u_xlat16_13 + 1.0;
    u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
    u_xlat16_3.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat8 = dot(u_xlat0.xyz, vs_TEXCOORD5.xyz);
    u_xlat8 = u_xlat8 + u_xlat8;
    u_xlat0.xy = vs_TEXCOORD5.xy * (-vec2(u_xlat8)) + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + (-vs_TEXCOORD5.xy);
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat0.xy + vs_TEXCOORD5.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_8 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_1.xyz * u_xlat16_0.xyw + (-u_xlat16_1.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_8) * u_xlat16_0.xyw + u_xlat16_1.xyz;
    u_xlat12 = float(_UseSet);
    u_xlat2.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat2.xy = vec2(u_xlat12) * u_xlat2.xy + vs_TEXCOORD0.xy;
    u_xlat10_2.xyz = texture(_EmissionMask, u_xlat2.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_5 = (-u_xlat10_2.x) + u_xlat10_2.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5 + u_xlat10_2.x;
    u_xlat16_1.x = (u_xlatb12) ? u_xlat10_2.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
lowp vec3 u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_4;
mediump float u_xlat16_5;
float u_xlat8;
lowp float u_xlat10_8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
mediump float u_xlat16_13;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb2 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb2){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_2.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_13 = u_xlat10_2.x;
    } else {
        u_xlat16_13 = 1.0;
    //ENDIF
    }
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_3.x = unity_Lightmap_HDR.x * u_xlat16_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_13 = (-u_xlat16_13) + 1.0;
    u_xlat16_13 = (-u_xlat16_3.x) * u_xlat16_13 + 1.0;
    u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
    u_xlat16_3.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat8 = dot(u_xlat0.xyz, vs_TEXCOORD5.xyz);
    u_xlat8 = u_xlat8 + u_xlat8;
    u_xlat0.xy = vs_TEXCOORD5.xy * (-vec2(u_xlat8)) + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + (-vs_TEXCOORD5.xy);
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat0.xy + vs_TEXCOORD5.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_8 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_1.xyz * u_xlat16_0.xyw + (-u_xlat16_1.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_8) * u_xlat16_0.xyw + u_xlat16_1.xyz;
    u_xlat12 = float(_UseSet);
    u_xlat2.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat2.xy = vec2(u_xlat12) * u_xlat2.xy + vs_TEXCOORD0.xy;
    u_xlat10_2.xyz = texture(_EmissionMask, u_xlat2.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_5 = (-u_xlat10_2.x) + u_xlat10_2.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5 + u_xlat10_2.x;
    u_xlat16_1.x = (u_xlatb12) ? u_xlat10_2.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
lowp vec3 u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_4;
mediump float u_xlat16_5;
float u_xlat8;
lowp float u_xlat10_8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
mediump float u_xlat16_13;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb2 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb2){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_2.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_13 = u_xlat10_2.x;
    } else {
        u_xlat16_13 = 1.0;
    //ENDIF
    }
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_3.x = unity_Lightmap_HDR.x * u_xlat16_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_13 = (-u_xlat16_13) + 1.0;
    u_xlat16_13 = (-u_xlat16_3.x) * u_xlat16_13 + 1.0;
    u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
    u_xlat16_3.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat8 = dot(u_xlat0.xyz, vs_TEXCOORD5.xyz);
    u_xlat8 = u_xlat8 + u_xlat8;
    u_xlat0.xy = vs_TEXCOORD5.xy * (-vec2(u_xlat8)) + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + (-vs_TEXCOORD5.xy);
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat0.xy + vs_TEXCOORD5.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_8 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_1.xyz * u_xlat16_0.xyw + (-u_xlat16_1.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_8) * u_xlat16_0.xyw + u_xlat16_1.xyz;
    u_xlat12 = float(_UseSet);
    u_xlat2.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat2.xy = vec2(u_xlat12) * u_xlat2.xy + vs_TEXCOORD0.xy;
    u_xlat10_2.xyz = texture(_EmissionMask, u_xlat2.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_5 = (-u_xlat10_2.x) + u_xlat10_2.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5 + u_xlat10_2.x;
    u_xlat16_1.x = (u_xlatb12) ? u_xlat10_2.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_7;
mediump float u_xlat16_8;
vec2 u_xlat14;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_22;
float u_xlat23;
int u_xlati23;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_7.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb2 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb2){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_2.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_22 = u_xlat10_2.x;
    } else {
        u_xlat16_22 = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_24 = unity_Lightmap_HDR.x * u_xlat16_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
#else
    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
#endif
    u_xlat16_22 = (-u_xlat16_22) + 1.0;
    u_xlat16_22 = (-u_xlat16_24) * u_xlat16_22 + 1.0;
    u_xlat16_3.xyz = vec3(u_xlat16_22) * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat10_7.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_24 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat0.xyz = vec3(u_xlat16_24) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_22) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_25) + u_xlat0.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat14.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
    u_xlat14.xy = u_xlat0.xy * (-u_xlat14.xx) + u_xlat2.xy;
    u_xlat14.xy = (-u_xlat0.xy) + u_xlat14.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat14.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_14 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_2.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz + u_xlat10_2.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat23 = (-u_xlat16_1.x) + _LightmapThreshold;
    u_xlat23 = u_xlat23 + 1.0;
    u_xlat23 = floor(u_xlat23);
    u_xlat23 = max(u_xlat23, 0.0);
    u_xlati23 = int(u_xlat23);
    u_xlat23 = (u_xlati23 != 0) ? 0.0 : 1.0;
    u_xlat23 = u_xlat23 + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * vec3(u_xlat23);
    u_xlat16_1.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_4.xyz) * u_xlat16_3.xyz + u_xlat16_1.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_14) * u_xlat16_0.xyw + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat2.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat2.xy = vec2(u_xlat21) * u_xlat2.xy + vs_TEXCOORD0.xy;
    u_xlat10_2.xyz = texture(_EmissionMask, u_xlat2.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_8 = (-u_xlat10_2.x) + u_xlat10_2.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + u_xlat10_2.x;
    u_xlat16_1.x = (u_xlatb21) ? u_xlat10_2.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_7;
mediump float u_xlat16_8;
vec2 u_xlat14;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_22;
float u_xlat23;
int u_xlati23;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_7.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb2 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb2){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_2.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_22 = u_xlat10_2.x;
    } else {
        u_xlat16_22 = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_24 = unity_Lightmap_HDR.x * u_xlat16_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
#else
    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
#endif
    u_xlat16_22 = (-u_xlat16_22) + 1.0;
    u_xlat16_22 = (-u_xlat16_24) * u_xlat16_22 + 1.0;
    u_xlat16_3.xyz = vec3(u_xlat16_22) * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat10_7.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_24 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat0.xyz = vec3(u_xlat16_24) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_22) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_25) + u_xlat0.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat14.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
    u_xlat14.xy = u_xlat0.xy * (-u_xlat14.xx) + u_xlat2.xy;
    u_xlat14.xy = (-u_xlat0.xy) + u_xlat14.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat14.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_14 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_2.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz + u_xlat10_2.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat23 = (-u_xlat16_1.x) + _LightmapThreshold;
    u_xlat23 = u_xlat23 + 1.0;
    u_xlat23 = floor(u_xlat23);
    u_xlat23 = max(u_xlat23, 0.0);
    u_xlati23 = int(u_xlat23);
    u_xlat23 = (u_xlati23 != 0) ? 0.0 : 1.0;
    u_xlat23 = u_xlat23 + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * vec3(u_xlat23);
    u_xlat16_1.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_4.xyz) * u_xlat16_3.xyz + u_xlat16_1.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_14) * u_xlat16_0.xyw + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat2.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat2.xy = vec2(u_xlat21) * u_xlat2.xy + vs_TEXCOORD0.xy;
    u_xlat10_2.xyz = texture(_EmissionMask, u_xlat2.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_8 = (-u_xlat10_2.x) + u_xlat10_2.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + u_xlat10_2.x;
    u_xlat16_1.x = (u_xlatb21) ? u_xlat10_2.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_7;
mediump float u_xlat16_8;
vec2 u_xlat14;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_22;
float u_xlat23;
int u_xlati23;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_7.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb2 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb2){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_2.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_22 = u_xlat10_2.x;
    } else {
        u_xlat16_22 = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_24 = unity_Lightmap_HDR.x * u_xlat16_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
#else
    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
#endif
    u_xlat16_22 = (-u_xlat16_22) + 1.0;
    u_xlat16_22 = (-u_xlat16_24) * u_xlat16_22 + 1.0;
    u_xlat16_3.xyz = vec3(u_xlat16_22) * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat10_7.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_22 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_24 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat0.xyz = vec3(u_xlat16_24) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_22) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_25) + u_xlat0.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat14.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
    u_xlat14.xy = u_xlat0.xy * (-u_xlat14.xx) + u_xlat2.xy;
    u_xlat14.xy = (-u_xlat0.xy) + u_xlat14.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat14.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_14 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_2.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz + u_xlat10_2.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat23 = (-u_xlat16_1.x) + _LightmapThreshold;
    u_xlat23 = u_xlat23 + 1.0;
    u_xlat23 = floor(u_xlat23);
    u_xlat23 = max(u_xlat23, 0.0);
    u_xlati23 = int(u_xlat23);
    u_xlat23 = (u_xlati23 != 0) ? 0.0 : 1.0;
    u_xlat23 = u_xlat23 + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * vec3(u_xlat23);
    u_xlat16_1.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_4.xyz) * u_xlat16_3.xyz + u_xlat16_1.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_14) * u_xlat16_0.xyw + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat2.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat2.xy = vec2(u_xlat21) * u_xlat2.xy + vs_TEXCOORD0.xy;
    u_xlat10_2.xyz = texture(_EmissionMask, u_xlat2.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_8 = (-u_xlat10_2.x) + u_xlat10_2.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + u_xlat10_2.x;
    u_xlat16_1.x = (u_xlatb21) ? u_xlat10_2.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
lowp float u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
lowp vec3 u_xlat10_6;
mediump float u_xlat16_7;
mediump vec3 u_xlat16_8;
lowp vec3 u_xlat10_8;
bvec2 u_xlatb12;
bool u_xlatb18;
mediump float u_xlat16_19;
mediump float u_xlat16_21;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_6.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb2 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb2){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_2 = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_19 = u_xlat10_2;
    } else {
        u_xlat16_19 = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_2 = dot(u_xlat16_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_2 * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_8.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_8.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_3.xyz = u_xlat16_8.xyz * _ShadowColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_3.xyz);
    u_xlat16_1.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat2.x = (-u_xlat16_2) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_1.xyz;
    u_xlat16_1.x = unity_Lightmap_HDR.x * u_xlat16_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_7 = (-u_xlat16_19) + 1.0;
    u_xlat16_1.x = (-u_xlat16_1.x) * u_xlat16_7 + 1.0;
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat10_6.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UseChannel==2);
#else
    u_xlatb18 = _UseChannel==2;
#endif
    u_xlat16_19 = float(_UseChannel);
    u_xlat16_21 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_21 + u_xlat10_0.x;
    u_xlat16_19 = (u_xlatb18) ? u_xlat10_0.z : u_xlat16_19;
    u_xlat16_5.xyz = vec3(u_xlat16_19) * _Emission.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Emission.www;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_1.xyz + u_xlat16_5.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
lowp float u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
lowp vec3 u_xlat10_6;
mediump float u_xlat16_7;
mediump vec3 u_xlat16_8;
lowp vec3 u_xlat10_8;
bvec2 u_xlatb12;
bool u_xlatb18;
mediump float u_xlat16_19;
mediump float u_xlat16_21;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_6.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb2 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb2){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_2 = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_19 = u_xlat10_2;
    } else {
        u_xlat16_19 = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_2 = dot(u_xlat16_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_2 * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_8.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_8.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_3.xyz = u_xlat16_8.xyz * _ShadowColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_3.xyz);
    u_xlat16_1.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat2.x = (-u_xlat16_2) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_1.xyz;
    u_xlat16_1.x = unity_Lightmap_HDR.x * u_xlat16_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_7 = (-u_xlat16_19) + 1.0;
    u_xlat16_1.x = (-u_xlat16_1.x) * u_xlat16_7 + 1.0;
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat10_6.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UseChannel==2);
#else
    u_xlatb18 = _UseChannel==2;
#endif
    u_xlat16_19 = float(_UseChannel);
    u_xlat16_21 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_21 + u_xlat10_0.x;
    u_xlat16_19 = (u_xlatb18) ? u_xlat10_0.z : u_xlat16_19;
    u_xlat16_5.xyz = vec3(u_xlat16_19) * _Emission.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Emission.www;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_1.xyz + u_xlat16_5.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
lowp float u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
lowp vec3 u_xlat10_6;
mediump float u_xlat16_7;
mediump vec3 u_xlat16_8;
lowp vec3 u_xlat10_8;
bvec2 u_xlatb12;
bool u_xlatb18;
mediump float u_xlat16_19;
mediump float u_xlat16_21;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_6.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb2 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb2){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_2 = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_19 = u_xlat10_2;
    } else {
        u_xlat16_19 = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_2 = dot(u_xlat16_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_2 * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_8.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_8.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_3.xyz = u_xlat16_8.xyz * _ShadowColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_3.xyz);
    u_xlat16_1.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat2.x = (-u_xlat16_2) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_1.xyz;
    u_xlat16_1.x = unity_Lightmap_HDR.x * u_xlat16_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_7 = (-u_xlat16_19) + 1.0;
    u_xlat16_1.x = (-u_xlat16_1.x) * u_xlat16_7 + 1.0;
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat10_6.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UseChannel==2);
#else
    u_xlatb18 = _UseChannel==2;
#endif
    u_xlat16_19 = float(_UseChannel);
    u_xlat16_21 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_19 = u_xlat16_19 * u_xlat16_21 + u_xlat10_0.x;
    u_xlat16_19 = (u_xlatb18) ? u_xlat10_0.z : u_xlat16_19;
    u_xlat16_5.xyz = vec3(u_xlat16_19) * _Emission.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Emission.www;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_1.xyz + u_xlat16_5.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
lowp vec3 u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
lowp vec3 u_xlat10_5;
mediump float u_xlat16_6;
mediump vec3 u_xlat16_7;
lowp vec3 u_xlat10_7;
vec2 u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_5.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb2 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb2){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_2.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_16 = u_xlat10_2.x;
    } else {
        u_xlat16_16 = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_2 = dot(u_xlat16_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_2 * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_7.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_7.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_3.xyz = u_xlat16_7.xyz * _ShadowColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_3.xyz);
    u_xlat16_1.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat2.x = (-u_xlat16_2) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_1.xyz;
    u_xlat16_1.x = unity_Lightmap_HDR.x * u_xlat16_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6 = (-u_xlat16_16) + 1.0;
    u_xlat16_1.x = (-u_xlat16_1.x) * u_xlat16_6 + 1.0;
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat10_5.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_16 = dot(vs_TEXCOORD5.xyz, u_xlat16_3.xyz);
    u_xlat16_18 = dot(vs_TEXCOORD6.xyz, u_xlat16_3.xyz);
    u_xlat16_3.x = dot(vs_TEXCOORD7.xyz, u_xlat16_3.xyz);
    u_xlat0.xyz = vec3(u_xlat16_18) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_16) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat16_3.xxx + u_xlat0.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    u_xlat10.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat10.x = u_xlat10.x + u_xlat10.x;
    u_xlat10.xy = u_xlat0.xy * (-u_xlat10.xx) + u_xlat2.xy;
    u_xlat10.xy = (-u_xlat0.xy) + u_xlat10.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat10.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_10 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_1.xyz * u_xlat16_0.xyw + (-u_xlat16_1.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_10) * u_xlat16_0.xyw + u_xlat16_1.xyz;
    u_xlat15 = float(_UseSet);
    u_xlat2.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat2.xy = vec2(u_xlat15) * u_xlat2.xy + vs_TEXCOORD0.xy;
    u_xlat10_2.xyz = texture(_EmissionMask, u_xlat2.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_6 = (-u_xlat10_2.x) + u_xlat10_2.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6 + u_xlat10_2.x;
    u_xlat16_1.x = (u_xlatb15) ? u_xlat10_2.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
lowp vec3 u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
lowp vec3 u_xlat10_5;
mediump float u_xlat16_6;
mediump vec3 u_xlat16_7;
lowp vec3 u_xlat10_7;
vec2 u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_5.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb2 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb2){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_2.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_16 = u_xlat10_2.x;
    } else {
        u_xlat16_16 = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_2 = dot(u_xlat16_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_2 * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_7.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_7.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_3.xyz = u_xlat16_7.xyz * _ShadowColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_3.xyz);
    u_xlat16_1.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat2.x = (-u_xlat16_2) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_1.xyz;
    u_xlat16_1.x = unity_Lightmap_HDR.x * u_xlat16_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6 = (-u_xlat16_16) + 1.0;
    u_xlat16_1.x = (-u_xlat16_1.x) * u_xlat16_6 + 1.0;
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat10_5.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_16 = dot(vs_TEXCOORD5.xyz, u_xlat16_3.xyz);
    u_xlat16_18 = dot(vs_TEXCOORD6.xyz, u_xlat16_3.xyz);
    u_xlat16_3.x = dot(vs_TEXCOORD7.xyz, u_xlat16_3.xyz);
    u_xlat0.xyz = vec3(u_xlat16_18) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_16) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat16_3.xxx + u_xlat0.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    u_xlat10.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat10.x = u_xlat10.x + u_xlat10.x;
    u_xlat10.xy = u_xlat0.xy * (-u_xlat10.xx) + u_xlat2.xy;
    u_xlat10.xy = (-u_xlat0.xy) + u_xlat10.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat10.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_10 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_1.xyz * u_xlat16_0.xyw + (-u_xlat16_1.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_10) * u_xlat16_0.xyw + u_xlat16_1.xyz;
    u_xlat15 = float(_UseSet);
    u_xlat2.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat2.xy = vec2(u_xlat15) * u_xlat2.xy + vs_TEXCOORD0.xy;
    u_xlat10_2.xyz = texture(_EmissionMask, u_xlat2.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_6 = (-u_xlat10_2.x) + u_xlat10_2.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6 + u_xlat10_2.x;
    u_xlat16_1.x = (u_xlatb15) ? u_xlat10_2.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
lowp vec3 u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
lowp vec3 u_xlat10_5;
mediump float u_xlat16_6;
mediump vec3 u_xlat16_7;
lowp vec3 u_xlat10_7;
vec2 u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_5.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb2 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb2){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_2.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_16 = u_xlat10_2.x;
    } else {
        u_xlat16_16 = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_2 = dot(u_xlat16_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_2 * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_7.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_7.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_3.xyz = u_xlat16_7.xyz * _ShadowColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_3.xyz);
    u_xlat16_1.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat2.x = (-u_xlat16_2) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_1.xyz;
    u_xlat16_1.x = unity_Lightmap_HDR.x * u_xlat16_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_6 = (-u_xlat16_16) + 1.0;
    u_xlat16_1.x = (-u_xlat16_1.x) * u_xlat16_6 + 1.0;
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat10_5.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_16 = dot(vs_TEXCOORD5.xyz, u_xlat16_3.xyz);
    u_xlat16_18 = dot(vs_TEXCOORD6.xyz, u_xlat16_3.xyz);
    u_xlat16_3.x = dot(vs_TEXCOORD7.xyz, u_xlat16_3.xyz);
    u_xlat0.xyz = vec3(u_xlat16_18) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_16) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat16_3.xxx + u_xlat0.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    u_xlat10.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat10.x = u_xlat10.x + u_xlat10.x;
    u_xlat10.xy = u_xlat0.xy * (-u_xlat10.xx) + u_xlat2.xy;
    u_xlat10.xy = (-u_xlat0.xy) + u_xlat10.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat10.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_10 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_1.xyz * u_xlat16_0.xyw + (-u_xlat16_1.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_10) * u_xlat16_0.xyw + u_xlat16_1.xyz;
    u_xlat15 = float(_UseSet);
    u_xlat2.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat2.xy = vec2(u_xlat15) * u_xlat2.xy + vs_TEXCOORD0.xy;
    u_xlat10_2.xyz = texture(_EmissionMask, u_xlat2.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_6 = (-u_xlat10_2.x) + u_xlat10_2.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6 + u_xlat10_2.x;
    u_xlat16_1.x = (u_xlatb15) ? u_xlat10_2.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
lowp vec3 u_xlat10_8;
mediump float u_xlat16_9;
mediump vec3 u_xlat16_10;
lowp vec3 u_xlat10_10;
vec2 u_xlat16;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_25;
float u_xlat26;
int u_xlati26;
mediump float u_xlat16_27;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_8.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb2 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb2){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_2.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_25 = u_xlat10_2.x;
    } else {
        u_xlat16_25 = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_2.x = dot(u_xlat16_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_2.x * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_10.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_10.xyz = u_xlat10_10.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_3.xyz = u_xlat16_10.xyz * _ShadowColor.xyz;
    u_xlat16_5.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_5.xyz + u_xlat16_3.xyz;
    u_xlat2.x = (-u_xlat16_2.x) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_3.xyz;
    u_xlat16_3.x = unity_Lightmap_HDR.x * u_xlat16_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_25 = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_3.x) * u_xlat16_25 + 1.0;
    u_xlat16_3.xyz = vec3(u_xlat16_25) * u_xlat2.xyz;
    u_xlat16_5.xyz = u_xlat10_8.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_6.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot(vs_TEXCOORD5.xyz, u_xlat16_7.xyz);
    u_xlat16_27 = dot(vs_TEXCOORD6.xyz, u_xlat16_7.xyz);
    u_xlat16_29 = dot(vs_TEXCOORD7.xyz, u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(u_xlat16_27) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_25) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_29) + u_xlat0.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat16.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16.x = u_xlat16.x + u_xlat16.x;
    u_xlat16.xy = u_xlat0.xy * (-u_xlat16.xx) + u_xlat2.xy;
    u_xlat16.xy = (-u_xlat0.xy) + u_xlat16.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat16.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_16 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_2.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz + u_xlat10_2.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat26 = (-u_xlat16_1.x) + _LightmapThreshold;
    u_xlat26 = u_xlat26 + 1.0;
    u_xlat26 = floor(u_xlat26);
    u_xlat26 = max(u_xlat26, 0.0);
    u_xlati26 = int(u_xlat26);
    u_xlat26 = (u_xlati26 != 0) ? 0.0 : 1.0;
    u_xlat26 = u_xlat26 + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
#else
    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * vec3(u_xlat26);
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_5.xyz) * u_xlat16_3.xyz + u_xlat16_1.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_16) * u_xlat16_0.xyw + u_xlat16_6.xyz;
    u_xlat24 = float(_UseSet);
    u_xlat2.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat2.xy = vec2(u_xlat24) * u_xlat2.xy + vs_TEXCOORD0.xy;
    u_xlat10_2.xyz = texture(_EmissionMask, u_xlat2.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_UseChannel==2);
#else
    u_xlatb24 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_9 = (-u_xlat10_2.x) + u_xlat10_2.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9 + u_xlat10_2.x;
    u_xlat16_1.x = (u_xlatb24) ? u_xlat10_2.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
lowp vec3 u_xlat10_8;
mediump float u_xlat16_9;
mediump vec3 u_xlat16_10;
lowp vec3 u_xlat10_10;
vec2 u_xlat16;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_25;
float u_xlat26;
int u_xlati26;
mediump float u_xlat16_27;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_8.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb2 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb2){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_2.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_25 = u_xlat10_2.x;
    } else {
        u_xlat16_25 = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_2.x = dot(u_xlat16_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_2.x * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_10.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_10.xyz = u_xlat10_10.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_3.xyz = u_xlat16_10.xyz * _ShadowColor.xyz;
    u_xlat16_5.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_5.xyz + u_xlat16_3.xyz;
    u_xlat2.x = (-u_xlat16_2.x) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_3.xyz;
    u_xlat16_3.x = unity_Lightmap_HDR.x * u_xlat16_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_25 = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_3.x) * u_xlat16_25 + 1.0;
    u_xlat16_3.xyz = vec3(u_xlat16_25) * u_xlat2.xyz;
    u_xlat16_5.xyz = u_xlat10_8.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_6.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot(vs_TEXCOORD5.xyz, u_xlat16_7.xyz);
    u_xlat16_27 = dot(vs_TEXCOORD6.xyz, u_xlat16_7.xyz);
    u_xlat16_29 = dot(vs_TEXCOORD7.xyz, u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(u_xlat16_27) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_25) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_29) + u_xlat0.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat16.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16.x = u_xlat16.x + u_xlat16.x;
    u_xlat16.xy = u_xlat0.xy * (-u_xlat16.xx) + u_xlat2.xy;
    u_xlat16.xy = (-u_xlat0.xy) + u_xlat16.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat16.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_16 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_2.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz + u_xlat10_2.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat26 = (-u_xlat16_1.x) + _LightmapThreshold;
    u_xlat26 = u_xlat26 + 1.0;
    u_xlat26 = floor(u_xlat26);
    u_xlat26 = max(u_xlat26, 0.0);
    u_xlati26 = int(u_xlat26);
    u_xlat26 = (u_xlati26 != 0) ? 0.0 : 1.0;
    u_xlat26 = u_xlat26 + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
#else
    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * vec3(u_xlat26);
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_5.xyz) * u_xlat16_3.xyz + u_xlat16_1.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_16) * u_xlat16_0.xyw + u_xlat16_6.xyz;
    u_xlat24 = float(_UseSet);
    u_xlat2.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat2.xy = vec2(u_xlat24) * u_xlat2.xy + vs_TEXCOORD0.xy;
    u_xlat10_2.xyz = texture(_EmissionMask, u_xlat2.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_UseChannel==2);
#else
    u_xlatb24 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_9 = (-u_xlat10_2.x) + u_xlat10_2.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9 + u_xlat10_2.x;
    u_xlat16_1.x = (u_xlatb24) ? u_xlat10_2.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
bool u_xlatb2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
lowp vec3 u_xlat10_8;
mediump float u_xlat16_9;
mediump vec3 u_xlat16_10;
lowp vec3 u_xlat10_10;
vec2 u_xlat16;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_25;
float u_xlat26;
int u_xlati26;
mediump float u_xlat16_27;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_8.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb2 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb2){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_2.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_25 = u_xlat10_2.x;
    } else {
        u_xlat16_25 = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_1.xyz * _ShadowColor.xyz;
    u_xlat16_2.x = dot(u_xlat16_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_2.x * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_10.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_10.xyz = u_xlat10_10.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_3.xyz = u_xlat16_10.xyz * _ShadowColor.xyz;
    u_xlat16_5.xyz = u_xlat16_1.xyz * _ShadowColor.xyz + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_5.xyz + u_xlat16_3.xyz;
    u_xlat2.x = (-u_xlat16_2.x) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_3.xyz;
    u_xlat16_3.x = unity_Lightmap_HDR.x * u_xlat16_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_25 = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_3.x) * u_xlat16_25 + 1.0;
    u_xlat16_3.xyz = vec3(u_xlat16_25) * u_xlat2.xyz;
    u_xlat16_5.xyz = u_xlat10_8.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_6.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_25 = dot(vs_TEXCOORD5.xyz, u_xlat16_7.xyz);
    u_xlat16_27 = dot(vs_TEXCOORD6.xyz, u_xlat16_7.xyz);
    u_xlat16_29 = dot(vs_TEXCOORD7.xyz, u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(u_xlat16_27) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_25) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_29) + u_xlat0.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat16.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16.x = u_xlat16.x + u_xlat16.x;
    u_xlat16.xy = u_xlat0.xy * (-u_xlat16.xx) + u_xlat2.xy;
    u_xlat16.xy = (-u_xlat0.xy) + u_xlat16.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat16.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_16 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_2.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz + u_xlat10_2.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_1.x = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat26 = (-u_xlat16_1.x) + _LightmapThreshold;
    u_xlat26 = u_xlat26 + 1.0;
    u_xlat26 = floor(u_xlat26);
    u_xlat26 = max(u_xlat26, 0.0);
    u_xlati26 = int(u_xlat26);
    u_xlat26 = (u_xlati26 != 0) ? 0.0 : 1.0;
    u_xlat26 = u_xlat26 + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
#else
    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * vec3(u_xlat26);
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_5.xyz) * u_xlat16_3.xyz + u_xlat16_1.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_16) * u_xlat16_0.xyw + u_xlat16_6.xyz;
    u_xlat24 = float(_UseSet);
    u_xlat2.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat2.xy = vec2(u_xlat24) * u_xlat2.xy + vs_TEXCOORD0.xy;
    u_xlat10_2.xyz = texture(_EmissionMask, u_xlat2.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_UseChannel==2);
#else
    u_xlatb24 = _UseChannel==2;
#endif
    u_xlat16_1.x = float(_UseChannel);
    u_xlat16_9 = (-u_xlat10_2.x) + u_xlat10_2.y;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9 + u_xlat10_2.x;
    u_xlat16_1.x = (u_xlatb24) ? u_xlat10_2.z : u_xlat16_1.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _Emission.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_1.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
lowp vec3 u_xlat10_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_9;
bvec2 u_xlatb12;
lowp float u_xlat10_18;
bool u_xlatb18;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_18 = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_3.x = u_xlat10_18;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_9.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_4.x = u_xlat10_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_4.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UseChannel==2);
#else
    u_xlatb18 = _UseChannel==2;
#endif
    u_xlat16_21 = float(_UseChannel);
    u_xlat16_22 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22 + u_xlat10_0.x;
    u_xlat16_21 = (u_xlatb18) ? u_xlat10_0.z : u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * _Emission.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Emission.www;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
lowp vec3 u_xlat10_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_9;
bvec2 u_xlatb12;
lowp float u_xlat10_18;
bool u_xlatb18;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_18 = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_3.x = u_xlat10_18;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_9.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_4.x = u_xlat10_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_4.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UseChannel==2);
#else
    u_xlatb18 = _UseChannel==2;
#endif
    u_xlat16_21 = float(_UseChannel);
    u_xlat16_22 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22 + u_xlat10_0.x;
    u_xlat16_21 = (u_xlatb18) ? u_xlat10_0.z : u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * _Emission.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Emission.www;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
lowp vec3 u_xlat10_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_9;
bvec2 u_xlatb12;
lowp float u_xlat10_18;
bool u_xlatb18;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_18 = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_3.x = u_xlat10_18;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_9.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_4.x = u_xlat10_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_4.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UseChannel==2);
#else
    u_xlatb18 = _UseChannel==2;
#endif
    u_xlat16_21 = float(_UseChannel);
    u_xlat16_22 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22 + u_xlat10_0.x;
    u_xlat16_21 = (u_xlatb18) ? u_xlat10_0.z : u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * _Emission.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Emission.www;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec2 u_xlat1;
lowp vec3 u_xlat10_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_8;
float u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat15;
lowp float u_xlat10_15;
bool u_xlatb15;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb15 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb15){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_15 = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_3.x = u_xlat10_15;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_8.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_4.x = u_xlat10_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_4.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_8.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
    u_xlat10 = dot(u_xlat0.xyz, vs_TEXCOORD5.xyz);
    u_xlat10 = u_xlat10 + u_xlat10;
    u_xlat0.xy = vs_TEXCOORD5.xy * (-vec2(u_xlat10)) + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + (-vs_TEXCOORD5.xy);
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat0.xy + vs_TEXCOORD5.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_10 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_3.xyz * u_xlat16_0.xyw + (-u_xlat16_3.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_10) * u_xlat16_0.xyw + u_xlat16_3.xyz;
    u_xlat15 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat15) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_3.x = float(_UseChannel);
    u_xlat16_8.x = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8.x + u_xlat10_1.x;
    u_xlat16_3.x = (u_xlatb15) ? u_xlat10_1.z : u_xlat16_3.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec2 u_xlat1;
lowp vec3 u_xlat10_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_8;
float u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat15;
lowp float u_xlat10_15;
bool u_xlatb15;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb15 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb15){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_15 = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_3.x = u_xlat10_15;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_8.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_4.x = u_xlat10_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_4.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_8.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
    u_xlat10 = dot(u_xlat0.xyz, vs_TEXCOORD5.xyz);
    u_xlat10 = u_xlat10 + u_xlat10;
    u_xlat0.xy = vs_TEXCOORD5.xy * (-vec2(u_xlat10)) + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + (-vs_TEXCOORD5.xy);
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat0.xy + vs_TEXCOORD5.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_10 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_3.xyz * u_xlat16_0.xyw + (-u_xlat16_3.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_10) * u_xlat16_0.xyw + u_xlat16_3.xyz;
    u_xlat15 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat15) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_3.x = float(_UseChannel);
    u_xlat16_8.x = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8.x + u_xlat10_1.x;
    u_xlat16_3.x = (u_xlatb15) ? u_xlat10_1.z : u_xlat16_3.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec2 u_xlat1;
lowp vec3 u_xlat10_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_8;
float u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat15;
lowp float u_xlat10_15;
bool u_xlatb15;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb15 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb15){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_15 = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_3.x = u_xlat10_15;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_8.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_4.x = u_xlat10_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_4.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_8.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
    u_xlat10 = dot(u_xlat0.xyz, vs_TEXCOORD5.xyz);
    u_xlat10 = u_xlat10 + u_xlat10;
    u_xlat0.xy = vs_TEXCOORD5.xy * (-vec2(u_xlat10)) + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + (-vs_TEXCOORD5.xy);
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat0.xy + vs_TEXCOORD5.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_10 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_3.xyz * u_xlat16_0.xyw + (-u_xlat16_3.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_10) * u_xlat16_0.xyw + u_xlat16_3.xyz;
    u_xlat15 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat15) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_3.x = float(_UseChannel);
    u_xlat16_8.x = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8.x + u_xlat10_1.x;
    u_xlat16_3.x = (u_xlatb15) ? u_xlat10_1.z : u_xlat16_3.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_10;
bvec2 u_xlatb14;
vec2 u_xlat15;
float u_xlat21;
lowp float u_xlat10_21;
bool u_xlatb21;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb21 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb21){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_21 = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_3.x = u_xlat10_21;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_10.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_4.x = u_xlat10_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_4.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_10.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_24 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat1.xyz = vec3(u_xlat16_25) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_24) + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_26) + u_xlat1.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat15.xy = u_xlat1.xy * (-vec2(u_xlat21)) + u_xlat2.xy;
    u_xlat15.xy = (-u_xlat1.xy) + u_xlat15.xy;
    u_xlat1.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat15.xy + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_21 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_2.xyz = texture(_MatCap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz + u_xlat10_2.xyz;
    u_xlat1.xy = u_xlat1.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_1.xyz = texture(_SpecularMap, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SpecularIntensity);
    u_xlat16_24 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat0.x = (-u_xlat16_24) + _LightmapThreshold;
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    u_xlat0.x = (u_xlati0 != 0) ? 0.0 : 1.0;
    u_xlat0.x = u_xlat0.x + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_4.xyz) * u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_21) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat21) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_3.x = float(_UseChannel);
    u_xlat16_10.x = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10.x + u_xlat10_1.x;
    u_xlat16_3.x = (u_xlatb21) ? u_xlat10_1.z : u_xlat16_3.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_10;
bvec2 u_xlatb14;
vec2 u_xlat15;
float u_xlat21;
lowp float u_xlat10_21;
bool u_xlatb21;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb21 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb21){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_21 = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_3.x = u_xlat10_21;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_10.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_4.x = u_xlat10_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_4.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_10.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_24 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat1.xyz = vec3(u_xlat16_25) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_24) + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_26) + u_xlat1.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat15.xy = u_xlat1.xy * (-vec2(u_xlat21)) + u_xlat2.xy;
    u_xlat15.xy = (-u_xlat1.xy) + u_xlat15.xy;
    u_xlat1.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat15.xy + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_21 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_2.xyz = texture(_MatCap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz + u_xlat10_2.xyz;
    u_xlat1.xy = u_xlat1.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_1.xyz = texture(_SpecularMap, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SpecularIntensity);
    u_xlat16_24 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat0.x = (-u_xlat16_24) + _LightmapThreshold;
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    u_xlat0.x = (u_xlati0 != 0) ? 0.0 : 1.0;
    u_xlat0.x = u_xlat0.x + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_4.xyz) * u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_21) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat21) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_3.x = float(_UseChannel);
    u_xlat16_10.x = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10.x + u_xlat10_1.x;
    u_xlat16_3.x = (u_xlatb21) ? u_xlat10_1.z : u_xlat16_3.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_10;
bvec2 u_xlatb14;
vec2 u_xlat15;
float u_xlat21;
lowp float u_xlat10_21;
bool u_xlatb21;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb21 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb21){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_21 = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_3.x = u_xlat10_21;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_10.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_4.x = u_xlat10_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_4.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_10.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_24 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat1.xyz = vec3(u_xlat16_25) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_24) + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_26) + u_xlat1.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat15.xy = u_xlat1.xy * (-vec2(u_xlat21)) + u_xlat2.xy;
    u_xlat15.xy = (-u_xlat1.xy) + u_xlat15.xy;
    u_xlat1.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat15.xy + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_21 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_2.xyz = texture(_MatCap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz + u_xlat10_2.xyz;
    u_xlat1.xy = u_xlat1.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_1.xyz = texture(_SpecularMap, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SpecularIntensity);
    u_xlat16_24 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat0.x = (-u_xlat16_24) + _LightmapThreshold;
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    u_xlat0.x = (u_xlati0 != 0) ? 0.0 : 1.0;
    u_xlat0.x = u_xlat0.x + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_4.xyz) * u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_21) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat21) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_3.x = float(_UseChannel);
    u_xlat16_10.x = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10.x + u_xlat10_1.x;
    u_xlat16_3.x = (u_xlatb21) ? u_xlat10_1.z : u_xlat16_3.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
lowp vec3 u_xlat10_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_9;
bvec2 u_xlatb12;
mediump float u_xlat16_18;
lowp float u_xlat10_18;
bool u_xlatb18;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_18 = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_3.x = u_xlat10_18;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_9.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_18 = dot(u_xlat16_9.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat2.x = u_xlat16_18 * _LightmapColorScale;
    u_xlat2.y = 0.5;
    u_xlat10_2.xyz = texture(_LightmapColorChange, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_9.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_9.xyz);
    u_xlat16_9.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_9.xyz;
    u_xlat6.x = (-u_xlat16_18) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat6.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_9.xyz;
    u_xlat16_9.x = u_xlat10_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9.x = min(max(u_xlat16_9.x, 0.0), 1.0);
#else
    u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_9.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat6.xyz * u_xlat16_3.xxx;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UseChannel==2);
#else
    u_xlatb18 = _UseChannel==2;
#endif
    u_xlat16_21 = float(_UseChannel);
    u_xlat16_22 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22 + u_xlat10_0.x;
    u_xlat16_21 = (u_xlatb18) ? u_xlat10_0.z : u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * _Emission.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Emission.www;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
lowp vec3 u_xlat10_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_9;
bvec2 u_xlatb12;
mediump float u_xlat16_18;
lowp float u_xlat10_18;
bool u_xlatb18;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_18 = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_3.x = u_xlat10_18;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_9.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_18 = dot(u_xlat16_9.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat2.x = u_xlat16_18 * _LightmapColorScale;
    u_xlat2.y = 0.5;
    u_xlat10_2.xyz = texture(_LightmapColorChange, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_9.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_9.xyz);
    u_xlat16_9.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_9.xyz;
    u_xlat6.x = (-u_xlat16_18) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat6.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_9.xyz;
    u_xlat16_9.x = u_xlat10_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9.x = min(max(u_xlat16_9.x, 0.0), 1.0);
#else
    u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_9.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat6.xyz * u_xlat16_3.xxx;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UseChannel==2);
#else
    u_xlatb18 = _UseChannel==2;
#endif
    u_xlat16_21 = float(_UseChannel);
    u_xlat16_22 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22 + u_xlat10_0.x;
    u_xlat16_21 = (u_xlatb18) ? u_xlat10_0.z : u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * _Emission.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Emission.www;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
lowp vec3 u_xlat10_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_9;
bvec2 u_xlatb12;
mediump float u_xlat16_18;
lowp float u_xlat10_18;
bool u_xlatb18;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_18 = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_3.x = u_xlat10_18;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_9.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_18 = dot(u_xlat16_9.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat2.x = u_xlat16_18 * _LightmapColorScale;
    u_xlat2.y = 0.5;
    u_xlat10_2.xyz = texture(_LightmapColorChange, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_9.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_9.xyz);
    u_xlat16_9.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_9.xyz;
    u_xlat6.x = (-u_xlat16_18) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat6.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_9.xyz;
    u_xlat16_9.x = u_xlat10_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9.x = min(max(u_xlat16_9.x, 0.0), 1.0);
#else
    u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_9.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat6.xyz * u_xlat16_3.xxx;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UseChannel==2);
#else
    u_xlatb18 = _UseChannel==2;
#endif
    u_xlat16_21 = float(_UseChannel);
    u_xlat16_22 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22 + u_xlat10_0.x;
    u_xlat16_21 = (u_xlatb18) ? u_xlat10_0.z : u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * _Emission.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Emission.www;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_8;
vec2 u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat15;
mediump float u_xlat16_15;
lowp float u_xlat10_15;
bool u_xlatb15;
mediump float u_xlat16_18;
mediump float u_xlat16_19;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb15 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb15){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_15 = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_3.x = u_xlat10_15;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_8.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_15 = dot(u_xlat16_8.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat2.x = u_xlat16_15 * _LightmapColorScale;
    u_xlat2.y = 0.5;
    u_xlat10_2.xyz = texture(_LightmapColorChange, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_8.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_8.xyz);
    u_xlat16_8.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_8.xyz;
    u_xlat5.x = (-u_xlat16_15) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat5.xyz = u_xlat5.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_8.xyz;
    u_xlat16_8.x = u_xlat10_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);
#else
    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_8.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat5.xyz * u_xlat16_3.xxx;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_18 = dot(vs_TEXCOORD5.xyz, u_xlat16_4.xyz);
    u_xlat16_19 = dot(vs_TEXCOORD6.xyz, u_xlat16_4.xyz);
    u_xlat16_4.x = dot(vs_TEXCOORD7.xyz, u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(u_xlat16_19) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_18) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat16_4.xxx + u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat10.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat10.x = u_xlat10.x + u_xlat10.x;
    u_xlat10.xy = u_xlat0.xy * (-u_xlat10.xx) + u_xlat1.xy;
    u_xlat10.xy = (-u_xlat0.xy) + u_xlat10.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat10.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_10 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_3.xyz * u_xlat16_0.xyw + (-u_xlat16_3.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_10) * u_xlat16_0.xyw + u_xlat16_3.xyz;
    u_xlat15 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat15) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_3.x = float(_UseChannel);
    u_xlat16_8.x = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8.x + u_xlat10_1.x;
    u_xlat16_3.x = (u_xlatb15) ? u_xlat10_1.z : u_xlat16_3.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_8;
vec2 u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat15;
mediump float u_xlat16_15;
lowp float u_xlat10_15;
bool u_xlatb15;
mediump float u_xlat16_18;
mediump float u_xlat16_19;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb15 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb15){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_15 = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_3.x = u_xlat10_15;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_8.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_15 = dot(u_xlat16_8.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat2.x = u_xlat16_15 * _LightmapColorScale;
    u_xlat2.y = 0.5;
    u_xlat10_2.xyz = texture(_LightmapColorChange, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_8.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_8.xyz);
    u_xlat16_8.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_8.xyz;
    u_xlat5.x = (-u_xlat16_15) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat5.xyz = u_xlat5.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_8.xyz;
    u_xlat16_8.x = u_xlat10_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);
#else
    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_8.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat5.xyz * u_xlat16_3.xxx;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_18 = dot(vs_TEXCOORD5.xyz, u_xlat16_4.xyz);
    u_xlat16_19 = dot(vs_TEXCOORD6.xyz, u_xlat16_4.xyz);
    u_xlat16_4.x = dot(vs_TEXCOORD7.xyz, u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(u_xlat16_19) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_18) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat16_4.xxx + u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat10.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat10.x = u_xlat10.x + u_xlat10.x;
    u_xlat10.xy = u_xlat0.xy * (-u_xlat10.xx) + u_xlat1.xy;
    u_xlat10.xy = (-u_xlat0.xy) + u_xlat10.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat10.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_10 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_3.xyz * u_xlat16_0.xyw + (-u_xlat16_3.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_10) * u_xlat16_0.xyw + u_xlat16_3.xyz;
    u_xlat15 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat15) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_3.x = float(_UseChannel);
    u_xlat16_8.x = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8.x + u_xlat10_1.x;
    u_xlat16_3.x = (u_xlatb15) ? u_xlat10_1.z : u_xlat16_3.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_8;
vec2 u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat15;
mediump float u_xlat16_15;
lowp float u_xlat10_15;
bool u_xlatb15;
mediump float u_xlat16_18;
mediump float u_xlat16_19;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb15 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb15){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_15 = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_3.x = u_xlat10_15;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_8.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_15 = dot(u_xlat16_8.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat2.x = u_xlat16_15 * _LightmapColorScale;
    u_xlat2.y = 0.5;
    u_xlat10_2.xyz = texture(_LightmapColorChange, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_8.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_8.xyz);
    u_xlat16_8.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_8.xyz;
    u_xlat5.x = (-u_xlat16_15) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat5.xyz = u_xlat5.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_8.xyz;
    u_xlat16_8.x = u_xlat10_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);
#else
    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_8.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat5.xyz * u_xlat16_3.xxx;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_18 = dot(vs_TEXCOORD5.xyz, u_xlat16_4.xyz);
    u_xlat16_19 = dot(vs_TEXCOORD6.xyz, u_xlat16_4.xyz);
    u_xlat16_4.x = dot(vs_TEXCOORD7.xyz, u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(u_xlat16_19) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_18) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat16_4.xxx + u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat10.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat10.x = u_xlat10.x + u_xlat10.x;
    u_xlat10.xy = u_xlat0.xy * (-u_xlat10.xx) + u_xlat1.xy;
    u_xlat10.xy = (-u_xlat0.xy) + u_xlat10.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat10.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_10 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_3.xyz * u_xlat16_0.xyw + (-u_xlat16_3.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_10) * u_xlat16_0.xyw + u_xlat16_3.xyz;
    u_xlat15 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat15) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_3.x = float(_UseChannel);
    u_xlat16_8.x = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8.x + u_xlat10_1.x;
    u_xlat16_3.x = (u_xlatb15) ? u_xlat10_1.z : u_xlat16_3.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_10;
bvec2 u_xlatb14;
vec2 u_xlat15;
float u_xlat21;
mediump float u_xlat16_21;
lowp float u_xlat10_21;
bool u_xlatb21;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb21 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb21){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_21 = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_3.x = u_xlat10_21;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_10.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_21 = dot(u_xlat16_10.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat2.x = u_xlat16_21 * _LightmapColorScale;
    u_xlat2.y = 0.5;
    u_xlat10_2.xyz = texture(_LightmapColorChange, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_10.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_10.xyz);
    u_xlat16_10.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_10.xyz;
    u_xlat21 = (-u_xlat16_21) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.xyz = vec3(u_xlat21) * vec3(_LightmapDarkPromotion) + u_xlat16_10.xyz;
    u_xlat16_10.x = u_xlat10_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_10.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_24 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat1.xyz = vec3(u_xlat16_25) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_24) + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_26) + u_xlat1.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat15.xy = u_xlat1.xy * (-vec2(u_xlat21)) + u_xlat2.xy;
    u_xlat15.xy = (-u_xlat1.xy) + u_xlat15.xy;
    u_xlat1.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat15.xy + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_21 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_2.xyz = texture(_MatCap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz + u_xlat10_2.xyz;
    u_xlat1.xy = u_xlat1.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_1.xyz = texture(_SpecularMap, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SpecularIntensity);
    u_xlat16_24 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat0.x = (-u_xlat16_24) + _LightmapThreshold;
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    u_xlat0.x = (u_xlati0 != 0) ? 0.0 : 1.0;
    u_xlat0.x = u_xlat0.x + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_4.xyz) * u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_21) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat21) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_3.x = float(_UseChannel);
    u_xlat16_10.x = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10.x + u_xlat10_1.x;
    u_xlat16_3.x = (u_xlatb21) ? u_xlat10_1.z : u_xlat16_3.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_10;
bvec2 u_xlatb14;
vec2 u_xlat15;
float u_xlat21;
mediump float u_xlat16_21;
lowp float u_xlat10_21;
bool u_xlatb21;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb21 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb21){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_21 = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_3.x = u_xlat10_21;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_10.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_21 = dot(u_xlat16_10.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat2.x = u_xlat16_21 * _LightmapColorScale;
    u_xlat2.y = 0.5;
    u_xlat10_2.xyz = texture(_LightmapColorChange, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_10.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_10.xyz);
    u_xlat16_10.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_10.xyz;
    u_xlat21 = (-u_xlat16_21) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.xyz = vec3(u_xlat21) * vec3(_LightmapDarkPromotion) + u_xlat16_10.xyz;
    u_xlat16_10.x = u_xlat10_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_10.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_24 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat1.xyz = vec3(u_xlat16_25) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_24) + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_26) + u_xlat1.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat15.xy = u_xlat1.xy * (-vec2(u_xlat21)) + u_xlat2.xy;
    u_xlat15.xy = (-u_xlat1.xy) + u_xlat15.xy;
    u_xlat1.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat15.xy + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_21 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_2.xyz = texture(_MatCap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz + u_xlat10_2.xyz;
    u_xlat1.xy = u_xlat1.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_1.xyz = texture(_SpecularMap, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SpecularIntensity);
    u_xlat16_24 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat0.x = (-u_xlat16_24) + _LightmapThreshold;
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    u_xlat0.x = (u_xlati0 != 0) ? 0.0 : 1.0;
    u_xlat0.x = u_xlat0.x + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_4.xyz) * u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_21) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat21) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_3.x = float(_UseChannel);
    u_xlat16_10.x = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10.x + u_xlat10_1.x;
    u_xlat16_3.x = (u_xlatb21) ? u_xlat10_1.z : u_xlat16_3.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_10;
bvec2 u_xlatb14;
vec2 u_xlat15;
float u_xlat21;
mediump float u_xlat16_21;
lowp float u_xlat10_21;
bool u_xlatb21;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb21 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb21){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_21 = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_3.x = u_xlat10_21;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_10.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_21 = dot(u_xlat16_10.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat2.x = u_xlat16_21 * _LightmapColorScale;
    u_xlat2.y = 0.5;
    u_xlat10_2.xyz = texture(_LightmapColorChange, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_10.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_10.xyz);
    u_xlat16_10.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_10.xyz;
    u_xlat21 = (-u_xlat16_21) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.xyz = vec3(u_xlat21) * vec3(_LightmapDarkPromotion) + u_xlat16_10.xyz;
    u_xlat16_10.x = u_xlat10_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_10.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_24 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat1.xyz = vec3(u_xlat16_25) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_24) + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_26) + u_xlat1.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat15.xy = u_xlat1.xy * (-vec2(u_xlat21)) + u_xlat2.xy;
    u_xlat15.xy = (-u_xlat1.xy) + u_xlat15.xy;
    u_xlat1.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat15.xy + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_21 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_2.xyz = texture(_MatCap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz + u_xlat10_2.xyz;
    u_xlat1.xy = u_xlat1.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_1.xyz = texture(_SpecularMap, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SpecularIntensity);
    u_xlat16_24 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat0.x = (-u_xlat16_24) + _LightmapThreshold;
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    u_xlat0.x = (u_xlati0 != 0) ? 0.0 : 1.0;
    u_xlat0.x = u_xlat0.x + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_4.xyz) * u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_21) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat21) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_3.x = float(_UseChannel);
    u_xlat16_10.x = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10.x + u_xlat10_1.x;
    u_xlat16_3.x = (u_xlatb21) ? u_xlat10_1.z : u_xlat16_3.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
lowp vec3 u_xlat10_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_9;
bvec2 u_xlatb12;
lowp float u_xlat10_18;
bool u_xlatb18;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_18 = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_3.x = u_xlat10_18;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_9.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_4.x = u_xlat10_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_4.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UseChannel==2);
#else
    u_xlatb18 = _UseChannel==2;
#endif
    u_xlat16_21 = float(_UseChannel);
    u_xlat16_22 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22 + u_xlat10_0.x;
    u_xlat16_21 = (u_xlatb18) ? u_xlat10_0.z : u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * _Emission.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Emission.www;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
lowp vec3 u_xlat10_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_9;
bvec2 u_xlatb12;
lowp float u_xlat10_18;
bool u_xlatb18;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_18 = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_3.x = u_xlat10_18;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_9.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_4.x = u_xlat10_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_4.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UseChannel==2);
#else
    u_xlatb18 = _UseChannel==2;
#endif
    u_xlat16_21 = float(_UseChannel);
    u_xlat16_22 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22 + u_xlat10_0.x;
    u_xlat16_21 = (u_xlatb18) ? u_xlat10_0.z : u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * _Emission.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Emission.www;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
lowp vec3 u_xlat10_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_9;
bvec2 u_xlatb12;
lowp float u_xlat10_18;
bool u_xlatb18;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_18 = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_3.x = u_xlat10_18;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_9.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_4.x = u_xlat10_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_4.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UseChannel==2);
#else
    u_xlatb18 = _UseChannel==2;
#endif
    u_xlat16_21 = float(_UseChannel);
    u_xlat16_22 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22 + u_xlat10_0.x;
    u_xlat16_21 = (u_xlatb18) ? u_xlat10_0.z : u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * _Emission.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Emission.www;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec2 u_xlat1;
lowp vec3 u_xlat10_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_8;
float u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat15;
lowp float u_xlat10_15;
bool u_xlatb15;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb15 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb15){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_15 = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_3.x = u_xlat10_15;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_8.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_4.x = u_xlat10_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_4.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_8.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
    u_xlat10 = dot(u_xlat0.xyz, vs_TEXCOORD5.xyz);
    u_xlat10 = u_xlat10 + u_xlat10;
    u_xlat0.xy = vs_TEXCOORD5.xy * (-vec2(u_xlat10)) + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + (-vs_TEXCOORD5.xy);
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat0.xy + vs_TEXCOORD5.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_10 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_3.xyz * u_xlat16_0.xyw + (-u_xlat16_3.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_10) * u_xlat16_0.xyw + u_xlat16_3.xyz;
    u_xlat15 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat15) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_3.x = float(_UseChannel);
    u_xlat16_8.x = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8.x + u_xlat10_1.x;
    u_xlat16_3.x = (u_xlatb15) ? u_xlat10_1.z : u_xlat16_3.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec2 u_xlat1;
lowp vec3 u_xlat10_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_8;
float u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat15;
lowp float u_xlat10_15;
bool u_xlatb15;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb15 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb15){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_15 = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_3.x = u_xlat10_15;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_8.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_4.x = u_xlat10_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_4.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_8.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
    u_xlat10 = dot(u_xlat0.xyz, vs_TEXCOORD5.xyz);
    u_xlat10 = u_xlat10 + u_xlat10;
    u_xlat0.xy = vs_TEXCOORD5.xy * (-vec2(u_xlat10)) + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + (-vs_TEXCOORD5.xy);
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat0.xy + vs_TEXCOORD5.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_10 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_3.xyz * u_xlat16_0.xyw + (-u_xlat16_3.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_10) * u_xlat16_0.xyw + u_xlat16_3.xyz;
    u_xlat15 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat15) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_3.x = float(_UseChannel);
    u_xlat16_8.x = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8.x + u_xlat10_1.x;
    u_xlat16_3.x = (u_xlatb15) ? u_xlat10_1.z : u_xlat16_3.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec2 u_xlat1;
lowp vec3 u_xlat10_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_8;
float u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat15;
lowp float u_xlat10_15;
bool u_xlatb15;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb15 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb15){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_15 = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_3.x = u_xlat10_15;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_8.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_4.x = u_xlat10_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_4.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_8.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
    u_xlat10 = dot(u_xlat0.xyz, vs_TEXCOORD5.xyz);
    u_xlat10 = u_xlat10 + u_xlat10;
    u_xlat0.xy = vs_TEXCOORD5.xy * (-vec2(u_xlat10)) + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + (-vs_TEXCOORD5.xy);
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat0.xy + vs_TEXCOORD5.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_10 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_3.xyz * u_xlat16_0.xyw + (-u_xlat16_3.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_10) * u_xlat16_0.xyw + u_xlat16_3.xyz;
    u_xlat15 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat15) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_3.x = float(_UseChannel);
    u_xlat16_8.x = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8.x + u_xlat10_1.x;
    u_xlat16_3.x = (u_xlatb15) ? u_xlat10_1.z : u_xlat16_3.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_10;
bvec2 u_xlatb14;
vec2 u_xlat15;
float u_xlat21;
lowp float u_xlat10_21;
bool u_xlatb21;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb21 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb21){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_21 = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_3.x = u_xlat10_21;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_10.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_4.x = u_xlat10_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_4.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_10.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_24 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat1.xyz = vec3(u_xlat16_25) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_24) + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_26) + u_xlat1.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat15.xy = u_xlat1.xy * (-vec2(u_xlat21)) + u_xlat2.xy;
    u_xlat15.xy = (-u_xlat1.xy) + u_xlat15.xy;
    u_xlat1.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat15.xy + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_21 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_2.xyz = texture(_MatCap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz + u_xlat10_2.xyz;
    u_xlat1.xy = u_xlat1.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_1.xyz = texture(_SpecularMap, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SpecularIntensity);
    u_xlat16_24 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat0.x = (-u_xlat16_24) + _LightmapThreshold;
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    u_xlat0.x = (u_xlati0 != 0) ? 0.0 : 1.0;
    u_xlat0.x = u_xlat0.x + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_4.xyz) * u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_21) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat21) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_3.x = float(_UseChannel);
    u_xlat16_10.x = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10.x + u_xlat10_1.x;
    u_xlat16_3.x = (u_xlatb21) ? u_xlat10_1.z : u_xlat16_3.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_10;
bvec2 u_xlatb14;
vec2 u_xlat15;
float u_xlat21;
lowp float u_xlat10_21;
bool u_xlatb21;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb21 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb21){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_21 = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_3.x = u_xlat10_21;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_10.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_4.x = u_xlat10_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_4.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_10.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_24 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat1.xyz = vec3(u_xlat16_25) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_24) + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_26) + u_xlat1.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat15.xy = u_xlat1.xy * (-vec2(u_xlat21)) + u_xlat2.xy;
    u_xlat15.xy = (-u_xlat1.xy) + u_xlat15.xy;
    u_xlat1.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat15.xy + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_21 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_2.xyz = texture(_MatCap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz + u_xlat10_2.xyz;
    u_xlat1.xy = u_xlat1.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_1.xyz = texture(_SpecularMap, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SpecularIntensity);
    u_xlat16_24 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat0.x = (-u_xlat16_24) + _LightmapThreshold;
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    u_xlat0.x = (u_xlati0 != 0) ? 0.0 : 1.0;
    u_xlat0.x = u_xlat0.x + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_4.xyz) * u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_21) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat21) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_3.x = float(_UseChannel);
    u_xlat16_10.x = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10.x + u_xlat10_1.x;
    u_xlat16_3.x = (u_xlatb21) ? u_xlat10_1.z : u_xlat16_3.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_10;
bvec2 u_xlatb14;
vec2 u_xlat15;
float u_xlat21;
lowp float u_xlat10_21;
bool u_xlatb21;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb21 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb21){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_21 = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_3.x = u_xlat10_21;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_10.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_4.x = u_xlat10_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_4.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_10.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_24 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat1.xyz = vec3(u_xlat16_25) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_24) + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_26) + u_xlat1.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat15.xy = u_xlat1.xy * (-vec2(u_xlat21)) + u_xlat2.xy;
    u_xlat15.xy = (-u_xlat1.xy) + u_xlat15.xy;
    u_xlat1.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat15.xy + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_21 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_2.xyz = texture(_MatCap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz + u_xlat10_2.xyz;
    u_xlat1.xy = u_xlat1.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_1.xyz = texture(_SpecularMap, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SpecularIntensity);
    u_xlat16_24 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat0.x = (-u_xlat16_24) + _LightmapThreshold;
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    u_xlat0.x = (u_xlati0 != 0) ? 0.0 : 1.0;
    u_xlat0.x = u_xlat0.x + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_4.xyz) * u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_21) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat21) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_3.x = float(_UseChannel);
    u_xlat16_10.x = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10.x + u_xlat10_1.x;
    u_xlat16_3.x = (u_xlatb21) ? u_xlat10_1.z : u_xlat16_3.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
lowp vec3 u_xlat10_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_9;
bvec2 u_xlatb12;
mediump float u_xlat16_18;
lowp float u_xlat10_18;
bool u_xlatb18;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_18 = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_3.x = u_xlat10_18;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_9.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_18 = dot(u_xlat16_9.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat2.x = u_xlat16_18 * _LightmapColorScale;
    u_xlat2.y = 0.5;
    u_xlat10_2.xyz = texture(_LightmapColorChange, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_9.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_9.xyz);
    u_xlat16_9.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_9.xyz;
    u_xlat6.x = (-u_xlat16_18) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat6.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_9.xyz;
    u_xlat16_9.x = u_xlat10_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9.x = min(max(u_xlat16_9.x, 0.0), 1.0);
#else
    u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_9.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat6.xyz * u_xlat16_3.xxx;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UseChannel==2);
#else
    u_xlatb18 = _UseChannel==2;
#endif
    u_xlat16_21 = float(_UseChannel);
    u_xlat16_22 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22 + u_xlat10_0.x;
    u_xlat16_21 = (u_xlatb18) ? u_xlat10_0.z : u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * _Emission.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Emission.www;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
lowp vec3 u_xlat10_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_9;
bvec2 u_xlatb12;
mediump float u_xlat16_18;
lowp float u_xlat10_18;
bool u_xlatb18;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_18 = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_3.x = u_xlat10_18;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_9.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_18 = dot(u_xlat16_9.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat2.x = u_xlat16_18 * _LightmapColorScale;
    u_xlat2.y = 0.5;
    u_xlat10_2.xyz = texture(_LightmapColorChange, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_9.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_9.xyz);
    u_xlat16_9.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_9.xyz;
    u_xlat6.x = (-u_xlat16_18) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat6.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_9.xyz;
    u_xlat16_9.x = u_xlat10_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9.x = min(max(u_xlat16_9.x, 0.0), 1.0);
#else
    u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_9.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat6.xyz * u_xlat16_3.xxx;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UseChannel==2);
#else
    u_xlatb18 = _UseChannel==2;
#endif
    u_xlat16_21 = float(_UseChannel);
    u_xlat16_22 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22 + u_xlat10_0.x;
    u_xlat16_21 = (u_xlatb18) ? u_xlat10_0.z : u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * _Emission.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Emission.www;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
lowp vec3 u_xlat10_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_9;
bvec2 u_xlatb12;
mediump float u_xlat16_18;
lowp float u_xlat10_18;
bool u_xlatb18;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_18 = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_3.x = u_xlat10_18;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_9.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_18 = dot(u_xlat16_9.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat2.x = u_xlat16_18 * _LightmapColorScale;
    u_xlat2.y = 0.5;
    u_xlat10_2.xyz = texture(_LightmapColorChange, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_9.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_9.xyz);
    u_xlat16_9.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_9.xyz;
    u_xlat6.x = (-u_xlat16_18) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat6.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_9.xyz;
    u_xlat16_9.x = u_xlat10_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9.x = min(max(u_xlat16_9.x, 0.0), 1.0);
#else
    u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_9.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat6.xyz * u_xlat16_3.xxx;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UseChannel==2);
#else
    u_xlatb18 = _UseChannel==2;
#endif
    u_xlat16_21 = float(_UseChannel);
    u_xlat16_22 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22 + u_xlat10_0.x;
    u_xlat16_21 = (u_xlatb18) ? u_xlat10_0.z : u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * _Emission.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Emission.www;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_8;
vec2 u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat15;
mediump float u_xlat16_15;
lowp float u_xlat10_15;
bool u_xlatb15;
mediump float u_xlat16_18;
mediump float u_xlat16_19;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb15 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb15){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_15 = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_3.x = u_xlat10_15;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_8.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_15 = dot(u_xlat16_8.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat2.x = u_xlat16_15 * _LightmapColorScale;
    u_xlat2.y = 0.5;
    u_xlat10_2.xyz = texture(_LightmapColorChange, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_8.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_8.xyz);
    u_xlat16_8.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_8.xyz;
    u_xlat5.x = (-u_xlat16_15) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat5.xyz = u_xlat5.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_8.xyz;
    u_xlat16_8.x = u_xlat10_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);
#else
    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_8.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat5.xyz * u_xlat16_3.xxx;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_18 = dot(vs_TEXCOORD5.xyz, u_xlat16_4.xyz);
    u_xlat16_19 = dot(vs_TEXCOORD6.xyz, u_xlat16_4.xyz);
    u_xlat16_4.x = dot(vs_TEXCOORD7.xyz, u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(u_xlat16_19) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_18) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat16_4.xxx + u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat10.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat10.x = u_xlat10.x + u_xlat10.x;
    u_xlat10.xy = u_xlat0.xy * (-u_xlat10.xx) + u_xlat1.xy;
    u_xlat10.xy = (-u_xlat0.xy) + u_xlat10.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat10.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_10 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_3.xyz * u_xlat16_0.xyw + (-u_xlat16_3.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_10) * u_xlat16_0.xyw + u_xlat16_3.xyz;
    u_xlat15 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat15) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_3.x = float(_UseChannel);
    u_xlat16_8.x = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8.x + u_xlat10_1.x;
    u_xlat16_3.x = (u_xlatb15) ? u_xlat10_1.z : u_xlat16_3.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_8;
vec2 u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat15;
mediump float u_xlat16_15;
lowp float u_xlat10_15;
bool u_xlatb15;
mediump float u_xlat16_18;
mediump float u_xlat16_19;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb15 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb15){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_15 = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_3.x = u_xlat10_15;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_8.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_15 = dot(u_xlat16_8.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat2.x = u_xlat16_15 * _LightmapColorScale;
    u_xlat2.y = 0.5;
    u_xlat10_2.xyz = texture(_LightmapColorChange, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_8.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_8.xyz);
    u_xlat16_8.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_8.xyz;
    u_xlat5.x = (-u_xlat16_15) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat5.xyz = u_xlat5.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_8.xyz;
    u_xlat16_8.x = u_xlat10_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);
#else
    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_8.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat5.xyz * u_xlat16_3.xxx;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_18 = dot(vs_TEXCOORD5.xyz, u_xlat16_4.xyz);
    u_xlat16_19 = dot(vs_TEXCOORD6.xyz, u_xlat16_4.xyz);
    u_xlat16_4.x = dot(vs_TEXCOORD7.xyz, u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(u_xlat16_19) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_18) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat16_4.xxx + u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat10.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat10.x = u_xlat10.x + u_xlat10.x;
    u_xlat10.xy = u_xlat0.xy * (-u_xlat10.xx) + u_xlat1.xy;
    u_xlat10.xy = (-u_xlat0.xy) + u_xlat10.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat10.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_10 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_3.xyz * u_xlat16_0.xyw + (-u_xlat16_3.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_10) * u_xlat16_0.xyw + u_xlat16_3.xyz;
    u_xlat15 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat15) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_3.x = float(_UseChannel);
    u_xlat16_8.x = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8.x + u_xlat10_1.x;
    u_xlat16_3.x = (u_xlatb15) ? u_xlat10_1.z : u_xlat16_3.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_8;
vec2 u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat15;
mediump float u_xlat16_15;
lowp float u_xlat10_15;
bool u_xlatb15;
mediump float u_xlat16_18;
mediump float u_xlat16_19;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb15 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb15){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_15 = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_3.x = u_xlat10_15;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_8.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_15 = dot(u_xlat16_8.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat2.x = u_xlat16_15 * _LightmapColorScale;
    u_xlat2.y = 0.5;
    u_xlat10_2.xyz = texture(_LightmapColorChange, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_8.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_8.xyz);
    u_xlat16_8.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_8.xyz;
    u_xlat5.x = (-u_xlat16_15) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat5.xyz = u_xlat5.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_8.xyz;
    u_xlat16_8.x = u_xlat10_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);
#else
    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_8.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat5.xyz * u_xlat16_3.xxx;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_18 = dot(vs_TEXCOORD5.xyz, u_xlat16_4.xyz);
    u_xlat16_19 = dot(vs_TEXCOORD6.xyz, u_xlat16_4.xyz);
    u_xlat16_4.x = dot(vs_TEXCOORD7.xyz, u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(u_xlat16_19) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_18) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat16_4.xxx + u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat10.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat10.x = u_xlat10.x + u_xlat10.x;
    u_xlat10.xy = u_xlat0.xy * (-u_xlat10.xx) + u_xlat1.xy;
    u_xlat10.xy = (-u_xlat0.xy) + u_xlat10.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat10.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_10 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_3.xyz * u_xlat16_0.xyw + (-u_xlat16_3.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_10) * u_xlat16_0.xyw + u_xlat16_3.xyz;
    u_xlat15 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat15) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_3.x = float(_UseChannel);
    u_xlat16_8.x = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8.x + u_xlat10_1.x;
    u_xlat16_3.x = (u_xlatb15) ? u_xlat10_1.z : u_xlat16_3.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_10;
bvec2 u_xlatb14;
vec2 u_xlat15;
float u_xlat21;
mediump float u_xlat16_21;
lowp float u_xlat10_21;
bool u_xlatb21;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb21 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb21){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_21 = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_3.x = u_xlat10_21;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_10.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_21 = dot(u_xlat16_10.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat2.x = u_xlat16_21 * _LightmapColorScale;
    u_xlat2.y = 0.5;
    u_xlat10_2.xyz = texture(_LightmapColorChange, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_10.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_10.xyz);
    u_xlat16_10.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_10.xyz;
    u_xlat21 = (-u_xlat16_21) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.xyz = vec3(u_xlat21) * vec3(_LightmapDarkPromotion) + u_xlat16_10.xyz;
    u_xlat16_10.x = u_xlat10_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_10.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_24 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat1.xyz = vec3(u_xlat16_25) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_24) + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_26) + u_xlat1.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat15.xy = u_xlat1.xy * (-vec2(u_xlat21)) + u_xlat2.xy;
    u_xlat15.xy = (-u_xlat1.xy) + u_xlat15.xy;
    u_xlat1.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat15.xy + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_21 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_2.xyz = texture(_MatCap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz + u_xlat10_2.xyz;
    u_xlat1.xy = u_xlat1.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_1.xyz = texture(_SpecularMap, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SpecularIntensity);
    u_xlat16_24 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat0.x = (-u_xlat16_24) + _LightmapThreshold;
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    u_xlat0.x = (u_xlati0 != 0) ? 0.0 : 1.0;
    u_xlat0.x = u_xlat0.x + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_4.xyz) * u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_21) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat21) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_3.x = float(_UseChannel);
    u_xlat16_10.x = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10.x + u_xlat10_1.x;
    u_xlat16_3.x = (u_xlatb21) ? u_xlat10_1.z : u_xlat16_3.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_10;
bvec2 u_xlatb14;
vec2 u_xlat15;
float u_xlat21;
mediump float u_xlat16_21;
lowp float u_xlat10_21;
bool u_xlatb21;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb21 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb21){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_21 = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_3.x = u_xlat10_21;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_10.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_21 = dot(u_xlat16_10.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat2.x = u_xlat16_21 * _LightmapColorScale;
    u_xlat2.y = 0.5;
    u_xlat10_2.xyz = texture(_LightmapColorChange, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_10.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_10.xyz);
    u_xlat16_10.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_10.xyz;
    u_xlat21 = (-u_xlat16_21) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.xyz = vec3(u_xlat21) * vec3(_LightmapDarkPromotion) + u_xlat16_10.xyz;
    u_xlat16_10.x = u_xlat10_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_10.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_24 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat1.xyz = vec3(u_xlat16_25) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_24) + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_26) + u_xlat1.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat15.xy = u_xlat1.xy * (-vec2(u_xlat21)) + u_xlat2.xy;
    u_xlat15.xy = (-u_xlat1.xy) + u_xlat15.xy;
    u_xlat1.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat15.xy + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_21 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_2.xyz = texture(_MatCap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz + u_xlat10_2.xyz;
    u_xlat1.xy = u_xlat1.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_1.xyz = texture(_SpecularMap, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SpecularIntensity);
    u_xlat16_24 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat0.x = (-u_xlat16_24) + _LightmapThreshold;
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    u_xlat0.x = (u_xlati0 != 0) ? 0.0 : 1.0;
    u_xlat0.x = u_xlat0.x + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_4.xyz) * u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_21) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat21) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_3.x = float(_UseChannel);
    u_xlat16_10.x = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10.x + u_xlat10_1.x;
    u_xlat16_3.x = (u_xlatb21) ? u_xlat10_1.z : u_xlat16_3.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_10;
bvec2 u_xlatb14;
vec2 u_xlat15;
float u_xlat21;
mediump float u_xlat16_21;
lowp float u_xlat10_21;
bool u_xlatb21;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb21 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb21){
        u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat10_21 = texture(_DynamicSceneShadowVolumeBuffer, u_xlat2.xy).x;
        u_xlat16_3.x = u_xlat10_21;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_10.xyz = u_xlat10_0.xyz * _ShadowColor.xyz;
    u_xlat16_21 = dot(u_xlat16_10.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat2.x = u_xlat16_21 * _LightmapColorScale;
    u_xlat2.y = 0.5;
    u_xlat10_2.xyz = texture(_LightmapColorChange, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_10.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xyz * _ShadowColor.xyz + (-u_xlat16_10.xyz);
    u_xlat16_10.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_4.xyz + u_xlat16_10.xyz;
    u_xlat21 = (-u_xlat16_21) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.xyz = vec3(u_xlat21) * vec3(_LightmapDarkPromotion) + u_xlat16_10.xyz;
    u_xlat16_10.x = u_xlat10_0.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_10.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat10_1.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_24 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat1.xyz = vec3(u_xlat16_25) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_24) + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_26) + u_xlat1.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat15.xy = u_xlat1.xy * (-vec2(u_xlat21)) + u_xlat2.xy;
    u_xlat15.xy = (-u_xlat1.xy) + u_xlat15.xy;
    u_xlat1.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat15.xy + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_21 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_2.xyz = texture(_MatCap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz + u_xlat10_2.xyz;
    u_xlat1.xy = u_xlat1.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_1.xyz = texture(_SpecularMap, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SpecularIntensity);
    u_xlat16_24 = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat0.x = (-u_xlat16_24) + _LightmapThreshold;
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    u_xlat0.x = (u_xlati0 != 0) ? 0.0 : 1.0;
    u_xlat0.x = u_xlat0.x + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_4.xyz) * u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_21) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat21) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_3.x = float(_UseChannel);
    u_xlat16_10.x = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10.x + u_xlat10_1.x;
    u_xlat16_3.x = (u_xlatb21) ? u_xlat10_1.z : u_xlat16_3.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
lowp vec3 u_xlat10_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
bool u_xlatb15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat10.xy * vec2(0.25, 0.25);
    u_xlat10.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat10.x * 0.0625 + unity_LODFade.y;
    u_xlat10_10 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat10.x = u_xlat10_10 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(u_xlat10.x<0.0);
#else
    u_xlatb10.x = u_xlat10.x<0.0;
#endif
    if((int(u_xlatb10.x) * int(0xffffffffu))!=0){discard;}
    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_6.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb10.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb10.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_17 = u_xlat10_0.x;
    } else {
        u_xlat16_17 = 1.0;
    //ENDIF
    }
    u_xlat16_2.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_3.x = unity_Lightmap_HDR.x * u_xlat16_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_17 = (-u_xlat16_17) + 1.0;
    u_xlat16_17 = (-u_xlat16_3.x) * u_xlat16_17 + 1.0;
    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
    u_xlat16_3.xyz = u_xlat10_6.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat5.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat5.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_17 = float(_UseChannel);
    u_xlat16_18 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_17 = u_xlat16_17 * u_xlat16_18 + u_xlat10_0.x;
    u_xlat16_17 = (u_xlatb15) ? u_xlat10_0.z : u_xlat16_17;
    u_xlat16_4.xyz = vec3(u_xlat16_17) * _Emission.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Emission.www;
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
lowp vec3 u_xlat10_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
bool u_xlatb15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat10.xy * vec2(0.25, 0.25);
    u_xlat10.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat10.x * 0.0625 + unity_LODFade.y;
    u_xlat10_10 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat10.x = u_xlat10_10 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(u_xlat10.x<0.0);
#else
    u_xlatb10.x = u_xlat10.x<0.0;
#endif
    if((int(u_xlatb10.x) * int(0xffffffffu))!=0){discard;}
    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_6.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb10.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb10.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_17 = u_xlat10_0.x;
    } else {
        u_xlat16_17 = 1.0;
    //ENDIF
    }
    u_xlat16_2.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_3.x = unity_Lightmap_HDR.x * u_xlat16_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_17 = (-u_xlat16_17) + 1.0;
    u_xlat16_17 = (-u_xlat16_3.x) * u_xlat16_17 + 1.0;
    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
    u_xlat16_3.xyz = u_xlat10_6.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat5.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat5.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_17 = float(_UseChannel);
    u_xlat16_18 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_17 = u_xlat16_17 * u_xlat16_18 + u_xlat10_0.x;
    u_xlat16_17 = (u_xlatb15) ? u_xlat10_0.z : u_xlat16_17;
    u_xlat16_4.xyz = vec3(u_xlat16_17) * _Emission.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Emission.www;
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
lowp vec3 u_xlat10_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
bool u_xlatb15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat10.xy * vec2(0.25, 0.25);
    u_xlat10.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat10.x * 0.0625 + unity_LODFade.y;
    u_xlat10_10 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat10.x = u_xlat10_10 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(u_xlat10.x<0.0);
#else
    u_xlatb10.x = u_xlat10.x<0.0;
#endif
    if((int(u_xlatb10.x) * int(0xffffffffu))!=0){discard;}
    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_6.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb10.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb10.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_17 = u_xlat10_0.x;
    } else {
        u_xlat16_17 = 1.0;
    //ENDIF
    }
    u_xlat16_2.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_3.x = unity_Lightmap_HDR.x * u_xlat16_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_17 = (-u_xlat16_17) + 1.0;
    u_xlat16_17 = (-u_xlat16_3.x) * u_xlat16_17 + 1.0;
    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
    u_xlat16_3.xyz = u_xlat10_6.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat5.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat5.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_17 = float(_UseChannel);
    u_xlat16_18 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_17 = u_xlat16_17 * u_xlat16_18 + u_xlat10_0.x;
    u_xlat16_17 = (u_xlatb15) ? u_xlat10_0.z : u_xlat16_17;
    u_xlat16_4.xyz = vec3(u_xlat16_17) * _Emission.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Emission.www;
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_5;
mediump float u_xlat16_6;
vec2 u_xlat8;
lowp float u_xlat10_8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
mediump float u_xlat16_14;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat8.xy * vec2(0.25, 0.25);
    u_xlat8.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat8.x * 0.0625 + unity_LODFade.y;
    u_xlat10_8 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat8.x = u_xlat10_8 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(u_xlat8.x<0.0);
#else
    u_xlatb8.x = u_xlat8.x<0.0;
#endif
    if((int(u_xlatb8.x) * int(0xffffffffu))!=0){discard;}
    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_5.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb8.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb8.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_14 = u_xlat10_0.x;
    } else {
        u_xlat16_14 = 1.0;
    //ENDIF
    }
    u_xlat16_2.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_3.x = unity_Lightmap_HDR.x * u_xlat16_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat16_14) + 1.0;
    u_xlat16_14 = (-u_xlat16_3.x) * u_xlat16_14 + 1.0;
    u_xlat16_2.xyz = vec3(u_xlat16_14) * u_xlat16_2.xyz;
    u_xlat16_3.xyz = u_xlat10_5.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat8.x = dot(u_xlat0.xyz, vs_TEXCOORD5.xyz);
    u_xlat8.x = u_xlat8.x + u_xlat8.x;
    u_xlat0.xy = vs_TEXCOORD5.xy * (-u_xlat8.xx) + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + (-vs_TEXCOORD5.xy);
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat0.xy + vs_TEXCOORD5.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_8 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_2.xyz * u_xlat16_0.xyw + (-u_xlat16_2.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_8) * u_xlat16_0.xyw + u_xlat16_2.xyz;
    u_xlat12 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat12) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_6 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb12) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_5;
mediump float u_xlat16_6;
vec2 u_xlat8;
lowp float u_xlat10_8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
mediump float u_xlat16_14;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat8.xy * vec2(0.25, 0.25);
    u_xlat8.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat8.x * 0.0625 + unity_LODFade.y;
    u_xlat10_8 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat8.x = u_xlat10_8 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(u_xlat8.x<0.0);
#else
    u_xlatb8.x = u_xlat8.x<0.0;
#endif
    if((int(u_xlatb8.x) * int(0xffffffffu))!=0){discard;}
    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_5.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb8.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb8.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_14 = u_xlat10_0.x;
    } else {
        u_xlat16_14 = 1.0;
    //ENDIF
    }
    u_xlat16_2.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_3.x = unity_Lightmap_HDR.x * u_xlat16_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat16_14) + 1.0;
    u_xlat16_14 = (-u_xlat16_3.x) * u_xlat16_14 + 1.0;
    u_xlat16_2.xyz = vec3(u_xlat16_14) * u_xlat16_2.xyz;
    u_xlat16_3.xyz = u_xlat10_5.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat8.x = dot(u_xlat0.xyz, vs_TEXCOORD5.xyz);
    u_xlat8.x = u_xlat8.x + u_xlat8.x;
    u_xlat0.xy = vs_TEXCOORD5.xy * (-u_xlat8.xx) + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + (-vs_TEXCOORD5.xy);
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat0.xy + vs_TEXCOORD5.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_8 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_2.xyz * u_xlat16_0.xyw + (-u_xlat16_2.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_8) * u_xlat16_0.xyw + u_xlat16_2.xyz;
    u_xlat12 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat12) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_6 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb12) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_5;
mediump float u_xlat16_6;
vec2 u_xlat8;
lowp float u_xlat10_8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
mediump float u_xlat16_14;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat8.xy * vec2(0.25, 0.25);
    u_xlat8.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat8.x * 0.0625 + unity_LODFade.y;
    u_xlat10_8 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat8.x = u_xlat10_8 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(u_xlat8.x<0.0);
#else
    u_xlatb8.x = u_xlat8.x<0.0;
#endif
    if((int(u_xlatb8.x) * int(0xffffffffu))!=0){discard;}
    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_5.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb8.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb8.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_14 = u_xlat10_0.x;
    } else {
        u_xlat16_14 = 1.0;
    //ENDIF
    }
    u_xlat16_2.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_3.x = unity_Lightmap_HDR.x * u_xlat16_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat16_14) + 1.0;
    u_xlat16_14 = (-u_xlat16_3.x) * u_xlat16_14 + 1.0;
    u_xlat16_2.xyz = vec3(u_xlat16_14) * u_xlat16_2.xyz;
    u_xlat16_3.xyz = u_xlat10_5.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat8.x = dot(u_xlat0.xyz, vs_TEXCOORD5.xyz);
    u_xlat8.x = u_xlat8.x + u_xlat8.x;
    u_xlat0.xy = vs_TEXCOORD5.xy * (-u_xlat8.xx) + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + (-vs_TEXCOORD5.xy);
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat0.xy + vs_TEXCOORD5.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_8 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_2.xyz * u_xlat16_0.xyw + (-u_xlat16_2.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_8) * u_xlat16_0.xyw + u_xlat16_2.xyz;
    u_xlat12 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat12) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_6 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb12) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_8;
mediump float u_xlat16_9;
vec2 u_xlat14;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
float u_xlat22;
int u_xlati22;
mediump float u_xlat16_23;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat14.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat14.xy * vec2(0.25, 0.25);
    u_xlat14.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat14.x * 0.0625 + unity_LODFade.y;
    u_xlat10_14 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat14.x = u_xlat10_14 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(u_xlat14.x<0.0);
#else
    u_xlatb14.x = u_xlat14.x<0.0;
#endif
    if((int(u_xlatb14.x) * int(0xffffffffu))!=0){discard;}
    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_8.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb14.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb14.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_23 = u_xlat10_0.x;
    } else {
        u_xlat16_23 = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_24 = unity_Lightmap_HDR.x * u_xlat16_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
#else
    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
#endif
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_23 = (-u_xlat16_24) * u_xlat16_23 + 1.0;
    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat10_8.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_23 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_24 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat0.xyz = vec3(u_xlat16_24) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_23) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_25) + u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat14.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
    u_xlat14.xy = u_xlat0.xy * (-u_xlat14.xx) + u_xlat1.xy;
    u_xlat14.xy = (-u_xlat0.xy) + u_xlat14.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat14.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_14 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_1.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_1.xyz + u_xlat10_1.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_2.x = dot(u_xlat16_2.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat22 = (-u_xlat16_2.x) + _LightmapThreshold;
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat22 = (u_xlati22 != 0) ? 0.0 : 1.0;
    u_xlat22 = u_xlat22 + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * vec3(u_xlat22);
    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_1.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_4.xyz) * u_xlat16_3.xyz + u_xlat16_2.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_14) * u_xlat16_0.xyw + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat21) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_9 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb21) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_8;
mediump float u_xlat16_9;
vec2 u_xlat14;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
float u_xlat22;
int u_xlati22;
mediump float u_xlat16_23;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat14.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat14.xy * vec2(0.25, 0.25);
    u_xlat14.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat14.x * 0.0625 + unity_LODFade.y;
    u_xlat10_14 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat14.x = u_xlat10_14 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(u_xlat14.x<0.0);
#else
    u_xlatb14.x = u_xlat14.x<0.0;
#endif
    if((int(u_xlatb14.x) * int(0xffffffffu))!=0){discard;}
    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_8.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb14.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb14.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_23 = u_xlat10_0.x;
    } else {
        u_xlat16_23 = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_24 = unity_Lightmap_HDR.x * u_xlat16_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
#else
    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
#endif
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_23 = (-u_xlat16_24) * u_xlat16_23 + 1.0;
    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat10_8.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_23 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_24 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat0.xyz = vec3(u_xlat16_24) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_23) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_25) + u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat14.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
    u_xlat14.xy = u_xlat0.xy * (-u_xlat14.xx) + u_xlat1.xy;
    u_xlat14.xy = (-u_xlat0.xy) + u_xlat14.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat14.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_14 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_1.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_1.xyz + u_xlat10_1.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_2.x = dot(u_xlat16_2.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat22 = (-u_xlat16_2.x) + _LightmapThreshold;
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat22 = (u_xlati22 != 0) ? 0.0 : 1.0;
    u_xlat22 = u_xlat22 + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * vec3(u_xlat22);
    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_1.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_4.xyz) * u_xlat16_3.xyz + u_xlat16_2.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_14) * u_xlat16_0.xyw + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat21) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_9 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb21) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_8;
mediump float u_xlat16_9;
vec2 u_xlat14;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
float u_xlat22;
int u_xlati22;
mediump float u_xlat16_23;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat14.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat14.xy * vec2(0.25, 0.25);
    u_xlat14.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat14.x * 0.0625 + unity_LODFade.y;
    u_xlat10_14 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat14.x = u_xlat10_14 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(u_xlat14.x<0.0);
#else
    u_xlatb14.x = u_xlat14.x<0.0;
#endif
    if((int(u_xlatb14.x) * int(0xffffffffu))!=0){discard;}
    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_8.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb14.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb14.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_23 = u_xlat10_0.x;
    } else {
        u_xlat16_23 = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_24 = unity_Lightmap_HDR.x * u_xlat16_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
#else
    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
#endif
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_23 = (-u_xlat16_24) * u_xlat16_23 + 1.0;
    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat10_8.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_23 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_24 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat0.xyz = vec3(u_xlat16_24) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_23) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_25) + u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat14.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
    u_xlat14.xy = u_xlat0.xy * (-u_xlat14.xx) + u_xlat1.xy;
    u_xlat14.xy = (-u_xlat0.xy) + u_xlat14.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat14.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_14 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_1.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_1.xyz + u_xlat10_1.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_2.x = dot(u_xlat16_2.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat22 = (-u_xlat16_2.x) + _LightmapThreshold;
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat22 = (u_xlati22 != 0) ? 0.0 : 1.0;
    u_xlat22 = u_xlat22 + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * vec3(u_xlat22);
    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_1.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_4.xyz) * u_xlat16_3.xyz + u_xlat16_2.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_14) * u_xlat16_0.xyw + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat21) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_9 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb21) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
lowp vec3 u_xlat10_7;
mediump float u_xlat16_8;
vec2 u_xlat12;
lowp float u_xlat10_12;
bvec2 u_xlatb12;
bool u_xlatb18;
mediump float u_xlat16_20;
mediump float u_xlat16_21;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat12.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat12.xy * vec2(0.25, 0.25);
    u_xlat12.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat12.x * 0.0625 + unity_LODFade.y;
    u_xlat10_12 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat12.x = u_xlat10_12 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12.x = !!(u_xlat12.x<0.0);
#else
    u_xlatb12.x = u_xlat12.x<0.0;
#endif
    if((int(u_xlatb12.x) * int(0xffffffffu))!=0){discard;}
    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_7.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb12.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb12.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_20 = u_xlat10_0.x;
    } else {
        u_xlat16_20 = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_0.x = dot(u_xlat16_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_0.x * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_6.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_6.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_3.xyz = u_xlat16_6.xyz * _ShadowColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _ShadowColor.xyz + (-u_xlat16_3.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat0.x = (-u_xlat16_0.x) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.x = unity_Lightmap_HDR.x * u_xlat16_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16_20) + 1.0;
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_8 + 1.0;
    u_xlat16_2.xyz = u_xlat0.xyz * u_xlat16_2.xxx;
    u_xlat16_3.xyz = u_xlat10_7.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UseChannel==2);
#else
    u_xlatb18 = _UseChannel==2;
#endif
    u_xlat16_20 = float(_UseChannel);
    u_xlat16_21 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_21 + u_xlat10_0.x;
    u_xlat16_20 = (u_xlatb18) ? u_xlat10_0.z : u_xlat16_20;
    u_xlat16_5.xyz = vec3(u_xlat16_20) * _Emission.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Emission.www;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
lowp vec3 u_xlat10_7;
mediump float u_xlat16_8;
vec2 u_xlat12;
lowp float u_xlat10_12;
bvec2 u_xlatb12;
bool u_xlatb18;
mediump float u_xlat16_20;
mediump float u_xlat16_21;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat12.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat12.xy * vec2(0.25, 0.25);
    u_xlat12.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat12.x * 0.0625 + unity_LODFade.y;
    u_xlat10_12 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat12.x = u_xlat10_12 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12.x = !!(u_xlat12.x<0.0);
#else
    u_xlatb12.x = u_xlat12.x<0.0;
#endif
    if((int(u_xlatb12.x) * int(0xffffffffu))!=0){discard;}
    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_7.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb12.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb12.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_20 = u_xlat10_0.x;
    } else {
        u_xlat16_20 = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_0.x = dot(u_xlat16_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_0.x * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_6.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_6.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_3.xyz = u_xlat16_6.xyz * _ShadowColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _ShadowColor.xyz + (-u_xlat16_3.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat0.x = (-u_xlat16_0.x) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.x = unity_Lightmap_HDR.x * u_xlat16_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16_20) + 1.0;
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_8 + 1.0;
    u_xlat16_2.xyz = u_xlat0.xyz * u_xlat16_2.xxx;
    u_xlat16_3.xyz = u_xlat10_7.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UseChannel==2);
#else
    u_xlatb18 = _UseChannel==2;
#endif
    u_xlat16_20 = float(_UseChannel);
    u_xlat16_21 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_21 + u_xlat10_0.x;
    u_xlat16_20 = (u_xlatb18) ? u_xlat10_0.z : u_xlat16_20;
    u_xlat16_5.xyz = vec3(u_xlat16_20) * _Emission.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Emission.www;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
lowp vec3 u_xlat10_7;
mediump float u_xlat16_8;
vec2 u_xlat12;
lowp float u_xlat10_12;
bvec2 u_xlatb12;
bool u_xlatb18;
mediump float u_xlat16_20;
mediump float u_xlat16_21;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat12.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat12.xy * vec2(0.25, 0.25);
    u_xlat12.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat12.x * 0.0625 + unity_LODFade.y;
    u_xlat10_12 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat12.x = u_xlat10_12 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12.x = !!(u_xlat12.x<0.0);
#else
    u_xlatb12.x = u_xlat12.x<0.0;
#endif
    if((int(u_xlatb12.x) * int(0xffffffffu))!=0){discard;}
    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_7.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb12.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb12.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_20 = u_xlat10_0.x;
    } else {
        u_xlat16_20 = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_0.x = dot(u_xlat16_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_0.x * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_6.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_6.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_3.xyz = u_xlat16_6.xyz * _ShadowColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _ShadowColor.xyz + (-u_xlat16_3.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat0.x = (-u_xlat16_0.x) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.x = unity_Lightmap_HDR.x * u_xlat16_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16_20) + 1.0;
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_8 + 1.0;
    u_xlat16_2.xyz = u_xlat0.xyz * u_xlat16_2.xxx;
    u_xlat16_3.xyz = u_xlat10_7.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UseChannel==2);
#else
    u_xlatb18 = _UseChannel==2;
#endif
    u_xlat16_20 = float(_UseChannel);
    u_xlat16_21 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_21 + u_xlat10_0.x;
    u_xlat16_20 = (u_xlatb18) ? u_xlat10_0.z : u_xlat16_20;
    u_xlat16_5.xyz = vec3(u_xlat16_20) * _Emission.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Emission.www;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump float u_xlat16_7;
vec2 u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat10.xy * vec2(0.25, 0.25);
    u_xlat10.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat10.x * 0.0625 + unity_LODFade.y;
    u_xlat10_10 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat10.x = u_xlat10_10 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(u_xlat10.x<0.0);
#else
    u_xlatb10.x = u_xlat10.x<0.0;
#endif
    if((int(u_xlatb10.x) * int(0xffffffffu))!=0){discard;}
    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_6.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb10.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb10.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_17 = u_xlat10_0.x;
    } else {
        u_xlat16_17 = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_0.x = dot(u_xlat16_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_0.x * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_5.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_5.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_3.xyz = u_xlat16_5.xyz * _ShadowColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _ShadowColor.xyz + (-u_xlat16_3.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat0.x = (-u_xlat16_0.x) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.x = unity_Lightmap_HDR.x * u_xlat16_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7 = (-u_xlat16_17) + 1.0;
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_7 + 1.0;
    u_xlat16_2.xyz = u_xlat0.xyz * u_xlat16_2.xxx;
    u_xlat16_3.xyz = u_xlat10_6.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_17 = dot(vs_TEXCOORD5.xyz, u_xlat16_3.xyz);
    u_xlat16_18 = dot(vs_TEXCOORD6.xyz, u_xlat16_3.xyz);
    u_xlat16_3.x = dot(vs_TEXCOORD7.xyz, u_xlat16_3.xyz);
    u_xlat0.xyz = vec3(u_xlat16_18) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_17) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat16_3.xxx + u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat10.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat10.x = u_xlat10.x + u_xlat10.x;
    u_xlat10.xy = u_xlat0.xy * (-u_xlat10.xx) + u_xlat1.xy;
    u_xlat10.xy = (-u_xlat0.xy) + u_xlat10.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat10.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_10 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_2.xyz * u_xlat16_0.xyw + (-u_xlat16_2.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_10) * u_xlat16_0.xyw + u_xlat16_2.xyz;
    u_xlat15 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat15) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_7 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb15) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump float u_xlat16_7;
vec2 u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat10.xy * vec2(0.25, 0.25);
    u_xlat10.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat10.x * 0.0625 + unity_LODFade.y;
    u_xlat10_10 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat10.x = u_xlat10_10 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(u_xlat10.x<0.0);
#else
    u_xlatb10.x = u_xlat10.x<0.0;
#endif
    if((int(u_xlatb10.x) * int(0xffffffffu))!=0){discard;}
    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_6.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb10.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb10.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_17 = u_xlat10_0.x;
    } else {
        u_xlat16_17 = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_0.x = dot(u_xlat16_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_0.x * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_5.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_5.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_3.xyz = u_xlat16_5.xyz * _ShadowColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _ShadowColor.xyz + (-u_xlat16_3.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat0.x = (-u_xlat16_0.x) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.x = unity_Lightmap_HDR.x * u_xlat16_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7 = (-u_xlat16_17) + 1.0;
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_7 + 1.0;
    u_xlat16_2.xyz = u_xlat0.xyz * u_xlat16_2.xxx;
    u_xlat16_3.xyz = u_xlat10_6.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_17 = dot(vs_TEXCOORD5.xyz, u_xlat16_3.xyz);
    u_xlat16_18 = dot(vs_TEXCOORD6.xyz, u_xlat16_3.xyz);
    u_xlat16_3.x = dot(vs_TEXCOORD7.xyz, u_xlat16_3.xyz);
    u_xlat0.xyz = vec3(u_xlat16_18) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_17) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat16_3.xxx + u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat10.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat10.x = u_xlat10.x + u_xlat10.x;
    u_xlat10.xy = u_xlat0.xy * (-u_xlat10.xx) + u_xlat1.xy;
    u_xlat10.xy = (-u_xlat0.xy) + u_xlat10.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat10.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_10 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_2.xyz * u_xlat16_0.xyw + (-u_xlat16_2.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_10) * u_xlat16_0.xyw + u_xlat16_2.xyz;
    u_xlat15 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat15) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_7 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb15) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump float u_xlat16_7;
vec2 u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat10.xy * vec2(0.25, 0.25);
    u_xlat10.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat10.x * 0.0625 + unity_LODFade.y;
    u_xlat10_10 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat10.x = u_xlat10_10 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(u_xlat10.x<0.0);
#else
    u_xlatb10.x = u_xlat10.x<0.0;
#endif
    if((int(u_xlatb10.x) * int(0xffffffffu))!=0){discard;}
    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_6.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb10.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb10.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_17 = u_xlat10_0.x;
    } else {
        u_xlat16_17 = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_0.x = dot(u_xlat16_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_0.x * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_5.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_5.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_3.xyz = u_xlat16_5.xyz * _ShadowColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _ShadowColor.xyz + (-u_xlat16_3.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat0.x = (-u_xlat16_0.x) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.x = unity_Lightmap_HDR.x * u_xlat16_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7 = (-u_xlat16_17) + 1.0;
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_7 + 1.0;
    u_xlat16_2.xyz = u_xlat0.xyz * u_xlat16_2.xxx;
    u_xlat16_3.xyz = u_xlat10_6.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_17 = dot(vs_TEXCOORD5.xyz, u_xlat16_3.xyz);
    u_xlat16_18 = dot(vs_TEXCOORD6.xyz, u_xlat16_3.xyz);
    u_xlat16_3.x = dot(vs_TEXCOORD7.xyz, u_xlat16_3.xyz);
    u_xlat0.xyz = vec3(u_xlat16_18) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_17) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat16_3.xxx + u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat10.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat10.x = u_xlat10.x + u_xlat10.x;
    u_xlat10.xy = u_xlat0.xy * (-u_xlat10.xx) + u_xlat1.xy;
    u_xlat10.xy = (-u_xlat0.xy) + u_xlat10.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat10.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_10 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_2.xyz * u_xlat16_0.xyw + (-u_xlat16_2.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_10) * u_xlat16_0.xyw + u_xlat16_2.xyz;
    u_xlat15 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat15) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_7 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb15) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
lowp vec3 u_xlat10_8;
lowp vec3 u_xlat10_9;
mediump float u_xlat16_10;
vec2 u_xlat16;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
float u_xlat25;
int u_xlati25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat16.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat16.xy * vec2(0.25, 0.25);
    u_xlat16.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat16.x * 0.0625 + unity_LODFade.y;
    u_xlat10_16 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat16.x = u_xlat10_16 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(u_xlat16.x<0.0);
#else
    u_xlatb16.x = u_xlat16.x<0.0;
#endif
    if((int(u_xlatb16.x) * int(0xffffffffu))!=0){discard;}
    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_9.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_26 = u_xlat10_0.x;
    } else {
        u_xlat16_26 = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_0.x = dot(u_xlat16_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_0.x * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_8.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_8.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_3.xyz = u_xlat16_8.xyz * _ShadowColor.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * _ShadowColor.xyz + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_5.xyz + u_xlat16_3.xyz;
    u_xlat0.x = (-u_xlat16_0.x) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_3.xyz;
    u_xlat16_3.x = unity_Lightmap_HDR.x * u_xlat16_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_26 = (-u_xlat16_26) + 1.0;
    u_xlat16_26 = (-u_xlat16_3.x) * u_xlat16_26 + 1.0;
    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat16_26);
    u_xlat16_5.xyz = u_xlat10_9.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_6.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot(vs_TEXCOORD5.xyz, u_xlat16_7.xyz);
    u_xlat16_27 = dot(vs_TEXCOORD6.xyz, u_xlat16_7.xyz);
    u_xlat16_29 = dot(vs_TEXCOORD7.xyz, u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(u_xlat16_27) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_26) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_29) + u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat16.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16.x = u_xlat16.x + u_xlat16.x;
    u_xlat16.xy = u_xlat0.xy * (-u_xlat16.xx) + u_xlat1.xy;
    u_xlat16.xy = (-u_xlat0.xy) + u_xlat16.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat16.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_16 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_1.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_1.xyz + u_xlat10_1.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_2.x = dot(u_xlat16_2.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat25 = (-u_xlat16_2.x) + _LightmapThreshold;
    u_xlat25 = u_xlat25 + 1.0;
    u_xlat25 = floor(u_xlat25);
    u_xlat25 = max(u_xlat25, 0.0);
    u_xlati25 = int(u_xlat25);
    u_xlat25 = (u_xlati25 != 0) ? 0.0 : 1.0;
    u_xlat25 = u_xlat25 + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * vec3(u_xlat25);
    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_5.xyz) * u_xlat16_3.xyz + u_xlat16_2.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_16) * u_xlat16_0.xyw + u_xlat16_6.xyz;
    u_xlat24 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat24) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_UseChannel==2);
#else
    u_xlatb24 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_10 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_10 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb24) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
lowp vec3 u_xlat10_8;
lowp vec3 u_xlat10_9;
mediump float u_xlat16_10;
vec2 u_xlat16;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
float u_xlat25;
int u_xlati25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat16.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat16.xy * vec2(0.25, 0.25);
    u_xlat16.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat16.x * 0.0625 + unity_LODFade.y;
    u_xlat10_16 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat16.x = u_xlat10_16 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(u_xlat16.x<0.0);
#else
    u_xlatb16.x = u_xlat16.x<0.0;
#endif
    if((int(u_xlatb16.x) * int(0xffffffffu))!=0){discard;}
    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_9.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_26 = u_xlat10_0.x;
    } else {
        u_xlat16_26 = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_0.x = dot(u_xlat16_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_0.x * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_8.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_8.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_3.xyz = u_xlat16_8.xyz * _ShadowColor.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * _ShadowColor.xyz + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_5.xyz + u_xlat16_3.xyz;
    u_xlat0.x = (-u_xlat16_0.x) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_3.xyz;
    u_xlat16_3.x = unity_Lightmap_HDR.x * u_xlat16_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_26 = (-u_xlat16_26) + 1.0;
    u_xlat16_26 = (-u_xlat16_3.x) * u_xlat16_26 + 1.0;
    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat16_26);
    u_xlat16_5.xyz = u_xlat10_9.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_6.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot(vs_TEXCOORD5.xyz, u_xlat16_7.xyz);
    u_xlat16_27 = dot(vs_TEXCOORD6.xyz, u_xlat16_7.xyz);
    u_xlat16_29 = dot(vs_TEXCOORD7.xyz, u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(u_xlat16_27) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_26) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_29) + u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat16.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16.x = u_xlat16.x + u_xlat16.x;
    u_xlat16.xy = u_xlat0.xy * (-u_xlat16.xx) + u_xlat1.xy;
    u_xlat16.xy = (-u_xlat0.xy) + u_xlat16.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat16.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_16 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_1.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_1.xyz + u_xlat10_1.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_2.x = dot(u_xlat16_2.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat25 = (-u_xlat16_2.x) + _LightmapThreshold;
    u_xlat25 = u_xlat25 + 1.0;
    u_xlat25 = floor(u_xlat25);
    u_xlat25 = max(u_xlat25, 0.0);
    u_xlati25 = int(u_xlat25);
    u_xlat25 = (u_xlati25 != 0) ? 0.0 : 1.0;
    u_xlat25 = u_xlat25 + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * vec3(u_xlat25);
    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_5.xyz) * u_xlat16_3.xyz + u_xlat16_2.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_16) * u_xlat16_0.xyw + u_xlat16_6.xyz;
    u_xlat24 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat24) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_UseChannel==2);
#else
    u_xlatb24 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_10 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_10 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb24) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
lowp vec3 u_xlat10_8;
lowp vec3 u_xlat10_9;
mediump float u_xlat16_10;
vec2 u_xlat16;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
float u_xlat25;
int u_xlati25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat16.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat16.xy * vec2(0.25, 0.25);
    u_xlat16.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat16.x * 0.0625 + unity_LODFade.y;
    u_xlat10_16 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat16.x = u_xlat10_16 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(u_xlat16.x<0.0);
#else
    u_xlatb16.x = u_xlat16.x<0.0;
#endif
    if((int(u_xlatb16.x) * int(0xffffffffu))!=0){discard;}
    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_9.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_26 = u_xlat10_0.x;
    } else {
        u_xlat16_26 = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_0.x = dot(u_xlat16_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_0.x * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_8.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_8.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_3.xyz = u_xlat16_8.xyz * _ShadowColor.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * _ShadowColor.xyz + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_5.xyz + u_xlat16_3.xyz;
    u_xlat0.x = (-u_xlat16_0.x) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_3.xyz;
    u_xlat16_3.x = unity_Lightmap_HDR.x * u_xlat16_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_26 = (-u_xlat16_26) + 1.0;
    u_xlat16_26 = (-u_xlat16_3.x) * u_xlat16_26 + 1.0;
    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat16_26);
    u_xlat16_5.xyz = u_xlat10_9.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_6.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot(vs_TEXCOORD5.xyz, u_xlat16_7.xyz);
    u_xlat16_27 = dot(vs_TEXCOORD6.xyz, u_xlat16_7.xyz);
    u_xlat16_29 = dot(vs_TEXCOORD7.xyz, u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(u_xlat16_27) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_26) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_29) + u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat16.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16.x = u_xlat16.x + u_xlat16.x;
    u_xlat16.xy = u_xlat0.xy * (-u_xlat16.xx) + u_xlat1.xy;
    u_xlat16.xy = (-u_xlat0.xy) + u_xlat16.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat16.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_16 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_1.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_1.xyz + u_xlat10_1.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_2.x = dot(u_xlat16_2.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat25 = (-u_xlat16_2.x) + _LightmapThreshold;
    u_xlat25 = u_xlat25 + 1.0;
    u_xlat25 = floor(u_xlat25);
    u_xlat25 = max(u_xlat25, 0.0);
    u_xlati25 = int(u_xlat25);
    u_xlat25 = (u_xlati25 != 0) ? 0.0 : 1.0;
    u_xlat25 = u_xlat25 + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * vec3(u_xlat25);
    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_5.xyz) * u_xlat16_3.xyz + u_xlat16_2.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_16) * u_xlat16_0.xyw + u_xlat16_6.xyz;
    u_xlat24 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat24) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_UseChannel==2);
#else
    u_xlatb24 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_10 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_10 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb24) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
lowp vec3 u_xlat10_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
bool u_xlatb15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat10.xy * vec2(0.25, 0.25);
    u_xlat10.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat10.x * 0.0625 + unity_LODFade.y;
    u_xlat10_10 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat10.x = u_xlat10_10 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(u_xlat10.x<0.0);
#else
    u_xlatb10.x = u_xlat10.x<0.0;
#endif
    if((int(u_xlatb10.x) * int(0xffffffffu))!=0){discard;}
    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_6.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb10.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb10.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_17 = u_xlat10_0.x;
    } else {
        u_xlat16_17 = 1.0;
    //ENDIF
    }
    u_xlat16_2.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_3.x = unity_Lightmap_HDR.x * u_xlat16_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_17 = (-u_xlat16_17) + 1.0;
    u_xlat16_17 = (-u_xlat16_3.x) * u_xlat16_17 + 1.0;
    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
    u_xlat16_3.xyz = u_xlat10_6.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat5.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat5.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_17 = float(_UseChannel);
    u_xlat16_18 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_17 = u_xlat16_17 * u_xlat16_18 + u_xlat10_0.x;
    u_xlat16_17 = (u_xlatb15) ? u_xlat10_0.z : u_xlat16_17;
    u_xlat16_4.xyz = vec3(u_xlat16_17) * _Emission.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Emission.www;
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
lowp vec3 u_xlat10_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
bool u_xlatb15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat10.xy * vec2(0.25, 0.25);
    u_xlat10.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat10.x * 0.0625 + unity_LODFade.y;
    u_xlat10_10 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat10.x = u_xlat10_10 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(u_xlat10.x<0.0);
#else
    u_xlatb10.x = u_xlat10.x<0.0;
#endif
    if((int(u_xlatb10.x) * int(0xffffffffu))!=0){discard;}
    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_6.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb10.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb10.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_17 = u_xlat10_0.x;
    } else {
        u_xlat16_17 = 1.0;
    //ENDIF
    }
    u_xlat16_2.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_3.x = unity_Lightmap_HDR.x * u_xlat16_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_17 = (-u_xlat16_17) + 1.0;
    u_xlat16_17 = (-u_xlat16_3.x) * u_xlat16_17 + 1.0;
    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
    u_xlat16_3.xyz = u_xlat10_6.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat5.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat5.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_17 = float(_UseChannel);
    u_xlat16_18 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_17 = u_xlat16_17 * u_xlat16_18 + u_xlat10_0.x;
    u_xlat16_17 = (u_xlatb15) ? u_xlat10_0.z : u_xlat16_17;
    u_xlat16_4.xyz = vec3(u_xlat16_17) * _Emission.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Emission.www;
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
lowp vec3 u_xlat10_6;
vec2 u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
bool u_xlatb15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat10.xy * vec2(0.25, 0.25);
    u_xlat10.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat10.x * 0.0625 + unity_LODFade.y;
    u_xlat10_10 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat10.x = u_xlat10_10 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(u_xlat10.x<0.0);
#else
    u_xlatb10.x = u_xlat10.x<0.0;
#endif
    if((int(u_xlatb10.x) * int(0xffffffffu))!=0){discard;}
    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_6.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb10.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb10.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_17 = u_xlat10_0.x;
    } else {
        u_xlat16_17 = 1.0;
    //ENDIF
    }
    u_xlat16_2.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_3.x = unity_Lightmap_HDR.x * u_xlat16_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_17 = (-u_xlat16_17) + 1.0;
    u_xlat16_17 = (-u_xlat16_3.x) * u_xlat16_17 + 1.0;
    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
    u_xlat16_3.xyz = u_xlat10_6.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat5.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat5.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_17 = float(_UseChannel);
    u_xlat16_18 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_17 = u_xlat16_17 * u_xlat16_18 + u_xlat10_0.x;
    u_xlat16_17 = (u_xlatb15) ? u_xlat10_0.z : u_xlat16_17;
    u_xlat16_4.xyz = vec3(u_xlat16_17) * _Emission.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Emission.www;
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_5;
mediump float u_xlat16_6;
vec2 u_xlat8;
lowp float u_xlat10_8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
mediump float u_xlat16_14;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat8.xy * vec2(0.25, 0.25);
    u_xlat8.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat8.x * 0.0625 + unity_LODFade.y;
    u_xlat10_8 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat8.x = u_xlat10_8 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(u_xlat8.x<0.0);
#else
    u_xlatb8.x = u_xlat8.x<0.0;
#endif
    if((int(u_xlatb8.x) * int(0xffffffffu))!=0){discard;}
    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_5.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb8.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb8.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_14 = u_xlat10_0.x;
    } else {
        u_xlat16_14 = 1.0;
    //ENDIF
    }
    u_xlat16_2.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_3.x = unity_Lightmap_HDR.x * u_xlat16_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat16_14) + 1.0;
    u_xlat16_14 = (-u_xlat16_3.x) * u_xlat16_14 + 1.0;
    u_xlat16_2.xyz = vec3(u_xlat16_14) * u_xlat16_2.xyz;
    u_xlat16_3.xyz = u_xlat10_5.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat8.x = dot(u_xlat0.xyz, vs_TEXCOORD5.xyz);
    u_xlat8.x = u_xlat8.x + u_xlat8.x;
    u_xlat0.xy = vs_TEXCOORD5.xy * (-u_xlat8.xx) + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + (-vs_TEXCOORD5.xy);
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat0.xy + vs_TEXCOORD5.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_8 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_2.xyz * u_xlat16_0.xyw + (-u_xlat16_2.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_8) * u_xlat16_0.xyw + u_xlat16_2.xyz;
    u_xlat12 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat12) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_6 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb12) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_5;
mediump float u_xlat16_6;
vec2 u_xlat8;
lowp float u_xlat10_8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
mediump float u_xlat16_14;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat8.xy * vec2(0.25, 0.25);
    u_xlat8.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat8.x * 0.0625 + unity_LODFade.y;
    u_xlat10_8 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat8.x = u_xlat10_8 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(u_xlat8.x<0.0);
#else
    u_xlatb8.x = u_xlat8.x<0.0;
#endif
    if((int(u_xlatb8.x) * int(0xffffffffu))!=0){discard;}
    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_5.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb8.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb8.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_14 = u_xlat10_0.x;
    } else {
        u_xlat16_14 = 1.0;
    //ENDIF
    }
    u_xlat16_2.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_3.x = unity_Lightmap_HDR.x * u_xlat16_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat16_14) + 1.0;
    u_xlat16_14 = (-u_xlat16_3.x) * u_xlat16_14 + 1.0;
    u_xlat16_2.xyz = vec3(u_xlat16_14) * u_xlat16_2.xyz;
    u_xlat16_3.xyz = u_xlat10_5.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat8.x = dot(u_xlat0.xyz, vs_TEXCOORD5.xyz);
    u_xlat8.x = u_xlat8.x + u_xlat8.x;
    u_xlat0.xy = vs_TEXCOORD5.xy * (-u_xlat8.xx) + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + (-vs_TEXCOORD5.xy);
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat0.xy + vs_TEXCOORD5.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_8 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_2.xyz * u_xlat16_0.xyw + (-u_xlat16_2.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_8) * u_xlat16_0.xyw + u_xlat16_2.xyz;
    u_xlat12 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat12) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_6 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb12) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_5;
mediump float u_xlat16_6;
vec2 u_xlat8;
lowp float u_xlat10_8;
bvec2 u_xlatb8;
float u_xlat12;
bool u_xlatb12;
mediump float u_xlat16_14;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat8.xy * vec2(0.25, 0.25);
    u_xlat8.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat8.x * 0.0625 + unity_LODFade.y;
    u_xlat10_8 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat8.x = u_xlat10_8 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(u_xlat8.x<0.0);
#else
    u_xlatb8.x = u_xlat8.x<0.0;
#endif
    if((int(u_xlatb8.x) * int(0xffffffffu))!=0){discard;}
    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_5.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb8.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb8.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_14 = u_xlat10_0.x;
    } else {
        u_xlat16_14 = 1.0;
    //ENDIF
    }
    u_xlat16_2.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_3.x = unity_Lightmap_HDR.x * u_xlat16_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_14 = (-u_xlat16_14) + 1.0;
    u_xlat16_14 = (-u_xlat16_3.x) * u_xlat16_14 + 1.0;
    u_xlat16_2.xyz = vec3(u_xlat16_14) * u_xlat16_2.xyz;
    u_xlat16_3.xyz = u_xlat10_5.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat8.x = dot(u_xlat0.xyz, vs_TEXCOORD5.xyz);
    u_xlat8.x = u_xlat8.x + u_xlat8.x;
    u_xlat0.xy = vs_TEXCOORD5.xy * (-u_xlat8.xx) + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + (-vs_TEXCOORD5.xy);
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat0.xy + vs_TEXCOORD5.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_8 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_2.xyz * u_xlat16_0.xyw + (-u_xlat16_2.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_8) * u_xlat16_0.xyw + u_xlat16_2.xyz;
    u_xlat12 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat12) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_UseChannel==2);
#else
    u_xlatb12 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_6 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb12) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_8;
mediump float u_xlat16_9;
vec2 u_xlat14;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
float u_xlat22;
int u_xlati22;
mediump float u_xlat16_23;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat14.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat14.xy * vec2(0.25, 0.25);
    u_xlat14.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat14.x * 0.0625 + unity_LODFade.y;
    u_xlat10_14 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat14.x = u_xlat10_14 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(u_xlat14.x<0.0);
#else
    u_xlatb14.x = u_xlat14.x<0.0;
#endif
    if((int(u_xlatb14.x) * int(0xffffffffu))!=0){discard;}
    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_8.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb14.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb14.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_23 = u_xlat10_0.x;
    } else {
        u_xlat16_23 = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_24 = unity_Lightmap_HDR.x * u_xlat16_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
#else
    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
#endif
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_23 = (-u_xlat16_24) * u_xlat16_23 + 1.0;
    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat10_8.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_23 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_24 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat0.xyz = vec3(u_xlat16_24) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_23) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_25) + u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat14.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
    u_xlat14.xy = u_xlat0.xy * (-u_xlat14.xx) + u_xlat1.xy;
    u_xlat14.xy = (-u_xlat0.xy) + u_xlat14.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat14.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_14 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_1.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_1.xyz + u_xlat10_1.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_2.x = dot(u_xlat16_2.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat22 = (-u_xlat16_2.x) + _LightmapThreshold;
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat22 = (u_xlati22 != 0) ? 0.0 : 1.0;
    u_xlat22 = u_xlat22 + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * vec3(u_xlat22);
    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_1.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_4.xyz) * u_xlat16_3.xyz + u_xlat16_2.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_14) * u_xlat16_0.xyw + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat21) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_9 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb21) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_8;
mediump float u_xlat16_9;
vec2 u_xlat14;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
float u_xlat22;
int u_xlati22;
mediump float u_xlat16_23;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat14.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat14.xy * vec2(0.25, 0.25);
    u_xlat14.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat14.x * 0.0625 + unity_LODFade.y;
    u_xlat10_14 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat14.x = u_xlat10_14 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(u_xlat14.x<0.0);
#else
    u_xlatb14.x = u_xlat14.x<0.0;
#endif
    if((int(u_xlatb14.x) * int(0xffffffffu))!=0){discard;}
    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_8.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb14.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb14.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_23 = u_xlat10_0.x;
    } else {
        u_xlat16_23 = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_24 = unity_Lightmap_HDR.x * u_xlat16_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
#else
    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
#endif
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_23 = (-u_xlat16_24) * u_xlat16_23 + 1.0;
    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat10_8.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_23 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_24 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat0.xyz = vec3(u_xlat16_24) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_23) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_25) + u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat14.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
    u_xlat14.xy = u_xlat0.xy * (-u_xlat14.xx) + u_xlat1.xy;
    u_xlat14.xy = (-u_xlat0.xy) + u_xlat14.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat14.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_14 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_1.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_1.xyz + u_xlat10_1.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_2.x = dot(u_xlat16_2.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat22 = (-u_xlat16_2.x) + _LightmapThreshold;
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat22 = (u_xlati22 != 0) ? 0.0 : 1.0;
    u_xlat22 = u_xlat22 + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * vec3(u_xlat22);
    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_1.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_4.xyz) * u_xlat16_3.xyz + u_xlat16_2.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_14) * u_xlat16_0.xyw + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat21) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_9 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb21) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_8;
mediump float u_xlat16_9;
vec2 u_xlat14;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
float u_xlat22;
int u_xlati22;
mediump float u_xlat16_23;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat14.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat14.xy * vec2(0.25, 0.25);
    u_xlat14.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat14.x * 0.0625 + unity_LODFade.y;
    u_xlat10_14 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat14.x = u_xlat10_14 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(u_xlat14.x<0.0);
#else
    u_xlatb14.x = u_xlat14.x<0.0;
#endif
    if((int(u_xlatb14.x) * int(0xffffffffu))!=0){discard;}
    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_8.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb14.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb14.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_23 = u_xlat10_0.x;
    } else {
        u_xlat16_23 = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_24 = unity_Lightmap_HDR.x * u_xlat16_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
#else
    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
#endif
    u_xlat16_23 = (-u_xlat16_23) + 1.0;
    u_xlat16_23 = (-u_xlat16_24) * u_xlat16_23 + 1.0;
    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_3.xyz;
    u_xlat16_4.xyz = u_xlat10_8.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_23 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_24 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat0.xyz = vec3(u_xlat16_24) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_23) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_25) + u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat14.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
    u_xlat14.xy = u_xlat0.xy * (-u_xlat14.xx) + u_xlat1.xy;
    u_xlat14.xy = (-u_xlat0.xy) + u_xlat14.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat14.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_14 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_1.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_1.xyz + u_xlat10_1.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_2.x = dot(u_xlat16_2.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat22 = (-u_xlat16_2.x) + _LightmapThreshold;
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat22 = (u_xlati22 != 0) ? 0.0 : 1.0;
    u_xlat22 = u_xlat22 + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * vec3(u_xlat22);
    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_1.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_4.xyz) * u_xlat16_3.xyz + u_xlat16_2.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_14) * u_xlat16_0.xyw + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat21) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_9 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb21) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
lowp vec3 u_xlat10_7;
mediump float u_xlat16_8;
vec2 u_xlat12;
lowp float u_xlat10_12;
bvec2 u_xlatb12;
bool u_xlatb18;
mediump float u_xlat16_20;
mediump float u_xlat16_21;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat12.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat12.xy * vec2(0.25, 0.25);
    u_xlat12.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat12.x * 0.0625 + unity_LODFade.y;
    u_xlat10_12 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat12.x = u_xlat10_12 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12.x = !!(u_xlat12.x<0.0);
#else
    u_xlatb12.x = u_xlat12.x<0.0;
#endif
    if((int(u_xlatb12.x) * int(0xffffffffu))!=0){discard;}
    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_7.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb12.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb12.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_20 = u_xlat10_0.x;
    } else {
        u_xlat16_20 = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_0.x = dot(u_xlat16_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_0.x * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_6.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_6.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_3.xyz = u_xlat16_6.xyz * _ShadowColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _ShadowColor.xyz + (-u_xlat16_3.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat0.x = (-u_xlat16_0.x) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.x = unity_Lightmap_HDR.x * u_xlat16_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16_20) + 1.0;
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_8 + 1.0;
    u_xlat16_2.xyz = u_xlat0.xyz * u_xlat16_2.xxx;
    u_xlat16_3.xyz = u_xlat10_7.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UseChannel==2);
#else
    u_xlatb18 = _UseChannel==2;
#endif
    u_xlat16_20 = float(_UseChannel);
    u_xlat16_21 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_21 + u_xlat10_0.x;
    u_xlat16_20 = (u_xlatb18) ? u_xlat10_0.z : u_xlat16_20;
    u_xlat16_5.xyz = vec3(u_xlat16_20) * _Emission.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Emission.www;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
lowp vec3 u_xlat10_7;
mediump float u_xlat16_8;
vec2 u_xlat12;
lowp float u_xlat10_12;
bvec2 u_xlatb12;
bool u_xlatb18;
mediump float u_xlat16_20;
mediump float u_xlat16_21;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat12.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat12.xy * vec2(0.25, 0.25);
    u_xlat12.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat12.x * 0.0625 + unity_LODFade.y;
    u_xlat10_12 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat12.x = u_xlat10_12 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12.x = !!(u_xlat12.x<0.0);
#else
    u_xlatb12.x = u_xlat12.x<0.0;
#endif
    if((int(u_xlatb12.x) * int(0xffffffffu))!=0){discard;}
    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_7.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb12.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb12.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_20 = u_xlat10_0.x;
    } else {
        u_xlat16_20 = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_0.x = dot(u_xlat16_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_0.x * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_6.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_6.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_3.xyz = u_xlat16_6.xyz * _ShadowColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _ShadowColor.xyz + (-u_xlat16_3.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat0.x = (-u_xlat16_0.x) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.x = unity_Lightmap_HDR.x * u_xlat16_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16_20) + 1.0;
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_8 + 1.0;
    u_xlat16_2.xyz = u_xlat0.xyz * u_xlat16_2.xxx;
    u_xlat16_3.xyz = u_xlat10_7.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UseChannel==2);
#else
    u_xlatb18 = _UseChannel==2;
#endif
    u_xlat16_20 = float(_UseChannel);
    u_xlat16_21 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_21 + u_xlat10_0.x;
    u_xlat16_20 = (u_xlatb18) ? u_xlat10_0.z : u_xlat16_20;
    u_xlat16_5.xyz = vec3(u_xlat16_20) * _Emission.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Emission.www;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
lowp vec3 u_xlat10_7;
mediump float u_xlat16_8;
vec2 u_xlat12;
lowp float u_xlat10_12;
bvec2 u_xlatb12;
bool u_xlatb18;
mediump float u_xlat16_20;
mediump float u_xlat16_21;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat12.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat12.xy * vec2(0.25, 0.25);
    u_xlat12.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat12.x * 0.0625 + unity_LODFade.y;
    u_xlat10_12 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat12.x = u_xlat10_12 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12.x = !!(u_xlat12.x<0.0);
#else
    u_xlatb12.x = u_xlat12.x<0.0;
#endif
    if((int(u_xlatb12.x) * int(0xffffffffu))!=0){discard;}
    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_7.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb12.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb12.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_20 = u_xlat10_0.x;
    } else {
        u_xlat16_20 = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_0.x = dot(u_xlat16_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_0.x * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_6.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_6.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_3.xyz = u_xlat16_6.xyz * _ShadowColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _ShadowColor.xyz + (-u_xlat16_3.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat0.x = (-u_xlat16_0.x) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.x = unity_Lightmap_HDR.x * u_xlat16_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16_20) + 1.0;
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_8 + 1.0;
    u_xlat16_2.xyz = u_xlat0.xyz * u_xlat16_2.xxx;
    u_xlat16_3.xyz = u_xlat10_7.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UseChannel==2);
#else
    u_xlatb18 = _UseChannel==2;
#endif
    u_xlat16_20 = float(_UseChannel);
    u_xlat16_21 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_21 + u_xlat10_0.x;
    u_xlat16_20 = (u_xlatb18) ? u_xlat10_0.z : u_xlat16_20;
    u_xlat16_5.xyz = vec3(u_xlat16_20) * _Emission.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Emission.www;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump float u_xlat16_7;
vec2 u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat10.xy * vec2(0.25, 0.25);
    u_xlat10.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat10.x * 0.0625 + unity_LODFade.y;
    u_xlat10_10 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat10.x = u_xlat10_10 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(u_xlat10.x<0.0);
#else
    u_xlatb10.x = u_xlat10.x<0.0;
#endif
    if((int(u_xlatb10.x) * int(0xffffffffu))!=0){discard;}
    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_6.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb10.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb10.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_17 = u_xlat10_0.x;
    } else {
        u_xlat16_17 = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_0.x = dot(u_xlat16_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_0.x * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_5.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_5.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_3.xyz = u_xlat16_5.xyz * _ShadowColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _ShadowColor.xyz + (-u_xlat16_3.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat0.x = (-u_xlat16_0.x) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.x = unity_Lightmap_HDR.x * u_xlat16_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7 = (-u_xlat16_17) + 1.0;
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_7 + 1.0;
    u_xlat16_2.xyz = u_xlat0.xyz * u_xlat16_2.xxx;
    u_xlat16_3.xyz = u_xlat10_6.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_17 = dot(vs_TEXCOORD5.xyz, u_xlat16_3.xyz);
    u_xlat16_18 = dot(vs_TEXCOORD6.xyz, u_xlat16_3.xyz);
    u_xlat16_3.x = dot(vs_TEXCOORD7.xyz, u_xlat16_3.xyz);
    u_xlat0.xyz = vec3(u_xlat16_18) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_17) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat16_3.xxx + u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat10.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat10.x = u_xlat10.x + u_xlat10.x;
    u_xlat10.xy = u_xlat0.xy * (-u_xlat10.xx) + u_xlat1.xy;
    u_xlat10.xy = (-u_xlat0.xy) + u_xlat10.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat10.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_10 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_2.xyz * u_xlat16_0.xyw + (-u_xlat16_2.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_10) * u_xlat16_0.xyw + u_xlat16_2.xyz;
    u_xlat15 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat15) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_7 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb15) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump float u_xlat16_7;
vec2 u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat10.xy * vec2(0.25, 0.25);
    u_xlat10.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat10.x * 0.0625 + unity_LODFade.y;
    u_xlat10_10 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat10.x = u_xlat10_10 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(u_xlat10.x<0.0);
#else
    u_xlatb10.x = u_xlat10.x<0.0;
#endif
    if((int(u_xlatb10.x) * int(0xffffffffu))!=0){discard;}
    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_6.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb10.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb10.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_17 = u_xlat10_0.x;
    } else {
        u_xlat16_17 = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_0.x = dot(u_xlat16_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_0.x * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_5.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_5.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_3.xyz = u_xlat16_5.xyz * _ShadowColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _ShadowColor.xyz + (-u_xlat16_3.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat0.x = (-u_xlat16_0.x) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.x = unity_Lightmap_HDR.x * u_xlat16_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7 = (-u_xlat16_17) + 1.0;
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_7 + 1.0;
    u_xlat16_2.xyz = u_xlat0.xyz * u_xlat16_2.xxx;
    u_xlat16_3.xyz = u_xlat10_6.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_17 = dot(vs_TEXCOORD5.xyz, u_xlat16_3.xyz);
    u_xlat16_18 = dot(vs_TEXCOORD6.xyz, u_xlat16_3.xyz);
    u_xlat16_3.x = dot(vs_TEXCOORD7.xyz, u_xlat16_3.xyz);
    u_xlat0.xyz = vec3(u_xlat16_18) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_17) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat16_3.xxx + u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat10.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat10.x = u_xlat10.x + u_xlat10.x;
    u_xlat10.xy = u_xlat0.xy * (-u_xlat10.xx) + u_xlat1.xy;
    u_xlat10.xy = (-u_xlat0.xy) + u_xlat10.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat10.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_10 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_2.xyz * u_xlat16_0.xyw + (-u_xlat16_2.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_10) * u_xlat16_0.xyw + u_xlat16_2.xyz;
    u_xlat15 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat15) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_7 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb15) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump float u_xlat16_7;
vec2 u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat10.xy * vec2(0.25, 0.25);
    u_xlat10.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat10.x * 0.0625 + unity_LODFade.y;
    u_xlat10_10 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat10.x = u_xlat10_10 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(u_xlat10.x<0.0);
#else
    u_xlatb10.x = u_xlat10.x<0.0;
#endif
    if((int(u_xlatb10.x) * int(0xffffffffu))!=0){discard;}
    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_6.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb10.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb10.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_17 = u_xlat10_0.x;
    } else {
        u_xlat16_17 = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_0.x = dot(u_xlat16_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_0.x * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_5.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_5.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_3.xyz = u_xlat16_5.xyz * _ShadowColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _ShadowColor.xyz + (-u_xlat16_3.xyz);
    u_xlat16_2.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat0.x = (-u_xlat16_0.x) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_2.xyz;
    u_xlat16_2.x = unity_Lightmap_HDR.x * u_xlat16_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_7 = (-u_xlat16_17) + 1.0;
    u_xlat16_2.x = (-u_xlat16_2.x) * u_xlat16_7 + 1.0;
    u_xlat16_2.xyz = u_xlat0.xyz * u_xlat16_2.xxx;
    u_xlat16_3.xyz = u_xlat10_6.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_17 = dot(vs_TEXCOORD5.xyz, u_xlat16_3.xyz);
    u_xlat16_18 = dot(vs_TEXCOORD6.xyz, u_xlat16_3.xyz);
    u_xlat16_3.x = dot(vs_TEXCOORD7.xyz, u_xlat16_3.xyz);
    u_xlat0.xyz = vec3(u_xlat16_18) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_17) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat16_3.xxx + u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat10.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat10.x = u_xlat10.x + u_xlat10.x;
    u_xlat10.xy = u_xlat0.xy * (-u_xlat10.xx) + u_xlat1.xy;
    u_xlat10.xy = (-u_xlat0.xy) + u_xlat10.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat10.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_10 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_2.xyz * u_xlat16_0.xyw + (-u_xlat16_2.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_10) * u_xlat16_0.xyw + u_xlat16_2.xyz;
    u_xlat15 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat15) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_7 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb15) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
lowp vec3 u_xlat10_8;
lowp vec3 u_xlat10_9;
mediump float u_xlat16_10;
vec2 u_xlat16;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
float u_xlat25;
int u_xlati25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat16.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat16.xy * vec2(0.25, 0.25);
    u_xlat16.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat16.x * 0.0625 + unity_LODFade.y;
    u_xlat10_16 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat16.x = u_xlat10_16 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(u_xlat16.x<0.0);
#else
    u_xlatb16.x = u_xlat16.x<0.0;
#endif
    if((int(u_xlatb16.x) * int(0xffffffffu))!=0){discard;}
    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_9.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_26 = u_xlat10_0.x;
    } else {
        u_xlat16_26 = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_0.x = dot(u_xlat16_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_0.x * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_8.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_8.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_3.xyz = u_xlat16_8.xyz * _ShadowColor.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * _ShadowColor.xyz + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_5.xyz + u_xlat16_3.xyz;
    u_xlat0.x = (-u_xlat16_0.x) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_3.xyz;
    u_xlat16_3.x = unity_Lightmap_HDR.x * u_xlat16_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_26 = (-u_xlat16_26) + 1.0;
    u_xlat16_26 = (-u_xlat16_3.x) * u_xlat16_26 + 1.0;
    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat16_26);
    u_xlat16_5.xyz = u_xlat10_9.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_6.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot(vs_TEXCOORD5.xyz, u_xlat16_7.xyz);
    u_xlat16_27 = dot(vs_TEXCOORD6.xyz, u_xlat16_7.xyz);
    u_xlat16_29 = dot(vs_TEXCOORD7.xyz, u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(u_xlat16_27) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_26) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_29) + u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat16.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16.x = u_xlat16.x + u_xlat16.x;
    u_xlat16.xy = u_xlat0.xy * (-u_xlat16.xx) + u_xlat1.xy;
    u_xlat16.xy = (-u_xlat0.xy) + u_xlat16.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat16.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_16 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_1.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_1.xyz + u_xlat10_1.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_2.x = dot(u_xlat16_2.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat25 = (-u_xlat16_2.x) + _LightmapThreshold;
    u_xlat25 = u_xlat25 + 1.0;
    u_xlat25 = floor(u_xlat25);
    u_xlat25 = max(u_xlat25, 0.0);
    u_xlati25 = int(u_xlat25);
    u_xlat25 = (u_xlati25 != 0) ? 0.0 : 1.0;
    u_xlat25 = u_xlat25 + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * vec3(u_xlat25);
    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_5.xyz) * u_xlat16_3.xyz + u_xlat16_2.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_16) * u_xlat16_0.xyw + u_xlat16_6.xyz;
    u_xlat24 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat24) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_UseChannel==2);
#else
    u_xlatb24 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_10 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_10 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb24) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
lowp vec3 u_xlat10_8;
lowp vec3 u_xlat10_9;
mediump float u_xlat16_10;
vec2 u_xlat16;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
float u_xlat25;
int u_xlati25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat16.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat16.xy * vec2(0.25, 0.25);
    u_xlat16.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat16.x * 0.0625 + unity_LODFade.y;
    u_xlat10_16 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat16.x = u_xlat10_16 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(u_xlat16.x<0.0);
#else
    u_xlatb16.x = u_xlat16.x<0.0;
#endif
    if((int(u_xlatb16.x) * int(0xffffffffu))!=0){discard;}
    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_9.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_26 = u_xlat10_0.x;
    } else {
        u_xlat16_26 = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_0.x = dot(u_xlat16_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_0.x * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_8.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_8.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_3.xyz = u_xlat16_8.xyz * _ShadowColor.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * _ShadowColor.xyz + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_5.xyz + u_xlat16_3.xyz;
    u_xlat0.x = (-u_xlat16_0.x) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_3.xyz;
    u_xlat16_3.x = unity_Lightmap_HDR.x * u_xlat16_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_26 = (-u_xlat16_26) + 1.0;
    u_xlat16_26 = (-u_xlat16_3.x) * u_xlat16_26 + 1.0;
    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat16_26);
    u_xlat16_5.xyz = u_xlat10_9.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_6.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot(vs_TEXCOORD5.xyz, u_xlat16_7.xyz);
    u_xlat16_27 = dot(vs_TEXCOORD6.xyz, u_xlat16_7.xyz);
    u_xlat16_29 = dot(vs_TEXCOORD7.xyz, u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(u_xlat16_27) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_26) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_29) + u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat16.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16.x = u_xlat16.x + u_xlat16.x;
    u_xlat16.xy = u_xlat0.xy * (-u_xlat16.xx) + u_xlat1.xy;
    u_xlat16.xy = (-u_xlat0.xy) + u_xlat16.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat16.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_16 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_1.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_1.xyz + u_xlat10_1.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_2.x = dot(u_xlat16_2.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat25 = (-u_xlat16_2.x) + _LightmapThreshold;
    u_xlat25 = u_xlat25 + 1.0;
    u_xlat25 = floor(u_xlat25);
    u_xlat25 = max(u_xlat25, 0.0);
    u_xlati25 = int(u_xlat25);
    u_xlat25 = (u_xlati25 != 0) ? 0.0 : 1.0;
    u_xlat25 = u_xlat25 + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * vec3(u_xlat25);
    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_5.xyz) * u_xlat16_3.xyz + u_xlat16_2.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_16) * u_xlat16_0.xyw + u_xlat16_6.xyz;
    u_xlat24 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat24) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_UseChannel==2);
#else
    u_xlatb24 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_10 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_10 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb24) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_LightmapST;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
uniform mediump sampler2D unity_Lightmap;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
lowp vec3 u_xlat10_8;
lowp vec3 u_xlat10_9;
mediump float u_xlat16_10;
vec2 u_xlat16;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
float u_xlat25;
int u_xlati25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat16.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat16.xy * vec2(0.25, 0.25);
    u_xlat16.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat16.x * 0.0625 + unity_LODFade.y;
    u_xlat10_16 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat16.x = u_xlat10_16 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(u_xlat16.x<0.0);
#else
    u_xlatb16.x = u_xlat16.x<0.0;
#endif
    if((int(u_xlatb16.x) * int(0xffffffffu))!=0){discard;}
    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD0.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * unity_Lightmap_HDR.xxx;
    u_xlat10_9.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_26 = u_xlat10_0.x;
    } else {
        u_xlat16_26 = 1.0;
    //ENDIF
    }
    u_xlat16_3.xyz = u_xlat16_2.xyz * _ShadowColor.xyz;
    u_xlat16_0.x = dot(u_xlat16_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_0.x * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_8.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_8.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_3.xyz = u_xlat16_8.xyz * _ShadowColor.xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * _ShadowColor.xyz + (-u_xlat16_3.xyz);
    u_xlat16_3.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_5.xyz + u_xlat16_3.xyz;
    u_xlat0.x = (-u_xlat16_0.x) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_3.xyz;
    u_xlat16_3.x = unity_Lightmap_HDR.x * u_xlat16_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_26 = (-u_xlat16_26) + 1.0;
    u_xlat16_26 = (-u_xlat16_3.x) * u_xlat16_26 + 1.0;
    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat16_26);
    u_xlat16_5.xyz = u_xlat10_9.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_6.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_26 = dot(vs_TEXCOORD5.xyz, u_xlat16_7.xyz);
    u_xlat16_27 = dot(vs_TEXCOORD6.xyz, u_xlat16_7.xyz);
    u_xlat16_29 = dot(vs_TEXCOORD7.xyz, u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(u_xlat16_27) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_26) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_29) + u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat16.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat16.x = u_xlat16.x + u_xlat16.x;
    u_xlat16.xy = u_xlat0.xy * (-u_xlat16.xx) + u_xlat1.xy;
    u_xlat16.xy = (-u_xlat0.xy) + u_xlat16.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat16.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_16 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_1.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_1.xyz + u_xlat10_1.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_2.x = dot(u_xlat16_2.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat25 = (-u_xlat16_2.x) + _LightmapThreshold;
    u_xlat25 = u_xlat25 + 1.0;
    u_xlat25 = floor(u_xlat25);
    u_xlat25 = max(u_xlat25, 0.0);
    u_xlati25 = int(u_xlat25);
    u_xlat25 = (u_xlati25 != 0) ? 0.0 : 1.0;
    u_xlat25 = u_xlat25 + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * vec3(u_xlat25);
    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_5.xyz) * u_xlat16_3.xyz + u_xlat16_2.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_16) * u_xlat16_0.xyw + u_xlat16_6.xyz;
    u_xlat24 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat24) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_UseChannel==2);
#else
    u_xlatb24 = _UseChannel==2;
#endif
    u_xlat16_2.x = float(_UseChannel);
    u_xlat16_10 = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_10 + u_xlat10_1.x;
    u_xlat16_2.x = (u_xlatb24) ? u_xlat10_1.z : u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _Emission.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_2.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
lowp float u_xlat10_12;
bvec2 u_xlatb12;
bool u_xlatb18;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat12.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat12.xy * vec2(0.25, 0.25);
    u_xlat12.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat12.x * 0.0625 + unity_LODFade.y;
    u_xlat10_12 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat12.x = u_xlat10_12 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12.x = !!(u_xlat12.x<0.0);
#else
    u_xlatb12.x = u_xlat12.x<0.0;
#endif
    if((int(u_xlatb12.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_1.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb12.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb12.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_3.x = u_xlat10_0.x;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_9.xyz = u_xlat10_1.xyz * _ShadowColor.xyz;
    u_xlat16_4.x = u_xlat10_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_4.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz;
    u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UseChannel==2);
#else
    u_xlatb18 = _UseChannel==2;
#endif
    u_xlat16_21 = float(_UseChannel);
    u_xlat16_22 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22 + u_xlat10_0.x;
    u_xlat16_21 = (u_xlatb18) ? u_xlat10_0.z : u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * _Emission.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Emission.www;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
lowp float u_xlat10_12;
bvec2 u_xlatb12;
bool u_xlatb18;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat12.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat12.xy * vec2(0.25, 0.25);
    u_xlat12.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat12.x * 0.0625 + unity_LODFade.y;
    u_xlat10_12 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat12.x = u_xlat10_12 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12.x = !!(u_xlat12.x<0.0);
#else
    u_xlatb12.x = u_xlat12.x<0.0;
#endif
    if((int(u_xlatb12.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_1.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb12.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb12.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_3.x = u_xlat10_0.x;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_9.xyz = u_xlat10_1.xyz * _ShadowColor.xyz;
    u_xlat16_4.x = u_xlat10_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_4.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz;
    u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UseChannel==2);
#else
    u_xlatb18 = _UseChannel==2;
#endif
    u_xlat16_21 = float(_UseChannel);
    u_xlat16_22 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22 + u_xlat10_0.x;
    u_xlat16_21 = (u_xlatb18) ? u_xlat10_0.z : u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * _Emission.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Emission.www;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
lowp float u_xlat10_12;
bvec2 u_xlatb12;
bool u_xlatb18;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat12.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat12.xy * vec2(0.25, 0.25);
    u_xlat12.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat12.x * 0.0625 + unity_LODFade.y;
    u_xlat10_12 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat12.x = u_xlat10_12 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12.x = !!(u_xlat12.x<0.0);
#else
    u_xlatb12.x = u_xlat12.x<0.0;
#endif
    if((int(u_xlatb12.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_1.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb12.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb12.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_3.x = u_xlat10_0.x;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_9.xyz = u_xlat10_1.xyz * _ShadowColor.xyz;
    u_xlat16_4.x = u_xlat10_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_4.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz;
    u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UseChannel==2);
#else
    u_xlatb18 = _UseChannel==2;
#endif
    u_xlat16_21 = float(_UseChannel);
    u_xlat16_22 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22 + u_xlat10_0.x;
    u_xlat16_21 = (u_xlatb18) ? u_xlat10_0.z : u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * _Emission.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Emission.www;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_8;
vec2 u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat10.xy * vec2(0.25, 0.25);
    u_xlat10.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat10.x * 0.0625 + unity_LODFade.y;
    u_xlat10_10 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat10.x = u_xlat10_10 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(u_xlat10.x<0.0);
#else
    u_xlatb10.x = u_xlat10.x<0.0;
#endif
    if((int(u_xlatb10.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_1.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb10.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb10.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_3.x = u_xlat10_0.x;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_8.xyz = u_xlat10_1.xyz * _ShadowColor.xyz;
    u_xlat16_4.x = u_xlat10_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_4.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_8.xyz;
    u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
    u_xlat10.x = dot(u_xlat0.xyz, vs_TEXCOORD5.xyz);
    u_xlat10.x = u_xlat10.x + u_xlat10.x;
    u_xlat0.xy = vs_TEXCOORD5.xy * (-u_xlat10.xx) + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + (-vs_TEXCOORD5.xy);
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat0.xy + vs_TEXCOORD5.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_10 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_3.xyz * u_xlat16_0.xyw + (-u_xlat16_3.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_10) * u_xlat16_0.xyw + u_xlat16_3.xyz;
    u_xlat15 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat15) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_3.x = float(_UseChannel);
    u_xlat16_8.x = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8.x + u_xlat10_1.x;
    u_xlat16_3.x = (u_xlatb15) ? u_xlat10_1.z : u_xlat16_3.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_8;
vec2 u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat10.xy * vec2(0.25, 0.25);
    u_xlat10.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat10.x * 0.0625 + unity_LODFade.y;
    u_xlat10_10 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat10.x = u_xlat10_10 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(u_xlat10.x<0.0);
#else
    u_xlatb10.x = u_xlat10.x<0.0;
#endif
    if((int(u_xlatb10.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_1.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb10.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb10.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_3.x = u_xlat10_0.x;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_8.xyz = u_xlat10_1.xyz * _ShadowColor.xyz;
    u_xlat16_4.x = u_xlat10_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_4.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_8.xyz;
    u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
    u_xlat10.x = dot(u_xlat0.xyz, vs_TEXCOORD5.xyz);
    u_xlat10.x = u_xlat10.x + u_xlat10.x;
    u_xlat0.xy = vs_TEXCOORD5.xy * (-u_xlat10.xx) + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + (-vs_TEXCOORD5.xy);
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat0.xy + vs_TEXCOORD5.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_10 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_3.xyz * u_xlat16_0.xyw + (-u_xlat16_3.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_10) * u_xlat16_0.xyw + u_xlat16_3.xyz;
    u_xlat15 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat15) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_3.x = float(_UseChannel);
    u_xlat16_8.x = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8.x + u_xlat10_1.x;
    u_xlat16_3.x = (u_xlatb15) ? u_xlat10_1.z : u_xlat16_3.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_8;
vec2 u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat10.xy * vec2(0.25, 0.25);
    u_xlat10.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat10.x * 0.0625 + unity_LODFade.y;
    u_xlat10_10 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat10.x = u_xlat10_10 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(u_xlat10.x<0.0);
#else
    u_xlatb10.x = u_xlat10.x<0.0;
#endif
    if((int(u_xlatb10.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_1.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb10.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb10.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_3.x = u_xlat10_0.x;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_8.xyz = u_xlat10_1.xyz * _ShadowColor.xyz;
    u_xlat16_4.x = u_xlat10_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_4.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_8.xyz;
    u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
    u_xlat10.x = dot(u_xlat0.xyz, vs_TEXCOORD5.xyz);
    u_xlat10.x = u_xlat10.x + u_xlat10.x;
    u_xlat0.xy = vs_TEXCOORD5.xy * (-u_xlat10.xx) + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + (-vs_TEXCOORD5.xy);
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat0.xy + vs_TEXCOORD5.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_10 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_3.xyz * u_xlat16_0.xyw + (-u_xlat16_3.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_10) * u_xlat16_0.xyw + u_xlat16_3.xyz;
    u_xlat15 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat15) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_3.x = float(_UseChannel);
    u_xlat16_8.x = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8.x + u_xlat10_1.x;
    u_xlat16_3.x = (u_xlatb15) ? u_xlat10_1.z : u_xlat16_3.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
int u_xlati1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_10;
vec2 u_xlat14;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat14.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat14.xy * vec2(0.25, 0.25);
    u_xlat14.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat14.x * 0.0625 + unity_LODFade.y;
    u_xlat10_14 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat14.x = u_xlat10_14 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(u_xlat14.x<0.0);
#else
    u_xlatb14.x = u_xlat14.x<0.0;
#endif
    if((int(u_xlatb14.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_1.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb14.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb14.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_3.x = u_xlat10_0.x;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_10.xyz = u_xlat10_1.xyz * _ShadowColor.xyz;
    u_xlat16_4.x = u_xlat10_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_4.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_10.xyz;
    u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_24 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat0.xyz = vec3(u_xlat16_25) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_24) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_26) + u_xlat0.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat14.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
    u_xlat14.xy = u_xlat0.xy * (-u_xlat14.xx) + u_xlat2.xy;
    u_xlat14.xy = (-u_xlat0.xy) + u_xlat14.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat14.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_14 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_2.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz + u_xlat10_2.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_24 = dot(u_xlat10_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat1.x = (-u_xlat16_24) + _LightmapThreshold;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlati1 = int(u_xlat1.x);
    u_xlat1.x = (u_xlati1 != 0) ? 0.0 : 1.0;
    u_xlat1.x = u_xlat1.x + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * u_xlat1.xxx;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_4.xyz) * u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_14) * u_xlat16_0.xyw + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat21) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_3.x = float(_UseChannel);
    u_xlat16_10.x = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10.x + u_xlat10_1.x;
    u_xlat16_3.x = (u_xlatb21) ? u_xlat10_1.z : u_xlat16_3.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
int u_xlati1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_10;
vec2 u_xlat14;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat14.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat14.xy * vec2(0.25, 0.25);
    u_xlat14.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat14.x * 0.0625 + unity_LODFade.y;
    u_xlat10_14 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat14.x = u_xlat10_14 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(u_xlat14.x<0.0);
#else
    u_xlatb14.x = u_xlat14.x<0.0;
#endif
    if((int(u_xlatb14.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_1.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb14.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb14.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_3.x = u_xlat10_0.x;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_10.xyz = u_xlat10_1.xyz * _ShadowColor.xyz;
    u_xlat16_4.x = u_xlat10_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_4.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_10.xyz;
    u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_24 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat0.xyz = vec3(u_xlat16_25) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_24) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_26) + u_xlat0.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat14.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
    u_xlat14.xy = u_xlat0.xy * (-u_xlat14.xx) + u_xlat2.xy;
    u_xlat14.xy = (-u_xlat0.xy) + u_xlat14.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat14.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_14 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_2.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz + u_xlat10_2.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_24 = dot(u_xlat10_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat1.x = (-u_xlat16_24) + _LightmapThreshold;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlati1 = int(u_xlat1.x);
    u_xlat1.x = (u_xlati1 != 0) ? 0.0 : 1.0;
    u_xlat1.x = u_xlat1.x + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * u_xlat1.xxx;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_4.xyz) * u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_14) * u_xlat16_0.xyw + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat21) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_3.x = float(_UseChannel);
    u_xlat16_10.x = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10.x + u_xlat10_1.x;
    u_xlat16_3.x = (u_xlatb21) ? u_xlat10_1.z : u_xlat16_3.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
int u_xlati1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_10;
vec2 u_xlat14;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat14.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat14.xy * vec2(0.25, 0.25);
    u_xlat14.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat14.x * 0.0625 + unity_LODFade.y;
    u_xlat10_14 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat14.x = u_xlat10_14 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(u_xlat14.x<0.0);
#else
    u_xlatb14.x = u_xlat14.x<0.0;
#endif
    if((int(u_xlatb14.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_1.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb14.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb14.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_3.x = u_xlat10_0.x;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_10.xyz = u_xlat10_1.xyz * _ShadowColor.xyz;
    u_xlat16_4.x = u_xlat10_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_4.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_10.xyz;
    u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_24 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat0.xyz = vec3(u_xlat16_25) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_24) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_26) + u_xlat0.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat14.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
    u_xlat14.xy = u_xlat0.xy * (-u_xlat14.xx) + u_xlat2.xy;
    u_xlat14.xy = (-u_xlat0.xy) + u_xlat14.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat14.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_14 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_2.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz + u_xlat10_2.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_24 = dot(u_xlat10_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat1.x = (-u_xlat16_24) + _LightmapThreshold;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlati1 = int(u_xlat1.x);
    u_xlat1.x = (u_xlati1 != 0) ? 0.0 : 1.0;
    u_xlat1.x = u_xlat1.x + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * u_xlat1.xxx;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_4.xyz) * u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_14) * u_xlat16_0.xyw + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat21) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_3.x = float(_UseChannel);
    u_xlat16_10.x = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10.x + u_xlat10_1.x;
    u_xlat16_3.x = (u_xlatb21) ? u_xlat10_1.z : u_xlat16_3.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_10;
vec2 u_xlat14;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
bool u_xlatb21;
mediump float u_xlat16_24;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat14.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat14.xy * vec2(0.25, 0.25);
    u_xlat14.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat14.x * 0.0625 + unity_LODFade.y;
    u_xlat10_14 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat14.x = u_xlat10_14 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(u_xlat14.x<0.0);
#else
    u_xlatb14.x = u_xlat14.x<0.0;
#endif
    if((int(u_xlatb14.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_1.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb14.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb14.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_3.x = u_xlat10_0.x;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_10.xyz = u_xlat10_1.xyz * _ShadowColor.xyz;
    u_xlat16_0.x = dot(u_xlat16_10.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_0.x * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_7.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_7.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_10.xyz = u_xlat16_7.xyz * _ShadowColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xyz * _ShadowColor.xyz + (-u_xlat16_10.xyz);
    u_xlat16_10.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat0.x = (-u_xlat16_0.x) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_10.xyz;
    u_xlat16_10.x = u_xlat10_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_10.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat0.xyz * u_xlat16_3.xxx;
    u_xlat16_5.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat7.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat7.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_24 = float(_UseChannel);
    u_xlat16_26 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_26 + u_xlat10_0.x;
    u_xlat16_24 = (u_xlatb21) ? u_xlat10_0.z : u_xlat16_24;
    u_xlat16_6.xyz = vec3(u_xlat16_24) * _Emission.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _Emission.www;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_10;
vec2 u_xlat14;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
bool u_xlatb21;
mediump float u_xlat16_24;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat14.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat14.xy * vec2(0.25, 0.25);
    u_xlat14.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat14.x * 0.0625 + unity_LODFade.y;
    u_xlat10_14 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat14.x = u_xlat10_14 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(u_xlat14.x<0.0);
#else
    u_xlatb14.x = u_xlat14.x<0.0;
#endif
    if((int(u_xlatb14.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_1.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb14.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb14.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_3.x = u_xlat10_0.x;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_10.xyz = u_xlat10_1.xyz * _ShadowColor.xyz;
    u_xlat16_0.x = dot(u_xlat16_10.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_0.x * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_7.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_7.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_10.xyz = u_xlat16_7.xyz * _ShadowColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xyz * _ShadowColor.xyz + (-u_xlat16_10.xyz);
    u_xlat16_10.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat0.x = (-u_xlat16_0.x) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_10.xyz;
    u_xlat16_10.x = u_xlat10_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_10.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat0.xyz * u_xlat16_3.xxx;
    u_xlat16_5.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat7.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat7.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_24 = float(_UseChannel);
    u_xlat16_26 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_26 + u_xlat10_0.x;
    u_xlat16_24 = (u_xlatb21) ? u_xlat10_0.z : u_xlat16_24;
    u_xlat16_6.xyz = vec3(u_xlat16_24) * _Emission.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _Emission.www;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
bool u_xlatb4;
mediump float u_xlat16_7;
vec2 u_xlat8;
bool u_xlatb8;
float u_xlat12;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat12 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3 = (-u_xlat12) + 2.0;
    u_xlat16_3 = u_xlat12 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat4 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat8.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat8.x = u_xlat8.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat8.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(u_xlat0.x>=u_xlat8.x);
#else
    u_xlatb8 = u_xlat0.x>=u_xlat8.x;
#endif
    u_xlat12 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat13 = (-u_xlat12) + 2.0;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat13 = u_xlat12 * _HeigtFogColDelta.w;
    u_xlat8.x = (u_xlatb8) ? u_xlat13 : u_xlat12;
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _Mihoyo_FogColor.w;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = min(u_xlat8.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
    u_xlat12 = u_xlat4 * -1.44269502;
    u_xlat8.y = exp2(u_xlat12);
    u_xlat8.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
    u_xlat12 = u_xlat8.y / u_xlat4;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(0.00999999978<abs(u_xlat4));
#else
    u_xlatb4 = 0.00999999978<abs(u_xlat4);
#endif
    u_xlat16_3 = (u_xlatb4) ? u_xlat12 : 1.0;
    u_xlat4 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat4 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_7 = (-u_xlat0.x) + 2.0;
    u_xlat16_7 = u_xlat0.x * u_xlat16_7;
    u_xlat0.x = u_xlat16_7 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = min(u_xlat16_3, _HeigtFogColBase.w);
    u_xlat4 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
    u_xlat2.w = u_xlat4 * u_xlat8.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_10;
vec2 u_xlat14;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
bool u_xlatb21;
mediump float u_xlat16_24;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat14.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat14.xy * vec2(0.25, 0.25);
    u_xlat14.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat14.x * 0.0625 + unity_LODFade.y;
    u_xlat10_14 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat14.x = u_xlat10_14 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(u_xlat14.x<0.0);
#else
    u_xlatb14.x = u_xlat14.x<0.0;
#endif
    if((int(u_xlatb14.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_1.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb14.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb14.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_3.x = u_xlat10_0.x;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_10.xyz = u_xlat10_1.xyz * _ShadowColor.xyz;
    u_xlat16_0.x = dot(u_xlat16_10.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_0.x * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_7.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_7.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_10.xyz = u_xlat16_7.xyz * _ShadowColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xyz * _ShadowColor.xyz + (-u_xlat16_10.xyz);
    u_xlat16_10.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat0.x = (-u_xlat16_0.x) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_10.xyz;
    u_xlat16_10.x = u_xlat10_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_10.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat0.xyz * u_xlat16_3.xxx;
    u_xlat16_5.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat7.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat7.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_24 = float(_UseChannel);
    u_xlat16_26 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_26 + u_xlat10_0.x;
    u_xlat16_24 = (u_xlatb21) ? u_xlat10_0.z : u_xlat16_24;
    u_xlat16_6.xyz = vec3(u_xlat16_24) * _Emission.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _Emission.www;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
lowp float u_xlat10_12;
bvec2 u_xlatb12;
float u_xlat18;
bool u_xlatb18;
mediump float u_xlat16_21;
mediump float u_xlat16_23;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat12.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat12.xy * vec2(0.25, 0.25);
    u_xlat12.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat12.x * 0.0625 + unity_LODFade.y;
    u_xlat10_12 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat12.x = u_xlat10_12 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12.x = !!(u_xlat12.x<0.0);
#else
    u_xlatb12.x = u_xlat12.x<0.0;
#endif
    if((int(u_xlatb12.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_1.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb12.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb12.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_3.x = u_xlat10_0.x;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_9.xyz = u_xlat10_1.xyz * _ShadowColor.xyz;
    u_xlat16_0.x = dot(u_xlat16_9.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_0.x * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_6.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_6.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_9.xyz = u_xlat16_6.xyz * _ShadowColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xyz * _ShadowColor.xyz + (-u_xlat16_9.xyz);
    u_xlat16_9.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_5.xyz + u_xlat16_9.xyz;
    u_xlat0.x = (-u_xlat16_0.x) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_9.xyz;
    u_xlat16_9.x = u_xlat10_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9.x = min(max(u_xlat16_9.x, 0.0), 1.0);
#else
    u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_9.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat0.xyz * u_xlat16_3.xxx;
    u_xlat16_5.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_21 = dot(vs_TEXCOORD5.xyz, u_xlat16_5.xyz);
    u_xlat16_23 = dot(vs_TEXCOORD6.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = dot(vs_TEXCOORD7.xyz, u_xlat16_5.xyz);
    u_xlat0.xyz = vec3(u_xlat16_23) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_21) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat16_5.xxx + u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat12.x = u_xlat12.x + u_xlat12.x;
    u_xlat12.xy = u_xlat0.xy * (-u_xlat12.xx) + u_xlat1.xy;
    u_xlat12.xy = (-u_xlat0.xy) + u_xlat12.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat12.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_12 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_3.xyz * u_xlat16_0.xyw + (-u_xlat16_3.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_12) * u_xlat16_0.xyw + u_xlat16_3.xyz;
    u_xlat18 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat18) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UseChannel==2);
#else
    u_xlatb18 = _UseChannel==2;
#endif
    u_xlat16_3.x = float(_UseChannel);
    u_xlat16_9.x = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_9.x + u_xlat10_1.x;
    u_xlat16_3.x = (u_xlatb18) ? u_xlat10_1.z : u_xlat16_3.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
lowp float u_xlat10_12;
bvec2 u_xlatb12;
float u_xlat18;
bool u_xlatb18;
mediump float u_xlat16_21;
mediump float u_xlat16_23;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat12.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat12.xy * vec2(0.25, 0.25);
    u_xlat12.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat12.x * 0.0625 + unity_LODFade.y;
    u_xlat10_12 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat12.x = u_xlat10_12 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12.x = !!(u_xlat12.x<0.0);
#else
    u_xlatb12.x = u_xlat12.x<0.0;
#endif
    if((int(u_xlatb12.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_1.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb12.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb12.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_3.x = u_xlat10_0.x;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_9.xyz = u_xlat10_1.xyz * _ShadowColor.xyz;
    u_xlat16_0.x = dot(u_xlat16_9.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_0.x * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_6.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_6.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_9.xyz = u_xlat16_6.xyz * _ShadowColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xyz * _ShadowColor.xyz + (-u_xlat16_9.xyz);
    u_xlat16_9.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_5.xyz + u_xlat16_9.xyz;
    u_xlat0.x = (-u_xlat16_0.x) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_9.xyz;
    u_xlat16_9.x = u_xlat10_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9.x = min(max(u_xlat16_9.x, 0.0), 1.0);
#else
    u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_9.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat0.xyz * u_xlat16_3.xxx;
    u_xlat16_5.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_21 = dot(vs_TEXCOORD5.xyz, u_xlat16_5.xyz);
    u_xlat16_23 = dot(vs_TEXCOORD6.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = dot(vs_TEXCOORD7.xyz, u_xlat16_5.xyz);
    u_xlat0.xyz = vec3(u_xlat16_23) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_21) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat16_5.xxx + u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat12.x = u_xlat12.x + u_xlat12.x;
    u_xlat12.xy = u_xlat0.xy * (-u_xlat12.xx) + u_xlat1.xy;
    u_xlat12.xy = (-u_xlat0.xy) + u_xlat12.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat12.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_12 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_3.xyz * u_xlat16_0.xyw + (-u_xlat16_3.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_12) * u_xlat16_0.xyw + u_xlat16_3.xyz;
    u_xlat18 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat18) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UseChannel==2);
#else
    u_xlatb18 = _UseChannel==2;
#endif
    u_xlat16_3.x = float(_UseChannel);
    u_xlat16_9.x = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_9.x + u_xlat10_1.x;
    u_xlat16_3.x = (u_xlatb18) ? u_xlat10_1.z : u_xlat16_3.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
lowp float u_xlat10_12;
bvec2 u_xlatb12;
float u_xlat18;
bool u_xlatb18;
mediump float u_xlat16_21;
mediump float u_xlat16_23;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat12.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat12.xy * vec2(0.25, 0.25);
    u_xlat12.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat12.x * 0.0625 + unity_LODFade.y;
    u_xlat10_12 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat12.x = u_xlat10_12 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12.x = !!(u_xlat12.x<0.0);
#else
    u_xlatb12.x = u_xlat12.x<0.0;
#endif
    if((int(u_xlatb12.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_1.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb12.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb12.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_3.x = u_xlat10_0.x;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_9.xyz = u_xlat10_1.xyz * _ShadowColor.xyz;
    u_xlat16_0.x = dot(u_xlat16_9.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_0.x * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_6.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_6.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_9.xyz = u_xlat16_6.xyz * _ShadowColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xyz * _ShadowColor.xyz + (-u_xlat16_9.xyz);
    u_xlat16_9.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_5.xyz + u_xlat16_9.xyz;
    u_xlat0.x = (-u_xlat16_0.x) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_9.xyz;
    u_xlat16_9.x = u_xlat10_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9.x = min(max(u_xlat16_9.x, 0.0), 1.0);
#else
    u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_9.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat0.xyz * u_xlat16_3.xxx;
    u_xlat16_5.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_21 = dot(vs_TEXCOORD5.xyz, u_xlat16_5.xyz);
    u_xlat16_23 = dot(vs_TEXCOORD6.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = dot(vs_TEXCOORD7.xyz, u_xlat16_5.xyz);
    u_xlat0.xyz = vec3(u_xlat16_23) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_21) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat16_5.xxx + u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat12.x = u_xlat12.x + u_xlat12.x;
    u_xlat12.xy = u_xlat0.xy * (-u_xlat12.xx) + u_xlat1.xy;
    u_xlat12.xy = (-u_xlat0.xy) + u_xlat12.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat12.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_12 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_3.xyz * u_xlat16_0.xyw + (-u_xlat16_3.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_12) * u_xlat16_0.xyw + u_xlat16_3.xyz;
    u_xlat18 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat18) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UseChannel==2);
#else
    u_xlatb18 = _UseChannel==2;
#endif
    u_xlat16_3.x = float(_UseChannel);
    u_xlat16_9.x = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_9.x + u_xlat10_1.x;
    u_xlat16_3.x = (u_xlatb18) ? u_xlat10_1.z : u_xlat16_3.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
int u_xlati1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
lowp vec3 u_xlat10_8;
mediump vec3 u_xlat16_11;
vec2 u_xlat16;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_27;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat16.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat16.xy * vec2(0.25, 0.25);
    u_xlat16.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat16.x * 0.0625 + unity_LODFade.y;
    u_xlat10_16 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat16.x = u_xlat10_16 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(u_xlat16.x<0.0);
#else
    u_xlatb16.x = u_xlat16.x<0.0;
#endif
    if((int(u_xlatb16.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_1.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_3.x = u_xlat10_0.x;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_11.xyz = u_xlat10_1.xyz * _ShadowColor.xyz;
    u_xlat16_0.x = dot(u_xlat16_11.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_0.x * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_8.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_8.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_11.xyz = u_xlat16_8.xyz * _ShadowColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xyz * _ShadowColor.xyz + (-u_xlat16_11.xyz);
    u_xlat16_11.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_5.xyz + u_xlat16_11.xyz;
    u_xlat0.x = (-u_xlat16_0.x) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_11.xyz;
    u_xlat16_11.x = u_xlat10_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_11.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat0.xyz * u_xlat16_3.xxx;
    u_xlat16_5.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_6.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_27 = dot(vs_TEXCOORD5.xyz, u_xlat16_7.xyz);
    u_xlat16_29 = dot(vs_TEXCOORD6.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = dot(vs_TEXCOORD7.xyz, u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(u_xlat16_29) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_27) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_30) + u_xlat0.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat16.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16.x = u_xlat16.x + u_xlat16.x;
    u_xlat16.xy = u_xlat0.xy * (-u_xlat16.xx) + u_xlat2.xy;
    u_xlat16.xy = (-u_xlat0.xy) + u_xlat16.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat16.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_16 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_2.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz + u_xlat10_2.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_27 = dot(u_xlat10_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat1.x = (-u_xlat16_27) + _LightmapThreshold;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlati1 = int(u_xlat1.x);
    u_xlat1.x = (u_xlati1 != 0) ? 0.0 : 1.0;
    u_xlat1.x = u_xlat1.x + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * u_xlat1.xxx;
    u_xlat16_7.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_5.xyz) * u_xlat16_3.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_16) * u_xlat16_0.xyw + u_xlat16_6.xyz;
    u_xlat24 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat24) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_UseChannel==2);
#else
    u_xlatb24 = _UseChannel==2;
#endif
    u_xlat16_3.x = float(_UseChannel);
    u_xlat16_11.x = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_11.x + u_xlat10_1.x;
    u_xlat16_3.x = (u_xlatb24) ? u_xlat10_1.z : u_xlat16_3.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
int u_xlati1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
lowp vec3 u_xlat10_8;
mediump vec3 u_xlat16_11;
vec2 u_xlat16;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_27;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat16.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat16.xy * vec2(0.25, 0.25);
    u_xlat16.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat16.x * 0.0625 + unity_LODFade.y;
    u_xlat10_16 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat16.x = u_xlat10_16 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(u_xlat16.x<0.0);
#else
    u_xlatb16.x = u_xlat16.x<0.0;
#endif
    if((int(u_xlatb16.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_1.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_3.x = u_xlat10_0.x;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_11.xyz = u_xlat10_1.xyz * _ShadowColor.xyz;
    u_xlat16_0.x = dot(u_xlat16_11.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_0.x * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_8.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_8.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_11.xyz = u_xlat16_8.xyz * _ShadowColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xyz * _ShadowColor.xyz + (-u_xlat16_11.xyz);
    u_xlat16_11.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_5.xyz + u_xlat16_11.xyz;
    u_xlat0.x = (-u_xlat16_0.x) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_11.xyz;
    u_xlat16_11.x = u_xlat10_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_11.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat0.xyz * u_xlat16_3.xxx;
    u_xlat16_5.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_6.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_27 = dot(vs_TEXCOORD5.xyz, u_xlat16_7.xyz);
    u_xlat16_29 = dot(vs_TEXCOORD6.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = dot(vs_TEXCOORD7.xyz, u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(u_xlat16_29) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_27) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_30) + u_xlat0.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat16.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16.x = u_xlat16.x + u_xlat16.x;
    u_xlat16.xy = u_xlat0.xy * (-u_xlat16.xx) + u_xlat2.xy;
    u_xlat16.xy = (-u_xlat0.xy) + u_xlat16.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat16.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_16 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_2.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz + u_xlat10_2.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_27 = dot(u_xlat10_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat1.x = (-u_xlat16_27) + _LightmapThreshold;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlati1 = int(u_xlat1.x);
    u_xlat1.x = (u_xlati1 != 0) ? 0.0 : 1.0;
    u_xlat1.x = u_xlat1.x + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * u_xlat1.xxx;
    u_xlat16_7.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_5.xyz) * u_xlat16_3.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_16) * u_xlat16_0.xyw + u_xlat16_6.xyz;
    u_xlat24 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat24) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_UseChannel==2);
#else
    u_xlatb24 = _UseChannel==2;
#endif
    u_xlat16_3.x = float(_UseChannel);
    u_xlat16_11.x = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_11.x + u_xlat10_1.x;
    u_xlat16_3.x = (u_xlatb24) ? u_xlat10_1.z : u_xlat16_3.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_9;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
float u_xlat19;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat18 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_3.x = (-u_xlat18) + 2.0;
    u_xlat16_3.x = u_xlat18 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat12.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat12.x = u_xlat12.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat12.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat0.x>=u_xlat12.x);
#else
    u_xlatb12 = u_xlat0.x>=u_xlat12.x;
#endif
    u_xlat18 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat18) + 2.0;
    u_xlat18 = u_xlat18 * u_xlat19;
    u_xlat19 = u_xlat18 * _HeigtFogColDelta.w;
    u_xlat12.x = (u_xlatb12) ? u_xlat19 : u_xlat18;
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _Mihoyo_FogColor.w;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, _HeigtFogColBase.w);
    u_xlat1.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat18 = u_xlat6 * -1.44269502;
    u_xlat12.y = exp2(u_xlat18);
    u_xlat12.xy = (-u_xlat12.xy) + vec2(1.0, 1.0);
    u_xlat18 = u_xlat12.y / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.00999999978<abs(u_xlat6));
#else
    u_xlatb6 = 0.00999999978<abs(u_xlat6);
#endif
    u_xlat16_3.x = (u_xlatb6) ? u_xlat18 : 1.0;
    u_xlat6 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat6 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat0.x = min(u_xlat16_3.x, _HeigtFogColBase.w);
    u_xlat6 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat2.w = u_xlat6 * u_xlat12.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
int u_xlati1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
lowp vec3 u_xlat10_8;
mediump vec3 u_xlat16_11;
vec2 u_xlat16;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_27;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat16.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat16.xy * vec2(0.25, 0.25);
    u_xlat16.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat16.x * 0.0625 + unity_LODFade.y;
    u_xlat10_16 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat16.x = u_xlat10_16 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(u_xlat16.x<0.0);
#else
    u_xlatb16.x = u_xlat16.x<0.0;
#endif
    if((int(u_xlatb16.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_1.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_3.x = u_xlat10_0.x;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_11.xyz = u_xlat10_1.xyz * _ShadowColor.xyz;
    u_xlat16_0.x = dot(u_xlat16_11.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_0.x * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_8.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_8.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_11.xyz = u_xlat16_8.xyz * _ShadowColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xyz * _ShadowColor.xyz + (-u_xlat16_11.xyz);
    u_xlat16_11.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_5.xyz + u_xlat16_11.xyz;
    u_xlat0.x = (-u_xlat16_0.x) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_11.xyz;
    u_xlat16_11.x = u_xlat10_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_11.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat0.xyz * u_xlat16_3.xxx;
    u_xlat16_5.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_6.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_27 = dot(vs_TEXCOORD5.xyz, u_xlat16_7.xyz);
    u_xlat16_29 = dot(vs_TEXCOORD6.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = dot(vs_TEXCOORD7.xyz, u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(u_xlat16_29) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_27) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_30) + u_xlat0.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat16.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16.x = u_xlat16.x + u_xlat16.x;
    u_xlat16.xy = u_xlat0.xy * (-u_xlat16.xx) + u_xlat2.xy;
    u_xlat16.xy = (-u_xlat0.xy) + u_xlat16.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat16.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_16 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_2.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz + u_xlat10_2.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_27 = dot(u_xlat10_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat1.x = (-u_xlat16_27) + _LightmapThreshold;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlati1 = int(u_xlat1.x);
    u_xlat1.x = (u_xlati1 != 0) ? 0.0 : 1.0;
    u_xlat1.x = u_xlat1.x + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * u_xlat1.xxx;
    u_xlat16_7.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_5.xyz) * u_xlat16_3.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_16) * u_xlat16_0.xyw + u_xlat16_6.xyz;
    u_xlat24 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat24) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_UseChannel==2);
#else
    u_xlatb24 = _UseChannel==2;
#endif
    u_xlat16_3.x = float(_UseChannel);
    u_xlat16_11.x = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_11.x + u_xlat10_1.x;
    u_xlat16_3.x = (u_xlatb24) ? u_xlat10_1.z : u_xlat16_3.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
lowp float u_xlat10_12;
bvec2 u_xlatb12;
bool u_xlatb18;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat12.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat12.xy * vec2(0.25, 0.25);
    u_xlat12.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat12.x * 0.0625 + unity_LODFade.y;
    u_xlat10_12 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat12.x = u_xlat10_12 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12.x = !!(u_xlat12.x<0.0);
#else
    u_xlatb12.x = u_xlat12.x<0.0;
#endif
    if((int(u_xlatb12.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_1.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb12.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb12.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_3.x = u_xlat10_0.x;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_9.xyz = u_xlat10_1.xyz * _ShadowColor.xyz;
    u_xlat16_4.x = u_xlat10_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_4.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz;
    u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UseChannel==2);
#else
    u_xlatb18 = _UseChannel==2;
#endif
    u_xlat16_21 = float(_UseChannel);
    u_xlat16_22 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22 + u_xlat10_0.x;
    u_xlat16_21 = (u_xlatb18) ? u_xlat10_0.z : u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * _Emission.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Emission.www;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
lowp float u_xlat10_12;
bvec2 u_xlatb12;
bool u_xlatb18;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat12.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat12.xy * vec2(0.25, 0.25);
    u_xlat12.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat12.x * 0.0625 + unity_LODFade.y;
    u_xlat10_12 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat12.x = u_xlat10_12 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12.x = !!(u_xlat12.x<0.0);
#else
    u_xlatb12.x = u_xlat12.x<0.0;
#endif
    if((int(u_xlatb12.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_1.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb12.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb12.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_3.x = u_xlat10_0.x;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_9.xyz = u_xlat10_1.xyz * _ShadowColor.xyz;
    u_xlat16_4.x = u_xlat10_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_4.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz;
    u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UseChannel==2);
#else
    u_xlatb18 = _UseChannel==2;
#endif
    u_xlat16_21 = float(_UseChannel);
    u_xlat16_22 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22 + u_xlat10_0.x;
    u_xlat16_21 = (u_xlatb18) ? u_xlat10_0.z : u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * _Emission.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Emission.www;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
lowp float u_xlat10_12;
bvec2 u_xlatb12;
bool u_xlatb18;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat12.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat12.xy * vec2(0.25, 0.25);
    u_xlat12.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat12.x * 0.0625 + unity_LODFade.y;
    u_xlat10_12 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat12.x = u_xlat10_12 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12.x = !!(u_xlat12.x<0.0);
#else
    u_xlatb12.x = u_xlat12.x<0.0;
#endif
    if((int(u_xlatb12.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_1.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb12.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb12.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_3.x = u_xlat10_0.x;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_9.xyz = u_xlat10_1.xyz * _ShadowColor.xyz;
    u_xlat16_4.x = u_xlat10_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_4.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz;
    u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat6.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat6.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UseChannel==2);
#else
    u_xlatb18 = _UseChannel==2;
#endif
    u_xlat16_21 = float(_UseChannel);
    u_xlat16_22 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22 + u_xlat10_0.x;
    u_xlat16_21 = (u_xlatb18) ? u_xlat10_0.z : u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * _Emission.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Emission.www;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_8;
vec2 u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat10.xy * vec2(0.25, 0.25);
    u_xlat10.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat10.x * 0.0625 + unity_LODFade.y;
    u_xlat10_10 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat10.x = u_xlat10_10 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(u_xlat10.x<0.0);
#else
    u_xlatb10.x = u_xlat10.x<0.0;
#endif
    if((int(u_xlatb10.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_1.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb10.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb10.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_3.x = u_xlat10_0.x;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_8.xyz = u_xlat10_1.xyz * _ShadowColor.xyz;
    u_xlat16_4.x = u_xlat10_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_4.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_8.xyz;
    u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
    u_xlat10.x = dot(u_xlat0.xyz, vs_TEXCOORD5.xyz);
    u_xlat10.x = u_xlat10.x + u_xlat10.x;
    u_xlat0.xy = vs_TEXCOORD5.xy * (-u_xlat10.xx) + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + (-vs_TEXCOORD5.xy);
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat0.xy + vs_TEXCOORD5.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_10 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_3.xyz * u_xlat16_0.xyw + (-u_xlat16_3.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_10) * u_xlat16_0.xyw + u_xlat16_3.xyz;
    u_xlat15 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat15) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_3.x = float(_UseChannel);
    u_xlat16_8.x = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8.x + u_xlat10_1.x;
    u_xlat16_3.x = (u_xlatb15) ? u_xlat10_1.z : u_xlat16_3.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_8;
vec2 u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat10.xy * vec2(0.25, 0.25);
    u_xlat10.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat10.x * 0.0625 + unity_LODFade.y;
    u_xlat10_10 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat10.x = u_xlat10_10 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(u_xlat10.x<0.0);
#else
    u_xlatb10.x = u_xlat10.x<0.0;
#endif
    if((int(u_xlatb10.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_1.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb10.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb10.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_3.x = u_xlat10_0.x;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_8.xyz = u_xlat10_1.xyz * _ShadowColor.xyz;
    u_xlat16_4.x = u_xlat10_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_4.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_8.xyz;
    u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
    u_xlat10.x = dot(u_xlat0.xyz, vs_TEXCOORD5.xyz);
    u_xlat10.x = u_xlat10.x + u_xlat10.x;
    u_xlat0.xy = vs_TEXCOORD5.xy * (-u_xlat10.xx) + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + (-vs_TEXCOORD5.xy);
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat0.xy + vs_TEXCOORD5.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_10 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_3.xyz * u_xlat16_0.xyw + (-u_xlat16_3.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_10) * u_xlat16_0.xyw + u_xlat16_3.xyz;
    u_xlat15 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat15) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_3.x = float(_UseChannel);
    u_xlat16_8.x = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8.x + u_xlat10_1.x;
    u_xlat16_3.x = (u_xlatb15) ? u_xlat10_1.z : u_xlat16_3.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_8;
vec2 u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat15;
bool u_xlatb15;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb10.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb10.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb10.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat10.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat10.xy * vec2(0.25, 0.25);
    u_xlat10.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat10.x * 0.0625 + unity_LODFade.y;
    u_xlat10_10 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat10.x = u_xlat10_10 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(u_xlat10.x<0.0);
#else
    u_xlatb10.x = u_xlat10.x<0.0;
#endif
    if((int(u_xlatb10.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_1.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb10.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb10.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_3.x = u_xlat10_0.x;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_8.xyz = u_xlat10_1.xyz * _ShadowColor.xyz;
    u_xlat16_4.x = u_xlat10_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_4.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_8.xyz;
    u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
    u_xlat10.x = dot(u_xlat0.xyz, vs_TEXCOORD5.xyz);
    u_xlat10.x = u_xlat10.x + u_xlat10.x;
    u_xlat0.xy = vs_TEXCOORD5.xy * (-u_xlat10.xx) + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + (-vs_TEXCOORD5.xy);
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat0.xy + vs_TEXCOORD5.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_10 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_3.xyz * u_xlat16_0.xyw + (-u_xlat16_3.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_10) * u_xlat16_0.xyw + u_xlat16_3.xyz;
    u_xlat15 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat15) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_UseChannel==2);
#else
    u_xlatb15 = _UseChannel==2;
#endif
    u_xlat16_3.x = float(_UseChannel);
    u_xlat16_8.x = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8.x + u_xlat10_1.x;
    u_xlat16_3.x = (u_xlatb15) ? u_xlat10_1.z : u_xlat16_3.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
int u_xlati1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_10;
vec2 u_xlat14;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat14.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat14.xy * vec2(0.25, 0.25);
    u_xlat14.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat14.x * 0.0625 + unity_LODFade.y;
    u_xlat10_14 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat14.x = u_xlat10_14 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(u_xlat14.x<0.0);
#else
    u_xlatb14.x = u_xlat14.x<0.0;
#endif
    if((int(u_xlatb14.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_1.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb14.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb14.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_3.x = u_xlat10_0.x;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_10.xyz = u_xlat10_1.xyz * _ShadowColor.xyz;
    u_xlat16_4.x = u_xlat10_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_4.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_10.xyz;
    u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_24 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat0.xyz = vec3(u_xlat16_25) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_24) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_26) + u_xlat0.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat14.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
    u_xlat14.xy = u_xlat0.xy * (-u_xlat14.xx) + u_xlat2.xy;
    u_xlat14.xy = (-u_xlat0.xy) + u_xlat14.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat14.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_14 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_2.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz + u_xlat10_2.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_24 = dot(u_xlat10_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat1.x = (-u_xlat16_24) + _LightmapThreshold;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlati1 = int(u_xlat1.x);
    u_xlat1.x = (u_xlati1 != 0) ? 0.0 : 1.0;
    u_xlat1.x = u_xlat1.x + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * u_xlat1.xxx;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_4.xyz) * u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_14) * u_xlat16_0.xyw + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat21) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_3.x = float(_UseChannel);
    u_xlat16_10.x = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10.x + u_xlat10_1.x;
    u_xlat16_3.x = (u_xlatb21) ? u_xlat10_1.z : u_xlat16_3.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
int u_xlati1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_10;
vec2 u_xlat14;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat14.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat14.xy * vec2(0.25, 0.25);
    u_xlat14.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat14.x * 0.0625 + unity_LODFade.y;
    u_xlat10_14 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat14.x = u_xlat10_14 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(u_xlat14.x<0.0);
#else
    u_xlatb14.x = u_xlat14.x<0.0;
#endif
    if((int(u_xlatb14.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_1.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb14.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb14.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_3.x = u_xlat10_0.x;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_10.xyz = u_xlat10_1.xyz * _ShadowColor.xyz;
    u_xlat16_4.x = u_xlat10_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_4.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_10.xyz;
    u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_24 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat0.xyz = vec3(u_xlat16_25) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_24) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_26) + u_xlat0.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat14.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
    u_xlat14.xy = u_xlat0.xy * (-u_xlat14.xx) + u_xlat2.xy;
    u_xlat14.xy = (-u_xlat0.xy) + u_xlat14.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat14.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_14 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_2.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz + u_xlat10_2.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_24 = dot(u_xlat10_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat1.x = (-u_xlat16_24) + _LightmapThreshold;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlati1 = int(u_xlat1.x);
    u_xlat1.x = (u_xlati1 != 0) ? 0.0 : 1.0;
    u_xlat1.x = u_xlat1.x + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * u_xlat1.xxx;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_4.xyz) * u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_14) * u_xlat16_0.xyw + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat21) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_3.x = float(_UseChannel);
    u_xlat16_10.x = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10.x + u_xlat10_1.x;
    u_xlat16_3.x = (u_xlatb21) ? u_xlat10_1.z : u_xlat16_3.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
int u_xlati1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_10;
vec2 u_xlat14;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat14.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat14.xy * vec2(0.25, 0.25);
    u_xlat14.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat14.x * 0.0625 + unity_LODFade.y;
    u_xlat10_14 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat14.x = u_xlat10_14 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(u_xlat14.x<0.0);
#else
    u_xlatb14.x = u_xlat14.x<0.0;
#endif
    if((int(u_xlatb14.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_1.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb14.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb14.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_3.x = u_xlat10_0.x;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_10.xyz = u_xlat10_1.xyz * _ShadowColor.xyz;
    u_xlat16_4.x = u_xlat10_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_4.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_10.xyz;
    u_xlat16_4.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_5.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_24 = dot(vs_TEXCOORD5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = dot(vs_TEXCOORD6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = dot(vs_TEXCOORD7.xyz, u_xlat16_6.xyz);
    u_xlat0.xyz = vec3(u_xlat16_25) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_24) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_26) + u_xlat0.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat14.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat14.x = u_xlat14.x + u_xlat14.x;
    u_xlat14.xy = u_xlat0.xy * (-u_xlat14.xx) + u_xlat2.xy;
    u_xlat14.xy = (-u_xlat0.xy) + u_xlat14.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat14.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_14 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_2.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz + u_xlat10_2.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_24 = dot(u_xlat10_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat1.x = (-u_xlat16_24) + _LightmapThreshold;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlati1 = int(u_xlat1.x);
    u_xlat1.x = (u_xlati1 != 0) ? 0.0 : 1.0;
    u_xlat1.x = u_xlat1.x + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * u_xlat1.xxx;
    u_xlat16_6.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_4.xyz) * u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_14) * u_xlat16_0.xyw + u_xlat16_5.xyz;
    u_xlat21 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat21) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_3.x = float(_UseChannel);
    u_xlat16_10.x = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10.x + u_xlat10_1.x;
    u_xlat16_3.x = (u_xlatb21) ? u_xlat10_1.z : u_xlat16_3.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_10;
vec2 u_xlat14;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
bool u_xlatb21;
mediump float u_xlat16_24;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat14.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat14.xy * vec2(0.25, 0.25);
    u_xlat14.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat14.x * 0.0625 + unity_LODFade.y;
    u_xlat10_14 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat14.x = u_xlat10_14 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(u_xlat14.x<0.0);
#else
    u_xlatb14.x = u_xlat14.x<0.0;
#endif
    if((int(u_xlatb14.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_1.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb14.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb14.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_3.x = u_xlat10_0.x;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_10.xyz = u_xlat10_1.xyz * _ShadowColor.xyz;
    u_xlat16_0.x = dot(u_xlat16_10.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_0.x * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_7.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_7.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_10.xyz = u_xlat16_7.xyz * _ShadowColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xyz * _ShadowColor.xyz + (-u_xlat16_10.xyz);
    u_xlat16_10.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat0.x = (-u_xlat16_0.x) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_10.xyz;
    u_xlat16_10.x = u_xlat10_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_10.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat0.xyz * u_xlat16_3.xxx;
    u_xlat16_5.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat7.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat7.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_24 = float(_UseChannel);
    u_xlat16_26 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_26 + u_xlat10_0.x;
    u_xlat16_24 = (u_xlatb21) ? u_xlat10_0.z : u_xlat16_24;
    u_xlat16_6.xyz = vec3(u_xlat16_24) * _Emission.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _Emission.www;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_10;
vec2 u_xlat14;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
bool u_xlatb21;
mediump float u_xlat16_24;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat14.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat14.xy * vec2(0.25, 0.25);
    u_xlat14.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat14.x * 0.0625 + unity_LODFade.y;
    u_xlat10_14 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat14.x = u_xlat10_14 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(u_xlat14.x<0.0);
#else
    u_xlatb14.x = u_xlat14.x<0.0;
#endif
    if((int(u_xlatb14.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_1.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb14.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb14.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_3.x = u_xlat10_0.x;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_10.xyz = u_xlat10_1.xyz * _ShadowColor.xyz;
    u_xlat16_0.x = dot(u_xlat16_10.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_0.x * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_7.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_7.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_10.xyz = u_xlat16_7.xyz * _ShadowColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xyz * _ShadowColor.xyz + (-u_xlat16_10.xyz);
    u_xlat16_10.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat0.x = (-u_xlat16_0.x) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_10.xyz;
    u_xlat16_10.x = u_xlat10_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_10.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat0.xyz * u_xlat16_3.xxx;
    u_xlat16_5.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat7.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat7.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_24 = float(_UseChannel);
    u_xlat16_26 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_26 + u_xlat10_0.x;
    u_xlat16_24 = (u_xlatb21) ? u_xlat10_0.z : u_xlat16_24;
    u_xlat16_6.xyz = vec3(u_xlat16_24) * _Emission.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _Emission.www;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump float u_xlat16_3;
mediump float u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat7;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat16;
bool u_xlatb16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat15 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat15) + 2.0;
    u_xlat16_3 = u_xlat15 * u_xlat16_3;
    u_xlat1.xyz = vec3(u_xlat16_3) * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat5.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat15 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat15 = u_xlat15 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat15 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat16 = (-u_xlat15) + 2.0;
    u_xlat15 = u_xlat15 * u_xlat16;
    u_xlat16 = u_xlat15 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat15 = (u_xlatb2) ? u_xlat16 : u_xlat15;
    u_xlat15 = log2(u_xlat15);
    u_xlat15 = u_xlat15 * _Mihoyo_FogColor3.w;
    u_xlat15 = exp2(u_xlat15);
    u_xlat15 = min(u_xlat15, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = (-u_xlat15) + 1.0;
    u_xlat16 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat10 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat7.x = u_xlat16 * -1.44269502;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat7.x / u_xlat16;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(0.00999999978<abs(u_xlat16));
#else
    u_xlatb16 = 0.00999999978<abs(u_xlat16);
#endif
    u_xlat16_3 = (u_xlatb16) ? u_xlat7.x : 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16_3 = exp2((-u_xlat16_3));
    u_xlat16_3 = min(u_xlat16_3, 1.0);
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat16_8 = (-u_xlat16) + 2.0;
    u_xlat16_8 = u_xlat16 * u_xlat16_8;
    u_xlat16 = u_xlat16_8 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat16 = u_xlat16 + 1.0;
    u_xlat16_3 = u_xlat16 * u_xlat16_3;
    u_xlat16 = min(u_xlat16_3, _HeigtFogColBase3.w);
    u_xlat7.x = (-u_xlat16) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx;
    u_xlat3.w = u_xlat15 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat16) + u_xlat1.xyz;
    u_xlat16_4 = (-u_xlat5.x) + 2.0;
    u_xlat16_4 = u_xlat5.x * u_xlat16_4;
    u_xlat1.xyz = vec3(u_xlat16_4) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat7.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat5.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat5.x = u_xlat5.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat5.xxx * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat5.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat5.x) + 2.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x;
    u_xlat15 = u_xlat5.x * _HeigtFogColDelta2.w;
    u_xlat5.x = (u_xlatb2) ? u_xlat15 : u_xlat5.x;
    u_xlat5.x = log2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * _Mihoyo_FogColor2.w;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = min(u_xlat5.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz;
    u_xlat15 = u_xlat10 * -1.44269502;
    u_xlat5.z = exp2(u_xlat15);
    u_xlat5.xz = (-u_xlat5.xz) + vec2(1.0, 1.0);
    u_xlat15 = u_xlat5.z / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.00999999978<abs(u_xlat10));
#else
    u_xlatb10 = 0.00999999978<abs(u_xlat10);
#endif
    u_xlat16_4 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat10 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat10 * u_xlat16_4;
    u_xlat16_4 = exp2((-u_xlat16_4));
    u_xlat16_4 = min(u_xlat16_4, 1.0);
    u_xlat16_4 = (-u_xlat16_4) + 1.0;
    u_xlat16_9 = (-u_xlat0.x) + 2.0;
    u_xlat16_9 = u_xlat0.x * u_xlat16_9;
    u_xlat0.x = u_xlat16_9 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4 = u_xlat0.x * u_xlat16_4;
    u_xlat0.x = min(u_xlat16_4, _HeigtFogColBase2.w);
    u_xlat10 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.w = u_xlat10 * u_xlat5.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_10;
vec2 u_xlat14;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
bool u_xlatb21;
mediump float u_xlat16_24;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat14.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat14.xy * vec2(0.25, 0.25);
    u_xlat14.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat14.x * 0.0625 + unity_LODFade.y;
    u_xlat10_14 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat14.x = u_xlat10_14 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(u_xlat14.x<0.0);
#else
    u_xlatb14.x = u_xlat14.x<0.0;
#endif
    if((int(u_xlatb14.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_1.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb14.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb14.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_3.x = u_xlat10_0.x;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_10.xyz = u_xlat10_1.xyz * _ShadowColor.xyz;
    u_xlat16_0.x = dot(u_xlat16_10.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_0.x * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_7.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_7.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_10.xyz = u_xlat16_7.xyz * _ShadowColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xyz * _ShadowColor.xyz + (-u_xlat16_10.xyz);
    u_xlat16_10.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat0.x = (-u_xlat16_0.x) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_10.xyz;
    u_xlat16_10.x = u_xlat10_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_10.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat0.xyz * u_xlat16_3.xxx;
    u_xlat16_5.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat0.x = float(_UseSet);
    u_xlat7.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat0.xy = u_xlat0.xx * u_xlat7.xy + vs_TEXCOORD0.xy;
    u_xlat10_0.xyz = texture(_EmissionMask, u_xlat0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_UseChannel==2);
#else
    u_xlatb21 = _UseChannel==2;
#endif
    u_xlat16_24 = float(_UseChannel);
    u_xlat16_26 = (-u_xlat10_0.x) + u_xlat10_0.y;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_26 + u_xlat10_0.x;
    u_xlat16_24 = (u_xlatb21) ? u_xlat10_0.z : u_xlat16_24;
    u_xlat16_6.xyz = vec3(u_xlat16_24) * _Emission.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _Emission.www;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
lowp float u_xlat10_12;
bvec2 u_xlatb12;
float u_xlat18;
bool u_xlatb18;
mediump float u_xlat16_21;
mediump float u_xlat16_23;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat12.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat12.xy * vec2(0.25, 0.25);
    u_xlat12.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat12.x * 0.0625 + unity_LODFade.y;
    u_xlat10_12 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat12.x = u_xlat10_12 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12.x = !!(u_xlat12.x<0.0);
#else
    u_xlatb12.x = u_xlat12.x<0.0;
#endif
    if((int(u_xlatb12.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_1.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb12.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb12.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_3.x = u_xlat10_0.x;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_9.xyz = u_xlat10_1.xyz * _ShadowColor.xyz;
    u_xlat16_0.x = dot(u_xlat16_9.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_0.x * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_6.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_6.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_9.xyz = u_xlat16_6.xyz * _ShadowColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xyz * _ShadowColor.xyz + (-u_xlat16_9.xyz);
    u_xlat16_9.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_5.xyz + u_xlat16_9.xyz;
    u_xlat0.x = (-u_xlat16_0.x) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_9.xyz;
    u_xlat16_9.x = u_xlat10_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9.x = min(max(u_xlat16_9.x, 0.0), 1.0);
#else
    u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_9.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat0.xyz * u_xlat16_3.xxx;
    u_xlat16_5.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_21 = dot(vs_TEXCOORD5.xyz, u_xlat16_5.xyz);
    u_xlat16_23 = dot(vs_TEXCOORD6.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = dot(vs_TEXCOORD7.xyz, u_xlat16_5.xyz);
    u_xlat0.xyz = vec3(u_xlat16_23) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_21) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat16_5.xxx + u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat12.x = u_xlat12.x + u_xlat12.x;
    u_xlat12.xy = u_xlat0.xy * (-u_xlat12.xx) + u_xlat1.xy;
    u_xlat12.xy = (-u_xlat0.xy) + u_xlat12.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat12.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_12 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_3.xyz * u_xlat16_0.xyw + (-u_xlat16_3.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_12) * u_xlat16_0.xyw + u_xlat16_3.xyz;
    u_xlat18 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat18) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UseChannel==2);
#else
    u_xlatb18 = _UseChannel==2;
#endif
    u_xlat16_3.x = float(_UseChannel);
    u_xlat16_9.x = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_9.x + u_xlat10_1.x;
    u_xlat16_3.x = (u_xlatb18) ? u_xlat10_1.z : u_xlat16_3.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
lowp float u_xlat10_12;
bvec2 u_xlatb12;
float u_xlat18;
bool u_xlatb18;
mediump float u_xlat16_21;
mediump float u_xlat16_23;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat12.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat12.xy * vec2(0.25, 0.25);
    u_xlat12.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat12.x * 0.0625 + unity_LODFade.y;
    u_xlat10_12 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat12.x = u_xlat10_12 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12.x = !!(u_xlat12.x<0.0);
#else
    u_xlatb12.x = u_xlat12.x<0.0;
#endif
    if((int(u_xlatb12.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_1.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb12.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb12.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_3.x = u_xlat10_0.x;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_9.xyz = u_xlat10_1.xyz * _ShadowColor.xyz;
    u_xlat16_0.x = dot(u_xlat16_9.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_0.x * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_6.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_6.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_9.xyz = u_xlat16_6.xyz * _ShadowColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xyz * _ShadowColor.xyz + (-u_xlat16_9.xyz);
    u_xlat16_9.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_5.xyz + u_xlat16_9.xyz;
    u_xlat0.x = (-u_xlat16_0.x) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_9.xyz;
    u_xlat16_9.x = u_xlat10_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9.x = min(max(u_xlat16_9.x, 0.0), 1.0);
#else
    u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_9.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat0.xyz * u_xlat16_3.xxx;
    u_xlat16_5.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_21 = dot(vs_TEXCOORD5.xyz, u_xlat16_5.xyz);
    u_xlat16_23 = dot(vs_TEXCOORD6.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = dot(vs_TEXCOORD7.xyz, u_xlat16_5.xyz);
    u_xlat0.xyz = vec3(u_xlat16_23) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_21) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat16_5.xxx + u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat12.x = u_xlat12.x + u_xlat12.x;
    u_xlat12.xy = u_xlat0.xy * (-u_xlat12.xx) + u_xlat1.xy;
    u_xlat12.xy = (-u_xlat0.xy) + u_xlat12.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat12.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_12 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_3.xyz * u_xlat16_0.xyw + (-u_xlat16_3.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_12) * u_xlat16_0.xyw + u_xlat16_3.xyz;
    u_xlat18 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat18) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UseChannel==2);
#else
    u_xlatb18 = _UseChannel==2;
#endif
    u_xlat16_3.x = float(_UseChannel);
    u_xlat16_9.x = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_9.x + u_xlat10_1.x;
    u_xlat16_3.x = (u_xlatb18) ? u_xlat10_1.z : u_xlat16_3.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
lowp float u_xlat10_12;
bvec2 u_xlatb12;
float u_xlat18;
bool u_xlatb18;
mediump float u_xlat16_21;
mediump float u_xlat16_23;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat12.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat12.xy * vec2(0.25, 0.25);
    u_xlat12.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat12.x * 0.0625 + unity_LODFade.y;
    u_xlat10_12 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat12.x = u_xlat10_12 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12.x = !!(u_xlat12.x<0.0);
#else
    u_xlatb12.x = u_xlat12.x<0.0;
#endif
    if((int(u_xlatb12.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_1.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb12.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb12.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_3.x = u_xlat10_0.x;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_9.xyz = u_xlat10_1.xyz * _ShadowColor.xyz;
    u_xlat16_0.x = dot(u_xlat16_9.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_0.x * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_6.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_6.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_9.xyz = u_xlat16_6.xyz * _ShadowColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xyz * _ShadowColor.xyz + (-u_xlat16_9.xyz);
    u_xlat16_9.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_5.xyz + u_xlat16_9.xyz;
    u_xlat0.x = (-u_xlat16_0.x) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_9.xyz;
    u_xlat16_9.x = u_xlat10_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9.x = min(max(u_xlat16_9.x, 0.0), 1.0);
#else
    u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_9.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat0.xyz * u_xlat16_3.xxx;
    u_xlat16_5.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_21 = dot(vs_TEXCOORD5.xyz, u_xlat16_5.xyz);
    u_xlat16_23 = dot(vs_TEXCOORD6.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = dot(vs_TEXCOORD7.xyz, u_xlat16_5.xyz);
    u_xlat0.xyz = vec3(u_xlat16_23) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_21) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat16_5.xxx + u_xlat0.xyz;
    u_xlat1.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat12.x = u_xlat12.x + u_xlat12.x;
    u_xlat12.xy = u_xlat0.xy * (-u_xlat12.xx) + u_xlat1.xy;
    u_xlat12.xy = (-u_xlat0.xy) + u_xlat12.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat12.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_12 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_0.xyw = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = u_xlat10_0.xyw + u_xlat10_0.xyw;
    u_xlat16_0.xyw = u_xlat16_3.xyz * u_xlat16_0.xyw + (-u_xlat16_3.xyz);
    u_xlat16_0.xyz = vec3(u_xlat10_12) * u_xlat16_0.xyw + u_xlat16_3.xyz;
    u_xlat18 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat18) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_UseChannel==2);
#else
    u_xlatb18 = _UseChannel==2;
#endif
    u_xlat16_3.x = float(_UseChannel);
    u_xlat16_9.x = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_9.x + u_xlat10_1.x;
    u_xlat16_3.x = (u_xlatb18) ? u_xlat10_1.z : u_xlat16_3.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
int u_xlati1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
lowp vec3 u_xlat10_8;
mediump vec3 u_xlat16_11;
vec2 u_xlat16;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_27;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat16.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat16.xy * vec2(0.25, 0.25);
    u_xlat16.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat16.x * 0.0625 + unity_LODFade.y;
    u_xlat10_16 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat16.x = u_xlat10_16 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(u_xlat16.x<0.0);
#else
    u_xlatb16.x = u_xlat16.x<0.0;
#endif
    if((int(u_xlatb16.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_1.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_3.x = u_xlat10_0.x;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_11.xyz = u_xlat10_1.xyz * _ShadowColor.xyz;
    u_xlat16_0.x = dot(u_xlat16_11.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_0.x * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_8.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_8.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_11.xyz = u_xlat16_8.xyz * _ShadowColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xyz * _ShadowColor.xyz + (-u_xlat16_11.xyz);
    u_xlat16_11.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_5.xyz + u_xlat16_11.xyz;
    u_xlat0.x = (-u_xlat16_0.x) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_11.xyz;
    u_xlat16_11.x = u_xlat10_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_11.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat0.xyz * u_xlat16_3.xxx;
    u_xlat16_5.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_6.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_27 = dot(vs_TEXCOORD5.xyz, u_xlat16_7.xyz);
    u_xlat16_29 = dot(vs_TEXCOORD6.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = dot(vs_TEXCOORD7.xyz, u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(u_xlat16_29) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_27) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_30) + u_xlat0.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat16.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16.x = u_xlat16.x + u_xlat16.x;
    u_xlat16.xy = u_xlat0.xy * (-u_xlat16.xx) + u_xlat2.xy;
    u_xlat16.xy = (-u_xlat0.xy) + u_xlat16.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat16.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_16 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_2.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz + u_xlat10_2.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_27 = dot(u_xlat10_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat1.x = (-u_xlat16_27) + _LightmapThreshold;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlati1 = int(u_xlat1.x);
    u_xlat1.x = (u_xlati1 != 0) ? 0.0 : 1.0;
    u_xlat1.x = u_xlat1.x + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * u_xlat1.xxx;
    u_xlat16_7.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_5.xyz) * u_xlat16_3.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_16) * u_xlat16_0.xyw + u_xlat16_6.xyz;
    u_xlat24 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat24) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_UseChannel==2);
#else
    u_xlatb24 = _UseChannel==2;
#endif
    u_xlat16_3.x = float(_UseChannel);
    u_xlat16_11.x = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_11.x + u_xlat10_1.x;
    u_xlat16_3.x = (u_xlatb24) ? u_xlat10_1.z : u_xlat16_3.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
int u_xlati1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
lowp vec3 u_xlat10_8;
mediump vec3 u_xlat16_11;
vec2 u_xlat16;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_27;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat16.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat16.xy * vec2(0.25, 0.25);
    u_xlat16.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat16.x * 0.0625 + unity_LODFade.y;
    u_xlat10_16 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat16.x = u_xlat10_16 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(u_xlat16.x<0.0);
#else
    u_xlatb16.x = u_xlat16.x<0.0;
#endif
    if((int(u_xlatb16.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_1.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_3.x = u_xlat10_0.x;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_11.xyz = u_xlat10_1.xyz * _ShadowColor.xyz;
    u_xlat16_0.x = dot(u_xlat16_11.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_0.x * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_8.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_8.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_11.xyz = u_xlat16_8.xyz * _ShadowColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xyz * _ShadowColor.xyz + (-u_xlat16_11.xyz);
    u_xlat16_11.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_5.xyz + u_xlat16_11.xyz;
    u_xlat0.x = (-u_xlat16_0.x) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_11.xyz;
    u_xlat16_11.x = u_xlat10_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_11.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat0.xyz * u_xlat16_3.xxx;
    u_xlat16_5.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_6.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_27 = dot(vs_TEXCOORD5.xyz, u_xlat16_7.xyz);
    u_xlat16_29 = dot(vs_TEXCOORD6.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = dot(vs_TEXCOORD7.xyz, u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(u_xlat16_29) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_27) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_30) + u_xlat0.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat16.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16.x = u_xlat16.x + u_xlat16.x;
    u_xlat16.xy = u_xlat0.xy * (-u_xlat16.xx) + u_xlat2.xy;
    u_xlat16.xy = (-u_xlat0.xy) + u_xlat16.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat16.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_16 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_2.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz + u_xlat10_2.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_27 = dot(u_xlat10_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat1.x = (-u_xlat16_27) + _LightmapThreshold;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlati1 = int(u_xlat1.x);
    u_xlat1.x = (u_xlati1 != 0) ? 0.0 : 1.0;
    u_xlat1.x = u_xlat1.x + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * u_xlat1.xxx;
    u_xlat16_7.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_5.xyz) * u_xlat16_3.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_16) * u_xlat16_0.xyw + u_xlat16_6.xyz;
    u_xlat24 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat24) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_UseChannel==2);
#else
    u_xlatb24 = _UseChannel==2;
#endif
    u_xlat16_3.x = float(_UseChannel);
    u_xlat16_11.x = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_11.x + u_xlat10_1.x;
    u_xlat16_3.x = (u_xlatb24) ? u_xlat10_1.z : u_xlat16_3.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec4 _MainMaps_ST;
uniform 	vec4 _PropertyLightmapTexTS;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump float u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat9;
mediump float u_xlat16_10;
mediump float u_xlat16_13;
float u_xlat14;
bool u_xlatb14;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD1.xy * _PropertyLightmapTexTS.xy + _PropertyLightmapTexTS.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD2 = in_COLOR0;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD3.zw = u_xlat1.zw;
    vs_TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD4 = u_xlat0;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.yzx;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.zxy * u_xlat2.xyz;
    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.yzx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat16_3.xyz * in_TANGENT0.www;
    u_xlat5.y = u_xlat4.x;
    u_xlat5.x = u_xlat2.z;
    u_xlat5.z = u_xlat1.x;
    vs_TEXCOORD5.xyz = u_xlat5.xyz;
    u_xlat1.x = u_xlat2.y;
    u_xlat2.z = u_xlat1.y;
    u_xlat2.y = u_xlat4.y;
    u_xlat1.y = u_xlat4.z;
    vs_TEXCOORD7.xyz = u_xlat1.xyz;
    vs_TEXCOORD6.xyz = u_xlat2.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat21) + 2.0;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat1.xyz = u_xlat16_3.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat2.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat2.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat0.x>=u_xlat2.x);
#else
    u_xlatb2 = u_xlat0.x>=u_xlat2.x;
#endif
    u_xlat21 = (u_xlatb2) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColBase3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat9.x = u_xlat22 * -1.44269502;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) + 1.0;
    u_xlat9.x = u_xlat9.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_3.x = (u_xlatb22) ? u_xlat9.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat16_3.x = exp2((-u_xlat16_3.x));
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_10 = (-u_xlat22) + 2.0;
    u_xlat16_10 = u_xlat22 * u_xlat16_10;
    u_xlat22 = u_xlat16_10 * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;
    u_xlat22 = min(u_xlat16_3.x, _HeigtFogColBase3.w);
    u_xlat9.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat9.xxx;
    u_xlat3.w = u_xlat21 * u_xlat9.x;
    u_xlat3.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_6 = (-u_xlat7.x) + 2.0;
    u_xlat16_6 = u_xlat7.x * u_xlat16_6;
    u_xlat1.xyz = vec3(u_xlat16_6) * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat9.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb2) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColBase2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_6 = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat14 * u_xlat16_6;
    u_xlat16_6 = exp2((-u_xlat16_6));
    u_xlat16_6 = min(u_xlat16_6, 1.0);
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_13 = (-u_xlat0.x) + 2.0;
    u_xlat16_13 = u_xlat0.x * u_xlat16_13;
    u_xlat0.x = u_xlat16_13 * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat0.x = min(u_xlat16_6, _HeigtFogColBase2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.w = u_xlat14 * u_xlat7.x;
    u_xlat2.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = (-u_xlat2) + u_xlat3;
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat2;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
float ImmCB_0_0_0[16];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 unity_LODFade;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	float _ReceiveDynamicShadow;
uniform 	float _Transparent;
uniform 	mediump vec4 _Color;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec3 _ShadowColor;
uniform 	mediump float _LightMapIntensity;
uniform 	mediump float _ShadowIntegration;
uniform 	mediump vec3 _LightingColor;
uniform 	mediump float _LightmapColorScale;
uniform 	mediump float _LightmapColorIns;
uniform 	mediump float _LightmapColorLerp;
uniform 	mediump float _MetalRef;
uniform 	vec4 _SpecularMap_ST;
uniform 	float _SpecularIntensity;
uniform 	float _LightmapThreshold;
uniform 	float _IntensityInLightmap;
uniform 	float _LightmapDarkArea;
uniform 	float _LightmapDarkPromotion;
uniform 	mediump vec4 _Emission;
uniform 	int _UseChannel;
uniform 	int _UseSet;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _PropertyLightmapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DynamicSceneShadowVolumeBuffer;
uniform lowp sampler2D _LightmapColorChange;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MatcapMaskMap;
uniform lowp sampler2D _MatCap;
uniform lowp sampler2D _SpecularMap;
uniform lowp sampler2D _EmissionMask;
in highp vec4 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
uint u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
int u_xlati1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
lowp vec3 u_xlat10_8;
mediump vec3 u_xlat16_11;
vec2 u_xlat16;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_27;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = 0.0588235296;
	ImmCB_0_0_0[1] = 0.529411793;
	ImmCB_0_0_0[2] = 0.176470593;
	ImmCB_0_0_0[3] = 0.647058845;
	ImmCB_0_0_0[4] = 0.764705896;
	ImmCB_0_0_0[5] = 0.294117659;
	ImmCB_0_0_0[6] = 0.882352948;
	ImmCB_0_0_0[7] = 0.411764711;
	ImmCB_0_0_0[8] = 0.235294119;
	ImmCB_0_0_0[9] = 0.70588237;
	ImmCB_0_0_0[10] = 0.117647059;
	ImmCB_0_0_0[11] = 0.588235319;
	ImmCB_0_0_0[12] = 0.941176474;
	ImmCB_0_0_0[13] = 0.470588237;
	ImmCB_0_0_0[14] = 0.823529422;
	ImmCB_0_0_0[15] = 0.352941185;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_Transparent<0.949999988);
#else
    u_xlatb0 = _Transparent<0.949999988;
#endif
    if(u_xlatb0){
        u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
        u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy;
        u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
        u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
        u_xlat0.xy = fract(abs(u_xlat0.xy));
        u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
        u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
        u_xlat0.xy = u_xlat0.xy * vec2(16.0, 4.0);
        u_xlat0.x = u_xlat0.y + u_xlat0.x;
        u_xlatu0 = uint(u_xlat0.x);
        u_xlat0.x = _Transparent + (-ImmCB_0_0_0[int(u_xlatu0)]);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<0.0);
#else
        u_xlatb0 = u_xlat0.x<0.0;
#endif
        if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat16.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat1.xy = u_xlat16.xy * vec2(0.25, 0.25);
    u_xlat16.x = fract(u_xlat1.y);
    u_xlat1.z = u_xlat16.x * 0.0625 + unity_LODFade.y;
    u_xlat10_16 = texture(_DitherMaskLOD2D, u_xlat1.xz).w;
    u_xlat16.x = u_xlat10_16 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(u_xlat16.x<0.0);
#else
    u_xlatb16.x = u_xlat16.x<0.0;
#endif
    if((int(u_xlatb16.x) * int(0xffffffffu))!=0){discard;}
    u_xlat10_1.xyz = texture(_PropertyLightmapTex, vs_TEXCOORD0.zw).xyz;
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_0.x = texture(_DynamicSceneShadowVolumeBuffer, u_xlat0.xy).x;
        u_xlat16_3.x = u_xlat10_0.x;
    } else {
        u_xlat16_3.x = 1.0;
    //ENDIF
    }
    u_xlat16_11.xyz = u_xlat10_1.xyz * _ShadowColor.xyz;
    u_xlat16_0.x = dot(u_xlat16_11.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.x = u_xlat16_0.x * _LightmapColorScale;
    u_xlat4.y = 0.5;
    u_xlat10_8.xyz = texture(_LightmapColorChange, u_xlat4.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_8.xyz * vec3(vec3(_LightmapColorIns, _LightmapColorIns, _LightmapColorIns));
    u_xlat16_11.xyz = u_xlat16_8.xyz * _ShadowColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xyz * _ShadowColor.xyz + (-u_xlat16_11.xyz);
    u_xlat16_11.xyz = vec3(vec3(_LightmapColorLerp, _LightmapColorLerp, _LightmapColorLerp)) * u_xlat16_5.xyz + u_xlat16_11.xyz;
    u_xlat0.x = (-u_xlat16_0.x) + _LightmapDarkArea;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx * vec3(_LightmapDarkPromotion) + u_xlat16_11.xyz;
    u_xlat16_11.x = u_xlat10_1.x + (-_ShadowIntegration);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
    u_xlat16_3.x = (-u_xlat16_11.x) * u_xlat16_3.x + 1.0;
    u_xlat16_3.xyz = u_xlat0.xyz * u_xlat16_3.xxx;
    u_xlat16_5.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_LightMapIntensity, _LightMapIntensity, _LightMapIntensity)) + vec3(_LightingColor.x, _LightingColor.y, _LightingColor.z);
    u_xlat16_6.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz;
    u_xlat10_0.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_27 = dot(vs_TEXCOORD5.xyz, u_xlat16_7.xyz);
    u_xlat16_29 = dot(vs_TEXCOORD6.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = dot(vs_TEXCOORD7.xyz, u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(u_xlat16_29) * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * vec3(u_xlat16_27) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * vec3(u_xlat16_30) + u_xlat0.xyz;
    u_xlat2.xyz = vs_TEXCOORD4.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat16.x = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat16.x = u_xlat16.x + u_xlat16.x;
    u_xlat16.xy = u_xlat0.xy * (-u_xlat16.xx) + u_xlat2.xy;
    u_xlat16.xy = (-u_xlat0.xy) + u_xlat16.xy;
    u_xlat0.xy = vec2(vec2(_MetalRef, _MetalRef)) * u_xlat16.xy + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat10_16 = texture(_MatcapMaskMap, vs_TEXCOORD0.xy).x;
    u_xlat10_2.xyz = texture(_MatCap, u_xlat0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz + u_xlat10_2.xyz;
    u_xlat0.xy = u_xlat0.xy * _SpecularMap_ST.xy + _SpecularMap_ST.zw;
    u_xlat10_0.xyw = texture(_SpecularMap, u_xlat0.xy).xyz;
    u_xlat0.xyw = u_xlat10_0.xyw * vec3(_SpecularIntensity);
    u_xlat16_27 = dot(u_xlat10_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
    u_xlat1.x = (-u_xlat16_27) + _LightmapThreshold;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlati1 = int(u_xlat1.x);
    u_xlat1.x = (u_xlati1 != 0) ? 0.0 : 1.0;
    u_xlat1.x = u_xlat1.x + _IntensityInLightmap;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.xyw = u_xlat0.xyw * u_xlat1.xxx;
    u_xlat16_7.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat0.xyw;
    u_xlat16_0.xyw = (-u_xlat16_5.xyz) * u_xlat16_3.xyz + u_xlat16_7.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_16) * u_xlat16_0.xyw + u_xlat16_6.xyz;
    u_xlat24 = float(_UseSet);
    u_xlat1.xy = (-vs_TEXCOORD0.xy) + vs_TEXCOORD1.xy;
    u_xlat1.xy = vec2(u_xlat24) * u_xlat1.xy + vs_TEXCOORD0.xy;
    u_xlat10_1.xyz = texture(_EmissionMask, u_xlat1.xy).xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_UseChannel==2);
#else
    u_xlatb24 = _UseChannel==2;
#endif
    u_xlat16_3.x = float(_UseChannel);
    u_xlat16_11.x = (-u_xlat10_1.x) + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_11.x + u_xlat10_1.x;
    u_xlat16_3.x = (u_xlatb24) ? u_xlat10_1.z : u_xlat16_3.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _Emission.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _Emission.www;
    u_xlat16_0.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + u_xlat16_0.xyz;
    u_xlat16_3.x = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xxx + vs_COLOR1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 hw_tier00 " {
""
}
SubProgram "gles3 hw_tier01 " {
""
}
SubProgram "gles3 hw_tier02 " {
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "MATCAP_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "MATCAP_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "MATCAP_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "MATCAP_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "MATCAP_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "MATCAP_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_LightMap_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_LightMap_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_LightMap_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_LightMap_ON" "MATCAP_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_LightMap_ON" "MATCAP_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_LightMap_ON" "MATCAP_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "_LightMap_ON" "MATCAP_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "_LightMap_ON" "MATCAP_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "_LightMap_ON" "MATCAP_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "MATCAP_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "MATCAP_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "MATCAP_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "MATCAP_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "MATCAP_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "MATCAP_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "MATCAP_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "MATCAP_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "MATCAP_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "MATCAP_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "MATCAP_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "MATCAP_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" "MATCAP_ON" "BUMPMAP_ON" "SPECULAR_ON" "LIGHTMAPCOLOR_ON" }
""
}
}
}
 UsePass "Hidden/miHoYo/DLC/Common/Meta/META"
 UsePass "Hidden/miHoYo/DLC/Common/Shared/PREDEPTH"
}
}