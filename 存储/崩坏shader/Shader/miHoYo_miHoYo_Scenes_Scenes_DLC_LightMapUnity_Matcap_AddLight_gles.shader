//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "miHoYo/miHoYo_Scenes/Scenes_DLC/LightMapUnity_Matcap_AddLight" {
Properties {
[MHYHeaderBox(OPTIONS)] [Enum(UnityEngine.Rendering.CullMode)] _CullMode ("Cull Mode", Float) = 2
[Toggle(_ALPHATEST_ON)] _EnableAlphaCutoff ("Enable Alpha Cutoff", Float) = 0
[MHYKeywordFilter(_ALPHATEST_ON On)] _AlphaCutoff ("Alpha Cutoff", Range(0, 1)) = 0.5
[MHYHeaderBox(MAPS)] [MHYSingleLineTextureNoScaleOffset(_Color)] _MainTex ("Albedo", 2D) = "white" { }
_Color ("Color", Color) = (1,1,1,1)
[MHYTextureScaleOffset] _MainMaps_ST ("Main Maps ST", Vector) = (1,1,0,0)
[MHYSingleLineTextureNoScaleOffset] _PropertyLightmapTex ("LightMap", 2D) = "gray" { }
[MHYTextureScaleOffset] _PropertyLightmapTexTS ("PropertyLightmapTexTS", Vector) = (0,0,0,0)
_ShadowColor ("Shadow Color", Color) = (0.5,0.5,0.5,1)
_ShadowIntegration ("Shadow Integration", Range(0, 1)) = 0.2
[MHYHeaderBox(LIGHTING)] _BloomIntensity ("Bloom Intensity", Range(0, 50)) = 1
_LightMapIntensity ("Light Map Intensity", Range(0, 5)) = 1.5
_FogTune ("Fog Tune", Range(0, 1)) = 1
_LightingColor ("Lighting Color", Color) = (0.2,0.2,0.2,1)
[MHYHeaderBox(MATCAP)] _MatcapMaskMap ("MatcapMask Map", 2D) = "white" { }
_BumpMap ("Normal Map", 2D) = "bump" { }
_MatCap ("MatCap (RGB)", 2D) = "white" { }
_MetalRef ("MetalRef", Range(0, 1)) = 0
[MHYHeaderBox(MATCAP SPECULAR)] [Toggle(_SEPARATE_SPECULAR_ON)] _EnableMatcapSpecular ("Enable Sperate Specular", Float) = 0
_SpecularMap ("Specular MatCap", 2D) = "black" { }
_SpecularIntensity ("Specular Intensity", Range(0, 1)) = 0
_LightmapThreshold ("Lightmap Threshold", Range(0, 1)) = 0.5
_IntensityInLightmap ("Intensity In Lightmap", Range(0, 1)) = 0.1
[MHYHeaderBox(LIGHTMAP)] [Toggle(_LIGHTMAPCOLOR_ON)] _EnableLightmapColor ("Enable LightmapColor Change", Float) = 0
_LightmapColorScale ("LightmapColorScale", Range(0, 4)) = 1.85
_LightmapColorIns ("LightmapColorIns", Range(0, 2)) = 0.9
_LightmapColorChange ("LightmapColorChange (RGB)", 2D) = "white" { }
_LightmapColorLerp ("LightmapColorLerp", Range(0, 1)) = 1
[MHYHeaderBox(ADDLIGHT)] _AdditiveLightPower ("Additive Light Power", Range(0.1, 5)) = 1
_AdditiveLightIntensity ("Additive Light Intensity", Range(0, 1)) = 1
_Transparent ("_Trans", Range(0, 1)) = 1
}
SubShader {
 LOD 600
 Tags { "DrawDepth" = "FrontFace" "PerformanceChecks" = "False" "QUEUE" = "Geometry" "RenderType" = "Opaque" }
 Pass {
  Name "FORWARDONLY"
  LOD 600
  Tags { "DrawDepth" = "FrontFace" "LIGHTMODE" = "FORWARDBASE" "PerformanceChecks" = "False" "QUEUE" = "Geometry" "RenderType" = "Opaque" }
  Cull Off
  GpuProgramID 19667
Program "vp" {
SubProgram "gles hw_tier00 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_4 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.x;
  tmpvar_21.y = worldBinormal_2.x;
  tmpvar_21.z = worldNormal_4.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.y;
  tmpvar_22.y = worldBinormal_2.y;
  tmpvar_22.z = worldNormal_4.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_3.z;
  tmpvar_23.y = worldBinormal_2.z;
  tmpvar_23.z = worldNormal_4.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase.xyz + (h_39 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_41 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  tmpvar_31 = tmpvar_33;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_21;
  tmpvar_21 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_21.w;
  lowp vec4 color_22;
  color_22 = tmpvar_21;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_22.xyz);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_24;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_25;
    mediump float tmpvar_26;
    tmpvar_26 = dot (tmpvar_24, vec3(0.299, 0.587, 0.114));
    gray_25 = tmpvar_26;
    highp vec2 tmpvar_27;
    tmpvar_27.y = 0.5;
    tmpvar_27.x = (gray_25 * _LightmapColorScale);
    lowp vec4 tmpvar_28;
    tmpvar_28 = texture2D (_LightmapColorChange, tmpvar_27);
    fc_9 = mix (((tmpvar_28 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_24, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_29 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_35;
  highp mat3 tmpvar_36;
  tmpvar_36[0] = unity_MatrixV[0].xyz;
  tmpvar_36[1] = unity_MatrixV[1].xyz;
  tmpvar_36[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_36 * worldNorm_5);
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_37 - (2.0 * (
    dot (worldNorm_5, tmpvar_37)
   * worldNorm_5)));
  R_4 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = ((tmpvar_39.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MatCap, tmpvar_40);
  mc_3 = tmpvar_41;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_42;
    highp vec2 P_43;
    P_43 = ((tmpvar_40 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_42 = texture2D (_SpecularMap, P_43);
    mediump float tmpvar_44;
    tmpvar_44 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_42 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_44 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_29 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_45;
  mediump vec3 srcColor_46;
  srcColor_46 = colorBlendLightMap_8;
  tmpvar_45 = (xlv_COLOR1.xyz + (srcColor_46 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_45;
  highp vec4 tmpvar_47;
  tmpvar_47.xyz = colorBlendLightMap_8;
  tmpvar_47.w = _BloomIntensity;
  tmpvar_1 = tmpvar_47;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_4 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.x;
  tmpvar_21.y = worldBinormal_2.x;
  tmpvar_21.z = worldNormal_4.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.y;
  tmpvar_22.y = worldBinormal_2.y;
  tmpvar_22.z = worldNormal_4.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_3.z;
  tmpvar_23.y = worldBinormal_2.z;
  tmpvar_23.z = worldNormal_4.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase.xyz + (h_39 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_41 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  tmpvar_31 = tmpvar_33;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_21;
  tmpvar_21 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_21.w;
  lowp vec4 color_22;
  color_22 = tmpvar_21;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_22.xyz);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_24;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_25;
    mediump float tmpvar_26;
    tmpvar_26 = dot (tmpvar_24, vec3(0.299, 0.587, 0.114));
    gray_25 = tmpvar_26;
    highp vec2 tmpvar_27;
    tmpvar_27.y = 0.5;
    tmpvar_27.x = (gray_25 * _LightmapColorScale);
    lowp vec4 tmpvar_28;
    tmpvar_28 = texture2D (_LightmapColorChange, tmpvar_27);
    fc_9 = mix (((tmpvar_28 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_24, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_29 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_35;
  highp mat3 tmpvar_36;
  tmpvar_36[0] = unity_MatrixV[0].xyz;
  tmpvar_36[1] = unity_MatrixV[1].xyz;
  tmpvar_36[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_36 * worldNorm_5);
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_37 - (2.0 * (
    dot (worldNorm_5, tmpvar_37)
   * worldNorm_5)));
  R_4 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = ((tmpvar_39.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MatCap, tmpvar_40);
  mc_3 = tmpvar_41;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_42;
    highp vec2 P_43;
    P_43 = ((tmpvar_40 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_42 = texture2D (_SpecularMap, P_43);
    mediump float tmpvar_44;
    tmpvar_44 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_42 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_44 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_29 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_45;
  mediump vec3 srcColor_46;
  srcColor_46 = colorBlendLightMap_8;
  tmpvar_45 = (xlv_COLOR1.xyz + (srcColor_46 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_45;
  highp vec4 tmpvar_47;
  tmpvar_47.xyz = colorBlendLightMap_8;
  tmpvar_47.w = _BloomIntensity;
  tmpvar_1 = tmpvar_47;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_4 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.x;
  tmpvar_21.y = worldBinormal_2.x;
  tmpvar_21.z = worldNormal_4.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.y;
  tmpvar_22.y = worldBinormal_2.y;
  tmpvar_22.z = worldNormal_4.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_3.z;
  tmpvar_23.y = worldBinormal_2.z;
  tmpvar_23.z = worldNormal_4.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase.xyz + (h_39 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_41 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  tmpvar_31 = tmpvar_33;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_21;
  tmpvar_21 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_21.w;
  lowp vec4 color_22;
  color_22 = tmpvar_21;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_22.xyz);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_24;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_25;
    mediump float tmpvar_26;
    tmpvar_26 = dot (tmpvar_24, vec3(0.299, 0.587, 0.114));
    gray_25 = tmpvar_26;
    highp vec2 tmpvar_27;
    tmpvar_27.y = 0.5;
    tmpvar_27.x = (gray_25 * _LightmapColorScale);
    lowp vec4 tmpvar_28;
    tmpvar_28 = texture2D (_LightmapColorChange, tmpvar_27);
    fc_9 = mix (((tmpvar_28 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_24, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_29 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_35;
  highp mat3 tmpvar_36;
  tmpvar_36[0] = unity_MatrixV[0].xyz;
  tmpvar_36[1] = unity_MatrixV[1].xyz;
  tmpvar_36[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_36 * worldNorm_5);
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_37 - (2.0 * (
    dot (worldNorm_5, tmpvar_37)
   * worldNorm_5)));
  R_4 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = ((tmpvar_39.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MatCap, tmpvar_40);
  mc_3 = tmpvar_41;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_42;
    highp vec2 P_43;
    P_43 = ((tmpvar_40 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_42 = texture2D (_SpecularMap, P_43);
    mediump float tmpvar_44;
    tmpvar_44 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_42 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_44 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_29 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_45;
  mediump vec3 srcColor_46;
  srcColor_46 = colorBlendLightMap_8;
  tmpvar_45 = (xlv_COLOR1.xyz + (srcColor_46 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_45;
  highp vec4 tmpvar_47;
  tmpvar_47.xyz = colorBlendLightMap_8;
  tmpvar_47.w = _BloomIntensity;
  tmpvar_1 = tmpvar_47;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_3 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.x;
  tmpvar_21.y = worldBinormal_1.x;
  tmpvar_21.z = worldNormal_3.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.y;
  tmpvar_22.y = worldBinormal_1.y;
  tmpvar_22.z = worldNormal_3.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_2.z;
  tmpvar_23.y = worldBinormal_1.z;
  tmpvar_23.z = worldNormal_3.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase2.xyz + (h_39 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_41 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams2.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams2.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase2.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor2.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  highp vec4 tmpvar_67;
  mediump float fogFactor_68;
  mediump vec3 fogColor_69;
  mediump vec3 heightFogColor_70;
  highp float HeightFogFactor_71;
  mediump vec3 atomesphereFogColor_72;
  mediump float h_73;
  highp float linearFogDensity_74;
  mediump float len_75;
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((len_75 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_74 = (tmpvar_77 * (2.0 - tmpvar_77));
  if ((len_75 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_74 = (linearFogDensity_74 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_78;
  tmpvar_78 = min (pow (linearFogDensity_74, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_74 = tmpvar_78;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_79 = tmpvar_80;
  h_73 = (tmpvar_79 * (2.0 - tmpvar_79));
  highp vec3 tmpvar_81;
  tmpvar_81 = (_HeigtFogColBase3.xyz + (h_73 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_72 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (atomesphereFogColor_72, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_75 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_72 = tmpvar_82;
  mediump float tmpvar_83;
  mediump float r_84;
  mediump float f_85;
  mediump float u_86;
  mediump float l_87;
  mediump float fogInt_88;
  fogInt_88 = 1.0;
  highp float tmpvar_89;
  tmpvar_89 = (_HeigtFogParams3.x * tmpvar_32.y);
  highp float tmpvar_90;
  tmpvar_90 = abs(tmpvar_89);
  if ((tmpvar_90 > 0.01)) {
    highp float tmpvar_91;
    tmpvar_91 = exp(-(tmpvar_89));
    fogInt_88 = ((1.0 - tmpvar_91) / tmpvar_89);
  };
  highp float tmpvar_92;
  tmpvar_92 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_87 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (l_87 * _HeigtFogParams3.y);
  u_86 = tmpvar_93;
  fogInt_88 = (fogInt_88 * u_86);
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = clamp (((l_87 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_94 = tmpvar_95;
  r_84 = (tmpvar_94 * (2.0 - tmpvar_94));
  r_84 = ((r_84 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_85 = ((1.0 - clamp (
    exp2(-(fogInt_88))
  , 0.0, 1.0)) * r_84);
  highp float tmpvar_96;
  tmpvar_96 = min (f_85, _HeigtFogColBase3.w);
  tmpvar_83 = tmpvar_96;
  HeightFogFactor_71 = tmpvar_83;
  highp vec3 tmpvar_97;
  tmpvar_97 = _Mihoyo_FogColor3.xyz;
  heightFogColor_70 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = ((heightFogColor_70 * HeightFogFactor_71) + ((atomesphereFogColor_72 * tmpvar_78) * (1.0 - HeightFogFactor_71)));
  fogColor_69 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((1.0 - tmpvar_78) * (1.0 - HeightFogFactor_71));
  fogFactor_68 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.xyz = fogColor_69;
  tmpvar_100.w = fogFactor_68;
  tmpvar_67 = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = mix (tmpvar_33, tmpvar_67, vec4(_LerpFactor));
  tmpvar_31 = tmpvar_101;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_21;
  tmpvar_21 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_21.w;
  lowp vec4 color_22;
  color_22 = tmpvar_21;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_22.xyz);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_24;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_25;
    mediump float tmpvar_26;
    tmpvar_26 = dot (tmpvar_24, vec3(0.299, 0.587, 0.114));
    gray_25 = tmpvar_26;
    highp vec2 tmpvar_27;
    tmpvar_27.y = 0.5;
    tmpvar_27.x = (gray_25 * _LightmapColorScale);
    lowp vec4 tmpvar_28;
    tmpvar_28 = texture2D (_LightmapColorChange, tmpvar_27);
    fc_9 = mix (((tmpvar_28 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_24, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_29 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_35;
  highp mat3 tmpvar_36;
  tmpvar_36[0] = unity_MatrixV[0].xyz;
  tmpvar_36[1] = unity_MatrixV[1].xyz;
  tmpvar_36[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_36 * worldNorm_5);
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_37 - (2.0 * (
    dot (worldNorm_5, tmpvar_37)
   * worldNorm_5)));
  R_4 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = ((tmpvar_39.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MatCap, tmpvar_40);
  mc_3 = tmpvar_41;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_42;
    highp vec2 P_43;
    P_43 = ((tmpvar_40 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_42 = texture2D (_SpecularMap, P_43);
    mediump float tmpvar_44;
    tmpvar_44 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_42 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_44 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_29 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_45;
  mediump vec3 srcColor_46;
  srcColor_46 = colorBlendLightMap_8;
  tmpvar_45 = (xlv_COLOR1.xyz + (srcColor_46 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_45;
  highp vec4 tmpvar_47;
  tmpvar_47.xyz = colorBlendLightMap_8;
  tmpvar_47.w = _BloomIntensity;
  tmpvar_1 = tmpvar_47;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_3 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.x;
  tmpvar_21.y = worldBinormal_1.x;
  tmpvar_21.z = worldNormal_3.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.y;
  tmpvar_22.y = worldBinormal_1.y;
  tmpvar_22.z = worldNormal_3.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_2.z;
  tmpvar_23.y = worldBinormal_1.z;
  tmpvar_23.z = worldNormal_3.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase2.xyz + (h_39 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_41 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams2.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams2.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase2.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor2.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  highp vec4 tmpvar_67;
  mediump float fogFactor_68;
  mediump vec3 fogColor_69;
  mediump vec3 heightFogColor_70;
  highp float HeightFogFactor_71;
  mediump vec3 atomesphereFogColor_72;
  mediump float h_73;
  highp float linearFogDensity_74;
  mediump float len_75;
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((len_75 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_74 = (tmpvar_77 * (2.0 - tmpvar_77));
  if ((len_75 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_74 = (linearFogDensity_74 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_78;
  tmpvar_78 = min (pow (linearFogDensity_74, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_74 = tmpvar_78;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_79 = tmpvar_80;
  h_73 = (tmpvar_79 * (2.0 - tmpvar_79));
  highp vec3 tmpvar_81;
  tmpvar_81 = (_HeigtFogColBase3.xyz + (h_73 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_72 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (atomesphereFogColor_72, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_75 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_72 = tmpvar_82;
  mediump float tmpvar_83;
  mediump float r_84;
  mediump float f_85;
  mediump float u_86;
  mediump float l_87;
  mediump float fogInt_88;
  fogInt_88 = 1.0;
  highp float tmpvar_89;
  tmpvar_89 = (_HeigtFogParams3.x * tmpvar_32.y);
  highp float tmpvar_90;
  tmpvar_90 = abs(tmpvar_89);
  if ((tmpvar_90 > 0.01)) {
    highp float tmpvar_91;
    tmpvar_91 = exp(-(tmpvar_89));
    fogInt_88 = ((1.0 - tmpvar_91) / tmpvar_89);
  };
  highp float tmpvar_92;
  tmpvar_92 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_87 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (l_87 * _HeigtFogParams3.y);
  u_86 = tmpvar_93;
  fogInt_88 = (fogInt_88 * u_86);
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = clamp (((l_87 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_94 = tmpvar_95;
  r_84 = (tmpvar_94 * (2.0 - tmpvar_94));
  r_84 = ((r_84 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_85 = ((1.0 - clamp (
    exp2(-(fogInt_88))
  , 0.0, 1.0)) * r_84);
  highp float tmpvar_96;
  tmpvar_96 = min (f_85, _HeigtFogColBase3.w);
  tmpvar_83 = tmpvar_96;
  HeightFogFactor_71 = tmpvar_83;
  highp vec3 tmpvar_97;
  tmpvar_97 = _Mihoyo_FogColor3.xyz;
  heightFogColor_70 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = ((heightFogColor_70 * HeightFogFactor_71) + ((atomesphereFogColor_72 * tmpvar_78) * (1.0 - HeightFogFactor_71)));
  fogColor_69 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((1.0 - tmpvar_78) * (1.0 - HeightFogFactor_71));
  fogFactor_68 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.xyz = fogColor_69;
  tmpvar_100.w = fogFactor_68;
  tmpvar_67 = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = mix (tmpvar_33, tmpvar_67, vec4(_LerpFactor));
  tmpvar_31 = tmpvar_101;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_21;
  tmpvar_21 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_21.w;
  lowp vec4 color_22;
  color_22 = tmpvar_21;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_22.xyz);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_24;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_25;
    mediump float tmpvar_26;
    tmpvar_26 = dot (tmpvar_24, vec3(0.299, 0.587, 0.114));
    gray_25 = tmpvar_26;
    highp vec2 tmpvar_27;
    tmpvar_27.y = 0.5;
    tmpvar_27.x = (gray_25 * _LightmapColorScale);
    lowp vec4 tmpvar_28;
    tmpvar_28 = texture2D (_LightmapColorChange, tmpvar_27);
    fc_9 = mix (((tmpvar_28 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_24, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_29 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_35;
  highp mat3 tmpvar_36;
  tmpvar_36[0] = unity_MatrixV[0].xyz;
  tmpvar_36[1] = unity_MatrixV[1].xyz;
  tmpvar_36[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_36 * worldNorm_5);
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_37 - (2.0 * (
    dot (worldNorm_5, tmpvar_37)
   * worldNorm_5)));
  R_4 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = ((tmpvar_39.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MatCap, tmpvar_40);
  mc_3 = tmpvar_41;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_42;
    highp vec2 P_43;
    P_43 = ((tmpvar_40 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_42 = texture2D (_SpecularMap, P_43);
    mediump float tmpvar_44;
    tmpvar_44 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_42 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_44 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_29 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_45;
  mediump vec3 srcColor_46;
  srcColor_46 = colorBlendLightMap_8;
  tmpvar_45 = (xlv_COLOR1.xyz + (srcColor_46 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_45;
  highp vec4 tmpvar_47;
  tmpvar_47.xyz = colorBlendLightMap_8;
  tmpvar_47.w = _BloomIntensity;
  tmpvar_1 = tmpvar_47;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_3 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.x;
  tmpvar_21.y = worldBinormal_1.x;
  tmpvar_21.z = worldNormal_3.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.y;
  tmpvar_22.y = worldBinormal_1.y;
  tmpvar_22.z = worldNormal_3.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_2.z;
  tmpvar_23.y = worldBinormal_1.z;
  tmpvar_23.z = worldNormal_3.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase2.xyz + (h_39 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_41 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams2.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams2.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase2.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor2.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  highp vec4 tmpvar_67;
  mediump float fogFactor_68;
  mediump vec3 fogColor_69;
  mediump vec3 heightFogColor_70;
  highp float HeightFogFactor_71;
  mediump vec3 atomesphereFogColor_72;
  mediump float h_73;
  highp float linearFogDensity_74;
  mediump float len_75;
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((len_75 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_74 = (tmpvar_77 * (2.0 - tmpvar_77));
  if ((len_75 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_74 = (linearFogDensity_74 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_78;
  tmpvar_78 = min (pow (linearFogDensity_74, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_74 = tmpvar_78;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_79 = tmpvar_80;
  h_73 = (tmpvar_79 * (2.0 - tmpvar_79));
  highp vec3 tmpvar_81;
  tmpvar_81 = (_HeigtFogColBase3.xyz + (h_73 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_72 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (atomesphereFogColor_72, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_75 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_72 = tmpvar_82;
  mediump float tmpvar_83;
  mediump float r_84;
  mediump float f_85;
  mediump float u_86;
  mediump float l_87;
  mediump float fogInt_88;
  fogInt_88 = 1.0;
  highp float tmpvar_89;
  tmpvar_89 = (_HeigtFogParams3.x * tmpvar_32.y);
  highp float tmpvar_90;
  tmpvar_90 = abs(tmpvar_89);
  if ((tmpvar_90 > 0.01)) {
    highp float tmpvar_91;
    tmpvar_91 = exp(-(tmpvar_89));
    fogInt_88 = ((1.0 - tmpvar_91) / tmpvar_89);
  };
  highp float tmpvar_92;
  tmpvar_92 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_87 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (l_87 * _HeigtFogParams3.y);
  u_86 = tmpvar_93;
  fogInt_88 = (fogInt_88 * u_86);
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = clamp (((l_87 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_94 = tmpvar_95;
  r_84 = (tmpvar_94 * (2.0 - tmpvar_94));
  r_84 = ((r_84 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_85 = ((1.0 - clamp (
    exp2(-(fogInt_88))
  , 0.0, 1.0)) * r_84);
  highp float tmpvar_96;
  tmpvar_96 = min (f_85, _HeigtFogColBase3.w);
  tmpvar_83 = tmpvar_96;
  HeightFogFactor_71 = tmpvar_83;
  highp vec3 tmpvar_97;
  tmpvar_97 = _Mihoyo_FogColor3.xyz;
  heightFogColor_70 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = ((heightFogColor_70 * HeightFogFactor_71) + ((atomesphereFogColor_72 * tmpvar_78) * (1.0 - HeightFogFactor_71)));
  fogColor_69 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((1.0 - tmpvar_78) * (1.0 - HeightFogFactor_71));
  fogFactor_68 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.xyz = fogColor_69;
  tmpvar_100.w = fogFactor_68;
  tmpvar_67 = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = mix (tmpvar_33, tmpvar_67, vec4(_LerpFactor));
  tmpvar_31 = tmpvar_101;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_21;
  tmpvar_21 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_21.w;
  lowp vec4 color_22;
  color_22 = tmpvar_21;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_22.xyz);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_24;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_25;
    mediump float tmpvar_26;
    tmpvar_26 = dot (tmpvar_24, vec3(0.299, 0.587, 0.114));
    gray_25 = tmpvar_26;
    highp vec2 tmpvar_27;
    tmpvar_27.y = 0.5;
    tmpvar_27.x = (gray_25 * _LightmapColorScale);
    lowp vec4 tmpvar_28;
    tmpvar_28 = texture2D (_LightmapColorChange, tmpvar_27);
    fc_9 = mix (((tmpvar_28 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_24, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_29 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_35;
  highp mat3 tmpvar_36;
  tmpvar_36[0] = unity_MatrixV[0].xyz;
  tmpvar_36[1] = unity_MatrixV[1].xyz;
  tmpvar_36[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_36 * worldNorm_5);
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_37 - (2.0 * (
    dot (worldNorm_5, tmpvar_37)
   * worldNorm_5)));
  R_4 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = ((tmpvar_39.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MatCap, tmpvar_40);
  mc_3 = tmpvar_41;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_42;
    highp vec2 P_43;
    P_43 = ((tmpvar_40 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_42 = texture2D (_SpecularMap, P_43);
    mediump float tmpvar_44;
    tmpvar_44 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_42 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_44 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_29 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_45;
  mediump vec3 srcColor_46;
  srcColor_46 = colorBlendLightMap_8;
  tmpvar_45 = (xlv_COLOR1.xyz + (srcColor_46 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_45;
  highp vec4 tmpvar_47;
  tmpvar_47.xyz = colorBlendLightMap_8;
  tmpvar_47.w = _BloomIntensity;
  tmpvar_1 = tmpvar_47;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_4 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.x;
  tmpvar_21.y = worldBinormal_2.x;
  tmpvar_21.z = worldNormal_4.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.y;
  tmpvar_22.y = worldBinormal_2.y;
  tmpvar_22.z = worldNormal_4.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_3.z;
  tmpvar_23.y = worldBinormal_2.z;
  tmpvar_23.z = worldNormal_4.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase.xyz + (h_39 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_41 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  tmpvar_31 = tmpvar_33;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_22;
  mediump vec3 tmpvar_23;
  tmpvar_23 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_23;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_24;
    mediump float tmpvar_25;
    tmpvar_25 = dot (tmpvar_23, vec3(0.299, 0.587, 0.114));
    gray_24 = tmpvar_25;
    highp vec2 tmpvar_26;
    tmpvar_26.y = 0.5;
    tmpvar_26.x = (gray_24 * _LightmapColorScale);
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_LightmapColorChange, tmpvar_26);
    fc_9 = mix (((tmpvar_27 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_23, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_28 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_30;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_34;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = unity_MatrixV[0].xyz;
  tmpvar_35[1] = unity_MatrixV[1].xyz;
  tmpvar_35[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_35 * worldNorm_5);
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_36 - (2.0 * (
    dot (worldNorm_5, tmpvar_36)
   * worldNorm_5)));
  R_4 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = ((tmpvar_38.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_MatCap, tmpvar_39);
  mc_3 = tmpvar_40;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_41;
    highp vec2 P_42;
    P_42 = ((tmpvar_39 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_41 = texture2D (_SpecularMap, P_42);
    mediump float tmpvar_43;
    tmpvar_43 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_41 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_43 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_28 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_44;
  mediump vec3 srcColor_45;
  srcColor_45 = colorBlendLightMap_8;
  tmpvar_44 = (xlv_COLOR1.xyz + (srcColor_45 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_44;
  highp vec4 tmpvar_46;
  tmpvar_46.xyz = colorBlendLightMap_8;
  tmpvar_46.w = _BloomIntensity;
  tmpvar_1 = tmpvar_46;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_4 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.x;
  tmpvar_21.y = worldBinormal_2.x;
  tmpvar_21.z = worldNormal_4.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.y;
  tmpvar_22.y = worldBinormal_2.y;
  tmpvar_22.z = worldNormal_4.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_3.z;
  tmpvar_23.y = worldBinormal_2.z;
  tmpvar_23.z = worldNormal_4.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase.xyz + (h_39 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_41 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  tmpvar_31 = tmpvar_33;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_22;
  mediump vec3 tmpvar_23;
  tmpvar_23 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_23;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_24;
    mediump float tmpvar_25;
    tmpvar_25 = dot (tmpvar_23, vec3(0.299, 0.587, 0.114));
    gray_24 = tmpvar_25;
    highp vec2 tmpvar_26;
    tmpvar_26.y = 0.5;
    tmpvar_26.x = (gray_24 * _LightmapColorScale);
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_LightmapColorChange, tmpvar_26);
    fc_9 = mix (((tmpvar_27 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_23, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_28 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_30;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_34;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = unity_MatrixV[0].xyz;
  tmpvar_35[1] = unity_MatrixV[1].xyz;
  tmpvar_35[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_35 * worldNorm_5);
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_36 - (2.0 * (
    dot (worldNorm_5, tmpvar_36)
   * worldNorm_5)));
  R_4 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = ((tmpvar_38.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_MatCap, tmpvar_39);
  mc_3 = tmpvar_40;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_41;
    highp vec2 P_42;
    P_42 = ((tmpvar_39 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_41 = texture2D (_SpecularMap, P_42);
    mediump float tmpvar_43;
    tmpvar_43 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_41 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_43 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_28 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_44;
  mediump vec3 srcColor_45;
  srcColor_45 = colorBlendLightMap_8;
  tmpvar_44 = (xlv_COLOR1.xyz + (srcColor_45 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_44;
  highp vec4 tmpvar_46;
  tmpvar_46.xyz = colorBlendLightMap_8;
  tmpvar_46.w = _BloomIntensity;
  tmpvar_1 = tmpvar_46;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_4 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.x;
  tmpvar_21.y = worldBinormal_2.x;
  tmpvar_21.z = worldNormal_4.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.y;
  tmpvar_22.y = worldBinormal_2.y;
  tmpvar_22.z = worldNormal_4.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_3.z;
  tmpvar_23.y = worldBinormal_2.z;
  tmpvar_23.z = worldNormal_4.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase.xyz + (h_39 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_41 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  tmpvar_31 = tmpvar_33;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_22;
  mediump vec3 tmpvar_23;
  tmpvar_23 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_23;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_24;
    mediump float tmpvar_25;
    tmpvar_25 = dot (tmpvar_23, vec3(0.299, 0.587, 0.114));
    gray_24 = tmpvar_25;
    highp vec2 tmpvar_26;
    tmpvar_26.y = 0.5;
    tmpvar_26.x = (gray_24 * _LightmapColorScale);
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_LightmapColorChange, tmpvar_26);
    fc_9 = mix (((tmpvar_27 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_23, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_28 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_30;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_34;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = unity_MatrixV[0].xyz;
  tmpvar_35[1] = unity_MatrixV[1].xyz;
  tmpvar_35[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_35 * worldNorm_5);
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_36 - (2.0 * (
    dot (worldNorm_5, tmpvar_36)
   * worldNorm_5)));
  R_4 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = ((tmpvar_38.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_MatCap, tmpvar_39);
  mc_3 = tmpvar_40;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_41;
    highp vec2 P_42;
    P_42 = ((tmpvar_39 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_41 = texture2D (_SpecularMap, P_42);
    mediump float tmpvar_43;
    tmpvar_43 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_41 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_43 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_28 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_44;
  mediump vec3 srcColor_45;
  srcColor_45 = colorBlendLightMap_8;
  tmpvar_44 = (xlv_COLOR1.xyz + (srcColor_45 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_44;
  highp vec4 tmpvar_46;
  tmpvar_46.xyz = colorBlendLightMap_8;
  tmpvar_46.w = _BloomIntensity;
  tmpvar_1 = tmpvar_46;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_3 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.x;
  tmpvar_21.y = worldBinormal_1.x;
  tmpvar_21.z = worldNormal_3.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.y;
  tmpvar_22.y = worldBinormal_1.y;
  tmpvar_22.z = worldNormal_3.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_2.z;
  tmpvar_23.y = worldBinormal_1.z;
  tmpvar_23.z = worldNormal_3.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase2.xyz + (h_39 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_41 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams2.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams2.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase2.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor2.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  highp vec4 tmpvar_67;
  mediump float fogFactor_68;
  mediump vec3 fogColor_69;
  mediump vec3 heightFogColor_70;
  highp float HeightFogFactor_71;
  mediump vec3 atomesphereFogColor_72;
  mediump float h_73;
  highp float linearFogDensity_74;
  mediump float len_75;
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((len_75 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_74 = (tmpvar_77 * (2.0 - tmpvar_77));
  if ((len_75 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_74 = (linearFogDensity_74 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_78;
  tmpvar_78 = min (pow (linearFogDensity_74, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_74 = tmpvar_78;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_79 = tmpvar_80;
  h_73 = (tmpvar_79 * (2.0 - tmpvar_79));
  highp vec3 tmpvar_81;
  tmpvar_81 = (_HeigtFogColBase3.xyz + (h_73 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_72 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (atomesphereFogColor_72, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_75 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_72 = tmpvar_82;
  mediump float tmpvar_83;
  mediump float r_84;
  mediump float f_85;
  mediump float u_86;
  mediump float l_87;
  mediump float fogInt_88;
  fogInt_88 = 1.0;
  highp float tmpvar_89;
  tmpvar_89 = (_HeigtFogParams3.x * tmpvar_32.y);
  highp float tmpvar_90;
  tmpvar_90 = abs(tmpvar_89);
  if ((tmpvar_90 > 0.01)) {
    highp float tmpvar_91;
    tmpvar_91 = exp(-(tmpvar_89));
    fogInt_88 = ((1.0 - tmpvar_91) / tmpvar_89);
  };
  highp float tmpvar_92;
  tmpvar_92 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_87 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (l_87 * _HeigtFogParams3.y);
  u_86 = tmpvar_93;
  fogInt_88 = (fogInt_88 * u_86);
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = clamp (((l_87 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_94 = tmpvar_95;
  r_84 = (tmpvar_94 * (2.0 - tmpvar_94));
  r_84 = ((r_84 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_85 = ((1.0 - clamp (
    exp2(-(fogInt_88))
  , 0.0, 1.0)) * r_84);
  highp float tmpvar_96;
  tmpvar_96 = min (f_85, _HeigtFogColBase3.w);
  tmpvar_83 = tmpvar_96;
  HeightFogFactor_71 = tmpvar_83;
  highp vec3 tmpvar_97;
  tmpvar_97 = _Mihoyo_FogColor3.xyz;
  heightFogColor_70 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = ((heightFogColor_70 * HeightFogFactor_71) + ((atomesphereFogColor_72 * tmpvar_78) * (1.0 - HeightFogFactor_71)));
  fogColor_69 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((1.0 - tmpvar_78) * (1.0 - HeightFogFactor_71));
  fogFactor_68 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.xyz = fogColor_69;
  tmpvar_100.w = fogFactor_68;
  tmpvar_67 = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = mix (tmpvar_33, tmpvar_67, vec4(_LerpFactor));
  tmpvar_31 = tmpvar_101;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_22;
  mediump vec3 tmpvar_23;
  tmpvar_23 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_23;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_24;
    mediump float tmpvar_25;
    tmpvar_25 = dot (tmpvar_23, vec3(0.299, 0.587, 0.114));
    gray_24 = tmpvar_25;
    highp vec2 tmpvar_26;
    tmpvar_26.y = 0.5;
    tmpvar_26.x = (gray_24 * _LightmapColorScale);
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_LightmapColorChange, tmpvar_26);
    fc_9 = mix (((tmpvar_27 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_23, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_28 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_30;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_34;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = unity_MatrixV[0].xyz;
  tmpvar_35[1] = unity_MatrixV[1].xyz;
  tmpvar_35[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_35 * worldNorm_5);
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_36 - (2.0 * (
    dot (worldNorm_5, tmpvar_36)
   * worldNorm_5)));
  R_4 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = ((tmpvar_38.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_MatCap, tmpvar_39);
  mc_3 = tmpvar_40;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_41;
    highp vec2 P_42;
    P_42 = ((tmpvar_39 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_41 = texture2D (_SpecularMap, P_42);
    mediump float tmpvar_43;
    tmpvar_43 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_41 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_43 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_28 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_44;
  mediump vec3 srcColor_45;
  srcColor_45 = colorBlendLightMap_8;
  tmpvar_44 = (xlv_COLOR1.xyz + (srcColor_45 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_44;
  highp vec4 tmpvar_46;
  tmpvar_46.xyz = colorBlendLightMap_8;
  tmpvar_46.w = _BloomIntensity;
  tmpvar_1 = tmpvar_46;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_3 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.x;
  tmpvar_21.y = worldBinormal_1.x;
  tmpvar_21.z = worldNormal_3.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.y;
  tmpvar_22.y = worldBinormal_1.y;
  tmpvar_22.z = worldNormal_3.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_2.z;
  tmpvar_23.y = worldBinormal_1.z;
  tmpvar_23.z = worldNormal_3.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase2.xyz + (h_39 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_41 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams2.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams2.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase2.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor2.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  highp vec4 tmpvar_67;
  mediump float fogFactor_68;
  mediump vec3 fogColor_69;
  mediump vec3 heightFogColor_70;
  highp float HeightFogFactor_71;
  mediump vec3 atomesphereFogColor_72;
  mediump float h_73;
  highp float linearFogDensity_74;
  mediump float len_75;
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((len_75 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_74 = (tmpvar_77 * (2.0 - tmpvar_77));
  if ((len_75 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_74 = (linearFogDensity_74 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_78;
  tmpvar_78 = min (pow (linearFogDensity_74, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_74 = tmpvar_78;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_79 = tmpvar_80;
  h_73 = (tmpvar_79 * (2.0 - tmpvar_79));
  highp vec3 tmpvar_81;
  tmpvar_81 = (_HeigtFogColBase3.xyz + (h_73 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_72 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (atomesphereFogColor_72, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_75 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_72 = tmpvar_82;
  mediump float tmpvar_83;
  mediump float r_84;
  mediump float f_85;
  mediump float u_86;
  mediump float l_87;
  mediump float fogInt_88;
  fogInt_88 = 1.0;
  highp float tmpvar_89;
  tmpvar_89 = (_HeigtFogParams3.x * tmpvar_32.y);
  highp float tmpvar_90;
  tmpvar_90 = abs(tmpvar_89);
  if ((tmpvar_90 > 0.01)) {
    highp float tmpvar_91;
    tmpvar_91 = exp(-(tmpvar_89));
    fogInt_88 = ((1.0 - tmpvar_91) / tmpvar_89);
  };
  highp float tmpvar_92;
  tmpvar_92 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_87 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (l_87 * _HeigtFogParams3.y);
  u_86 = tmpvar_93;
  fogInt_88 = (fogInt_88 * u_86);
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = clamp (((l_87 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_94 = tmpvar_95;
  r_84 = (tmpvar_94 * (2.0 - tmpvar_94));
  r_84 = ((r_84 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_85 = ((1.0 - clamp (
    exp2(-(fogInt_88))
  , 0.0, 1.0)) * r_84);
  highp float tmpvar_96;
  tmpvar_96 = min (f_85, _HeigtFogColBase3.w);
  tmpvar_83 = tmpvar_96;
  HeightFogFactor_71 = tmpvar_83;
  highp vec3 tmpvar_97;
  tmpvar_97 = _Mihoyo_FogColor3.xyz;
  heightFogColor_70 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = ((heightFogColor_70 * HeightFogFactor_71) + ((atomesphereFogColor_72 * tmpvar_78) * (1.0 - HeightFogFactor_71)));
  fogColor_69 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((1.0 - tmpvar_78) * (1.0 - HeightFogFactor_71));
  fogFactor_68 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.xyz = fogColor_69;
  tmpvar_100.w = fogFactor_68;
  tmpvar_67 = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = mix (tmpvar_33, tmpvar_67, vec4(_LerpFactor));
  tmpvar_31 = tmpvar_101;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_22;
  mediump vec3 tmpvar_23;
  tmpvar_23 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_23;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_24;
    mediump float tmpvar_25;
    tmpvar_25 = dot (tmpvar_23, vec3(0.299, 0.587, 0.114));
    gray_24 = tmpvar_25;
    highp vec2 tmpvar_26;
    tmpvar_26.y = 0.5;
    tmpvar_26.x = (gray_24 * _LightmapColorScale);
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_LightmapColorChange, tmpvar_26);
    fc_9 = mix (((tmpvar_27 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_23, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_28 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_30;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_34;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = unity_MatrixV[0].xyz;
  tmpvar_35[1] = unity_MatrixV[1].xyz;
  tmpvar_35[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_35 * worldNorm_5);
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_36 - (2.0 * (
    dot (worldNorm_5, tmpvar_36)
   * worldNorm_5)));
  R_4 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = ((tmpvar_38.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_MatCap, tmpvar_39);
  mc_3 = tmpvar_40;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_41;
    highp vec2 P_42;
    P_42 = ((tmpvar_39 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_41 = texture2D (_SpecularMap, P_42);
    mediump float tmpvar_43;
    tmpvar_43 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_41 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_43 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_28 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_44;
  mediump vec3 srcColor_45;
  srcColor_45 = colorBlendLightMap_8;
  tmpvar_44 = (xlv_COLOR1.xyz + (srcColor_45 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_44;
  highp vec4 tmpvar_46;
  tmpvar_46.xyz = colorBlendLightMap_8;
  tmpvar_46.w = _BloomIntensity;
  tmpvar_1 = tmpvar_46;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_3 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.x;
  tmpvar_21.y = worldBinormal_1.x;
  tmpvar_21.z = worldNormal_3.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.y;
  tmpvar_22.y = worldBinormal_1.y;
  tmpvar_22.z = worldNormal_3.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_2.z;
  tmpvar_23.y = worldBinormal_1.z;
  tmpvar_23.z = worldNormal_3.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase2.xyz + (h_39 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_41 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams2.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams2.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase2.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor2.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  highp vec4 tmpvar_67;
  mediump float fogFactor_68;
  mediump vec3 fogColor_69;
  mediump vec3 heightFogColor_70;
  highp float HeightFogFactor_71;
  mediump vec3 atomesphereFogColor_72;
  mediump float h_73;
  highp float linearFogDensity_74;
  mediump float len_75;
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((len_75 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_74 = (tmpvar_77 * (2.0 - tmpvar_77));
  if ((len_75 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_74 = (linearFogDensity_74 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_78;
  tmpvar_78 = min (pow (linearFogDensity_74, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_74 = tmpvar_78;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_79 = tmpvar_80;
  h_73 = (tmpvar_79 * (2.0 - tmpvar_79));
  highp vec3 tmpvar_81;
  tmpvar_81 = (_HeigtFogColBase3.xyz + (h_73 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_72 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (atomesphereFogColor_72, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_75 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_72 = tmpvar_82;
  mediump float tmpvar_83;
  mediump float r_84;
  mediump float f_85;
  mediump float u_86;
  mediump float l_87;
  mediump float fogInt_88;
  fogInt_88 = 1.0;
  highp float tmpvar_89;
  tmpvar_89 = (_HeigtFogParams3.x * tmpvar_32.y);
  highp float tmpvar_90;
  tmpvar_90 = abs(tmpvar_89);
  if ((tmpvar_90 > 0.01)) {
    highp float tmpvar_91;
    tmpvar_91 = exp(-(tmpvar_89));
    fogInt_88 = ((1.0 - tmpvar_91) / tmpvar_89);
  };
  highp float tmpvar_92;
  tmpvar_92 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_87 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (l_87 * _HeigtFogParams3.y);
  u_86 = tmpvar_93;
  fogInt_88 = (fogInt_88 * u_86);
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = clamp (((l_87 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_94 = tmpvar_95;
  r_84 = (tmpvar_94 * (2.0 - tmpvar_94));
  r_84 = ((r_84 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_85 = ((1.0 - clamp (
    exp2(-(fogInt_88))
  , 0.0, 1.0)) * r_84);
  highp float tmpvar_96;
  tmpvar_96 = min (f_85, _HeigtFogColBase3.w);
  tmpvar_83 = tmpvar_96;
  HeightFogFactor_71 = tmpvar_83;
  highp vec3 tmpvar_97;
  tmpvar_97 = _Mihoyo_FogColor3.xyz;
  heightFogColor_70 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = ((heightFogColor_70 * HeightFogFactor_71) + ((atomesphereFogColor_72 * tmpvar_78) * (1.0 - HeightFogFactor_71)));
  fogColor_69 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((1.0 - tmpvar_78) * (1.0 - HeightFogFactor_71));
  fogFactor_68 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.xyz = fogColor_69;
  tmpvar_100.w = fogFactor_68;
  tmpvar_67 = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = mix (tmpvar_33, tmpvar_67, vec4(_LerpFactor));
  tmpvar_31 = tmpvar_101;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_22;
  mediump vec3 tmpvar_23;
  tmpvar_23 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_23;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_24;
    mediump float tmpvar_25;
    tmpvar_25 = dot (tmpvar_23, vec3(0.299, 0.587, 0.114));
    gray_24 = tmpvar_25;
    highp vec2 tmpvar_26;
    tmpvar_26.y = 0.5;
    tmpvar_26.x = (gray_24 * _LightmapColorScale);
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_LightmapColorChange, tmpvar_26);
    fc_9 = mix (((tmpvar_27 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_23, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_28 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_30;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_34;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = unity_MatrixV[0].xyz;
  tmpvar_35[1] = unity_MatrixV[1].xyz;
  tmpvar_35[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_35 * worldNorm_5);
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_36 - (2.0 * (
    dot (worldNorm_5, tmpvar_36)
   * worldNorm_5)));
  R_4 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = ((tmpvar_38.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_MatCap, tmpvar_39);
  mc_3 = tmpvar_40;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_41;
    highp vec2 P_42;
    P_42 = ((tmpvar_39 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_41 = texture2D (_SpecularMap, P_42);
    mediump float tmpvar_43;
    tmpvar_43 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_41 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_43 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_28 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_44;
  mediump vec3 srcColor_45;
  srcColor_45 = colorBlendLightMap_8;
  tmpvar_44 = (xlv_COLOR1.xyz + (srcColor_45 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_44;
  highp vec4 tmpvar_46;
  tmpvar_46.xyz = colorBlendLightMap_8;
  tmpvar_46.w = _BloomIntensity;
  tmpvar_1 = tmpvar_46;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_4 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.x;
  tmpvar_21.y = worldBinormal_2.x;
  tmpvar_21.z = worldNormal_4.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.y;
  tmpvar_22.y = worldBinormal_2.y;
  tmpvar_22.z = worldNormal_4.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_3.z;
  tmpvar_23.y = worldBinormal_2.z;
  tmpvar_23.z = worldNormal_4.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase.xyz + (h_39 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_41 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  tmpvar_31 = tmpvar_33;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_21;
  vpos_21 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_21.y = ((fract(vpos_21.y) * 0.0625) + unity_LODFade.y);
  lowp float x_22;
  x_22 = (texture2D (_DitherMaskLOD2D, vpos_21).w - 0.5);
  if ((x_22 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_23.w;
  lowp vec4 color_24;
  color_24 = tmpvar_23;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_24.xyz);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_26;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_27;
    mediump float tmpvar_28;
    tmpvar_28 = dot (tmpvar_26, vec3(0.299, 0.587, 0.114));
    gray_27 = tmpvar_28;
    highp vec2 tmpvar_29;
    tmpvar_29.y = 0.5;
    tmpvar_29.x = (gray_27 * _LightmapColorScale);
    lowp vec4 tmpvar_30;
    tmpvar_30 = texture2D (_LightmapColorChange, tmpvar_29);
    fc_9 = mix (((tmpvar_30 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_26, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_31;
  tmpvar_31 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_31 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_33;
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_37;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_MatrixV[0].xyz;
  tmpvar_38[1] = unity_MatrixV[1].xyz;
  tmpvar_38[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_38 * worldNorm_5);
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_39 - (2.0 * (
    dot (worldNorm_5, tmpvar_39)
   * worldNorm_5)));
  R_4 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = ((tmpvar_41.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatCap, tmpvar_42);
  mc_3 = tmpvar_43;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_44;
    highp vec2 P_45;
    P_45 = ((tmpvar_42 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_44 = texture2D (_SpecularMap, P_45);
    mediump float tmpvar_46;
    tmpvar_46 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_44 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_46 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_31 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_47;
  mediump vec3 srcColor_48;
  srcColor_48 = colorBlendLightMap_8;
  tmpvar_47 = (xlv_COLOR1.xyz + (srcColor_48 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_47;
  highp vec4 tmpvar_49;
  tmpvar_49.xyz = colorBlendLightMap_8;
  tmpvar_49.w = _BloomIntensity;
  tmpvar_1 = tmpvar_49;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_4 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.x;
  tmpvar_21.y = worldBinormal_2.x;
  tmpvar_21.z = worldNormal_4.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.y;
  tmpvar_22.y = worldBinormal_2.y;
  tmpvar_22.z = worldNormal_4.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_3.z;
  tmpvar_23.y = worldBinormal_2.z;
  tmpvar_23.z = worldNormal_4.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase.xyz + (h_39 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_41 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  tmpvar_31 = tmpvar_33;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_21;
  vpos_21 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_21.y = ((fract(vpos_21.y) * 0.0625) + unity_LODFade.y);
  lowp float x_22;
  x_22 = (texture2D (_DitherMaskLOD2D, vpos_21).w - 0.5);
  if ((x_22 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_23.w;
  lowp vec4 color_24;
  color_24 = tmpvar_23;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_24.xyz);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_26;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_27;
    mediump float tmpvar_28;
    tmpvar_28 = dot (tmpvar_26, vec3(0.299, 0.587, 0.114));
    gray_27 = tmpvar_28;
    highp vec2 tmpvar_29;
    tmpvar_29.y = 0.5;
    tmpvar_29.x = (gray_27 * _LightmapColorScale);
    lowp vec4 tmpvar_30;
    tmpvar_30 = texture2D (_LightmapColorChange, tmpvar_29);
    fc_9 = mix (((tmpvar_30 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_26, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_31;
  tmpvar_31 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_31 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_33;
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_37;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_MatrixV[0].xyz;
  tmpvar_38[1] = unity_MatrixV[1].xyz;
  tmpvar_38[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_38 * worldNorm_5);
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_39 - (2.0 * (
    dot (worldNorm_5, tmpvar_39)
   * worldNorm_5)));
  R_4 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = ((tmpvar_41.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatCap, tmpvar_42);
  mc_3 = tmpvar_43;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_44;
    highp vec2 P_45;
    P_45 = ((tmpvar_42 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_44 = texture2D (_SpecularMap, P_45);
    mediump float tmpvar_46;
    tmpvar_46 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_44 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_46 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_31 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_47;
  mediump vec3 srcColor_48;
  srcColor_48 = colorBlendLightMap_8;
  tmpvar_47 = (xlv_COLOR1.xyz + (srcColor_48 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_47;
  highp vec4 tmpvar_49;
  tmpvar_49.xyz = colorBlendLightMap_8;
  tmpvar_49.w = _BloomIntensity;
  tmpvar_1 = tmpvar_49;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_4 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.x;
  tmpvar_21.y = worldBinormal_2.x;
  tmpvar_21.z = worldNormal_4.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.y;
  tmpvar_22.y = worldBinormal_2.y;
  tmpvar_22.z = worldNormal_4.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_3.z;
  tmpvar_23.y = worldBinormal_2.z;
  tmpvar_23.z = worldNormal_4.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase.xyz + (h_39 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_41 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  tmpvar_31 = tmpvar_33;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_21;
  vpos_21 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_21.y = ((fract(vpos_21.y) * 0.0625) + unity_LODFade.y);
  lowp float x_22;
  x_22 = (texture2D (_DitherMaskLOD2D, vpos_21).w - 0.5);
  if ((x_22 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_23.w;
  lowp vec4 color_24;
  color_24 = tmpvar_23;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_24.xyz);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_26;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_27;
    mediump float tmpvar_28;
    tmpvar_28 = dot (tmpvar_26, vec3(0.299, 0.587, 0.114));
    gray_27 = tmpvar_28;
    highp vec2 tmpvar_29;
    tmpvar_29.y = 0.5;
    tmpvar_29.x = (gray_27 * _LightmapColorScale);
    lowp vec4 tmpvar_30;
    tmpvar_30 = texture2D (_LightmapColorChange, tmpvar_29);
    fc_9 = mix (((tmpvar_30 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_26, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_31;
  tmpvar_31 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_31 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_33;
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_37;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_MatrixV[0].xyz;
  tmpvar_38[1] = unity_MatrixV[1].xyz;
  tmpvar_38[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_38 * worldNorm_5);
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_39 - (2.0 * (
    dot (worldNorm_5, tmpvar_39)
   * worldNorm_5)));
  R_4 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = ((tmpvar_41.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatCap, tmpvar_42);
  mc_3 = tmpvar_43;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_44;
    highp vec2 P_45;
    P_45 = ((tmpvar_42 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_44 = texture2D (_SpecularMap, P_45);
    mediump float tmpvar_46;
    tmpvar_46 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_44 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_46 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_31 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_47;
  mediump vec3 srcColor_48;
  srcColor_48 = colorBlendLightMap_8;
  tmpvar_47 = (xlv_COLOR1.xyz + (srcColor_48 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_47;
  highp vec4 tmpvar_49;
  tmpvar_49.xyz = colorBlendLightMap_8;
  tmpvar_49.w = _BloomIntensity;
  tmpvar_1 = tmpvar_49;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_3 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.x;
  tmpvar_21.y = worldBinormal_1.x;
  tmpvar_21.z = worldNormal_3.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.y;
  tmpvar_22.y = worldBinormal_1.y;
  tmpvar_22.z = worldNormal_3.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_2.z;
  tmpvar_23.y = worldBinormal_1.z;
  tmpvar_23.z = worldNormal_3.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase2.xyz + (h_39 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_41 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams2.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams2.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase2.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor2.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  highp vec4 tmpvar_67;
  mediump float fogFactor_68;
  mediump vec3 fogColor_69;
  mediump vec3 heightFogColor_70;
  highp float HeightFogFactor_71;
  mediump vec3 atomesphereFogColor_72;
  mediump float h_73;
  highp float linearFogDensity_74;
  mediump float len_75;
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((len_75 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_74 = (tmpvar_77 * (2.0 - tmpvar_77));
  if ((len_75 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_74 = (linearFogDensity_74 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_78;
  tmpvar_78 = min (pow (linearFogDensity_74, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_74 = tmpvar_78;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_79 = tmpvar_80;
  h_73 = (tmpvar_79 * (2.0 - tmpvar_79));
  highp vec3 tmpvar_81;
  tmpvar_81 = (_HeigtFogColBase3.xyz + (h_73 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_72 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (atomesphereFogColor_72, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_75 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_72 = tmpvar_82;
  mediump float tmpvar_83;
  mediump float r_84;
  mediump float f_85;
  mediump float u_86;
  mediump float l_87;
  mediump float fogInt_88;
  fogInt_88 = 1.0;
  highp float tmpvar_89;
  tmpvar_89 = (_HeigtFogParams3.x * tmpvar_32.y);
  highp float tmpvar_90;
  tmpvar_90 = abs(tmpvar_89);
  if ((tmpvar_90 > 0.01)) {
    highp float tmpvar_91;
    tmpvar_91 = exp(-(tmpvar_89));
    fogInt_88 = ((1.0 - tmpvar_91) / tmpvar_89);
  };
  highp float tmpvar_92;
  tmpvar_92 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_87 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (l_87 * _HeigtFogParams3.y);
  u_86 = tmpvar_93;
  fogInt_88 = (fogInt_88 * u_86);
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = clamp (((l_87 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_94 = tmpvar_95;
  r_84 = (tmpvar_94 * (2.0 - tmpvar_94));
  r_84 = ((r_84 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_85 = ((1.0 - clamp (
    exp2(-(fogInt_88))
  , 0.0, 1.0)) * r_84);
  highp float tmpvar_96;
  tmpvar_96 = min (f_85, _HeigtFogColBase3.w);
  tmpvar_83 = tmpvar_96;
  HeightFogFactor_71 = tmpvar_83;
  highp vec3 tmpvar_97;
  tmpvar_97 = _Mihoyo_FogColor3.xyz;
  heightFogColor_70 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = ((heightFogColor_70 * HeightFogFactor_71) + ((atomesphereFogColor_72 * tmpvar_78) * (1.0 - HeightFogFactor_71)));
  fogColor_69 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((1.0 - tmpvar_78) * (1.0 - HeightFogFactor_71));
  fogFactor_68 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.xyz = fogColor_69;
  tmpvar_100.w = fogFactor_68;
  tmpvar_67 = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = mix (tmpvar_33, tmpvar_67, vec4(_LerpFactor));
  tmpvar_31 = tmpvar_101;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_21;
  vpos_21 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_21.y = ((fract(vpos_21.y) * 0.0625) + unity_LODFade.y);
  lowp float x_22;
  x_22 = (texture2D (_DitherMaskLOD2D, vpos_21).w - 0.5);
  if ((x_22 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_23.w;
  lowp vec4 color_24;
  color_24 = tmpvar_23;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_24.xyz);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_26;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_27;
    mediump float tmpvar_28;
    tmpvar_28 = dot (tmpvar_26, vec3(0.299, 0.587, 0.114));
    gray_27 = tmpvar_28;
    highp vec2 tmpvar_29;
    tmpvar_29.y = 0.5;
    tmpvar_29.x = (gray_27 * _LightmapColorScale);
    lowp vec4 tmpvar_30;
    tmpvar_30 = texture2D (_LightmapColorChange, tmpvar_29);
    fc_9 = mix (((tmpvar_30 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_26, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_31;
  tmpvar_31 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_31 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_33;
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_37;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_MatrixV[0].xyz;
  tmpvar_38[1] = unity_MatrixV[1].xyz;
  tmpvar_38[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_38 * worldNorm_5);
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_39 - (2.0 * (
    dot (worldNorm_5, tmpvar_39)
   * worldNorm_5)));
  R_4 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = ((tmpvar_41.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatCap, tmpvar_42);
  mc_3 = tmpvar_43;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_44;
    highp vec2 P_45;
    P_45 = ((tmpvar_42 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_44 = texture2D (_SpecularMap, P_45);
    mediump float tmpvar_46;
    tmpvar_46 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_44 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_46 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_31 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_47;
  mediump vec3 srcColor_48;
  srcColor_48 = colorBlendLightMap_8;
  tmpvar_47 = (xlv_COLOR1.xyz + (srcColor_48 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_47;
  highp vec4 tmpvar_49;
  tmpvar_49.xyz = colorBlendLightMap_8;
  tmpvar_49.w = _BloomIntensity;
  tmpvar_1 = tmpvar_49;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_3 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.x;
  tmpvar_21.y = worldBinormal_1.x;
  tmpvar_21.z = worldNormal_3.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.y;
  tmpvar_22.y = worldBinormal_1.y;
  tmpvar_22.z = worldNormal_3.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_2.z;
  tmpvar_23.y = worldBinormal_1.z;
  tmpvar_23.z = worldNormal_3.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase2.xyz + (h_39 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_41 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams2.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams2.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase2.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor2.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  highp vec4 tmpvar_67;
  mediump float fogFactor_68;
  mediump vec3 fogColor_69;
  mediump vec3 heightFogColor_70;
  highp float HeightFogFactor_71;
  mediump vec3 atomesphereFogColor_72;
  mediump float h_73;
  highp float linearFogDensity_74;
  mediump float len_75;
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((len_75 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_74 = (tmpvar_77 * (2.0 - tmpvar_77));
  if ((len_75 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_74 = (linearFogDensity_74 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_78;
  tmpvar_78 = min (pow (linearFogDensity_74, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_74 = tmpvar_78;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_79 = tmpvar_80;
  h_73 = (tmpvar_79 * (2.0 - tmpvar_79));
  highp vec3 tmpvar_81;
  tmpvar_81 = (_HeigtFogColBase3.xyz + (h_73 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_72 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (atomesphereFogColor_72, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_75 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_72 = tmpvar_82;
  mediump float tmpvar_83;
  mediump float r_84;
  mediump float f_85;
  mediump float u_86;
  mediump float l_87;
  mediump float fogInt_88;
  fogInt_88 = 1.0;
  highp float tmpvar_89;
  tmpvar_89 = (_HeigtFogParams3.x * tmpvar_32.y);
  highp float tmpvar_90;
  tmpvar_90 = abs(tmpvar_89);
  if ((tmpvar_90 > 0.01)) {
    highp float tmpvar_91;
    tmpvar_91 = exp(-(tmpvar_89));
    fogInt_88 = ((1.0 - tmpvar_91) / tmpvar_89);
  };
  highp float tmpvar_92;
  tmpvar_92 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_87 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (l_87 * _HeigtFogParams3.y);
  u_86 = tmpvar_93;
  fogInt_88 = (fogInt_88 * u_86);
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = clamp (((l_87 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_94 = tmpvar_95;
  r_84 = (tmpvar_94 * (2.0 - tmpvar_94));
  r_84 = ((r_84 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_85 = ((1.0 - clamp (
    exp2(-(fogInt_88))
  , 0.0, 1.0)) * r_84);
  highp float tmpvar_96;
  tmpvar_96 = min (f_85, _HeigtFogColBase3.w);
  tmpvar_83 = tmpvar_96;
  HeightFogFactor_71 = tmpvar_83;
  highp vec3 tmpvar_97;
  tmpvar_97 = _Mihoyo_FogColor3.xyz;
  heightFogColor_70 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = ((heightFogColor_70 * HeightFogFactor_71) + ((atomesphereFogColor_72 * tmpvar_78) * (1.0 - HeightFogFactor_71)));
  fogColor_69 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((1.0 - tmpvar_78) * (1.0 - HeightFogFactor_71));
  fogFactor_68 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.xyz = fogColor_69;
  tmpvar_100.w = fogFactor_68;
  tmpvar_67 = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = mix (tmpvar_33, tmpvar_67, vec4(_LerpFactor));
  tmpvar_31 = tmpvar_101;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_21;
  vpos_21 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_21.y = ((fract(vpos_21.y) * 0.0625) + unity_LODFade.y);
  lowp float x_22;
  x_22 = (texture2D (_DitherMaskLOD2D, vpos_21).w - 0.5);
  if ((x_22 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_23.w;
  lowp vec4 color_24;
  color_24 = tmpvar_23;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_24.xyz);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_26;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_27;
    mediump float tmpvar_28;
    tmpvar_28 = dot (tmpvar_26, vec3(0.299, 0.587, 0.114));
    gray_27 = tmpvar_28;
    highp vec2 tmpvar_29;
    tmpvar_29.y = 0.5;
    tmpvar_29.x = (gray_27 * _LightmapColorScale);
    lowp vec4 tmpvar_30;
    tmpvar_30 = texture2D (_LightmapColorChange, tmpvar_29);
    fc_9 = mix (((tmpvar_30 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_26, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_31;
  tmpvar_31 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_31 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_33;
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_37;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_MatrixV[0].xyz;
  tmpvar_38[1] = unity_MatrixV[1].xyz;
  tmpvar_38[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_38 * worldNorm_5);
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_39 - (2.0 * (
    dot (worldNorm_5, tmpvar_39)
   * worldNorm_5)));
  R_4 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = ((tmpvar_41.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatCap, tmpvar_42);
  mc_3 = tmpvar_43;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_44;
    highp vec2 P_45;
    P_45 = ((tmpvar_42 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_44 = texture2D (_SpecularMap, P_45);
    mediump float tmpvar_46;
    tmpvar_46 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_44 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_46 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_31 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_47;
  mediump vec3 srcColor_48;
  srcColor_48 = colorBlendLightMap_8;
  tmpvar_47 = (xlv_COLOR1.xyz + (srcColor_48 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_47;
  highp vec4 tmpvar_49;
  tmpvar_49.xyz = colorBlendLightMap_8;
  tmpvar_49.w = _BloomIntensity;
  tmpvar_1 = tmpvar_49;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_3 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.x;
  tmpvar_21.y = worldBinormal_1.x;
  tmpvar_21.z = worldNormal_3.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.y;
  tmpvar_22.y = worldBinormal_1.y;
  tmpvar_22.z = worldNormal_3.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_2.z;
  tmpvar_23.y = worldBinormal_1.z;
  tmpvar_23.z = worldNormal_3.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase2.xyz + (h_39 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_41 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams2.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams2.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase2.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor2.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  highp vec4 tmpvar_67;
  mediump float fogFactor_68;
  mediump vec3 fogColor_69;
  mediump vec3 heightFogColor_70;
  highp float HeightFogFactor_71;
  mediump vec3 atomesphereFogColor_72;
  mediump float h_73;
  highp float linearFogDensity_74;
  mediump float len_75;
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((len_75 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_74 = (tmpvar_77 * (2.0 - tmpvar_77));
  if ((len_75 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_74 = (linearFogDensity_74 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_78;
  tmpvar_78 = min (pow (linearFogDensity_74, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_74 = tmpvar_78;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_79 = tmpvar_80;
  h_73 = (tmpvar_79 * (2.0 - tmpvar_79));
  highp vec3 tmpvar_81;
  tmpvar_81 = (_HeigtFogColBase3.xyz + (h_73 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_72 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (atomesphereFogColor_72, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_75 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_72 = tmpvar_82;
  mediump float tmpvar_83;
  mediump float r_84;
  mediump float f_85;
  mediump float u_86;
  mediump float l_87;
  mediump float fogInt_88;
  fogInt_88 = 1.0;
  highp float tmpvar_89;
  tmpvar_89 = (_HeigtFogParams3.x * tmpvar_32.y);
  highp float tmpvar_90;
  tmpvar_90 = abs(tmpvar_89);
  if ((tmpvar_90 > 0.01)) {
    highp float tmpvar_91;
    tmpvar_91 = exp(-(tmpvar_89));
    fogInt_88 = ((1.0 - tmpvar_91) / tmpvar_89);
  };
  highp float tmpvar_92;
  tmpvar_92 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_87 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (l_87 * _HeigtFogParams3.y);
  u_86 = tmpvar_93;
  fogInt_88 = (fogInt_88 * u_86);
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = clamp (((l_87 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_94 = tmpvar_95;
  r_84 = (tmpvar_94 * (2.0 - tmpvar_94));
  r_84 = ((r_84 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_85 = ((1.0 - clamp (
    exp2(-(fogInt_88))
  , 0.0, 1.0)) * r_84);
  highp float tmpvar_96;
  tmpvar_96 = min (f_85, _HeigtFogColBase3.w);
  tmpvar_83 = tmpvar_96;
  HeightFogFactor_71 = tmpvar_83;
  highp vec3 tmpvar_97;
  tmpvar_97 = _Mihoyo_FogColor3.xyz;
  heightFogColor_70 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = ((heightFogColor_70 * HeightFogFactor_71) + ((atomesphereFogColor_72 * tmpvar_78) * (1.0 - HeightFogFactor_71)));
  fogColor_69 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((1.0 - tmpvar_78) * (1.0 - HeightFogFactor_71));
  fogFactor_68 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.xyz = fogColor_69;
  tmpvar_100.w = fogFactor_68;
  tmpvar_67 = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = mix (tmpvar_33, tmpvar_67, vec4(_LerpFactor));
  tmpvar_31 = tmpvar_101;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_21;
  vpos_21 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_21.y = ((fract(vpos_21.y) * 0.0625) + unity_LODFade.y);
  lowp float x_22;
  x_22 = (texture2D (_DitherMaskLOD2D, vpos_21).w - 0.5);
  if ((x_22 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_23.w;
  lowp vec4 color_24;
  color_24 = tmpvar_23;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_24.xyz);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_26;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_27;
    mediump float tmpvar_28;
    tmpvar_28 = dot (tmpvar_26, vec3(0.299, 0.587, 0.114));
    gray_27 = tmpvar_28;
    highp vec2 tmpvar_29;
    tmpvar_29.y = 0.5;
    tmpvar_29.x = (gray_27 * _LightmapColorScale);
    lowp vec4 tmpvar_30;
    tmpvar_30 = texture2D (_LightmapColorChange, tmpvar_29);
    fc_9 = mix (((tmpvar_30 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_26, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_31;
  tmpvar_31 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_31 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_33;
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_37;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_MatrixV[0].xyz;
  tmpvar_38[1] = unity_MatrixV[1].xyz;
  tmpvar_38[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_38 * worldNorm_5);
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_39 - (2.0 * (
    dot (worldNorm_5, tmpvar_39)
   * worldNorm_5)));
  R_4 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = ((tmpvar_41.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatCap, tmpvar_42);
  mc_3 = tmpvar_43;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_44;
    highp vec2 P_45;
    P_45 = ((tmpvar_42 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_44 = texture2D (_SpecularMap, P_45);
    mediump float tmpvar_46;
    tmpvar_46 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_44 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_46 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_31 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_47;
  mediump vec3 srcColor_48;
  srcColor_48 = colorBlendLightMap_8;
  tmpvar_47 = (xlv_COLOR1.xyz + (srcColor_48 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_47;
  highp vec4 tmpvar_49;
  tmpvar_49.xyz = colorBlendLightMap_8;
  tmpvar_49.w = _BloomIntensity;
  tmpvar_1 = tmpvar_49;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_4 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.x;
  tmpvar_21.y = worldBinormal_2.x;
  tmpvar_21.z = worldNormal_4.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.y;
  tmpvar_22.y = worldBinormal_2.y;
  tmpvar_22.z = worldNormal_4.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_3.z;
  tmpvar_23.y = worldBinormal_2.z;
  tmpvar_23.z = worldNormal_4.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase.xyz + (h_39 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_41 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  tmpvar_31 = tmpvar_33;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_21;
  vpos_21 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_21.y = ((fract(vpos_21.y) * 0.0625) + unity_LODFade.y);
  lowp float x_22;
  x_22 = (texture2D (_DitherMaskLOD2D, vpos_21).w - 0.5);
  if ((x_22 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_25;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_26;
    mediump float tmpvar_27;
    tmpvar_27 = dot (tmpvar_25, vec3(0.299, 0.587, 0.114));
    gray_26 = tmpvar_27;
    highp vec2 tmpvar_28;
    tmpvar_28.y = 0.5;
    tmpvar_28.x = (gray_26 * _LightmapColorScale);
    lowp vec4 tmpvar_29;
    tmpvar_29 = texture2D (_LightmapColorChange, tmpvar_28);
    fc_9 = mix (((tmpvar_29 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_25, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_30;
  tmpvar_30 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_30 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_32;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_36;
  highp mat3 tmpvar_37;
  tmpvar_37[0] = unity_MatrixV[0].xyz;
  tmpvar_37[1] = unity_MatrixV[1].xyz;
  tmpvar_37[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_37 * worldNorm_5);
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_39;
  tmpvar_39 = (tmpvar_38 - (2.0 * (
    dot (worldNorm_5, tmpvar_38)
   * worldNorm_5)));
  R_4 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = ((tmpvar_40.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_MatCap, tmpvar_41);
  mc_3 = tmpvar_42;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_43;
    highp vec2 P_44;
    P_44 = ((tmpvar_41 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_43 = texture2D (_SpecularMap, P_44);
    mediump float tmpvar_45;
    tmpvar_45 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_43 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_45 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_30 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_46;
  mediump vec3 srcColor_47;
  srcColor_47 = colorBlendLightMap_8;
  tmpvar_46 = (xlv_COLOR1.xyz + (srcColor_47 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_46;
  highp vec4 tmpvar_48;
  tmpvar_48.xyz = colorBlendLightMap_8;
  tmpvar_48.w = _BloomIntensity;
  tmpvar_1 = tmpvar_48;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_4 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.x;
  tmpvar_21.y = worldBinormal_2.x;
  tmpvar_21.z = worldNormal_4.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.y;
  tmpvar_22.y = worldBinormal_2.y;
  tmpvar_22.z = worldNormal_4.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_3.z;
  tmpvar_23.y = worldBinormal_2.z;
  tmpvar_23.z = worldNormal_4.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase.xyz + (h_39 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_41 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  tmpvar_31 = tmpvar_33;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_21;
  vpos_21 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_21.y = ((fract(vpos_21.y) * 0.0625) + unity_LODFade.y);
  lowp float x_22;
  x_22 = (texture2D (_DitherMaskLOD2D, vpos_21).w - 0.5);
  if ((x_22 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_25;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_26;
    mediump float tmpvar_27;
    tmpvar_27 = dot (tmpvar_25, vec3(0.299, 0.587, 0.114));
    gray_26 = tmpvar_27;
    highp vec2 tmpvar_28;
    tmpvar_28.y = 0.5;
    tmpvar_28.x = (gray_26 * _LightmapColorScale);
    lowp vec4 tmpvar_29;
    tmpvar_29 = texture2D (_LightmapColorChange, tmpvar_28);
    fc_9 = mix (((tmpvar_29 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_25, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_30;
  tmpvar_30 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_30 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_32;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_36;
  highp mat3 tmpvar_37;
  tmpvar_37[0] = unity_MatrixV[0].xyz;
  tmpvar_37[1] = unity_MatrixV[1].xyz;
  tmpvar_37[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_37 * worldNorm_5);
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_39;
  tmpvar_39 = (tmpvar_38 - (2.0 * (
    dot (worldNorm_5, tmpvar_38)
   * worldNorm_5)));
  R_4 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = ((tmpvar_40.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_MatCap, tmpvar_41);
  mc_3 = tmpvar_42;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_43;
    highp vec2 P_44;
    P_44 = ((tmpvar_41 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_43 = texture2D (_SpecularMap, P_44);
    mediump float tmpvar_45;
    tmpvar_45 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_43 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_45 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_30 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_46;
  mediump vec3 srcColor_47;
  srcColor_47 = colorBlendLightMap_8;
  tmpvar_46 = (xlv_COLOR1.xyz + (srcColor_47 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_46;
  highp vec4 tmpvar_48;
  tmpvar_48.xyz = colorBlendLightMap_8;
  tmpvar_48.w = _BloomIntensity;
  tmpvar_1 = tmpvar_48;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_4 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.x;
  tmpvar_21.y = worldBinormal_2.x;
  tmpvar_21.z = worldNormal_4.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.y;
  tmpvar_22.y = worldBinormal_2.y;
  tmpvar_22.z = worldNormal_4.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_3.z;
  tmpvar_23.y = worldBinormal_2.z;
  tmpvar_23.z = worldNormal_4.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase.xyz + (h_39 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_41 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  tmpvar_31 = tmpvar_33;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_21;
  vpos_21 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_21.y = ((fract(vpos_21.y) * 0.0625) + unity_LODFade.y);
  lowp float x_22;
  x_22 = (texture2D (_DitherMaskLOD2D, vpos_21).w - 0.5);
  if ((x_22 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_25;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_26;
    mediump float tmpvar_27;
    tmpvar_27 = dot (tmpvar_25, vec3(0.299, 0.587, 0.114));
    gray_26 = tmpvar_27;
    highp vec2 tmpvar_28;
    tmpvar_28.y = 0.5;
    tmpvar_28.x = (gray_26 * _LightmapColorScale);
    lowp vec4 tmpvar_29;
    tmpvar_29 = texture2D (_LightmapColorChange, tmpvar_28);
    fc_9 = mix (((tmpvar_29 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_25, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_30;
  tmpvar_30 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_30 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_32;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_36;
  highp mat3 tmpvar_37;
  tmpvar_37[0] = unity_MatrixV[0].xyz;
  tmpvar_37[1] = unity_MatrixV[1].xyz;
  tmpvar_37[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_37 * worldNorm_5);
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_39;
  tmpvar_39 = (tmpvar_38 - (2.0 * (
    dot (worldNorm_5, tmpvar_38)
   * worldNorm_5)));
  R_4 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = ((tmpvar_40.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_MatCap, tmpvar_41);
  mc_3 = tmpvar_42;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_43;
    highp vec2 P_44;
    P_44 = ((tmpvar_41 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_43 = texture2D (_SpecularMap, P_44);
    mediump float tmpvar_45;
    tmpvar_45 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_43 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_45 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_30 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_46;
  mediump vec3 srcColor_47;
  srcColor_47 = colorBlendLightMap_8;
  tmpvar_46 = (xlv_COLOR1.xyz + (srcColor_47 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_46;
  highp vec4 tmpvar_48;
  tmpvar_48.xyz = colorBlendLightMap_8;
  tmpvar_48.w = _BloomIntensity;
  tmpvar_1 = tmpvar_48;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_3 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.x;
  tmpvar_21.y = worldBinormal_1.x;
  tmpvar_21.z = worldNormal_3.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.y;
  tmpvar_22.y = worldBinormal_1.y;
  tmpvar_22.z = worldNormal_3.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_2.z;
  tmpvar_23.y = worldBinormal_1.z;
  tmpvar_23.z = worldNormal_3.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase2.xyz + (h_39 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_41 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams2.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams2.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase2.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor2.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  highp vec4 tmpvar_67;
  mediump float fogFactor_68;
  mediump vec3 fogColor_69;
  mediump vec3 heightFogColor_70;
  highp float HeightFogFactor_71;
  mediump vec3 atomesphereFogColor_72;
  mediump float h_73;
  highp float linearFogDensity_74;
  mediump float len_75;
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((len_75 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_74 = (tmpvar_77 * (2.0 - tmpvar_77));
  if ((len_75 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_74 = (linearFogDensity_74 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_78;
  tmpvar_78 = min (pow (linearFogDensity_74, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_74 = tmpvar_78;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_79 = tmpvar_80;
  h_73 = (tmpvar_79 * (2.0 - tmpvar_79));
  highp vec3 tmpvar_81;
  tmpvar_81 = (_HeigtFogColBase3.xyz + (h_73 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_72 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (atomesphereFogColor_72, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_75 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_72 = tmpvar_82;
  mediump float tmpvar_83;
  mediump float r_84;
  mediump float f_85;
  mediump float u_86;
  mediump float l_87;
  mediump float fogInt_88;
  fogInt_88 = 1.0;
  highp float tmpvar_89;
  tmpvar_89 = (_HeigtFogParams3.x * tmpvar_32.y);
  highp float tmpvar_90;
  tmpvar_90 = abs(tmpvar_89);
  if ((tmpvar_90 > 0.01)) {
    highp float tmpvar_91;
    tmpvar_91 = exp(-(tmpvar_89));
    fogInt_88 = ((1.0 - tmpvar_91) / tmpvar_89);
  };
  highp float tmpvar_92;
  tmpvar_92 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_87 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (l_87 * _HeigtFogParams3.y);
  u_86 = tmpvar_93;
  fogInt_88 = (fogInt_88 * u_86);
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = clamp (((l_87 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_94 = tmpvar_95;
  r_84 = (tmpvar_94 * (2.0 - tmpvar_94));
  r_84 = ((r_84 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_85 = ((1.0 - clamp (
    exp2(-(fogInt_88))
  , 0.0, 1.0)) * r_84);
  highp float tmpvar_96;
  tmpvar_96 = min (f_85, _HeigtFogColBase3.w);
  tmpvar_83 = tmpvar_96;
  HeightFogFactor_71 = tmpvar_83;
  highp vec3 tmpvar_97;
  tmpvar_97 = _Mihoyo_FogColor3.xyz;
  heightFogColor_70 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = ((heightFogColor_70 * HeightFogFactor_71) + ((atomesphereFogColor_72 * tmpvar_78) * (1.0 - HeightFogFactor_71)));
  fogColor_69 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((1.0 - tmpvar_78) * (1.0 - HeightFogFactor_71));
  fogFactor_68 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.xyz = fogColor_69;
  tmpvar_100.w = fogFactor_68;
  tmpvar_67 = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = mix (tmpvar_33, tmpvar_67, vec4(_LerpFactor));
  tmpvar_31 = tmpvar_101;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_21;
  vpos_21 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_21.y = ((fract(vpos_21.y) * 0.0625) + unity_LODFade.y);
  lowp float x_22;
  x_22 = (texture2D (_DitherMaskLOD2D, vpos_21).w - 0.5);
  if ((x_22 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_25;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_26;
    mediump float tmpvar_27;
    tmpvar_27 = dot (tmpvar_25, vec3(0.299, 0.587, 0.114));
    gray_26 = tmpvar_27;
    highp vec2 tmpvar_28;
    tmpvar_28.y = 0.5;
    tmpvar_28.x = (gray_26 * _LightmapColorScale);
    lowp vec4 tmpvar_29;
    tmpvar_29 = texture2D (_LightmapColorChange, tmpvar_28);
    fc_9 = mix (((tmpvar_29 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_25, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_30;
  tmpvar_30 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_30 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_32;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_36;
  highp mat3 tmpvar_37;
  tmpvar_37[0] = unity_MatrixV[0].xyz;
  tmpvar_37[1] = unity_MatrixV[1].xyz;
  tmpvar_37[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_37 * worldNorm_5);
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_39;
  tmpvar_39 = (tmpvar_38 - (2.0 * (
    dot (worldNorm_5, tmpvar_38)
   * worldNorm_5)));
  R_4 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = ((tmpvar_40.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_MatCap, tmpvar_41);
  mc_3 = tmpvar_42;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_43;
    highp vec2 P_44;
    P_44 = ((tmpvar_41 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_43 = texture2D (_SpecularMap, P_44);
    mediump float tmpvar_45;
    tmpvar_45 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_43 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_45 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_30 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_46;
  mediump vec3 srcColor_47;
  srcColor_47 = colorBlendLightMap_8;
  tmpvar_46 = (xlv_COLOR1.xyz + (srcColor_47 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_46;
  highp vec4 tmpvar_48;
  tmpvar_48.xyz = colorBlendLightMap_8;
  tmpvar_48.w = _BloomIntensity;
  tmpvar_1 = tmpvar_48;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_3 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.x;
  tmpvar_21.y = worldBinormal_1.x;
  tmpvar_21.z = worldNormal_3.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.y;
  tmpvar_22.y = worldBinormal_1.y;
  tmpvar_22.z = worldNormal_3.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_2.z;
  tmpvar_23.y = worldBinormal_1.z;
  tmpvar_23.z = worldNormal_3.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase2.xyz + (h_39 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_41 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams2.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams2.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase2.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor2.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  highp vec4 tmpvar_67;
  mediump float fogFactor_68;
  mediump vec3 fogColor_69;
  mediump vec3 heightFogColor_70;
  highp float HeightFogFactor_71;
  mediump vec3 atomesphereFogColor_72;
  mediump float h_73;
  highp float linearFogDensity_74;
  mediump float len_75;
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((len_75 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_74 = (tmpvar_77 * (2.0 - tmpvar_77));
  if ((len_75 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_74 = (linearFogDensity_74 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_78;
  tmpvar_78 = min (pow (linearFogDensity_74, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_74 = tmpvar_78;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_79 = tmpvar_80;
  h_73 = (tmpvar_79 * (2.0 - tmpvar_79));
  highp vec3 tmpvar_81;
  tmpvar_81 = (_HeigtFogColBase3.xyz + (h_73 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_72 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (atomesphereFogColor_72, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_75 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_72 = tmpvar_82;
  mediump float tmpvar_83;
  mediump float r_84;
  mediump float f_85;
  mediump float u_86;
  mediump float l_87;
  mediump float fogInt_88;
  fogInt_88 = 1.0;
  highp float tmpvar_89;
  tmpvar_89 = (_HeigtFogParams3.x * tmpvar_32.y);
  highp float tmpvar_90;
  tmpvar_90 = abs(tmpvar_89);
  if ((tmpvar_90 > 0.01)) {
    highp float tmpvar_91;
    tmpvar_91 = exp(-(tmpvar_89));
    fogInt_88 = ((1.0 - tmpvar_91) / tmpvar_89);
  };
  highp float tmpvar_92;
  tmpvar_92 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_87 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (l_87 * _HeigtFogParams3.y);
  u_86 = tmpvar_93;
  fogInt_88 = (fogInt_88 * u_86);
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = clamp (((l_87 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_94 = tmpvar_95;
  r_84 = (tmpvar_94 * (2.0 - tmpvar_94));
  r_84 = ((r_84 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_85 = ((1.0 - clamp (
    exp2(-(fogInt_88))
  , 0.0, 1.0)) * r_84);
  highp float tmpvar_96;
  tmpvar_96 = min (f_85, _HeigtFogColBase3.w);
  tmpvar_83 = tmpvar_96;
  HeightFogFactor_71 = tmpvar_83;
  highp vec3 tmpvar_97;
  tmpvar_97 = _Mihoyo_FogColor3.xyz;
  heightFogColor_70 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = ((heightFogColor_70 * HeightFogFactor_71) + ((atomesphereFogColor_72 * tmpvar_78) * (1.0 - HeightFogFactor_71)));
  fogColor_69 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((1.0 - tmpvar_78) * (1.0 - HeightFogFactor_71));
  fogFactor_68 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.xyz = fogColor_69;
  tmpvar_100.w = fogFactor_68;
  tmpvar_67 = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = mix (tmpvar_33, tmpvar_67, vec4(_LerpFactor));
  tmpvar_31 = tmpvar_101;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_21;
  vpos_21 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_21.y = ((fract(vpos_21.y) * 0.0625) + unity_LODFade.y);
  lowp float x_22;
  x_22 = (texture2D (_DitherMaskLOD2D, vpos_21).w - 0.5);
  if ((x_22 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_25;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_26;
    mediump float tmpvar_27;
    tmpvar_27 = dot (tmpvar_25, vec3(0.299, 0.587, 0.114));
    gray_26 = tmpvar_27;
    highp vec2 tmpvar_28;
    tmpvar_28.y = 0.5;
    tmpvar_28.x = (gray_26 * _LightmapColorScale);
    lowp vec4 tmpvar_29;
    tmpvar_29 = texture2D (_LightmapColorChange, tmpvar_28);
    fc_9 = mix (((tmpvar_29 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_25, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_30;
  tmpvar_30 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_30 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_32;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_36;
  highp mat3 tmpvar_37;
  tmpvar_37[0] = unity_MatrixV[0].xyz;
  tmpvar_37[1] = unity_MatrixV[1].xyz;
  tmpvar_37[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_37 * worldNorm_5);
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_39;
  tmpvar_39 = (tmpvar_38 - (2.0 * (
    dot (worldNorm_5, tmpvar_38)
   * worldNorm_5)));
  R_4 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = ((tmpvar_40.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_MatCap, tmpvar_41);
  mc_3 = tmpvar_42;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_43;
    highp vec2 P_44;
    P_44 = ((tmpvar_41 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_43 = texture2D (_SpecularMap, P_44);
    mediump float tmpvar_45;
    tmpvar_45 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_43 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_45 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_30 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_46;
  mediump vec3 srcColor_47;
  srcColor_47 = colorBlendLightMap_8;
  tmpvar_46 = (xlv_COLOR1.xyz + (srcColor_47 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_46;
  highp vec4 tmpvar_48;
  tmpvar_48.xyz = colorBlendLightMap_8;
  tmpvar_48.w = _BloomIntensity;
  tmpvar_1 = tmpvar_48;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_3 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.x;
  tmpvar_21.y = worldBinormal_1.x;
  tmpvar_21.z = worldNormal_3.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.y;
  tmpvar_22.y = worldBinormal_1.y;
  tmpvar_22.z = worldNormal_3.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_2.z;
  tmpvar_23.y = worldBinormal_1.z;
  tmpvar_23.z = worldNormal_3.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase2.xyz + (h_39 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_41 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams2.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams2.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase2.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor2.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  highp vec4 tmpvar_67;
  mediump float fogFactor_68;
  mediump vec3 fogColor_69;
  mediump vec3 heightFogColor_70;
  highp float HeightFogFactor_71;
  mediump vec3 atomesphereFogColor_72;
  mediump float h_73;
  highp float linearFogDensity_74;
  mediump float len_75;
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((len_75 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_74 = (tmpvar_77 * (2.0 - tmpvar_77));
  if ((len_75 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_74 = (linearFogDensity_74 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_78;
  tmpvar_78 = min (pow (linearFogDensity_74, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_74 = tmpvar_78;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_79 = tmpvar_80;
  h_73 = (tmpvar_79 * (2.0 - tmpvar_79));
  highp vec3 tmpvar_81;
  tmpvar_81 = (_HeigtFogColBase3.xyz + (h_73 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_72 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (atomesphereFogColor_72, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_75 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_72 = tmpvar_82;
  mediump float tmpvar_83;
  mediump float r_84;
  mediump float f_85;
  mediump float u_86;
  mediump float l_87;
  mediump float fogInt_88;
  fogInt_88 = 1.0;
  highp float tmpvar_89;
  tmpvar_89 = (_HeigtFogParams3.x * tmpvar_32.y);
  highp float tmpvar_90;
  tmpvar_90 = abs(tmpvar_89);
  if ((tmpvar_90 > 0.01)) {
    highp float tmpvar_91;
    tmpvar_91 = exp(-(tmpvar_89));
    fogInt_88 = ((1.0 - tmpvar_91) / tmpvar_89);
  };
  highp float tmpvar_92;
  tmpvar_92 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_87 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (l_87 * _HeigtFogParams3.y);
  u_86 = tmpvar_93;
  fogInt_88 = (fogInt_88 * u_86);
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = clamp (((l_87 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_94 = tmpvar_95;
  r_84 = (tmpvar_94 * (2.0 - tmpvar_94));
  r_84 = ((r_84 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_85 = ((1.0 - clamp (
    exp2(-(fogInt_88))
  , 0.0, 1.0)) * r_84);
  highp float tmpvar_96;
  tmpvar_96 = min (f_85, _HeigtFogColBase3.w);
  tmpvar_83 = tmpvar_96;
  HeightFogFactor_71 = tmpvar_83;
  highp vec3 tmpvar_97;
  tmpvar_97 = _Mihoyo_FogColor3.xyz;
  heightFogColor_70 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = ((heightFogColor_70 * HeightFogFactor_71) + ((atomesphereFogColor_72 * tmpvar_78) * (1.0 - HeightFogFactor_71)));
  fogColor_69 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((1.0 - tmpvar_78) * (1.0 - HeightFogFactor_71));
  fogFactor_68 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.xyz = fogColor_69;
  tmpvar_100.w = fogFactor_68;
  tmpvar_67 = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = mix (tmpvar_33, tmpvar_67, vec4(_LerpFactor));
  tmpvar_31 = tmpvar_101;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_21;
  vpos_21 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_21.y = ((fract(vpos_21.y) * 0.0625) + unity_LODFade.y);
  lowp float x_22;
  x_22 = (texture2D (_DitherMaskLOD2D, vpos_21).w - 0.5);
  if ((x_22 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_25;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_26;
    mediump float tmpvar_27;
    tmpvar_27 = dot (tmpvar_25, vec3(0.299, 0.587, 0.114));
    gray_26 = tmpvar_27;
    highp vec2 tmpvar_28;
    tmpvar_28.y = 0.5;
    tmpvar_28.x = (gray_26 * _LightmapColorScale);
    lowp vec4 tmpvar_29;
    tmpvar_29 = texture2D (_LightmapColorChange, tmpvar_28);
    fc_9 = mix (((tmpvar_29 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_25, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_30;
  tmpvar_30 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_30 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_32;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_36;
  highp mat3 tmpvar_37;
  tmpvar_37[0] = unity_MatrixV[0].xyz;
  tmpvar_37[1] = unity_MatrixV[1].xyz;
  tmpvar_37[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_37 * worldNorm_5);
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_39;
  tmpvar_39 = (tmpvar_38 - (2.0 * (
    dot (worldNorm_5, tmpvar_38)
   * worldNorm_5)));
  R_4 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = ((tmpvar_40.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_MatCap, tmpvar_41);
  mc_3 = tmpvar_42;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_43;
    highp vec2 P_44;
    P_44 = ((tmpvar_41 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_43 = texture2D (_SpecularMap, P_44);
    mediump float tmpvar_45;
    tmpvar_45 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_43 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_45 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_30 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_46;
  mediump vec3 srcColor_47;
  srcColor_47 = colorBlendLightMap_8;
  tmpvar_46 = (xlv_COLOR1.xyz + (srcColor_47 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_46;
  highp vec4 tmpvar_48;
  tmpvar_48.xyz = colorBlendLightMap_8;
  tmpvar_48.w = _BloomIntensity;
  tmpvar_1 = tmpvar_48;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_4 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.x;
  tmpvar_21.y = worldBinormal_2.x;
  tmpvar_21.z = worldNormal_4.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.y;
  tmpvar_22.y = worldBinormal_2.y;
  tmpvar_22.z = worldNormal_4.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_3.z;
  tmpvar_23.y = worldBinormal_2.z;
  tmpvar_23.z = worldNormal_4.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase.xyz + (h_39 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_41 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  tmpvar_31 = tmpvar_33;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_21;
  tmpvar_21 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_21.w;
  lowp vec4 color_22;
  color_22 = tmpvar_21;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_22.xyz);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_23;
  highp vec2 screenCoord_24;
  screenCoord_24 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_25;
  shadow_25 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_26;
    tmpvar_26 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_24);
    shadow_25 = tmpvar_26.x;
  };
  mediump vec3 tmpvar_27;
  tmpvar_27 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_27;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_28;
    mediump float tmpvar_29;
    tmpvar_29 = dot (tmpvar_27, vec3(0.299, 0.587, 0.114));
    gray_28 = tmpvar_29;
    highp vec2 tmpvar_30;
    tmpvar_30.y = 0.5;
    tmpvar_30.x = (gray_28 * _LightmapColorScale);
    lowp vec4 tmpvar_31;
    tmpvar_31 = texture2D (_LightmapColorChange, tmpvar_30);
    fc_9 = mix (((tmpvar_31 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_27, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_25))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_32 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_33;
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_38;
  highp mat3 tmpvar_39;
  tmpvar_39[0] = unity_MatrixV[0].xyz;
  tmpvar_39[1] = unity_MatrixV[1].xyz;
  tmpvar_39[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_39 * worldNorm_5);
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_41;
  tmpvar_41 = (tmpvar_40 - (2.0 * (
    dot (worldNorm_5, tmpvar_40)
   * worldNorm_5)));
  R_4 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = ((tmpvar_42.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MatCap, tmpvar_43);
  mc_3 = tmpvar_44;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_45;
    highp vec2 P_46;
    P_46 = ((tmpvar_43 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_45 = texture2D (_SpecularMap, P_46);
    mediump float tmpvar_47;
    tmpvar_47 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_45 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_47 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_32 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_48;
  mediump vec3 srcColor_49;
  srcColor_49 = colorBlendLightMap_8;
  tmpvar_48 = (xlv_COLOR1.xyz + (srcColor_49 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_48;
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = colorBlendLightMap_8;
  tmpvar_50.w = _BloomIntensity;
  tmpvar_1 = tmpvar_50;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_4 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.x;
  tmpvar_21.y = worldBinormal_2.x;
  tmpvar_21.z = worldNormal_4.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.y;
  tmpvar_22.y = worldBinormal_2.y;
  tmpvar_22.z = worldNormal_4.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_3.z;
  tmpvar_23.y = worldBinormal_2.z;
  tmpvar_23.z = worldNormal_4.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase.xyz + (h_39 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_41 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  tmpvar_31 = tmpvar_33;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_21;
  tmpvar_21 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_21.w;
  lowp vec4 color_22;
  color_22 = tmpvar_21;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_22.xyz);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_23;
  highp vec2 screenCoord_24;
  screenCoord_24 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_25;
  shadow_25 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_26;
    tmpvar_26 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_24);
    shadow_25 = tmpvar_26.x;
  };
  mediump vec3 tmpvar_27;
  tmpvar_27 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_27;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_28;
    mediump float tmpvar_29;
    tmpvar_29 = dot (tmpvar_27, vec3(0.299, 0.587, 0.114));
    gray_28 = tmpvar_29;
    highp vec2 tmpvar_30;
    tmpvar_30.y = 0.5;
    tmpvar_30.x = (gray_28 * _LightmapColorScale);
    lowp vec4 tmpvar_31;
    tmpvar_31 = texture2D (_LightmapColorChange, tmpvar_30);
    fc_9 = mix (((tmpvar_31 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_27, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_25))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_32 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_33;
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_38;
  highp mat3 tmpvar_39;
  tmpvar_39[0] = unity_MatrixV[0].xyz;
  tmpvar_39[1] = unity_MatrixV[1].xyz;
  tmpvar_39[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_39 * worldNorm_5);
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_41;
  tmpvar_41 = (tmpvar_40 - (2.0 * (
    dot (worldNorm_5, tmpvar_40)
   * worldNorm_5)));
  R_4 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = ((tmpvar_42.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MatCap, tmpvar_43);
  mc_3 = tmpvar_44;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_45;
    highp vec2 P_46;
    P_46 = ((tmpvar_43 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_45 = texture2D (_SpecularMap, P_46);
    mediump float tmpvar_47;
    tmpvar_47 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_45 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_47 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_32 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_48;
  mediump vec3 srcColor_49;
  srcColor_49 = colorBlendLightMap_8;
  tmpvar_48 = (xlv_COLOR1.xyz + (srcColor_49 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_48;
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = colorBlendLightMap_8;
  tmpvar_50.w = _BloomIntensity;
  tmpvar_1 = tmpvar_50;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_4 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.x;
  tmpvar_21.y = worldBinormal_2.x;
  tmpvar_21.z = worldNormal_4.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.y;
  tmpvar_22.y = worldBinormal_2.y;
  tmpvar_22.z = worldNormal_4.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_3.z;
  tmpvar_23.y = worldBinormal_2.z;
  tmpvar_23.z = worldNormal_4.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase.xyz + (h_39 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_41 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  tmpvar_31 = tmpvar_33;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_21;
  tmpvar_21 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_21.w;
  lowp vec4 color_22;
  color_22 = tmpvar_21;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_22.xyz);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_23;
  highp vec2 screenCoord_24;
  screenCoord_24 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_25;
  shadow_25 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_26;
    tmpvar_26 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_24);
    shadow_25 = tmpvar_26.x;
  };
  mediump vec3 tmpvar_27;
  tmpvar_27 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_27;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_28;
    mediump float tmpvar_29;
    tmpvar_29 = dot (tmpvar_27, vec3(0.299, 0.587, 0.114));
    gray_28 = tmpvar_29;
    highp vec2 tmpvar_30;
    tmpvar_30.y = 0.5;
    tmpvar_30.x = (gray_28 * _LightmapColorScale);
    lowp vec4 tmpvar_31;
    tmpvar_31 = texture2D (_LightmapColorChange, tmpvar_30);
    fc_9 = mix (((tmpvar_31 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_27, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_25))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_32 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_33;
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_38;
  highp mat3 tmpvar_39;
  tmpvar_39[0] = unity_MatrixV[0].xyz;
  tmpvar_39[1] = unity_MatrixV[1].xyz;
  tmpvar_39[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_39 * worldNorm_5);
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_41;
  tmpvar_41 = (tmpvar_40 - (2.0 * (
    dot (worldNorm_5, tmpvar_40)
   * worldNorm_5)));
  R_4 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = ((tmpvar_42.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MatCap, tmpvar_43);
  mc_3 = tmpvar_44;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_45;
    highp vec2 P_46;
    P_46 = ((tmpvar_43 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_45 = texture2D (_SpecularMap, P_46);
    mediump float tmpvar_47;
    tmpvar_47 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_45 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_47 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_32 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_48;
  mediump vec3 srcColor_49;
  srcColor_49 = colorBlendLightMap_8;
  tmpvar_48 = (xlv_COLOR1.xyz + (srcColor_49 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_48;
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = colorBlendLightMap_8;
  tmpvar_50.w = _BloomIntensity;
  tmpvar_1 = tmpvar_50;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_3 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.x;
  tmpvar_21.y = worldBinormal_1.x;
  tmpvar_21.z = worldNormal_3.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.y;
  tmpvar_22.y = worldBinormal_1.y;
  tmpvar_22.z = worldNormal_3.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_2.z;
  tmpvar_23.y = worldBinormal_1.z;
  tmpvar_23.z = worldNormal_3.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase2.xyz + (h_39 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_41 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams2.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams2.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase2.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor2.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  highp vec4 tmpvar_67;
  mediump float fogFactor_68;
  mediump vec3 fogColor_69;
  mediump vec3 heightFogColor_70;
  highp float HeightFogFactor_71;
  mediump vec3 atomesphereFogColor_72;
  mediump float h_73;
  highp float linearFogDensity_74;
  mediump float len_75;
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((len_75 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_74 = (tmpvar_77 * (2.0 - tmpvar_77));
  if ((len_75 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_74 = (linearFogDensity_74 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_78;
  tmpvar_78 = min (pow (linearFogDensity_74, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_74 = tmpvar_78;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_79 = tmpvar_80;
  h_73 = (tmpvar_79 * (2.0 - tmpvar_79));
  highp vec3 tmpvar_81;
  tmpvar_81 = (_HeigtFogColBase3.xyz + (h_73 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_72 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (atomesphereFogColor_72, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_75 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_72 = tmpvar_82;
  mediump float tmpvar_83;
  mediump float r_84;
  mediump float f_85;
  mediump float u_86;
  mediump float l_87;
  mediump float fogInt_88;
  fogInt_88 = 1.0;
  highp float tmpvar_89;
  tmpvar_89 = (_HeigtFogParams3.x * tmpvar_32.y);
  highp float tmpvar_90;
  tmpvar_90 = abs(tmpvar_89);
  if ((tmpvar_90 > 0.01)) {
    highp float tmpvar_91;
    tmpvar_91 = exp(-(tmpvar_89));
    fogInt_88 = ((1.0 - tmpvar_91) / tmpvar_89);
  };
  highp float tmpvar_92;
  tmpvar_92 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_87 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (l_87 * _HeigtFogParams3.y);
  u_86 = tmpvar_93;
  fogInt_88 = (fogInt_88 * u_86);
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = clamp (((l_87 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_94 = tmpvar_95;
  r_84 = (tmpvar_94 * (2.0 - tmpvar_94));
  r_84 = ((r_84 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_85 = ((1.0 - clamp (
    exp2(-(fogInt_88))
  , 0.0, 1.0)) * r_84);
  highp float tmpvar_96;
  tmpvar_96 = min (f_85, _HeigtFogColBase3.w);
  tmpvar_83 = tmpvar_96;
  HeightFogFactor_71 = tmpvar_83;
  highp vec3 tmpvar_97;
  tmpvar_97 = _Mihoyo_FogColor3.xyz;
  heightFogColor_70 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = ((heightFogColor_70 * HeightFogFactor_71) + ((atomesphereFogColor_72 * tmpvar_78) * (1.0 - HeightFogFactor_71)));
  fogColor_69 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((1.0 - tmpvar_78) * (1.0 - HeightFogFactor_71));
  fogFactor_68 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.xyz = fogColor_69;
  tmpvar_100.w = fogFactor_68;
  tmpvar_67 = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = mix (tmpvar_33, tmpvar_67, vec4(_LerpFactor));
  tmpvar_31 = tmpvar_101;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_21;
  tmpvar_21 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_21.w;
  lowp vec4 color_22;
  color_22 = tmpvar_21;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_22.xyz);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_23;
  highp vec2 screenCoord_24;
  screenCoord_24 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_25;
  shadow_25 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_26;
    tmpvar_26 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_24);
    shadow_25 = tmpvar_26.x;
  };
  mediump vec3 tmpvar_27;
  tmpvar_27 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_27;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_28;
    mediump float tmpvar_29;
    tmpvar_29 = dot (tmpvar_27, vec3(0.299, 0.587, 0.114));
    gray_28 = tmpvar_29;
    highp vec2 tmpvar_30;
    tmpvar_30.y = 0.5;
    tmpvar_30.x = (gray_28 * _LightmapColorScale);
    lowp vec4 tmpvar_31;
    tmpvar_31 = texture2D (_LightmapColorChange, tmpvar_30);
    fc_9 = mix (((tmpvar_31 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_27, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_25))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_32 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_33;
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_38;
  highp mat3 tmpvar_39;
  tmpvar_39[0] = unity_MatrixV[0].xyz;
  tmpvar_39[1] = unity_MatrixV[1].xyz;
  tmpvar_39[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_39 * worldNorm_5);
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_41;
  tmpvar_41 = (tmpvar_40 - (2.0 * (
    dot (worldNorm_5, tmpvar_40)
   * worldNorm_5)));
  R_4 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = ((tmpvar_42.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MatCap, tmpvar_43);
  mc_3 = tmpvar_44;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_45;
    highp vec2 P_46;
    P_46 = ((tmpvar_43 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_45 = texture2D (_SpecularMap, P_46);
    mediump float tmpvar_47;
    tmpvar_47 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_45 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_47 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_32 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_48;
  mediump vec3 srcColor_49;
  srcColor_49 = colorBlendLightMap_8;
  tmpvar_48 = (xlv_COLOR1.xyz + (srcColor_49 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_48;
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = colorBlendLightMap_8;
  tmpvar_50.w = _BloomIntensity;
  tmpvar_1 = tmpvar_50;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_3 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.x;
  tmpvar_21.y = worldBinormal_1.x;
  tmpvar_21.z = worldNormal_3.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.y;
  tmpvar_22.y = worldBinormal_1.y;
  tmpvar_22.z = worldNormal_3.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_2.z;
  tmpvar_23.y = worldBinormal_1.z;
  tmpvar_23.z = worldNormal_3.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase2.xyz + (h_39 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_41 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams2.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams2.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase2.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor2.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  highp vec4 tmpvar_67;
  mediump float fogFactor_68;
  mediump vec3 fogColor_69;
  mediump vec3 heightFogColor_70;
  highp float HeightFogFactor_71;
  mediump vec3 atomesphereFogColor_72;
  mediump float h_73;
  highp float linearFogDensity_74;
  mediump float len_75;
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((len_75 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_74 = (tmpvar_77 * (2.0 - tmpvar_77));
  if ((len_75 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_74 = (linearFogDensity_74 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_78;
  tmpvar_78 = min (pow (linearFogDensity_74, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_74 = tmpvar_78;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_79 = tmpvar_80;
  h_73 = (tmpvar_79 * (2.0 - tmpvar_79));
  highp vec3 tmpvar_81;
  tmpvar_81 = (_HeigtFogColBase3.xyz + (h_73 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_72 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (atomesphereFogColor_72, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_75 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_72 = tmpvar_82;
  mediump float tmpvar_83;
  mediump float r_84;
  mediump float f_85;
  mediump float u_86;
  mediump float l_87;
  mediump float fogInt_88;
  fogInt_88 = 1.0;
  highp float tmpvar_89;
  tmpvar_89 = (_HeigtFogParams3.x * tmpvar_32.y);
  highp float tmpvar_90;
  tmpvar_90 = abs(tmpvar_89);
  if ((tmpvar_90 > 0.01)) {
    highp float tmpvar_91;
    tmpvar_91 = exp(-(tmpvar_89));
    fogInt_88 = ((1.0 - tmpvar_91) / tmpvar_89);
  };
  highp float tmpvar_92;
  tmpvar_92 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_87 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (l_87 * _HeigtFogParams3.y);
  u_86 = tmpvar_93;
  fogInt_88 = (fogInt_88 * u_86);
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = clamp (((l_87 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_94 = tmpvar_95;
  r_84 = (tmpvar_94 * (2.0 - tmpvar_94));
  r_84 = ((r_84 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_85 = ((1.0 - clamp (
    exp2(-(fogInt_88))
  , 0.0, 1.0)) * r_84);
  highp float tmpvar_96;
  tmpvar_96 = min (f_85, _HeigtFogColBase3.w);
  tmpvar_83 = tmpvar_96;
  HeightFogFactor_71 = tmpvar_83;
  highp vec3 tmpvar_97;
  tmpvar_97 = _Mihoyo_FogColor3.xyz;
  heightFogColor_70 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = ((heightFogColor_70 * HeightFogFactor_71) + ((atomesphereFogColor_72 * tmpvar_78) * (1.0 - HeightFogFactor_71)));
  fogColor_69 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((1.0 - tmpvar_78) * (1.0 - HeightFogFactor_71));
  fogFactor_68 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.xyz = fogColor_69;
  tmpvar_100.w = fogFactor_68;
  tmpvar_67 = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = mix (tmpvar_33, tmpvar_67, vec4(_LerpFactor));
  tmpvar_31 = tmpvar_101;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_21;
  tmpvar_21 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_21.w;
  lowp vec4 color_22;
  color_22 = tmpvar_21;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_22.xyz);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_23;
  highp vec2 screenCoord_24;
  screenCoord_24 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_25;
  shadow_25 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_26;
    tmpvar_26 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_24);
    shadow_25 = tmpvar_26.x;
  };
  mediump vec3 tmpvar_27;
  tmpvar_27 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_27;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_28;
    mediump float tmpvar_29;
    tmpvar_29 = dot (tmpvar_27, vec3(0.299, 0.587, 0.114));
    gray_28 = tmpvar_29;
    highp vec2 tmpvar_30;
    tmpvar_30.y = 0.5;
    tmpvar_30.x = (gray_28 * _LightmapColorScale);
    lowp vec4 tmpvar_31;
    tmpvar_31 = texture2D (_LightmapColorChange, tmpvar_30);
    fc_9 = mix (((tmpvar_31 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_27, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_25))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_32 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_33;
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_38;
  highp mat3 tmpvar_39;
  tmpvar_39[0] = unity_MatrixV[0].xyz;
  tmpvar_39[1] = unity_MatrixV[1].xyz;
  tmpvar_39[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_39 * worldNorm_5);
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_41;
  tmpvar_41 = (tmpvar_40 - (2.0 * (
    dot (worldNorm_5, tmpvar_40)
   * worldNorm_5)));
  R_4 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = ((tmpvar_42.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MatCap, tmpvar_43);
  mc_3 = tmpvar_44;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_45;
    highp vec2 P_46;
    P_46 = ((tmpvar_43 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_45 = texture2D (_SpecularMap, P_46);
    mediump float tmpvar_47;
    tmpvar_47 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_45 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_47 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_32 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_48;
  mediump vec3 srcColor_49;
  srcColor_49 = colorBlendLightMap_8;
  tmpvar_48 = (xlv_COLOR1.xyz + (srcColor_49 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_48;
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = colorBlendLightMap_8;
  tmpvar_50.w = _BloomIntensity;
  tmpvar_1 = tmpvar_50;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_3 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.x;
  tmpvar_21.y = worldBinormal_1.x;
  tmpvar_21.z = worldNormal_3.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.y;
  tmpvar_22.y = worldBinormal_1.y;
  tmpvar_22.z = worldNormal_3.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_2.z;
  tmpvar_23.y = worldBinormal_1.z;
  tmpvar_23.z = worldNormal_3.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase2.xyz + (h_39 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_41 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams2.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams2.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase2.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor2.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  highp vec4 tmpvar_67;
  mediump float fogFactor_68;
  mediump vec3 fogColor_69;
  mediump vec3 heightFogColor_70;
  highp float HeightFogFactor_71;
  mediump vec3 atomesphereFogColor_72;
  mediump float h_73;
  highp float linearFogDensity_74;
  mediump float len_75;
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((len_75 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_74 = (tmpvar_77 * (2.0 - tmpvar_77));
  if ((len_75 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_74 = (linearFogDensity_74 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_78;
  tmpvar_78 = min (pow (linearFogDensity_74, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_74 = tmpvar_78;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_79 = tmpvar_80;
  h_73 = (tmpvar_79 * (2.0 - tmpvar_79));
  highp vec3 tmpvar_81;
  tmpvar_81 = (_HeigtFogColBase3.xyz + (h_73 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_72 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (atomesphereFogColor_72, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_75 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_72 = tmpvar_82;
  mediump float tmpvar_83;
  mediump float r_84;
  mediump float f_85;
  mediump float u_86;
  mediump float l_87;
  mediump float fogInt_88;
  fogInt_88 = 1.0;
  highp float tmpvar_89;
  tmpvar_89 = (_HeigtFogParams3.x * tmpvar_32.y);
  highp float tmpvar_90;
  tmpvar_90 = abs(tmpvar_89);
  if ((tmpvar_90 > 0.01)) {
    highp float tmpvar_91;
    tmpvar_91 = exp(-(tmpvar_89));
    fogInt_88 = ((1.0 - tmpvar_91) / tmpvar_89);
  };
  highp float tmpvar_92;
  tmpvar_92 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_87 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (l_87 * _HeigtFogParams3.y);
  u_86 = tmpvar_93;
  fogInt_88 = (fogInt_88 * u_86);
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = clamp (((l_87 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_94 = tmpvar_95;
  r_84 = (tmpvar_94 * (2.0 - tmpvar_94));
  r_84 = ((r_84 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_85 = ((1.0 - clamp (
    exp2(-(fogInt_88))
  , 0.0, 1.0)) * r_84);
  highp float tmpvar_96;
  tmpvar_96 = min (f_85, _HeigtFogColBase3.w);
  tmpvar_83 = tmpvar_96;
  HeightFogFactor_71 = tmpvar_83;
  highp vec3 tmpvar_97;
  tmpvar_97 = _Mihoyo_FogColor3.xyz;
  heightFogColor_70 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = ((heightFogColor_70 * HeightFogFactor_71) + ((atomesphereFogColor_72 * tmpvar_78) * (1.0 - HeightFogFactor_71)));
  fogColor_69 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((1.0 - tmpvar_78) * (1.0 - HeightFogFactor_71));
  fogFactor_68 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.xyz = fogColor_69;
  tmpvar_100.w = fogFactor_68;
  tmpvar_67 = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = mix (tmpvar_33, tmpvar_67, vec4(_LerpFactor));
  tmpvar_31 = tmpvar_101;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_21;
  tmpvar_21 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_21.w;
  lowp vec4 color_22;
  color_22 = tmpvar_21;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_22.xyz);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_23;
  highp vec2 screenCoord_24;
  screenCoord_24 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_25;
  shadow_25 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_26;
    tmpvar_26 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_24);
    shadow_25 = tmpvar_26.x;
  };
  mediump vec3 tmpvar_27;
  tmpvar_27 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_27;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_28;
    mediump float tmpvar_29;
    tmpvar_29 = dot (tmpvar_27, vec3(0.299, 0.587, 0.114));
    gray_28 = tmpvar_29;
    highp vec2 tmpvar_30;
    tmpvar_30.y = 0.5;
    tmpvar_30.x = (gray_28 * _LightmapColorScale);
    lowp vec4 tmpvar_31;
    tmpvar_31 = texture2D (_LightmapColorChange, tmpvar_30);
    fc_9 = mix (((tmpvar_31 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_27, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_25))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_32 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_33;
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_38;
  highp mat3 tmpvar_39;
  tmpvar_39[0] = unity_MatrixV[0].xyz;
  tmpvar_39[1] = unity_MatrixV[1].xyz;
  tmpvar_39[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_39 * worldNorm_5);
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_41;
  tmpvar_41 = (tmpvar_40 - (2.0 * (
    dot (worldNorm_5, tmpvar_40)
   * worldNorm_5)));
  R_4 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = ((tmpvar_42.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MatCap, tmpvar_43);
  mc_3 = tmpvar_44;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_45;
    highp vec2 P_46;
    P_46 = ((tmpvar_43 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_45 = texture2D (_SpecularMap, P_46);
    mediump float tmpvar_47;
    tmpvar_47 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_45 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_47 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_32 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_48;
  mediump vec3 srcColor_49;
  srcColor_49 = colorBlendLightMap_8;
  tmpvar_48 = (xlv_COLOR1.xyz + (srcColor_49 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_48;
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = colorBlendLightMap_8;
  tmpvar_50.w = _BloomIntensity;
  tmpvar_1 = tmpvar_50;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_4 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.x;
  tmpvar_21.y = worldBinormal_2.x;
  tmpvar_21.z = worldNormal_4.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.y;
  tmpvar_22.y = worldBinormal_2.y;
  tmpvar_22.z = worldNormal_4.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_3.z;
  tmpvar_23.y = worldBinormal_2.z;
  tmpvar_23.z = worldNormal_4.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase.xyz + (h_39 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_41 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  tmpvar_31 = tmpvar_33;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_22;
  highp vec2 screenCoord_23;
  screenCoord_23 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_24;
  shadow_24 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_25;
    tmpvar_25 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_23);
    shadow_24 = tmpvar_25.x;
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_26;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_27;
    mediump float tmpvar_28;
    tmpvar_28 = dot (tmpvar_26, vec3(0.299, 0.587, 0.114));
    gray_27 = tmpvar_28;
    highp vec2 tmpvar_29;
    tmpvar_29.y = 0.5;
    tmpvar_29.x = (gray_27 * _LightmapColorScale);
    lowp vec4 tmpvar_30;
    tmpvar_30 = texture2D (_LightmapColorChange, tmpvar_29);
    fc_9 = mix (((tmpvar_30 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_26, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_24))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_31 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_33;
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_37;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_MatrixV[0].xyz;
  tmpvar_38[1] = unity_MatrixV[1].xyz;
  tmpvar_38[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_38 * worldNorm_5);
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_39 - (2.0 * (
    dot (worldNorm_5, tmpvar_39)
   * worldNorm_5)));
  R_4 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = ((tmpvar_41.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatCap, tmpvar_42);
  mc_3 = tmpvar_43;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_44;
    highp vec2 P_45;
    P_45 = ((tmpvar_42 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_44 = texture2D (_SpecularMap, P_45);
    mediump float tmpvar_46;
    tmpvar_46 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_44 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_46 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_31 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_47;
  mediump vec3 srcColor_48;
  srcColor_48 = colorBlendLightMap_8;
  tmpvar_47 = (xlv_COLOR1.xyz + (srcColor_48 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_47;
  highp vec4 tmpvar_49;
  tmpvar_49.xyz = colorBlendLightMap_8;
  tmpvar_49.w = _BloomIntensity;
  tmpvar_1 = tmpvar_49;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_4 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.x;
  tmpvar_21.y = worldBinormal_2.x;
  tmpvar_21.z = worldNormal_4.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.y;
  tmpvar_22.y = worldBinormal_2.y;
  tmpvar_22.z = worldNormal_4.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_3.z;
  tmpvar_23.y = worldBinormal_2.z;
  tmpvar_23.z = worldNormal_4.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase.xyz + (h_39 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_41 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  tmpvar_31 = tmpvar_33;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_22;
  highp vec2 screenCoord_23;
  screenCoord_23 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_24;
  shadow_24 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_25;
    tmpvar_25 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_23);
    shadow_24 = tmpvar_25.x;
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_26;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_27;
    mediump float tmpvar_28;
    tmpvar_28 = dot (tmpvar_26, vec3(0.299, 0.587, 0.114));
    gray_27 = tmpvar_28;
    highp vec2 tmpvar_29;
    tmpvar_29.y = 0.5;
    tmpvar_29.x = (gray_27 * _LightmapColorScale);
    lowp vec4 tmpvar_30;
    tmpvar_30 = texture2D (_LightmapColorChange, tmpvar_29);
    fc_9 = mix (((tmpvar_30 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_26, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_24))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_31 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_33;
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_37;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_MatrixV[0].xyz;
  tmpvar_38[1] = unity_MatrixV[1].xyz;
  tmpvar_38[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_38 * worldNorm_5);
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_39 - (2.0 * (
    dot (worldNorm_5, tmpvar_39)
   * worldNorm_5)));
  R_4 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = ((tmpvar_41.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatCap, tmpvar_42);
  mc_3 = tmpvar_43;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_44;
    highp vec2 P_45;
    P_45 = ((tmpvar_42 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_44 = texture2D (_SpecularMap, P_45);
    mediump float tmpvar_46;
    tmpvar_46 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_44 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_46 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_31 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_47;
  mediump vec3 srcColor_48;
  srcColor_48 = colorBlendLightMap_8;
  tmpvar_47 = (xlv_COLOR1.xyz + (srcColor_48 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_47;
  highp vec4 tmpvar_49;
  tmpvar_49.xyz = colorBlendLightMap_8;
  tmpvar_49.w = _BloomIntensity;
  tmpvar_1 = tmpvar_49;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_4 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.x;
  tmpvar_21.y = worldBinormal_2.x;
  tmpvar_21.z = worldNormal_4.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.y;
  tmpvar_22.y = worldBinormal_2.y;
  tmpvar_22.z = worldNormal_4.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_3.z;
  tmpvar_23.y = worldBinormal_2.z;
  tmpvar_23.z = worldNormal_4.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase.xyz + (h_39 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_41 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  tmpvar_31 = tmpvar_33;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_22;
  highp vec2 screenCoord_23;
  screenCoord_23 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_24;
  shadow_24 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_25;
    tmpvar_25 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_23);
    shadow_24 = tmpvar_25.x;
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_26;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_27;
    mediump float tmpvar_28;
    tmpvar_28 = dot (tmpvar_26, vec3(0.299, 0.587, 0.114));
    gray_27 = tmpvar_28;
    highp vec2 tmpvar_29;
    tmpvar_29.y = 0.5;
    tmpvar_29.x = (gray_27 * _LightmapColorScale);
    lowp vec4 tmpvar_30;
    tmpvar_30 = texture2D (_LightmapColorChange, tmpvar_29);
    fc_9 = mix (((tmpvar_30 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_26, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_24))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_31 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_33;
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_37;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_MatrixV[0].xyz;
  tmpvar_38[1] = unity_MatrixV[1].xyz;
  tmpvar_38[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_38 * worldNorm_5);
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_39 - (2.0 * (
    dot (worldNorm_5, tmpvar_39)
   * worldNorm_5)));
  R_4 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = ((tmpvar_41.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatCap, tmpvar_42);
  mc_3 = tmpvar_43;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_44;
    highp vec2 P_45;
    P_45 = ((tmpvar_42 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_44 = texture2D (_SpecularMap, P_45);
    mediump float tmpvar_46;
    tmpvar_46 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_44 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_46 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_31 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_47;
  mediump vec3 srcColor_48;
  srcColor_48 = colorBlendLightMap_8;
  tmpvar_47 = (xlv_COLOR1.xyz + (srcColor_48 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_47;
  highp vec4 tmpvar_49;
  tmpvar_49.xyz = colorBlendLightMap_8;
  tmpvar_49.w = _BloomIntensity;
  tmpvar_1 = tmpvar_49;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_3 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.x;
  tmpvar_21.y = worldBinormal_1.x;
  tmpvar_21.z = worldNormal_3.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.y;
  tmpvar_22.y = worldBinormal_1.y;
  tmpvar_22.z = worldNormal_3.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_2.z;
  tmpvar_23.y = worldBinormal_1.z;
  tmpvar_23.z = worldNormal_3.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase2.xyz + (h_39 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_41 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams2.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams2.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase2.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor2.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  highp vec4 tmpvar_67;
  mediump float fogFactor_68;
  mediump vec3 fogColor_69;
  mediump vec3 heightFogColor_70;
  highp float HeightFogFactor_71;
  mediump vec3 atomesphereFogColor_72;
  mediump float h_73;
  highp float linearFogDensity_74;
  mediump float len_75;
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((len_75 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_74 = (tmpvar_77 * (2.0 - tmpvar_77));
  if ((len_75 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_74 = (linearFogDensity_74 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_78;
  tmpvar_78 = min (pow (linearFogDensity_74, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_74 = tmpvar_78;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_79 = tmpvar_80;
  h_73 = (tmpvar_79 * (2.0 - tmpvar_79));
  highp vec3 tmpvar_81;
  tmpvar_81 = (_HeigtFogColBase3.xyz + (h_73 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_72 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (atomesphereFogColor_72, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_75 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_72 = tmpvar_82;
  mediump float tmpvar_83;
  mediump float r_84;
  mediump float f_85;
  mediump float u_86;
  mediump float l_87;
  mediump float fogInt_88;
  fogInt_88 = 1.0;
  highp float tmpvar_89;
  tmpvar_89 = (_HeigtFogParams3.x * tmpvar_32.y);
  highp float tmpvar_90;
  tmpvar_90 = abs(tmpvar_89);
  if ((tmpvar_90 > 0.01)) {
    highp float tmpvar_91;
    tmpvar_91 = exp(-(tmpvar_89));
    fogInt_88 = ((1.0 - tmpvar_91) / tmpvar_89);
  };
  highp float tmpvar_92;
  tmpvar_92 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_87 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (l_87 * _HeigtFogParams3.y);
  u_86 = tmpvar_93;
  fogInt_88 = (fogInt_88 * u_86);
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = clamp (((l_87 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_94 = tmpvar_95;
  r_84 = (tmpvar_94 * (2.0 - tmpvar_94));
  r_84 = ((r_84 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_85 = ((1.0 - clamp (
    exp2(-(fogInt_88))
  , 0.0, 1.0)) * r_84);
  highp float tmpvar_96;
  tmpvar_96 = min (f_85, _HeigtFogColBase3.w);
  tmpvar_83 = tmpvar_96;
  HeightFogFactor_71 = tmpvar_83;
  highp vec3 tmpvar_97;
  tmpvar_97 = _Mihoyo_FogColor3.xyz;
  heightFogColor_70 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = ((heightFogColor_70 * HeightFogFactor_71) + ((atomesphereFogColor_72 * tmpvar_78) * (1.0 - HeightFogFactor_71)));
  fogColor_69 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((1.0 - tmpvar_78) * (1.0 - HeightFogFactor_71));
  fogFactor_68 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.xyz = fogColor_69;
  tmpvar_100.w = fogFactor_68;
  tmpvar_67 = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = mix (tmpvar_33, tmpvar_67, vec4(_LerpFactor));
  tmpvar_31 = tmpvar_101;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_22;
  highp vec2 screenCoord_23;
  screenCoord_23 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_24;
  shadow_24 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_25;
    tmpvar_25 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_23);
    shadow_24 = tmpvar_25.x;
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_26;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_27;
    mediump float tmpvar_28;
    tmpvar_28 = dot (tmpvar_26, vec3(0.299, 0.587, 0.114));
    gray_27 = tmpvar_28;
    highp vec2 tmpvar_29;
    tmpvar_29.y = 0.5;
    tmpvar_29.x = (gray_27 * _LightmapColorScale);
    lowp vec4 tmpvar_30;
    tmpvar_30 = texture2D (_LightmapColorChange, tmpvar_29);
    fc_9 = mix (((tmpvar_30 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_26, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_24))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_31 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_33;
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_37;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_MatrixV[0].xyz;
  tmpvar_38[1] = unity_MatrixV[1].xyz;
  tmpvar_38[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_38 * worldNorm_5);
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_39 - (2.0 * (
    dot (worldNorm_5, tmpvar_39)
   * worldNorm_5)));
  R_4 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = ((tmpvar_41.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatCap, tmpvar_42);
  mc_3 = tmpvar_43;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_44;
    highp vec2 P_45;
    P_45 = ((tmpvar_42 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_44 = texture2D (_SpecularMap, P_45);
    mediump float tmpvar_46;
    tmpvar_46 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_44 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_46 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_31 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_47;
  mediump vec3 srcColor_48;
  srcColor_48 = colorBlendLightMap_8;
  tmpvar_47 = (xlv_COLOR1.xyz + (srcColor_48 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_47;
  highp vec4 tmpvar_49;
  tmpvar_49.xyz = colorBlendLightMap_8;
  tmpvar_49.w = _BloomIntensity;
  tmpvar_1 = tmpvar_49;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_3 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.x;
  tmpvar_21.y = worldBinormal_1.x;
  tmpvar_21.z = worldNormal_3.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.y;
  tmpvar_22.y = worldBinormal_1.y;
  tmpvar_22.z = worldNormal_3.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_2.z;
  tmpvar_23.y = worldBinormal_1.z;
  tmpvar_23.z = worldNormal_3.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase2.xyz + (h_39 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_41 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams2.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams2.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase2.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor2.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  highp vec4 tmpvar_67;
  mediump float fogFactor_68;
  mediump vec3 fogColor_69;
  mediump vec3 heightFogColor_70;
  highp float HeightFogFactor_71;
  mediump vec3 atomesphereFogColor_72;
  mediump float h_73;
  highp float linearFogDensity_74;
  mediump float len_75;
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((len_75 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_74 = (tmpvar_77 * (2.0 - tmpvar_77));
  if ((len_75 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_74 = (linearFogDensity_74 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_78;
  tmpvar_78 = min (pow (linearFogDensity_74, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_74 = tmpvar_78;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_79 = tmpvar_80;
  h_73 = (tmpvar_79 * (2.0 - tmpvar_79));
  highp vec3 tmpvar_81;
  tmpvar_81 = (_HeigtFogColBase3.xyz + (h_73 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_72 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (atomesphereFogColor_72, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_75 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_72 = tmpvar_82;
  mediump float tmpvar_83;
  mediump float r_84;
  mediump float f_85;
  mediump float u_86;
  mediump float l_87;
  mediump float fogInt_88;
  fogInt_88 = 1.0;
  highp float tmpvar_89;
  tmpvar_89 = (_HeigtFogParams3.x * tmpvar_32.y);
  highp float tmpvar_90;
  tmpvar_90 = abs(tmpvar_89);
  if ((tmpvar_90 > 0.01)) {
    highp float tmpvar_91;
    tmpvar_91 = exp(-(tmpvar_89));
    fogInt_88 = ((1.0 - tmpvar_91) / tmpvar_89);
  };
  highp float tmpvar_92;
  tmpvar_92 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_87 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (l_87 * _HeigtFogParams3.y);
  u_86 = tmpvar_93;
  fogInt_88 = (fogInt_88 * u_86);
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = clamp (((l_87 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_94 = tmpvar_95;
  r_84 = (tmpvar_94 * (2.0 - tmpvar_94));
  r_84 = ((r_84 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_85 = ((1.0 - clamp (
    exp2(-(fogInt_88))
  , 0.0, 1.0)) * r_84);
  highp float tmpvar_96;
  tmpvar_96 = min (f_85, _HeigtFogColBase3.w);
  tmpvar_83 = tmpvar_96;
  HeightFogFactor_71 = tmpvar_83;
  highp vec3 tmpvar_97;
  tmpvar_97 = _Mihoyo_FogColor3.xyz;
  heightFogColor_70 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = ((heightFogColor_70 * HeightFogFactor_71) + ((atomesphereFogColor_72 * tmpvar_78) * (1.0 - HeightFogFactor_71)));
  fogColor_69 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((1.0 - tmpvar_78) * (1.0 - HeightFogFactor_71));
  fogFactor_68 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.xyz = fogColor_69;
  tmpvar_100.w = fogFactor_68;
  tmpvar_67 = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = mix (tmpvar_33, tmpvar_67, vec4(_LerpFactor));
  tmpvar_31 = tmpvar_101;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_22;
  highp vec2 screenCoord_23;
  screenCoord_23 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_24;
  shadow_24 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_25;
    tmpvar_25 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_23);
    shadow_24 = tmpvar_25.x;
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_26;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_27;
    mediump float tmpvar_28;
    tmpvar_28 = dot (tmpvar_26, vec3(0.299, 0.587, 0.114));
    gray_27 = tmpvar_28;
    highp vec2 tmpvar_29;
    tmpvar_29.y = 0.5;
    tmpvar_29.x = (gray_27 * _LightmapColorScale);
    lowp vec4 tmpvar_30;
    tmpvar_30 = texture2D (_LightmapColorChange, tmpvar_29);
    fc_9 = mix (((tmpvar_30 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_26, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_24))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_31 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_33;
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_37;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_MatrixV[0].xyz;
  tmpvar_38[1] = unity_MatrixV[1].xyz;
  tmpvar_38[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_38 * worldNorm_5);
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_39 - (2.0 * (
    dot (worldNorm_5, tmpvar_39)
   * worldNorm_5)));
  R_4 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = ((tmpvar_41.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatCap, tmpvar_42);
  mc_3 = tmpvar_43;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_44;
    highp vec2 P_45;
    P_45 = ((tmpvar_42 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_44 = texture2D (_SpecularMap, P_45);
    mediump float tmpvar_46;
    tmpvar_46 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_44 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_46 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_31 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_47;
  mediump vec3 srcColor_48;
  srcColor_48 = colorBlendLightMap_8;
  tmpvar_47 = (xlv_COLOR1.xyz + (srcColor_48 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_47;
  highp vec4 tmpvar_49;
  tmpvar_49.xyz = colorBlendLightMap_8;
  tmpvar_49.w = _BloomIntensity;
  tmpvar_1 = tmpvar_49;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_3 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.x;
  tmpvar_21.y = worldBinormal_1.x;
  tmpvar_21.z = worldNormal_3.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.y;
  tmpvar_22.y = worldBinormal_1.y;
  tmpvar_22.z = worldNormal_3.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_2.z;
  tmpvar_23.y = worldBinormal_1.z;
  tmpvar_23.z = worldNormal_3.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase2.xyz + (h_39 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_41 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams2.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams2.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase2.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor2.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  highp vec4 tmpvar_67;
  mediump float fogFactor_68;
  mediump vec3 fogColor_69;
  mediump vec3 heightFogColor_70;
  highp float HeightFogFactor_71;
  mediump vec3 atomesphereFogColor_72;
  mediump float h_73;
  highp float linearFogDensity_74;
  mediump float len_75;
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((len_75 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_74 = (tmpvar_77 * (2.0 - tmpvar_77));
  if ((len_75 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_74 = (linearFogDensity_74 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_78;
  tmpvar_78 = min (pow (linearFogDensity_74, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_74 = tmpvar_78;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_79 = tmpvar_80;
  h_73 = (tmpvar_79 * (2.0 - tmpvar_79));
  highp vec3 tmpvar_81;
  tmpvar_81 = (_HeigtFogColBase3.xyz + (h_73 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_72 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (atomesphereFogColor_72, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_75 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_72 = tmpvar_82;
  mediump float tmpvar_83;
  mediump float r_84;
  mediump float f_85;
  mediump float u_86;
  mediump float l_87;
  mediump float fogInt_88;
  fogInt_88 = 1.0;
  highp float tmpvar_89;
  tmpvar_89 = (_HeigtFogParams3.x * tmpvar_32.y);
  highp float tmpvar_90;
  tmpvar_90 = abs(tmpvar_89);
  if ((tmpvar_90 > 0.01)) {
    highp float tmpvar_91;
    tmpvar_91 = exp(-(tmpvar_89));
    fogInt_88 = ((1.0 - tmpvar_91) / tmpvar_89);
  };
  highp float tmpvar_92;
  tmpvar_92 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_87 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (l_87 * _HeigtFogParams3.y);
  u_86 = tmpvar_93;
  fogInt_88 = (fogInt_88 * u_86);
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = clamp (((l_87 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_94 = tmpvar_95;
  r_84 = (tmpvar_94 * (2.0 - tmpvar_94));
  r_84 = ((r_84 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_85 = ((1.0 - clamp (
    exp2(-(fogInt_88))
  , 0.0, 1.0)) * r_84);
  highp float tmpvar_96;
  tmpvar_96 = min (f_85, _HeigtFogColBase3.w);
  tmpvar_83 = tmpvar_96;
  HeightFogFactor_71 = tmpvar_83;
  highp vec3 tmpvar_97;
  tmpvar_97 = _Mihoyo_FogColor3.xyz;
  heightFogColor_70 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = ((heightFogColor_70 * HeightFogFactor_71) + ((atomesphereFogColor_72 * tmpvar_78) * (1.0 - HeightFogFactor_71)));
  fogColor_69 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((1.0 - tmpvar_78) * (1.0 - HeightFogFactor_71));
  fogFactor_68 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.xyz = fogColor_69;
  tmpvar_100.w = fogFactor_68;
  tmpvar_67 = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = mix (tmpvar_33, tmpvar_67, vec4(_LerpFactor));
  tmpvar_31 = tmpvar_101;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_22;
  highp vec2 screenCoord_23;
  screenCoord_23 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_24;
  shadow_24 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_25;
    tmpvar_25 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_23);
    shadow_24 = tmpvar_25.x;
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_26;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_27;
    mediump float tmpvar_28;
    tmpvar_28 = dot (tmpvar_26, vec3(0.299, 0.587, 0.114));
    gray_27 = tmpvar_28;
    highp vec2 tmpvar_29;
    tmpvar_29.y = 0.5;
    tmpvar_29.x = (gray_27 * _LightmapColorScale);
    lowp vec4 tmpvar_30;
    tmpvar_30 = texture2D (_LightmapColorChange, tmpvar_29);
    fc_9 = mix (((tmpvar_30 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_26, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_24))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_31 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_33;
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_37;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_MatrixV[0].xyz;
  tmpvar_38[1] = unity_MatrixV[1].xyz;
  tmpvar_38[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_38 * worldNorm_5);
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_39 - (2.0 * (
    dot (worldNorm_5, tmpvar_39)
   * worldNorm_5)));
  R_4 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = ((tmpvar_41.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatCap, tmpvar_42);
  mc_3 = tmpvar_43;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_44;
    highp vec2 P_45;
    P_45 = ((tmpvar_42 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_44 = texture2D (_SpecularMap, P_45);
    mediump float tmpvar_46;
    tmpvar_46 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_44 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_46 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_31 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_47;
  mediump vec3 srcColor_48;
  srcColor_48 = colorBlendLightMap_8;
  tmpvar_47 = (xlv_COLOR1.xyz + (srcColor_48 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_47;
  highp vec4 tmpvar_49;
  tmpvar_49.xyz = colorBlendLightMap_8;
  tmpvar_49.w = _BloomIntensity;
  tmpvar_1 = tmpvar_49;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_4 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.x;
  tmpvar_21.y = worldBinormal_2.x;
  tmpvar_21.z = worldNormal_4.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.y;
  tmpvar_22.y = worldBinormal_2.y;
  tmpvar_22.z = worldNormal_4.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_3.z;
  tmpvar_23.y = worldBinormal_2.z;
  tmpvar_23.z = worldNormal_4.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase.xyz + (h_39 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_41 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  tmpvar_31 = tmpvar_33;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_21;
  vpos_21 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_21.y = ((fract(vpos_21.y) * 0.0625) + unity_LODFade.y);
  lowp float x_22;
  x_22 = (texture2D (_DitherMaskLOD2D, vpos_21).w - 0.5);
  if ((x_22 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_23.w;
  lowp vec4 color_24;
  color_24 = tmpvar_23;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_24.xyz);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_25;
  highp vec2 screenCoord_26;
  screenCoord_26 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_27;
  shadow_27 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_28;
    tmpvar_28 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_26);
    shadow_27 = tmpvar_28.x;
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_29;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_30;
    mediump float tmpvar_31;
    tmpvar_31 = dot (tmpvar_29, vec3(0.299, 0.587, 0.114));
    gray_30 = tmpvar_31;
    highp vec2 tmpvar_32;
    tmpvar_32.y = 0.5;
    tmpvar_32.x = (gray_30 * _LightmapColorScale);
    lowp vec4 tmpvar_33;
    tmpvar_33 = texture2D (_LightmapColorChange, tmpvar_32);
    fc_9 = mix (((tmpvar_33 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_29, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_27))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_34 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_35;
  lowp vec3 tmpvar_36;
  tmpvar_36 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_40;
  highp mat3 tmpvar_41;
  tmpvar_41[0] = unity_MatrixV[0].xyz;
  tmpvar_41[1] = unity_MatrixV[1].xyz;
  tmpvar_41[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_41 * worldNorm_5);
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_43;
  tmpvar_43 = (tmpvar_42 - (2.0 * (
    dot (worldNorm_5, tmpvar_42)
   * worldNorm_5)));
  R_4 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = ((tmpvar_44.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_MatCap, tmpvar_45);
  mc_3 = tmpvar_46;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_47;
    highp vec2 P_48;
    P_48 = ((tmpvar_45 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_47 = texture2D (_SpecularMap, P_48);
    mediump float tmpvar_49;
    tmpvar_49 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_47 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_49 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_34 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_50;
  mediump vec3 srcColor_51;
  srcColor_51 = colorBlendLightMap_8;
  tmpvar_50 = (xlv_COLOR1.xyz + (srcColor_51 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_50;
  highp vec4 tmpvar_52;
  tmpvar_52.xyz = colorBlendLightMap_8;
  tmpvar_52.w = _BloomIntensity;
  tmpvar_1 = tmpvar_52;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_4 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.x;
  tmpvar_21.y = worldBinormal_2.x;
  tmpvar_21.z = worldNormal_4.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.y;
  tmpvar_22.y = worldBinormal_2.y;
  tmpvar_22.z = worldNormal_4.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_3.z;
  tmpvar_23.y = worldBinormal_2.z;
  tmpvar_23.z = worldNormal_4.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase.xyz + (h_39 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_41 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  tmpvar_31 = tmpvar_33;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_21;
  vpos_21 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_21.y = ((fract(vpos_21.y) * 0.0625) + unity_LODFade.y);
  lowp float x_22;
  x_22 = (texture2D (_DitherMaskLOD2D, vpos_21).w - 0.5);
  if ((x_22 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_23.w;
  lowp vec4 color_24;
  color_24 = tmpvar_23;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_24.xyz);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_25;
  highp vec2 screenCoord_26;
  screenCoord_26 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_27;
  shadow_27 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_28;
    tmpvar_28 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_26);
    shadow_27 = tmpvar_28.x;
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_29;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_30;
    mediump float tmpvar_31;
    tmpvar_31 = dot (tmpvar_29, vec3(0.299, 0.587, 0.114));
    gray_30 = tmpvar_31;
    highp vec2 tmpvar_32;
    tmpvar_32.y = 0.5;
    tmpvar_32.x = (gray_30 * _LightmapColorScale);
    lowp vec4 tmpvar_33;
    tmpvar_33 = texture2D (_LightmapColorChange, tmpvar_32);
    fc_9 = mix (((tmpvar_33 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_29, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_27))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_34 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_35;
  lowp vec3 tmpvar_36;
  tmpvar_36 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_40;
  highp mat3 tmpvar_41;
  tmpvar_41[0] = unity_MatrixV[0].xyz;
  tmpvar_41[1] = unity_MatrixV[1].xyz;
  tmpvar_41[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_41 * worldNorm_5);
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_43;
  tmpvar_43 = (tmpvar_42 - (2.0 * (
    dot (worldNorm_5, tmpvar_42)
   * worldNorm_5)));
  R_4 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = ((tmpvar_44.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_MatCap, tmpvar_45);
  mc_3 = tmpvar_46;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_47;
    highp vec2 P_48;
    P_48 = ((tmpvar_45 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_47 = texture2D (_SpecularMap, P_48);
    mediump float tmpvar_49;
    tmpvar_49 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_47 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_49 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_34 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_50;
  mediump vec3 srcColor_51;
  srcColor_51 = colorBlendLightMap_8;
  tmpvar_50 = (xlv_COLOR1.xyz + (srcColor_51 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_50;
  highp vec4 tmpvar_52;
  tmpvar_52.xyz = colorBlendLightMap_8;
  tmpvar_52.w = _BloomIntensity;
  tmpvar_1 = tmpvar_52;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_4 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.x;
  tmpvar_21.y = worldBinormal_2.x;
  tmpvar_21.z = worldNormal_4.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.y;
  tmpvar_22.y = worldBinormal_2.y;
  tmpvar_22.z = worldNormal_4.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_3.z;
  tmpvar_23.y = worldBinormal_2.z;
  tmpvar_23.z = worldNormal_4.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase.xyz + (h_39 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_41 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  tmpvar_31 = tmpvar_33;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_21;
  vpos_21 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_21.y = ((fract(vpos_21.y) * 0.0625) + unity_LODFade.y);
  lowp float x_22;
  x_22 = (texture2D (_DitherMaskLOD2D, vpos_21).w - 0.5);
  if ((x_22 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_23.w;
  lowp vec4 color_24;
  color_24 = tmpvar_23;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_24.xyz);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_25;
  highp vec2 screenCoord_26;
  screenCoord_26 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_27;
  shadow_27 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_28;
    tmpvar_28 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_26);
    shadow_27 = tmpvar_28.x;
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_29;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_30;
    mediump float tmpvar_31;
    tmpvar_31 = dot (tmpvar_29, vec3(0.299, 0.587, 0.114));
    gray_30 = tmpvar_31;
    highp vec2 tmpvar_32;
    tmpvar_32.y = 0.5;
    tmpvar_32.x = (gray_30 * _LightmapColorScale);
    lowp vec4 tmpvar_33;
    tmpvar_33 = texture2D (_LightmapColorChange, tmpvar_32);
    fc_9 = mix (((tmpvar_33 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_29, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_27))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_34 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_35;
  lowp vec3 tmpvar_36;
  tmpvar_36 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_40;
  highp mat3 tmpvar_41;
  tmpvar_41[0] = unity_MatrixV[0].xyz;
  tmpvar_41[1] = unity_MatrixV[1].xyz;
  tmpvar_41[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_41 * worldNorm_5);
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_43;
  tmpvar_43 = (tmpvar_42 - (2.0 * (
    dot (worldNorm_5, tmpvar_42)
   * worldNorm_5)));
  R_4 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = ((tmpvar_44.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_MatCap, tmpvar_45);
  mc_3 = tmpvar_46;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_47;
    highp vec2 P_48;
    P_48 = ((tmpvar_45 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_47 = texture2D (_SpecularMap, P_48);
    mediump float tmpvar_49;
    tmpvar_49 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_47 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_49 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_34 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_50;
  mediump vec3 srcColor_51;
  srcColor_51 = colorBlendLightMap_8;
  tmpvar_50 = (xlv_COLOR1.xyz + (srcColor_51 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_50;
  highp vec4 tmpvar_52;
  tmpvar_52.xyz = colorBlendLightMap_8;
  tmpvar_52.w = _BloomIntensity;
  tmpvar_1 = tmpvar_52;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_3 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.x;
  tmpvar_21.y = worldBinormal_1.x;
  tmpvar_21.z = worldNormal_3.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.y;
  tmpvar_22.y = worldBinormal_1.y;
  tmpvar_22.z = worldNormal_3.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_2.z;
  tmpvar_23.y = worldBinormal_1.z;
  tmpvar_23.z = worldNormal_3.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase2.xyz + (h_39 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_41 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams2.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams2.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase2.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor2.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  highp vec4 tmpvar_67;
  mediump float fogFactor_68;
  mediump vec3 fogColor_69;
  mediump vec3 heightFogColor_70;
  highp float HeightFogFactor_71;
  mediump vec3 atomesphereFogColor_72;
  mediump float h_73;
  highp float linearFogDensity_74;
  mediump float len_75;
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((len_75 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_74 = (tmpvar_77 * (2.0 - tmpvar_77));
  if ((len_75 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_74 = (linearFogDensity_74 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_78;
  tmpvar_78 = min (pow (linearFogDensity_74, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_74 = tmpvar_78;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_79 = tmpvar_80;
  h_73 = (tmpvar_79 * (2.0 - tmpvar_79));
  highp vec3 tmpvar_81;
  tmpvar_81 = (_HeigtFogColBase3.xyz + (h_73 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_72 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (atomesphereFogColor_72, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_75 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_72 = tmpvar_82;
  mediump float tmpvar_83;
  mediump float r_84;
  mediump float f_85;
  mediump float u_86;
  mediump float l_87;
  mediump float fogInt_88;
  fogInt_88 = 1.0;
  highp float tmpvar_89;
  tmpvar_89 = (_HeigtFogParams3.x * tmpvar_32.y);
  highp float tmpvar_90;
  tmpvar_90 = abs(tmpvar_89);
  if ((tmpvar_90 > 0.01)) {
    highp float tmpvar_91;
    tmpvar_91 = exp(-(tmpvar_89));
    fogInt_88 = ((1.0 - tmpvar_91) / tmpvar_89);
  };
  highp float tmpvar_92;
  tmpvar_92 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_87 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (l_87 * _HeigtFogParams3.y);
  u_86 = tmpvar_93;
  fogInt_88 = (fogInt_88 * u_86);
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = clamp (((l_87 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_94 = tmpvar_95;
  r_84 = (tmpvar_94 * (2.0 - tmpvar_94));
  r_84 = ((r_84 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_85 = ((1.0 - clamp (
    exp2(-(fogInt_88))
  , 0.0, 1.0)) * r_84);
  highp float tmpvar_96;
  tmpvar_96 = min (f_85, _HeigtFogColBase3.w);
  tmpvar_83 = tmpvar_96;
  HeightFogFactor_71 = tmpvar_83;
  highp vec3 tmpvar_97;
  tmpvar_97 = _Mihoyo_FogColor3.xyz;
  heightFogColor_70 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = ((heightFogColor_70 * HeightFogFactor_71) + ((atomesphereFogColor_72 * tmpvar_78) * (1.0 - HeightFogFactor_71)));
  fogColor_69 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((1.0 - tmpvar_78) * (1.0 - HeightFogFactor_71));
  fogFactor_68 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.xyz = fogColor_69;
  tmpvar_100.w = fogFactor_68;
  tmpvar_67 = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = mix (tmpvar_33, tmpvar_67, vec4(_LerpFactor));
  tmpvar_31 = tmpvar_101;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_21;
  vpos_21 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_21.y = ((fract(vpos_21.y) * 0.0625) + unity_LODFade.y);
  lowp float x_22;
  x_22 = (texture2D (_DitherMaskLOD2D, vpos_21).w - 0.5);
  if ((x_22 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_23.w;
  lowp vec4 color_24;
  color_24 = tmpvar_23;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_24.xyz);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_25;
  highp vec2 screenCoord_26;
  screenCoord_26 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_27;
  shadow_27 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_28;
    tmpvar_28 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_26);
    shadow_27 = tmpvar_28.x;
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_29;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_30;
    mediump float tmpvar_31;
    tmpvar_31 = dot (tmpvar_29, vec3(0.299, 0.587, 0.114));
    gray_30 = tmpvar_31;
    highp vec2 tmpvar_32;
    tmpvar_32.y = 0.5;
    tmpvar_32.x = (gray_30 * _LightmapColorScale);
    lowp vec4 tmpvar_33;
    tmpvar_33 = texture2D (_LightmapColorChange, tmpvar_32);
    fc_9 = mix (((tmpvar_33 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_29, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_27))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_34 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_35;
  lowp vec3 tmpvar_36;
  tmpvar_36 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_40;
  highp mat3 tmpvar_41;
  tmpvar_41[0] = unity_MatrixV[0].xyz;
  tmpvar_41[1] = unity_MatrixV[1].xyz;
  tmpvar_41[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_41 * worldNorm_5);
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_43;
  tmpvar_43 = (tmpvar_42 - (2.0 * (
    dot (worldNorm_5, tmpvar_42)
   * worldNorm_5)));
  R_4 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = ((tmpvar_44.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_MatCap, tmpvar_45);
  mc_3 = tmpvar_46;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_47;
    highp vec2 P_48;
    P_48 = ((tmpvar_45 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_47 = texture2D (_SpecularMap, P_48);
    mediump float tmpvar_49;
    tmpvar_49 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_47 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_49 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_34 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_50;
  mediump vec3 srcColor_51;
  srcColor_51 = colorBlendLightMap_8;
  tmpvar_50 = (xlv_COLOR1.xyz + (srcColor_51 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_50;
  highp vec4 tmpvar_52;
  tmpvar_52.xyz = colorBlendLightMap_8;
  tmpvar_52.w = _BloomIntensity;
  tmpvar_1 = tmpvar_52;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_3 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.x;
  tmpvar_21.y = worldBinormal_1.x;
  tmpvar_21.z = worldNormal_3.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.y;
  tmpvar_22.y = worldBinormal_1.y;
  tmpvar_22.z = worldNormal_3.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_2.z;
  tmpvar_23.y = worldBinormal_1.z;
  tmpvar_23.z = worldNormal_3.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase2.xyz + (h_39 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_41 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams2.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams2.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase2.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor2.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  highp vec4 tmpvar_67;
  mediump float fogFactor_68;
  mediump vec3 fogColor_69;
  mediump vec3 heightFogColor_70;
  highp float HeightFogFactor_71;
  mediump vec3 atomesphereFogColor_72;
  mediump float h_73;
  highp float linearFogDensity_74;
  mediump float len_75;
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((len_75 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_74 = (tmpvar_77 * (2.0 - tmpvar_77));
  if ((len_75 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_74 = (linearFogDensity_74 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_78;
  tmpvar_78 = min (pow (linearFogDensity_74, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_74 = tmpvar_78;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_79 = tmpvar_80;
  h_73 = (tmpvar_79 * (2.0 - tmpvar_79));
  highp vec3 tmpvar_81;
  tmpvar_81 = (_HeigtFogColBase3.xyz + (h_73 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_72 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (atomesphereFogColor_72, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_75 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_72 = tmpvar_82;
  mediump float tmpvar_83;
  mediump float r_84;
  mediump float f_85;
  mediump float u_86;
  mediump float l_87;
  mediump float fogInt_88;
  fogInt_88 = 1.0;
  highp float tmpvar_89;
  tmpvar_89 = (_HeigtFogParams3.x * tmpvar_32.y);
  highp float tmpvar_90;
  tmpvar_90 = abs(tmpvar_89);
  if ((tmpvar_90 > 0.01)) {
    highp float tmpvar_91;
    tmpvar_91 = exp(-(tmpvar_89));
    fogInt_88 = ((1.0 - tmpvar_91) / tmpvar_89);
  };
  highp float tmpvar_92;
  tmpvar_92 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_87 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (l_87 * _HeigtFogParams3.y);
  u_86 = tmpvar_93;
  fogInt_88 = (fogInt_88 * u_86);
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = clamp (((l_87 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_94 = tmpvar_95;
  r_84 = (tmpvar_94 * (2.0 - tmpvar_94));
  r_84 = ((r_84 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_85 = ((1.0 - clamp (
    exp2(-(fogInt_88))
  , 0.0, 1.0)) * r_84);
  highp float tmpvar_96;
  tmpvar_96 = min (f_85, _HeigtFogColBase3.w);
  tmpvar_83 = tmpvar_96;
  HeightFogFactor_71 = tmpvar_83;
  highp vec3 tmpvar_97;
  tmpvar_97 = _Mihoyo_FogColor3.xyz;
  heightFogColor_70 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = ((heightFogColor_70 * HeightFogFactor_71) + ((atomesphereFogColor_72 * tmpvar_78) * (1.0 - HeightFogFactor_71)));
  fogColor_69 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((1.0 - tmpvar_78) * (1.0 - HeightFogFactor_71));
  fogFactor_68 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.xyz = fogColor_69;
  tmpvar_100.w = fogFactor_68;
  tmpvar_67 = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = mix (tmpvar_33, tmpvar_67, vec4(_LerpFactor));
  tmpvar_31 = tmpvar_101;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_21;
  vpos_21 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_21.y = ((fract(vpos_21.y) * 0.0625) + unity_LODFade.y);
  lowp float x_22;
  x_22 = (texture2D (_DitherMaskLOD2D, vpos_21).w - 0.5);
  if ((x_22 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_23.w;
  lowp vec4 color_24;
  color_24 = tmpvar_23;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_24.xyz);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_25;
  highp vec2 screenCoord_26;
  screenCoord_26 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_27;
  shadow_27 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_28;
    tmpvar_28 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_26);
    shadow_27 = tmpvar_28.x;
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_29;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_30;
    mediump float tmpvar_31;
    tmpvar_31 = dot (tmpvar_29, vec3(0.299, 0.587, 0.114));
    gray_30 = tmpvar_31;
    highp vec2 tmpvar_32;
    tmpvar_32.y = 0.5;
    tmpvar_32.x = (gray_30 * _LightmapColorScale);
    lowp vec4 tmpvar_33;
    tmpvar_33 = texture2D (_LightmapColorChange, tmpvar_32);
    fc_9 = mix (((tmpvar_33 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_29, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_27))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_34 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_35;
  lowp vec3 tmpvar_36;
  tmpvar_36 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_40;
  highp mat3 tmpvar_41;
  tmpvar_41[0] = unity_MatrixV[0].xyz;
  tmpvar_41[1] = unity_MatrixV[1].xyz;
  tmpvar_41[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_41 * worldNorm_5);
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_43;
  tmpvar_43 = (tmpvar_42 - (2.0 * (
    dot (worldNorm_5, tmpvar_42)
   * worldNorm_5)));
  R_4 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = ((tmpvar_44.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_MatCap, tmpvar_45);
  mc_3 = tmpvar_46;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_47;
    highp vec2 P_48;
    P_48 = ((tmpvar_45 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_47 = texture2D (_SpecularMap, P_48);
    mediump float tmpvar_49;
    tmpvar_49 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_47 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_49 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_34 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_50;
  mediump vec3 srcColor_51;
  srcColor_51 = colorBlendLightMap_8;
  tmpvar_50 = (xlv_COLOR1.xyz + (srcColor_51 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_50;
  highp vec4 tmpvar_52;
  tmpvar_52.xyz = colorBlendLightMap_8;
  tmpvar_52.w = _BloomIntensity;
  tmpvar_1 = tmpvar_52;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_3 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.x;
  tmpvar_21.y = worldBinormal_1.x;
  tmpvar_21.z = worldNormal_3.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.y;
  tmpvar_22.y = worldBinormal_1.y;
  tmpvar_22.z = worldNormal_3.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_2.z;
  tmpvar_23.y = worldBinormal_1.z;
  tmpvar_23.z = worldNormal_3.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase2.xyz + (h_39 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_41 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams2.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams2.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase2.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor2.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  highp vec4 tmpvar_67;
  mediump float fogFactor_68;
  mediump vec3 fogColor_69;
  mediump vec3 heightFogColor_70;
  highp float HeightFogFactor_71;
  mediump vec3 atomesphereFogColor_72;
  mediump float h_73;
  highp float linearFogDensity_74;
  mediump float len_75;
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((len_75 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_74 = (tmpvar_77 * (2.0 - tmpvar_77));
  if ((len_75 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_74 = (linearFogDensity_74 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_78;
  tmpvar_78 = min (pow (linearFogDensity_74, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_74 = tmpvar_78;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_79 = tmpvar_80;
  h_73 = (tmpvar_79 * (2.0 - tmpvar_79));
  highp vec3 tmpvar_81;
  tmpvar_81 = (_HeigtFogColBase3.xyz + (h_73 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_72 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (atomesphereFogColor_72, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_75 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_72 = tmpvar_82;
  mediump float tmpvar_83;
  mediump float r_84;
  mediump float f_85;
  mediump float u_86;
  mediump float l_87;
  mediump float fogInt_88;
  fogInt_88 = 1.0;
  highp float tmpvar_89;
  tmpvar_89 = (_HeigtFogParams3.x * tmpvar_32.y);
  highp float tmpvar_90;
  tmpvar_90 = abs(tmpvar_89);
  if ((tmpvar_90 > 0.01)) {
    highp float tmpvar_91;
    tmpvar_91 = exp(-(tmpvar_89));
    fogInt_88 = ((1.0 - tmpvar_91) / tmpvar_89);
  };
  highp float tmpvar_92;
  tmpvar_92 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_87 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (l_87 * _HeigtFogParams3.y);
  u_86 = tmpvar_93;
  fogInt_88 = (fogInt_88 * u_86);
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = clamp (((l_87 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_94 = tmpvar_95;
  r_84 = (tmpvar_94 * (2.0 - tmpvar_94));
  r_84 = ((r_84 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_85 = ((1.0 - clamp (
    exp2(-(fogInt_88))
  , 0.0, 1.0)) * r_84);
  highp float tmpvar_96;
  tmpvar_96 = min (f_85, _HeigtFogColBase3.w);
  tmpvar_83 = tmpvar_96;
  HeightFogFactor_71 = tmpvar_83;
  highp vec3 tmpvar_97;
  tmpvar_97 = _Mihoyo_FogColor3.xyz;
  heightFogColor_70 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = ((heightFogColor_70 * HeightFogFactor_71) + ((atomesphereFogColor_72 * tmpvar_78) * (1.0 - HeightFogFactor_71)));
  fogColor_69 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((1.0 - tmpvar_78) * (1.0 - HeightFogFactor_71));
  fogFactor_68 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.xyz = fogColor_69;
  tmpvar_100.w = fogFactor_68;
  tmpvar_67 = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = mix (tmpvar_33, tmpvar_67, vec4(_LerpFactor));
  tmpvar_31 = tmpvar_101;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_21;
  vpos_21 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_21.y = ((fract(vpos_21.y) * 0.0625) + unity_LODFade.y);
  lowp float x_22;
  x_22 = (texture2D (_DitherMaskLOD2D, vpos_21).w - 0.5);
  if ((x_22 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_23.w;
  lowp vec4 color_24;
  color_24 = tmpvar_23;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_24.xyz);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_25;
  highp vec2 screenCoord_26;
  screenCoord_26 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_27;
  shadow_27 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_28;
    tmpvar_28 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_26);
    shadow_27 = tmpvar_28.x;
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_29;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_30;
    mediump float tmpvar_31;
    tmpvar_31 = dot (tmpvar_29, vec3(0.299, 0.587, 0.114));
    gray_30 = tmpvar_31;
    highp vec2 tmpvar_32;
    tmpvar_32.y = 0.5;
    tmpvar_32.x = (gray_30 * _LightmapColorScale);
    lowp vec4 tmpvar_33;
    tmpvar_33 = texture2D (_LightmapColorChange, tmpvar_32);
    fc_9 = mix (((tmpvar_33 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_29, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_27))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_34 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_35;
  lowp vec3 tmpvar_36;
  tmpvar_36 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_40;
  highp mat3 tmpvar_41;
  tmpvar_41[0] = unity_MatrixV[0].xyz;
  tmpvar_41[1] = unity_MatrixV[1].xyz;
  tmpvar_41[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_41 * worldNorm_5);
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_43;
  tmpvar_43 = (tmpvar_42 - (2.0 * (
    dot (worldNorm_5, tmpvar_42)
   * worldNorm_5)));
  R_4 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = ((tmpvar_44.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_MatCap, tmpvar_45);
  mc_3 = tmpvar_46;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_47;
    highp vec2 P_48;
    P_48 = ((tmpvar_45 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_47 = texture2D (_SpecularMap, P_48);
    mediump float tmpvar_49;
    tmpvar_49 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_47 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_49 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_34 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_50;
  mediump vec3 srcColor_51;
  srcColor_51 = colorBlendLightMap_8;
  tmpvar_50 = (xlv_COLOR1.xyz + (srcColor_51 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_50;
  highp vec4 tmpvar_52;
  tmpvar_52.xyz = colorBlendLightMap_8;
  tmpvar_52.w = _BloomIntensity;
  tmpvar_1 = tmpvar_52;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_4 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.x;
  tmpvar_21.y = worldBinormal_2.x;
  tmpvar_21.z = worldNormal_4.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.y;
  tmpvar_22.y = worldBinormal_2.y;
  tmpvar_22.z = worldNormal_4.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_3.z;
  tmpvar_23.y = worldBinormal_2.z;
  tmpvar_23.z = worldNormal_4.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase.xyz + (h_39 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_41 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  tmpvar_31 = tmpvar_33;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_21;
  vpos_21 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_21.y = ((fract(vpos_21.y) * 0.0625) + unity_LODFade.y);
  lowp float x_22;
  x_22 = (texture2D (_DitherMaskLOD2D, vpos_21).w - 0.5);
  if ((x_22 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_24;
  highp vec2 screenCoord_25;
  screenCoord_25 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_26;
  shadow_26 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_25);
    shadow_26 = tmpvar_27.x;
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_28;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_29;
    mediump float tmpvar_30;
    tmpvar_30 = dot (tmpvar_28, vec3(0.299, 0.587, 0.114));
    gray_29 = tmpvar_30;
    highp vec2 tmpvar_31;
    tmpvar_31.y = 0.5;
    tmpvar_31.x = (gray_29 * _LightmapColorScale);
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_LightmapColorChange, tmpvar_31);
    fc_9 = mix (((tmpvar_32 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_28, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_26))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_33 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_34;
  lowp vec3 tmpvar_35;
  tmpvar_35 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_39;
  highp mat3 tmpvar_40;
  tmpvar_40[0] = unity_MatrixV[0].xyz;
  tmpvar_40[1] = unity_MatrixV[1].xyz;
  tmpvar_40[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_40 * worldNorm_5);
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_41 - (2.0 * (
    dot (worldNorm_5, tmpvar_41)
   * worldNorm_5)));
  R_4 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = ((tmpvar_43.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_MatCap, tmpvar_44);
  mc_3 = tmpvar_45;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_46;
    highp vec2 P_47;
    P_47 = ((tmpvar_44 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_46 = texture2D (_SpecularMap, P_47);
    mediump float tmpvar_48;
    tmpvar_48 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_46 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_48 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_33 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_49;
  mediump vec3 srcColor_50;
  srcColor_50 = colorBlendLightMap_8;
  tmpvar_49 = (xlv_COLOR1.xyz + (srcColor_50 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_49;
  highp vec4 tmpvar_51;
  tmpvar_51.xyz = colorBlendLightMap_8;
  tmpvar_51.w = _BloomIntensity;
  tmpvar_1 = tmpvar_51;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_4 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.x;
  tmpvar_21.y = worldBinormal_2.x;
  tmpvar_21.z = worldNormal_4.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.y;
  tmpvar_22.y = worldBinormal_2.y;
  tmpvar_22.z = worldNormal_4.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_3.z;
  tmpvar_23.y = worldBinormal_2.z;
  tmpvar_23.z = worldNormal_4.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase.xyz + (h_39 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_41 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  tmpvar_31 = tmpvar_33;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_21;
  vpos_21 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_21.y = ((fract(vpos_21.y) * 0.0625) + unity_LODFade.y);
  lowp float x_22;
  x_22 = (texture2D (_DitherMaskLOD2D, vpos_21).w - 0.5);
  if ((x_22 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_24;
  highp vec2 screenCoord_25;
  screenCoord_25 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_26;
  shadow_26 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_25);
    shadow_26 = tmpvar_27.x;
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_28;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_29;
    mediump float tmpvar_30;
    tmpvar_30 = dot (tmpvar_28, vec3(0.299, 0.587, 0.114));
    gray_29 = tmpvar_30;
    highp vec2 tmpvar_31;
    tmpvar_31.y = 0.5;
    tmpvar_31.x = (gray_29 * _LightmapColorScale);
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_LightmapColorChange, tmpvar_31);
    fc_9 = mix (((tmpvar_32 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_28, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_26))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_33 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_34;
  lowp vec3 tmpvar_35;
  tmpvar_35 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_39;
  highp mat3 tmpvar_40;
  tmpvar_40[0] = unity_MatrixV[0].xyz;
  tmpvar_40[1] = unity_MatrixV[1].xyz;
  tmpvar_40[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_40 * worldNorm_5);
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_41 - (2.0 * (
    dot (worldNorm_5, tmpvar_41)
   * worldNorm_5)));
  R_4 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = ((tmpvar_43.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_MatCap, tmpvar_44);
  mc_3 = tmpvar_45;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_46;
    highp vec2 P_47;
    P_47 = ((tmpvar_44 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_46 = texture2D (_SpecularMap, P_47);
    mediump float tmpvar_48;
    tmpvar_48 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_46 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_48 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_33 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_49;
  mediump vec3 srcColor_50;
  srcColor_50 = colorBlendLightMap_8;
  tmpvar_49 = (xlv_COLOR1.xyz + (srcColor_50 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_49;
  highp vec4 tmpvar_51;
  tmpvar_51.xyz = colorBlendLightMap_8;
  tmpvar_51.w = _BloomIntensity;
  tmpvar_1 = tmpvar_51;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_4 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.x;
  tmpvar_21.y = worldBinormal_2.x;
  tmpvar_21.z = worldNormal_4.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.y;
  tmpvar_22.y = worldBinormal_2.y;
  tmpvar_22.z = worldNormal_4.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_3.z;
  tmpvar_23.y = worldBinormal_2.z;
  tmpvar_23.z = worldNormal_4.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase.xyz + (h_39 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_41 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  tmpvar_31 = tmpvar_33;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_21;
  vpos_21 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_21.y = ((fract(vpos_21.y) * 0.0625) + unity_LODFade.y);
  lowp float x_22;
  x_22 = (texture2D (_DitherMaskLOD2D, vpos_21).w - 0.5);
  if ((x_22 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_24;
  highp vec2 screenCoord_25;
  screenCoord_25 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_26;
  shadow_26 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_25);
    shadow_26 = tmpvar_27.x;
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_28;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_29;
    mediump float tmpvar_30;
    tmpvar_30 = dot (tmpvar_28, vec3(0.299, 0.587, 0.114));
    gray_29 = tmpvar_30;
    highp vec2 tmpvar_31;
    tmpvar_31.y = 0.5;
    tmpvar_31.x = (gray_29 * _LightmapColorScale);
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_LightmapColorChange, tmpvar_31);
    fc_9 = mix (((tmpvar_32 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_28, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_26))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_33 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_34;
  lowp vec3 tmpvar_35;
  tmpvar_35 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_39;
  highp mat3 tmpvar_40;
  tmpvar_40[0] = unity_MatrixV[0].xyz;
  tmpvar_40[1] = unity_MatrixV[1].xyz;
  tmpvar_40[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_40 * worldNorm_5);
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_41 - (2.0 * (
    dot (worldNorm_5, tmpvar_41)
   * worldNorm_5)));
  R_4 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = ((tmpvar_43.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_MatCap, tmpvar_44);
  mc_3 = tmpvar_45;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_46;
    highp vec2 P_47;
    P_47 = ((tmpvar_44 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_46 = texture2D (_SpecularMap, P_47);
    mediump float tmpvar_48;
    tmpvar_48 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_46 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_48 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_33 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_49;
  mediump vec3 srcColor_50;
  srcColor_50 = colorBlendLightMap_8;
  tmpvar_49 = (xlv_COLOR1.xyz + (srcColor_50 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_49;
  highp vec4 tmpvar_51;
  tmpvar_51.xyz = colorBlendLightMap_8;
  tmpvar_51.w = _BloomIntensity;
  tmpvar_1 = tmpvar_51;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_3 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.x;
  tmpvar_21.y = worldBinormal_1.x;
  tmpvar_21.z = worldNormal_3.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.y;
  tmpvar_22.y = worldBinormal_1.y;
  tmpvar_22.z = worldNormal_3.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_2.z;
  tmpvar_23.y = worldBinormal_1.z;
  tmpvar_23.z = worldNormal_3.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase2.xyz + (h_39 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_41 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams2.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams2.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase2.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor2.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  highp vec4 tmpvar_67;
  mediump float fogFactor_68;
  mediump vec3 fogColor_69;
  mediump vec3 heightFogColor_70;
  highp float HeightFogFactor_71;
  mediump vec3 atomesphereFogColor_72;
  mediump float h_73;
  highp float linearFogDensity_74;
  mediump float len_75;
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((len_75 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_74 = (tmpvar_77 * (2.0 - tmpvar_77));
  if ((len_75 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_74 = (linearFogDensity_74 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_78;
  tmpvar_78 = min (pow (linearFogDensity_74, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_74 = tmpvar_78;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_79 = tmpvar_80;
  h_73 = (tmpvar_79 * (2.0 - tmpvar_79));
  highp vec3 tmpvar_81;
  tmpvar_81 = (_HeigtFogColBase3.xyz + (h_73 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_72 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (atomesphereFogColor_72, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_75 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_72 = tmpvar_82;
  mediump float tmpvar_83;
  mediump float r_84;
  mediump float f_85;
  mediump float u_86;
  mediump float l_87;
  mediump float fogInt_88;
  fogInt_88 = 1.0;
  highp float tmpvar_89;
  tmpvar_89 = (_HeigtFogParams3.x * tmpvar_32.y);
  highp float tmpvar_90;
  tmpvar_90 = abs(tmpvar_89);
  if ((tmpvar_90 > 0.01)) {
    highp float tmpvar_91;
    tmpvar_91 = exp(-(tmpvar_89));
    fogInt_88 = ((1.0 - tmpvar_91) / tmpvar_89);
  };
  highp float tmpvar_92;
  tmpvar_92 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_87 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (l_87 * _HeigtFogParams3.y);
  u_86 = tmpvar_93;
  fogInt_88 = (fogInt_88 * u_86);
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = clamp (((l_87 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_94 = tmpvar_95;
  r_84 = (tmpvar_94 * (2.0 - tmpvar_94));
  r_84 = ((r_84 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_85 = ((1.0 - clamp (
    exp2(-(fogInt_88))
  , 0.0, 1.0)) * r_84);
  highp float tmpvar_96;
  tmpvar_96 = min (f_85, _HeigtFogColBase3.w);
  tmpvar_83 = tmpvar_96;
  HeightFogFactor_71 = tmpvar_83;
  highp vec3 tmpvar_97;
  tmpvar_97 = _Mihoyo_FogColor3.xyz;
  heightFogColor_70 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = ((heightFogColor_70 * HeightFogFactor_71) + ((atomesphereFogColor_72 * tmpvar_78) * (1.0 - HeightFogFactor_71)));
  fogColor_69 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((1.0 - tmpvar_78) * (1.0 - HeightFogFactor_71));
  fogFactor_68 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.xyz = fogColor_69;
  tmpvar_100.w = fogFactor_68;
  tmpvar_67 = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = mix (tmpvar_33, tmpvar_67, vec4(_LerpFactor));
  tmpvar_31 = tmpvar_101;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_21;
  vpos_21 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_21.y = ((fract(vpos_21.y) * 0.0625) + unity_LODFade.y);
  lowp float x_22;
  x_22 = (texture2D (_DitherMaskLOD2D, vpos_21).w - 0.5);
  if ((x_22 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_24;
  highp vec2 screenCoord_25;
  screenCoord_25 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_26;
  shadow_26 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_25);
    shadow_26 = tmpvar_27.x;
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_28;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_29;
    mediump float tmpvar_30;
    tmpvar_30 = dot (tmpvar_28, vec3(0.299, 0.587, 0.114));
    gray_29 = tmpvar_30;
    highp vec2 tmpvar_31;
    tmpvar_31.y = 0.5;
    tmpvar_31.x = (gray_29 * _LightmapColorScale);
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_LightmapColorChange, tmpvar_31);
    fc_9 = mix (((tmpvar_32 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_28, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_26))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_33 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_34;
  lowp vec3 tmpvar_35;
  tmpvar_35 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_39;
  highp mat3 tmpvar_40;
  tmpvar_40[0] = unity_MatrixV[0].xyz;
  tmpvar_40[1] = unity_MatrixV[1].xyz;
  tmpvar_40[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_40 * worldNorm_5);
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_41 - (2.0 * (
    dot (worldNorm_5, tmpvar_41)
   * worldNorm_5)));
  R_4 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = ((tmpvar_43.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_MatCap, tmpvar_44);
  mc_3 = tmpvar_45;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_46;
    highp vec2 P_47;
    P_47 = ((tmpvar_44 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_46 = texture2D (_SpecularMap, P_47);
    mediump float tmpvar_48;
    tmpvar_48 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_46 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_48 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_33 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_49;
  mediump vec3 srcColor_50;
  srcColor_50 = colorBlendLightMap_8;
  tmpvar_49 = (xlv_COLOR1.xyz + (srcColor_50 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_49;
  highp vec4 tmpvar_51;
  tmpvar_51.xyz = colorBlendLightMap_8;
  tmpvar_51.w = _BloomIntensity;
  tmpvar_1 = tmpvar_51;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_3 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.x;
  tmpvar_21.y = worldBinormal_1.x;
  tmpvar_21.z = worldNormal_3.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.y;
  tmpvar_22.y = worldBinormal_1.y;
  tmpvar_22.z = worldNormal_3.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_2.z;
  tmpvar_23.y = worldBinormal_1.z;
  tmpvar_23.z = worldNormal_3.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase2.xyz + (h_39 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_41 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams2.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams2.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase2.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor2.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  highp vec4 tmpvar_67;
  mediump float fogFactor_68;
  mediump vec3 fogColor_69;
  mediump vec3 heightFogColor_70;
  highp float HeightFogFactor_71;
  mediump vec3 atomesphereFogColor_72;
  mediump float h_73;
  highp float linearFogDensity_74;
  mediump float len_75;
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((len_75 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_74 = (tmpvar_77 * (2.0 - tmpvar_77));
  if ((len_75 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_74 = (linearFogDensity_74 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_78;
  tmpvar_78 = min (pow (linearFogDensity_74, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_74 = tmpvar_78;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_79 = tmpvar_80;
  h_73 = (tmpvar_79 * (2.0 - tmpvar_79));
  highp vec3 tmpvar_81;
  tmpvar_81 = (_HeigtFogColBase3.xyz + (h_73 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_72 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (atomesphereFogColor_72, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_75 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_72 = tmpvar_82;
  mediump float tmpvar_83;
  mediump float r_84;
  mediump float f_85;
  mediump float u_86;
  mediump float l_87;
  mediump float fogInt_88;
  fogInt_88 = 1.0;
  highp float tmpvar_89;
  tmpvar_89 = (_HeigtFogParams3.x * tmpvar_32.y);
  highp float tmpvar_90;
  tmpvar_90 = abs(tmpvar_89);
  if ((tmpvar_90 > 0.01)) {
    highp float tmpvar_91;
    tmpvar_91 = exp(-(tmpvar_89));
    fogInt_88 = ((1.0 - tmpvar_91) / tmpvar_89);
  };
  highp float tmpvar_92;
  tmpvar_92 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_87 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (l_87 * _HeigtFogParams3.y);
  u_86 = tmpvar_93;
  fogInt_88 = (fogInt_88 * u_86);
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = clamp (((l_87 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_94 = tmpvar_95;
  r_84 = (tmpvar_94 * (2.0 - tmpvar_94));
  r_84 = ((r_84 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_85 = ((1.0 - clamp (
    exp2(-(fogInt_88))
  , 0.0, 1.0)) * r_84);
  highp float tmpvar_96;
  tmpvar_96 = min (f_85, _HeigtFogColBase3.w);
  tmpvar_83 = tmpvar_96;
  HeightFogFactor_71 = tmpvar_83;
  highp vec3 tmpvar_97;
  tmpvar_97 = _Mihoyo_FogColor3.xyz;
  heightFogColor_70 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = ((heightFogColor_70 * HeightFogFactor_71) + ((atomesphereFogColor_72 * tmpvar_78) * (1.0 - HeightFogFactor_71)));
  fogColor_69 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((1.0 - tmpvar_78) * (1.0 - HeightFogFactor_71));
  fogFactor_68 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.xyz = fogColor_69;
  tmpvar_100.w = fogFactor_68;
  tmpvar_67 = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = mix (tmpvar_33, tmpvar_67, vec4(_LerpFactor));
  tmpvar_31 = tmpvar_101;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_21;
  vpos_21 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_21.y = ((fract(vpos_21.y) * 0.0625) + unity_LODFade.y);
  lowp float x_22;
  x_22 = (texture2D (_DitherMaskLOD2D, vpos_21).w - 0.5);
  if ((x_22 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_24;
  highp vec2 screenCoord_25;
  screenCoord_25 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_26;
  shadow_26 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_25);
    shadow_26 = tmpvar_27.x;
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_28;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_29;
    mediump float tmpvar_30;
    tmpvar_30 = dot (tmpvar_28, vec3(0.299, 0.587, 0.114));
    gray_29 = tmpvar_30;
    highp vec2 tmpvar_31;
    tmpvar_31.y = 0.5;
    tmpvar_31.x = (gray_29 * _LightmapColorScale);
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_LightmapColorChange, tmpvar_31);
    fc_9 = mix (((tmpvar_32 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_28, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_26))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_33 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_34;
  lowp vec3 tmpvar_35;
  tmpvar_35 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_39;
  highp mat3 tmpvar_40;
  tmpvar_40[0] = unity_MatrixV[0].xyz;
  tmpvar_40[1] = unity_MatrixV[1].xyz;
  tmpvar_40[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_40 * worldNorm_5);
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_41 - (2.0 * (
    dot (worldNorm_5, tmpvar_41)
   * worldNorm_5)));
  R_4 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = ((tmpvar_43.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_MatCap, tmpvar_44);
  mc_3 = tmpvar_45;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_46;
    highp vec2 P_47;
    P_47 = ((tmpvar_44 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_46 = texture2D (_SpecularMap, P_47);
    mediump float tmpvar_48;
    tmpvar_48 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_46 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_48 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_33 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_49;
  mediump vec3 srcColor_50;
  srcColor_50 = colorBlendLightMap_8;
  tmpvar_49 = (xlv_COLOR1.xyz + (srcColor_50 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_49;
  highp vec4 tmpvar_51;
  tmpvar_51.xyz = colorBlendLightMap_8;
  tmpvar_51.w = _BloomIntensity;
  tmpvar_1 = tmpvar_51;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_3 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.x;
  tmpvar_21.y = worldBinormal_1.x;
  tmpvar_21.z = worldNormal_3.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.y;
  tmpvar_22.y = worldBinormal_1.y;
  tmpvar_22.z = worldNormal_3.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_2.z;
  tmpvar_23.y = worldBinormal_1.z;
  tmpvar_23.z = worldNormal_3.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase2.xyz + (h_39 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_41 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams2.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams2.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase2.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor2.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  highp vec4 tmpvar_67;
  mediump float fogFactor_68;
  mediump vec3 fogColor_69;
  mediump vec3 heightFogColor_70;
  highp float HeightFogFactor_71;
  mediump vec3 atomesphereFogColor_72;
  mediump float h_73;
  highp float linearFogDensity_74;
  mediump float len_75;
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((len_75 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_74 = (tmpvar_77 * (2.0 - tmpvar_77));
  if ((len_75 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_74 = (linearFogDensity_74 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_78;
  tmpvar_78 = min (pow (linearFogDensity_74, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_74 = tmpvar_78;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_79 = tmpvar_80;
  h_73 = (tmpvar_79 * (2.0 - tmpvar_79));
  highp vec3 tmpvar_81;
  tmpvar_81 = (_HeigtFogColBase3.xyz + (h_73 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_72 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (atomesphereFogColor_72, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_75 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_72 = tmpvar_82;
  mediump float tmpvar_83;
  mediump float r_84;
  mediump float f_85;
  mediump float u_86;
  mediump float l_87;
  mediump float fogInt_88;
  fogInt_88 = 1.0;
  highp float tmpvar_89;
  tmpvar_89 = (_HeigtFogParams3.x * tmpvar_32.y);
  highp float tmpvar_90;
  tmpvar_90 = abs(tmpvar_89);
  if ((tmpvar_90 > 0.01)) {
    highp float tmpvar_91;
    tmpvar_91 = exp(-(tmpvar_89));
    fogInt_88 = ((1.0 - tmpvar_91) / tmpvar_89);
  };
  highp float tmpvar_92;
  tmpvar_92 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_87 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (l_87 * _HeigtFogParams3.y);
  u_86 = tmpvar_93;
  fogInt_88 = (fogInt_88 * u_86);
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = clamp (((l_87 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_94 = tmpvar_95;
  r_84 = (tmpvar_94 * (2.0 - tmpvar_94));
  r_84 = ((r_84 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_85 = ((1.0 - clamp (
    exp2(-(fogInt_88))
  , 0.0, 1.0)) * r_84);
  highp float tmpvar_96;
  tmpvar_96 = min (f_85, _HeigtFogColBase3.w);
  tmpvar_83 = tmpvar_96;
  HeightFogFactor_71 = tmpvar_83;
  highp vec3 tmpvar_97;
  tmpvar_97 = _Mihoyo_FogColor3.xyz;
  heightFogColor_70 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = ((heightFogColor_70 * HeightFogFactor_71) + ((atomesphereFogColor_72 * tmpvar_78) * (1.0 - HeightFogFactor_71)));
  fogColor_69 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((1.0 - tmpvar_78) * (1.0 - HeightFogFactor_71));
  fogFactor_68 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.xyz = fogColor_69;
  tmpvar_100.w = fogFactor_68;
  tmpvar_67 = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = mix (tmpvar_33, tmpvar_67, vec4(_LerpFactor));
  tmpvar_31 = tmpvar_101;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_21;
  vpos_21 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_21.y = ((fract(vpos_21.y) * 0.0625) + unity_LODFade.y);
  lowp float x_22;
  x_22 = (texture2D (_DitherMaskLOD2D, vpos_21).w - 0.5);
  if ((x_22 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_24;
  highp vec2 screenCoord_25;
  screenCoord_25 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_26;
  shadow_26 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_25);
    shadow_26 = tmpvar_27.x;
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_28;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_29;
    mediump float tmpvar_30;
    tmpvar_30 = dot (tmpvar_28, vec3(0.299, 0.587, 0.114));
    gray_29 = tmpvar_30;
    highp vec2 tmpvar_31;
    tmpvar_31.y = 0.5;
    tmpvar_31.x = (gray_29 * _LightmapColorScale);
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_LightmapColorChange, tmpvar_31);
    fc_9 = mix (((tmpvar_32 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_28, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_26))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_33 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_34;
  lowp vec3 tmpvar_35;
  tmpvar_35 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_39;
  highp mat3 tmpvar_40;
  tmpvar_40[0] = unity_MatrixV[0].xyz;
  tmpvar_40[1] = unity_MatrixV[1].xyz;
  tmpvar_40[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_40 * worldNorm_5);
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_41 - (2.0 * (
    dot (worldNorm_5, tmpvar_41)
   * worldNorm_5)));
  R_4 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = ((tmpvar_43.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_MatCap, tmpvar_44);
  mc_3 = tmpvar_45;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_46;
    highp vec2 P_47;
    P_47 = ((tmpvar_44 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_46 = texture2D (_SpecularMap, P_47);
    mediump float tmpvar_48;
    tmpvar_48 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_46 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_48 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_33 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_49;
  mediump vec3 srcColor_50;
  srcColor_50 = colorBlendLightMap_8;
  tmpvar_49 = (xlv_COLOR1.xyz + (srcColor_50 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_49;
  highp vec4 tmpvar_51;
  tmpvar_51.xyz = colorBlendLightMap_8;
  tmpvar_51.w = _BloomIntensity;
  tmpvar_1 = tmpvar_51;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
""
}
SubProgram "gles hw_tier01 " {
""
}
SubProgram "gles hw_tier02 " {
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
}
}
 UsePass "Hidden/miHoYo/DLC/Common/AddLight/ADDLIGHT"
 UsePass "Hidden/miHoYo/DLC/Common/Shared/PREDEPTH"
}
SubShader {
 LOD 200
 Tags { "DrawDepth" = "FrontFace" "PerformanceChecks" = "False" "QUEUE" = "Geometry" "RenderType" = "Opaque" }
 Pass {
  Name "FORWARDONLY"
  LOD 200
  Tags { "DrawDepth" = "FrontFace" "LIGHTMODE" = "FORWARDBASE" "PerformanceChecks" = "False" "QUEUE" = "Geometry" "RenderType" = "Opaque" }
  Cull Off
  GpuProgramID 120760
Program "vp" {
SubProgram "gles hw_tier00 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_4 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.x;
  tmpvar_21.y = worldBinormal_2.x;
  tmpvar_21.z = worldNormal_4.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.y;
  tmpvar_22.y = worldBinormal_2.y;
  tmpvar_22.z = worldNormal_4.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_3.z;
  tmpvar_23.y = worldBinormal_2.z;
  tmpvar_23.z = worldNormal_4.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase.xyz + (h_39 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_41 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  tmpvar_31 = tmpvar_33;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_21;
  tmpvar_21 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_21.w;
  lowp vec4 color_22;
  color_22 = tmpvar_21;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_22.xyz);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_24;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_25;
    mediump float tmpvar_26;
    tmpvar_26 = dot (tmpvar_24, vec3(0.299, 0.587, 0.114));
    gray_25 = tmpvar_26;
    highp vec2 tmpvar_27;
    tmpvar_27.y = 0.5;
    tmpvar_27.x = (gray_25 * _LightmapColorScale);
    lowp vec4 tmpvar_28;
    tmpvar_28 = texture2D (_LightmapColorChange, tmpvar_27);
    fc_9 = mix (((tmpvar_28 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_24, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_29 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_35;
  highp mat3 tmpvar_36;
  tmpvar_36[0] = unity_MatrixV[0].xyz;
  tmpvar_36[1] = unity_MatrixV[1].xyz;
  tmpvar_36[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_36 * worldNorm_5);
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_37 - (2.0 * (
    dot (worldNorm_5, tmpvar_37)
   * worldNorm_5)));
  R_4 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = ((tmpvar_39.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MatCap, tmpvar_40);
  mc_3 = tmpvar_41;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_42;
    highp vec2 P_43;
    P_43 = ((tmpvar_40 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_42 = texture2D (_SpecularMap, P_43);
    mediump float tmpvar_44;
    tmpvar_44 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_42 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_44 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_29 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_45;
  mediump vec3 srcColor_46;
  srcColor_46 = colorBlendLightMap_8;
  tmpvar_45 = (xlv_COLOR1.xyz + (srcColor_46 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_45;
  highp vec4 tmpvar_47;
  tmpvar_47.xyz = colorBlendLightMap_8;
  tmpvar_47.w = _BloomIntensity;
  tmpvar_1 = tmpvar_47;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_4 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.x;
  tmpvar_21.y = worldBinormal_2.x;
  tmpvar_21.z = worldNormal_4.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.y;
  tmpvar_22.y = worldBinormal_2.y;
  tmpvar_22.z = worldNormal_4.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_3.z;
  tmpvar_23.y = worldBinormal_2.z;
  tmpvar_23.z = worldNormal_4.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase.xyz + (h_39 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_41 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  tmpvar_31 = tmpvar_33;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_21;
  tmpvar_21 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_21.w;
  lowp vec4 color_22;
  color_22 = tmpvar_21;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_22.xyz);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_24;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_25;
    mediump float tmpvar_26;
    tmpvar_26 = dot (tmpvar_24, vec3(0.299, 0.587, 0.114));
    gray_25 = tmpvar_26;
    highp vec2 tmpvar_27;
    tmpvar_27.y = 0.5;
    tmpvar_27.x = (gray_25 * _LightmapColorScale);
    lowp vec4 tmpvar_28;
    tmpvar_28 = texture2D (_LightmapColorChange, tmpvar_27);
    fc_9 = mix (((tmpvar_28 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_24, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_29 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_35;
  highp mat3 tmpvar_36;
  tmpvar_36[0] = unity_MatrixV[0].xyz;
  tmpvar_36[1] = unity_MatrixV[1].xyz;
  tmpvar_36[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_36 * worldNorm_5);
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_37 - (2.0 * (
    dot (worldNorm_5, tmpvar_37)
   * worldNorm_5)));
  R_4 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = ((tmpvar_39.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MatCap, tmpvar_40);
  mc_3 = tmpvar_41;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_42;
    highp vec2 P_43;
    P_43 = ((tmpvar_40 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_42 = texture2D (_SpecularMap, P_43);
    mediump float tmpvar_44;
    tmpvar_44 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_42 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_44 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_29 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_45;
  mediump vec3 srcColor_46;
  srcColor_46 = colorBlendLightMap_8;
  tmpvar_45 = (xlv_COLOR1.xyz + (srcColor_46 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_45;
  highp vec4 tmpvar_47;
  tmpvar_47.xyz = colorBlendLightMap_8;
  tmpvar_47.w = _BloomIntensity;
  tmpvar_1 = tmpvar_47;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_4 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.x;
  tmpvar_21.y = worldBinormal_2.x;
  tmpvar_21.z = worldNormal_4.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.y;
  tmpvar_22.y = worldBinormal_2.y;
  tmpvar_22.z = worldNormal_4.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_3.z;
  tmpvar_23.y = worldBinormal_2.z;
  tmpvar_23.z = worldNormal_4.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase.xyz + (h_39 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_41 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  tmpvar_31 = tmpvar_33;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_21;
  tmpvar_21 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_21.w;
  lowp vec4 color_22;
  color_22 = tmpvar_21;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_22.xyz);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_24;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_25;
    mediump float tmpvar_26;
    tmpvar_26 = dot (tmpvar_24, vec3(0.299, 0.587, 0.114));
    gray_25 = tmpvar_26;
    highp vec2 tmpvar_27;
    tmpvar_27.y = 0.5;
    tmpvar_27.x = (gray_25 * _LightmapColorScale);
    lowp vec4 tmpvar_28;
    tmpvar_28 = texture2D (_LightmapColorChange, tmpvar_27);
    fc_9 = mix (((tmpvar_28 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_24, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_29 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_35;
  highp mat3 tmpvar_36;
  tmpvar_36[0] = unity_MatrixV[0].xyz;
  tmpvar_36[1] = unity_MatrixV[1].xyz;
  tmpvar_36[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_36 * worldNorm_5);
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_37 - (2.0 * (
    dot (worldNorm_5, tmpvar_37)
   * worldNorm_5)));
  R_4 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = ((tmpvar_39.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MatCap, tmpvar_40);
  mc_3 = tmpvar_41;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_42;
    highp vec2 P_43;
    P_43 = ((tmpvar_40 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_42 = texture2D (_SpecularMap, P_43);
    mediump float tmpvar_44;
    tmpvar_44 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_42 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_44 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_29 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_45;
  mediump vec3 srcColor_46;
  srcColor_46 = colorBlendLightMap_8;
  tmpvar_45 = (xlv_COLOR1.xyz + (srcColor_46 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_45;
  highp vec4 tmpvar_47;
  tmpvar_47.xyz = colorBlendLightMap_8;
  tmpvar_47.w = _BloomIntensity;
  tmpvar_1 = tmpvar_47;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_3 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.x;
  tmpvar_21.y = worldBinormal_1.x;
  tmpvar_21.z = worldNormal_3.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.y;
  tmpvar_22.y = worldBinormal_1.y;
  tmpvar_22.z = worldNormal_3.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_2.z;
  tmpvar_23.y = worldBinormal_1.z;
  tmpvar_23.z = worldNormal_3.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase2.xyz + (h_39 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_41 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams2.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams2.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase2.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor2.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  highp vec4 tmpvar_67;
  mediump float fogFactor_68;
  mediump vec3 fogColor_69;
  mediump vec3 heightFogColor_70;
  highp float HeightFogFactor_71;
  mediump vec3 atomesphereFogColor_72;
  mediump float h_73;
  highp float linearFogDensity_74;
  mediump float len_75;
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((len_75 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_74 = (tmpvar_77 * (2.0 - tmpvar_77));
  if ((len_75 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_74 = (linearFogDensity_74 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_78;
  tmpvar_78 = min (pow (linearFogDensity_74, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_74 = tmpvar_78;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_79 = tmpvar_80;
  h_73 = (tmpvar_79 * (2.0 - tmpvar_79));
  highp vec3 tmpvar_81;
  tmpvar_81 = (_HeigtFogColBase3.xyz + (h_73 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_72 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (atomesphereFogColor_72, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_75 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_72 = tmpvar_82;
  mediump float tmpvar_83;
  mediump float r_84;
  mediump float f_85;
  mediump float u_86;
  mediump float l_87;
  mediump float fogInt_88;
  fogInt_88 = 1.0;
  highp float tmpvar_89;
  tmpvar_89 = (_HeigtFogParams3.x * tmpvar_32.y);
  highp float tmpvar_90;
  tmpvar_90 = abs(tmpvar_89);
  if ((tmpvar_90 > 0.01)) {
    highp float tmpvar_91;
    tmpvar_91 = exp(-(tmpvar_89));
    fogInt_88 = ((1.0 - tmpvar_91) / tmpvar_89);
  };
  highp float tmpvar_92;
  tmpvar_92 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_87 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (l_87 * _HeigtFogParams3.y);
  u_86 = tmpvar_93;
  fogInt_88 = (fogInt_88 * u_86);
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = clamp (((l_87 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_94 = tmpvar_95;
  r_84 = (tmpvar_94 * (2.0 - tmpvar_94));
  r_84 = ((r_84 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_85 = ((1.0 - clamp (
    exp2(-(fogInt_88))
  , 0.0, 1.0)) * r_84);
  highp float tmpvar_96;
  tmpvar_96 = min (f_85, _HeigtFogColBase3.w);
  tmpvar_83 = tmpvar_96;
  HeightFogFactor_71 = tmpvar_83;
  highp vec3 tmpvar_97;
  tmpvar_97 = _Mihoyo_FogColor3.xyz;
  heightFogColor_70 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = ((heightFogColor_70 * HeightFogFactor_71) + ((atomesphereFogColor_72 * tmpvar_78) * (1.0 - HeightFogFactor_71)));
  fogColor_69 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((1.0 - tmpvar_78) * (1.0 - HeightFogFactor_71));
  fogFactor_68 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.xyz = fogColor_69;
  tmpvar_100.w = fogFactor_68;
  tmpvar_67 = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = mix (tmpvar_33, tmpvar_67, vec4(_LerpFactor));
  tmpvar_31 = tmpvar_101;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_21;
  tmpvar_21 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_21.w;
  lowp vec4 color_22;
  color_22 = tmpvar_21;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_22.xyz);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_24;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_25;
    mediump float tmpvar_26;
    tmpvar_26 = dot (tmpvar_24, vec3(0.299, 0.587, 0.114));
    gray_25 = tmpvar_26;
    highp vec2 tmpvar_27;
    tmpvar_27.y = 0.5;
    tmpvar_27.x = (gray_25 * _LightmapColorScale);
    lowp vec4 tmpvar_28;
    tmpvar_28 = texture2D (_LightmapColorChange, tmpvar_27);
    fc_9 = mix (((tmpvar_28 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_24, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_29 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_35;
  highp mat3 tmpvar_36;
  tmpvar_36[0] = unity_MatrixV[0].xyz;
  tmpvar_36[1] = unity_MatrixV[1].xyz;
  tmpvar_36[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_36 * worldNorm_5);
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_37 - (2.0 * (
    dot (worldNorm_5, tmpvar_37)
   * worldNorm_5)));
  R_4 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = ((tmpvar_39.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MatCap, tmpvar_40);
  mc_3 = tmpvar_41;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_42;
    highp vec2 P_43;
    P_43 = ((tmpvar_40 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_42 = texture2D (_SpecularMap, P_43);
    mediump float tmpvar_44;
    tmpvar_44 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_42 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_44 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_29 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_45;
  mediump vec3 srcColor_46;
  srcColor_46 = colorBlendLightMap_8;
  tmpvar_45 = (xlv_COLOR1.xyz + (srcColor_46 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_45;
  highp vec4 tmpvar_47;
  tmpvar_47.xyz = colorBlendLightMap_8;
  tmpvar_47.w = _BloomIntensity;
  tmpvar_1 = tmpvar_47;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_3 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.x;
  tmpvar_21.y = worldBinormal_1.x;
  tmpvar_21.z = worldNormal_3.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.y;
  tmpvar_22.y = worldBinormal_1.y;
  tmpvar_22.z = worldNormal_3.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_2.z;
  tmpvar_23.y = worldBinormal_1.z;
  tmpvar_23.z = worldNormal_3.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase2.xyz + (h_39 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_41 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams2.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams2.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase2.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor2.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  highp vec4 tmpvar_67;
  mediump float fogFactor_68;
  mediump vec3 fogColor_69;
  mediump vec3 heightFogColor_70;
  highp float HeightFogFactor_71;
  mediump vec3 atomesphereFogColor_72;
  mediump float h_73;
  highp float linearFogDensity_74;
  mediump float len_75;
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((len_75 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_74 = (tmpvar_77 * (2.0 - tmpvar_77));
  if ((len_75 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_74 = (linearFogDensity_74 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_78;
  tmpvar_78 = min (pow (linearFogDensity_74, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_74 = tmpvar_78;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_79 = tmpvar_80;
  h_73 = (tmpvar_79 * (2.0 - tmpvar_79));
  highp vec3 tmpvar_81;
  tmpvar_81 = (_HeigtFogColBase3.xyz + (h_73 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_72 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (atomesphereFogColor_72, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_75 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_72 = tmpvar_82;
  mediump float tmpvar_83;
  mediump float r_84;
  mediump float f_85;
  mediump float u_86;
  mediump float l_87;
  mediump float fogInt_88;
  fogInt_88 = 1.0;
  highp float tmpvar_89;
  tmpvar_89 = (_HeigtFogParams3.x * tmpvar_32.y);
  highp float tmpvar_90;
  tmpvar_90 = abs(tmpvar_89);
  if ((tmpvar_90 > 0.01)) {
    highp float tmpvar_91;
    tmpvar_91 = exp(-(tmpvar_89));
    fogInt_88 = ((1.0 - tmpvar_91) / tmpvar_89);
  };
  highp float tmpvar_92;
  tmpvar_92 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_87 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (l_87 * _HeigtFogParams3.y);
  u_86 = tmpvar_93;
  fogInt_88 = (fogInt_88 * u_86);
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = clamp (((l_87 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_94 = tmpvar_95;
  r_84 = (tmpvar_94 * (2.0 - tmpvar_94));
  r_84 = ((r_84 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_85 = ((1.0 - clamp (
    exp2(-(fogInt_88))
  , 0.0, 1.0)) * r_84);
  highp float tmpvar_96;
  tmpvar_96 = min (f_85, _HeigtFogColBase3.w);
  tmpvar_83 = tmpvar_96;
  HeightFogFactor_71 = tmpvar_83;
  highp vec3 tmpvar_97;
  tmpvar_97 = _Mihoyo_FogColor3.xyz;
  heightFogColor_70 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = ((heightFogColor_70 * HeightFogFactor_71) + ((atomesphereFogColor_72 * tmpvar_78) * (1.0 - HeightFogFactor_71)));
  fogColor_69 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((1.0 - tmpvar_78) * (1.0 - HeightFogFactor_71));
  fogFactor_68 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.xyz = fogColor_69;
  tmpvar_100.w = fogFactor_68;
  tmpvar_67 = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = mix (tmpvar_33, tmpvar_67, vec4(_LerpFactor));
  tmpvar_31 = tmpvar_101;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_21;
  tmpvar_21 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_21.w;
  lowp vec4 color_22;
  color_22 = tmpvar_21;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_22.xyz);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_24;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_25;
    mediump float tmpvar_26;
    tmpvar_26 = dot (tmpvar_24, vec3(0.299, 0.587, 0.114));
    gray_25 = tmpvar_26;
    highp vec2 tmpvar_27;
    tmpvar_27.y = 0.5;
    tmpvar_27.x = (gray_25 * _LightmapColorScale);
    lowp vec4 tmpvar_28;
    tmpvar_28 = texture2D (_LightmapColorChange, tmpvar_27);
    fc_9 = mix (((tmpvar_28 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_24, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_29 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_35;
  highp mat3 tmpvar_36;
  tmpvar_36[0] = unity_MatrixV[0].xyz;
  tmpvar_36[1] = unity_MatrixV[1].xyz;
  tmpvar_36[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_36 * worldNorm_5);
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_37 - (2.0 * (
    dot (worldNorm_5, tmpvar_37)
   * worldNorm_5)));
  R_4 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = ((tmpvar_39.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MatCap, tmpvar_40);
  mc_3 = tmpvar_41;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_42;
    highp vec2 P_43;
    P_43 = ((tmpvar_40 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_42 = texture2D (_SpecularMap, P_43);
    mediump float tmpvar_44;
    tmpvar_44 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_42 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_44 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_29 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_45;
  mediump vec3 srcColor_46;
  srcColor_46 = colorBlendLightMap_8;
  tmpvar_45 = (xlv_COLOR1.xyz + (srcColor_46 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_45;
  highp vec4 tmpvar_47;
  tmpvar_47.xyz = colorBlendLightMap_8;
  tmpvar_47.w = _BloomIntensity;
  tmpvar_1 = tmpvar_47;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_3 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.x;
  tmpvar_21.y = worldBinormal_1.x;
  tmpvar_21.z = worldNormal_3.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.y;
  tmpvar_22.y = worldBinormal_1.y;
  tmpvar_22.z = worldNormal_3.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_2.z;
  tmpvar_23.y = worldBinormal_1.z;
  tmpvar_23.z = worldNormal_3.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase2.xyz + (h_39 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_41 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams2.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams2.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase2.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor2.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  highp vec4 tmpvar_67;
  mediump float fogFactor_68;
  mediump vec3 fogColor_69;
  mediump vec3 heightFogColor_70;
  highp float HeightFogFactor_71;
  mediump vec3 atomesphereFogColor_72;
  mediump float h_73;
  highp float linearFogDensity_74;
  mediump float len_75;
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((len_75 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_74 = (tmpvar_77 * (2.0 - tmpvar_77));
  if ((len_75 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_74 = (linearFogDensity_74 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_78;
  tmpvar_78 = min (pow (linearFogDensity_74, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_74 = tmpvar_78;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_79 = tmpvar_80;
  h_73 = (tmpvar_79 * (2.0 - tmpvar_79));
  highp vec3 tmpvar_81;
  tmpvar_81 = (_HeigtFogColBase3.xyz + (h_73 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_72 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (atomesphereFogColor_72, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_75 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_72 = tmpvar_82;
  mediump float tmpvar_83;
  mediump float r_84;
  mediump float f_85;
  mediump float u_86;
  mediump float l_87;
  mediump float fogInt_88;
  fogInt_88 = 1.0;
  highp float tmpvar_89;
  tmpvar_89 = (_HeigtFogParams3.x * tmpvar_32.y);
  highp float tmpvar_90;
  tmpvar_90 = abs(tmpvar_89);
  if ((tmpvar_90 > 0.01)) {
    highp float tmpvar_91;
    tmpvar_91 = exp(-(tmpvar_89));
    fogInt_88 = ((1.0 - tmpvar_91) / tmpvar_89);
  };
  highp float tmpvar_92;
  tmpvar_92 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_87 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (l_87 * _HeigtFogParams3.y);
  u_86 = tmpvar_93;
  fogInt_88 = (fogInt_88 * u_86);
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = clamp (((l_87 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_94 = tmpvar_95;
  r_84 = (tmpvar_94 * (2.0 - tmpvar_94));
  r_84 = ((r_84 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_85 = ((1.0 - clamp (
    exp2(-(fogInt_88))
  , 0.0, 1.0)) * r_84);
  highp float tmpvar_96;
  tmpvar_96 = min (f_85, _HeigtFogColBase3.w);
  tmpvar_83 = tmpvar_96;
  HeightFogFactor_71 = tmpvar_83;
  highp vec3 tmpvar_97;
  tmpvar_97 = _Mihoyo_FogColor3.xyz;
  heightFogColor_70 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = ((heightFogColor_70 * HeightFogFactor_71) + ((atomesphereFogColor_72 * tmpvar_78) * (1.0 - HeightFogFactor_71)));
  fogColor_69 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((1.0 - tmpvar_78) * (1.0 - HeightFogFactor_71));
  fogFactor_68 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.xyz = fogColor_69;
  tmpvar_100.w = fogFactor_68;
  tmpvar_67 = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = mix (tmpvar_33, tmpvar_67, vec4(_LerpFactor));
  tmpvar_31 = tmpvar_101;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_21;
  tmpvar_21 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_21.w;
  lowp vec4 color_22;
  color_22 = tmpvar_21;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_22.xyz);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_24;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_25;
    mediump float tmpvar_26;
    tmpvar_26 = dot (tmpvar_24, vec3(0.299, 0.587, 0.114));
    gray_25 = tmpvar_26;
    highp vec2 tmpvar_27;
    tmpvar_27.y = 0.5;
    tmpvar_27.x = (gray_25 * _LightmapColorScale);
    lowp vec4 tmpvar_28;
    tmpvar_28 = texture2D (_LightmapColorChange, tmpvar_27);
    fc_9 = mix (((tmpvar_28 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_24, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_29 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_35;
  highp mat3 tmpvar_36;
  tmpvar_36[0] = unity_MatrixV[0].xyz;
  tmpvar_36[1] = unity_MatrixV[1].xyz;
  tmpvar_36[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_36 * worldNorm_5);
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_37 - (2.0 * (
    dot (worldNorm_5, tmpvar_37)
   * worldNorm_5)));
  R_4 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = ((tmpvar_39.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MatCap, tmpvar_40);
  mc_3 = tmpvar_41;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_42;
    highp vec2 P_43;
    P_43 = ((tmpvar_40 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_42 = texture2D (_SpecularMap, P_43);
    mediump float tmpvar_44;
    tmpvar_44 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_42 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_44 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_29 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_45;
  mediump vec3 srcColor_46;
  srcColor_46 = colorBlendLightMap_8;
  tmpvar_45 = (xlv_COLOR1.xyz + (srcColor_46 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_45;
  highp vec4 tmpvar_47;
  tmpvar_47.xyz = colorBlendLightMap_8;
  tmpvar_47.w = _BloomIntensity;
  tmpvar_1 = tmpvar_47;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_4 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.x;
  tmpvar_21.y = worldBinormal_2.x;
  tmpvar_21.z = worldNormal_4.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.y;
  tmpvar_22.y = worldBinormal_2.y;
  tmpvar_22.z = worldNormal_4.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_3.z;
  tmpvar_23.y = worldBinormal_2.z;
  tmpvar_23.z = worldNormal_4.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase.xyz + (h_39 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_41 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  tmpvar_31 = tmpvar_33;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_22;
  mediump vec3 tmpvar_23;
  tmpvar_23 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_23;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_24;
    mediump float tmpvar_25;
    tmpvar_25 = dot (tmpvar_23, vec3(0.299, 0.587, 0.114));
    gray_24 = tmpvar_25;
    highp vec2 tmpvar_26;
    tmpvar_26.y = 0.5;
    tmpvar_26.x = (gray_24 * _LightmapColorScale);
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_LightmapColorChange, tmpvar_26);
    fc_9 = mix (((tmpvar_27 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_23, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_28 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_30;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_34;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = unity_MatrixV[0].xyz;
  tmpvar_35[1] = unity_MatrixV[1].xyz;
  tmpvar_35[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_35 * worldNorm_5);
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_36 - (2.0 * (
    dot (worldNorm_5, tmpvar_36)
   * worldNorm_5)));
  R_4 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = ((tmpvar_38.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_MatCap, tmpvar_39);
  mc_3 = tmpvar_40;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_41;
    highp vec2 P_42;
    P_42 = ((tmpvar_39 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_41 = texture2D (_SpecularMap, P_42);
    mediump float tmpvar_43;
    tmpvar_43 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_41 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_43 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_28 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_44;
  mediump vec3 srcColor_45;
  srcColor_45 = colorBlendLightMap_8;
  tmpvar_44 = (xlv_COLOR1.xyz + (srcColor_45 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_44;
  highp vec4 tmpvar_46;
  tmpvar_46.xyz = colorBlendLightMap_8;
  tmpvar_46.w = _BloomIntensity;
  tmpvar_1 = tmpvar_46;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_4 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.x;
  tmpvar_21.y = worldBinormal_2.x;
  tmpvar_21.z = worldNormal_4.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.y;
  tmpvar_22.y = worldBinormal_2.y;
  tmpvar_22.z = worldNormal_4.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_3.z;
  tmpvar_23.y = worldBinormal_2.z;
  tmpvar_23.z = worldNormal_4.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase.xyz + (h_39 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_41 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  tmpvar_31 = tmpvar_33;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_22;
  mediump vec3 tmpvar_23;
  tmpvar_23 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_23;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_24;
    mediump float tmpvar_25;
    tmpvar_25 = dot (tmpvar_23, vec3(0.299, 0.587, 0.114));
    gray_24 = tmpvar_25;
    highp vec2 tmpvar_26;
    tmpvar_26.y = 0.5;
    tmpvar_26.x = (gray_24 * _LightmapColorScale);
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_LightmapColorChange, tmpvar_26);
    fc_9 = mix (((tmpvar_27 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_23, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_28 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_30;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_34;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = unity_MatrixV[0].xyz;
  tmpvar_35[1] = unity_MatrixV[1].xyz;
  tmpvar_35[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_35 * worldNorm_5);
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_36 - (2.0 * (
    dot (worldNorm_5, tmpvar_36)
   * worldNorm_5)));
  R_4 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = ((tmpvar_38.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_MatCap, tmpvar_39);
  mc_3 = tmpvar_40;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_41;
    highp vec2 P_42;
    P_42 = ((tmpvar_39 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_41 = texture2D (_SpecularMap, P_42);
    mediump float tmpvar_43;
    tmpvar_43 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_41 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_43 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_28 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_44;
  mediump vec3 srcColor_45;
  srcColor_45 = colorBlendLightMap_8;
  tmpvar_44 = (xlv_COLOR1.xyz + (srcColor_45 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_44;
  highp vec4 tmpvar_46;
  tmpvar_46.xyz = colorBlendLightMap_8;
  tmpvar_46.w = _BloomIntensity;
  tmpvar_1 = tmpvar_46;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_4 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.x;
  tmpvar_21.y = worldBinormal_2.x;
  tmpvar_21.z = worldNormal_4.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.y;
  tmpvar_22.y = worldBinormal_2.y;
  tmpvar_22.z = worldNormal_4.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_3.z;
  tmpvar_23.y = worldBinormal_2.z;
  tmpvar_23.z = worldNormal_4.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase.xyz + (h_39 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_41 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  tmpvar_31 = tmpvar_33;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_22;
  mediump vec3 tmpvar_23;
  tmpvar_23 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_23;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_24;
    mediump float tmpvar_25;
    tmpvar_25 = dot (tmpvar_23, vec3(0.299, 0.587, 0.114));
    gray_24 = tmpvar_25;
    highp vec2 tmpvar_26;
    tmpvar_26.y = 0.5;
    tmpvar_26.x = (gray_24 * _LightmapColorScale);
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_LightmapColorChange, tmpvar_26);
    fc_9 = mix (((tmpvar_27 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_23, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_28 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_30;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_34;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = unity_MatrixV[0].xyz;
  tmpvar_35[1] = unity_MatrixV[1].xyz;
  tmpvar_35[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_35 * worldNorm_5);
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_36 - (2.0 * (
    dot (worldNorm_5, tmpvar_36)
   * worldNorm_5)));
  R_4 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = ((tmpvar_38.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_MatCap, tmpvar_39);
  mc_3 = tmpvar_40;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_41;
    highp vec2 P_42;
    P_42 = ((tmpvar_39 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_41 = texture2D (_SpecularMap, P_42);
    mediump float tmpvar_43;
    tmpvar_43 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_41 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_43 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_28 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_44;
  mediump vec3 srcColor_45;
  srcColor_45 = colorBlendLightMap_8;
  tmpvar_44 = (xlv_COLOR1.xyz + (srcColor_45 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_44;
  highp vec4 tmpvar_46;
  tmpvar_46.xyz = colorBlendLightMap_8;
  tmpvar_46.w = _BloomIntensity;
  tmpvar_1 = tmpvar_46;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_3 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.x;
  tmpvar_21.y = worldBinormal_1.x;
  tmpvar_21.z = worldNormal_3.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.y;
  tmpvar_22.y = worldBinormal_1.y;
  tmpvar_22.z = worldNormal_3.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_2.z;
  tmpvar_23.y = worldBinormal_1.z;
  tmpvar_23.z = worldNormal_3.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase2.xyz + (h_39 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_41 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams2.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams2.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase2.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor2.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  highp vec4 tmpvar_67;
  mediump float fogFactor_68;
  mediump vec3 fogColor_69;
  mediump vec3 heightFogColor_70;
  highp float HeightFogFactor_71;
  mediump vec3 atomesphereFogColor_72;
  mediump float h_73;
  highp float linearFogDensity_74;
  mediump float len_75;
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((len_75 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_74 = (tmpvar_77 * (2.0 - tmpvar_77));
  if ((len_75 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_74 = (linearFogDensity_74 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_78;
  tmpvar_78 = min (pow (linearFogDensity_74, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_74 = tmpvar_78;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_79 = tmpvar_80;
  h_73 = (tmpvar_79 * (2.0 - tmpvar_79));
  highp vec3 tmpvar_81;
  tmpvar_81 = (_HeigtFogColBase3.xyz + (h_73 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_72 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (atomesphereFogColor_72, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_75 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_72 = tmpvar_82;
  mediump float tmpvar_83;
  mediump float r_84;
  mediump float f_85;
  mediump float u_86;
  mediump float l_87;
  mediump float fogInt_88;
  fogInt_88 = 1.0;
  highp float tmpvar_89;
  tmpvar_89 = (_HeigtFogParams3.x * tmpvar_32.y);
  highp float tmpvar_90;
  tmpvar_90 = abs(tmpvar_89);
  if ((tmpvar_90 > 0.01)) {
    highp float tmpvar_91;
    tmpvar_91 = exp(-(tmpvar_89));
    fogInt_88 = ((1.0 - tmpvar_91) / tmpvar_89);
  };
  highp float tmpvar_92;
  tmpvar_92 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_87 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (l_87 * _HeigtFogParams3.y);
  u_86 = tmpvar_93;
  fogInt_88 = (fogInt_88 * u_86);
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = clamp (((l_87 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_94 = tmpvar_95;
  r_84 = (tmpvar_94 * (2.0 - tmpvar_94));
  r_84 = ((r_84 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_85 = ((1.0 - clamp (
    exp2(-(fogInt_88))
  , 0.0, 1.0)) * r_84);
  highp float tmpvar_96;
  tmpvar_96 = min (f_85, _HeigtFogColBase3.w);
  tmpvar_83 = tmpvar_96;
  HeightFogFactor_71 = tmpvar_83;
  highp vec3 tmpvar_97;
  tmpvar_97 = _Mihoyo_FogColor3.xyz;
  heightFogColor_70 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = ((heightFogColor_70 * HeightFogFactor_71) + ((atomesphereFogColor_72 * tmpvar_78) * (1.0 - HeightFogFactor_71)));
  fogColor_69 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((1.0 - tmpvar_78) * (1.0 - HeightFogFactor_71));
  fogFactor_68 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.xyz = fogColor_69;
  tmpvar_100.w = fogFactor_68;
  tmpvar_67 = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = mix (tmpvar_33, tmpvar_67, vec4(_LerpFactor));
  tmpvar_31 = tmpvar_101;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_22;
  mediump vec3 tmpvar_23;
  tmpvar_23 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_23;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_24;
    mediump float tmpvar_25;
    tmpvar_25 = dot (tmpvar_23, vec3(0.299, 0.587, 0.114));
    gray_24 = tmpvar_25;
    highp vec2 tmpvar_26;
    tmpvar_26.y = 0.5;
    tmpvar_26.x = (gray_24 * _LightmapColorScale);
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_LightmapColorChange, tmpvar_26);
    fc_9 = mix (((tmpvar_27 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_23, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_28 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_30;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_34;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = unity_MatrixV[0].xyz;
  tmpvar_35[1] = unity_MatrixV[1].xyz;
  tmpvar_35[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_35 * worldNorm_5);
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_36 - (2.0 * (
    dot (worldNorm_5, tmpvar_36)
   * worldNorm_5)));
  R_4 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = ((tmpvar_38.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_MatCap, tmpvar_39);
  mc_3 = tmpvar_40;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_41;
    highp vec2 P_42;
    P_42 = ((tmpvar_39 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_41 = texture2D (_SpecularMap, P_42);
    mediump float tmpvar_43;
    tmpvar_43 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_41 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_43 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_28 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_44;
  mediump vec3 srcColor_45;
  srcColor_45 = colorBlendLightMap_8;
  tmpvar_44 = (xlv_COLOR1.xyz + (srcColor_45 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_44;
  highp vec4 tmpvar_46;
  tmpvar_46.xyz = colorBlendLightMap_8;
  tmpvar_46.w = _BloomIntensity;
  tmpvar_1 = tmpvar_46;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_3 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.x;
  tmpvar_21.y = worldBinormal_1.x;
  tmpvar_21.z = worldNormal_3.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.y;
  tmpvar_22.y = worldBinormal_1.y;
  tmpvar_22.z = worldNormal_3.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_2.z;
  tmpvar_23.y = worldBinormal_1.z;
  tmpvar_23.z = worldNormal_3.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase2.xyz + (h_39 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_41 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams2.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams2.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase2.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor2.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  highp vec4 tmpvar_67;
  mediump float fogFactor_68;
  mediump vec3 fogColor_69;
  mediump vec3 heightFogColor_70;
  highp float HeightFogFactor_71;
  mediump vec3 atomesphereFogColor_72;
  mediump float h_73;
  highp float linearFogDensity_74;
  mediump float len_75;
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((len_75 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_74 = (tmpvar_77 * (2.0 - tmpvar_77));
  if ((len_75 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_74 = (linearFogDensity_74 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_78;
  tmpvar_78 = min (pow (linearFogDensity_74, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_74 = tmpvar_78;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_79 = tmpvar_80;
  h_73 = (tmpvar_79 * (2.0 - tmpvar_79));
  highp vec3 tmpvar_81;
  tmpvar_81 = (_HeigtFogColBase3.xyz + (h_73 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_72 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (atomesphereFogColor_72, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_75 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_72 = tmpvar_82;
  mediump float tmpvar_83;
  mediump float r_84;
  mediump float f_85;
  mediump float u_86;
  mediump float l_87;
  mediump float fogInt_88;
  fogInt_88 = 1.0;
  highp float tmpvar_89;
  tmpvar_89 = (_HeigtFogParams3.x * tmpvar_32.y);
  highp float tmpvar_90;
  tmpvar_90 = abs(tmpvar_89);
  if ((tmpvar_90 > 0.01)) {
    highp float tmpvar_91;
    tmpvar_91 = exp(-(tmpvar_89));
    fogInt_88 = ((1.0 - tmpvar_91) / tmpvar_89);
  };
  highp float tmpvar_92;
  tmpvar_92 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_87 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (l_87 * _HeigtFogParams3.y);
  u_86 = tmpvar_93;
  fogInt_88 = (fogInt_88 * u_86);
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = clamp (((l_87 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_94 = tmpvar_95;
  r_84 = (tmpvar_94 * (2.0 - tmpvar_94));
  r_84 = ((r_84 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_85 = ((1.0 - clamp (
    exp2(-(fogInt_88))
  , 0.0, 1.0)) * r_84);
  highp float tmpvar_96;
  tmpvar_96 = min (f_85, _HeigtFogColBase3.w);
  tmpvar_83 = tmpvar_96;
  HeightFogFactor_71 = tmpvar_83;
  highp vec3 tmpvar_97;
  tmpvar_97 = _Mihoyo_FogColor3.xyz;
  heightFogColor_70 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = ((heightFogColor_70 * HeightFogFactor_71) + ((atomesphereFogColor_72 * tmpvar_78) * (1.0 - HeightFogFactor_71)));
  fogColor_69 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((1.0 - tmpvar_78) * (1.0 - HeightFogFactor_71));
  fogFactor_68 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.xyz = fogColor_69;
  tmpvar_100.w = fogFactor_68;
  tmpvar_67 = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = mix (tmpvar_33, tmpvar_67, vec4(_LerpFactor));
  tmpvar_31 = tmpvar_101;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_22;
  mediump vec3 tmpvar_23;
  tmpvar_23 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_23;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_24;
    mediump float tmpvar_25;
    tmpvar_25 = dot (tmpvar_23, vec3(0.299, 0.587, 0.114));
    gray_24 = tmpvar_25;
    highp vec2 tmpvar_26;
    tmpvar_26.y = 0.5;
    tmpvar_26.x = (gray_24 * _LightmapColorScale);
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_LightmapColorChange, tmpvar_26);
    fc_9 = mix (((tmpvar_27 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_23, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_28 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_30;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_34;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = unity_MatrixV[0].xyz;
  tmpvar_35[1] = unity_MatrixV[1].xyz;
  tmpvar_35[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_35 * worldNorm_5);
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_36 - (2.0 * (
    dot (worldNorm_5, tmpvar_36)
   * worldNorm_5)));
  R_4 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = ((tmpvar_38.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_MatCap, tmpvar_39);
  mc_3 = tmpvar_40;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_41;
    highp vec2 P_42;
    P_42 = ((tmpvar_39 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_41 = texture2D (_SpecularMap, P_42);
    mediump float tmpvar_43;
    tmpvar_43 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_41 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_43 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_28 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_44;
  mediump vec3 srcColor_45;
  srcColor_45 = colorBlendLightMap_8;
  tmpvar_44 = (xlv_COLOR1.xyz + (srcColor_45 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_44;
  highp vec4 tmpvar_46;
  tmpvar_46.xyz = colorBlendLightMap_8;
  tmpvar_46.w = _BloomIntensity;
  tmpvar_1 = tmpvar_46;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_3 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.x;
  tmpvar_21.y = worldBinormal_1.x;
  tmpvar_21.z = worldNormal_3.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.y;
  tmpvar_22.y = worldBinormal_1.y;
  tmpvar_22.z = worldNormal_3.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_2.z;
  tmpvar_23.y = worldBinormal_1.z;
  tmpvar_23.z = worldNormal_3.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase2.xyz + (h_39 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_41 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams2.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams2.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase2.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor2.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  highp vec4 tmpvar_67;
  mediump float fogFactor_68;
  mediump vec3 fogColor_69;
  mediump vec3 heightFogColor_70;
  highp float HeightFogFactor_71;
  mediump vec3 atomesphereFogColor_72;
  mediump float h_73;
  highp float linearFogDensity_74;
  mediump float len_75;
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((len_75 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_74 = (tmpvar_77 * (2.0 - tmpvar_77));
  if ((len_75 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_74 = (linearFogDensity_74 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_78;
  tmpvar_78 = min (pow (linearFogDensity_74, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_74 = tmpvar_78;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_79 = tmpvar_80;
  h_73 = (tmpvar_79 * (2.0 - tmpvar_79));
  highp vec3 tmpvar_81;
  tmpvar_81 = (_HeigtFogColBase3.xyz + (h_73 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_72 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (atomesphereFogColor_72, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_75 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_72 = tmpvar_82;
  mediump float tmpvar_83;
  mediump float r_84;
  mediump float f_85;
  mediump float u_86;
  mediump float l_87;
  mediump float fogInt_88;
  fogInt_88 = 1.0;
  highp float tmpvar_89;
  tmpvar_89 = (_HeigtFogParams3.x * tmpvar_32.y);
  highp float tmpvar_90;
  tmpvar_90 = abs(tmpvar_89);
  if ((tmpvar_90 > 0.01)) {
    highp float tmpvar_91;
    tmpvar_91 = exp(-(tmpvar_89));
    fogInt_88 = ((1.0 - tmpvar_91) / tmpvar_89);
  };
  highp float tmpvar_92;
  tmpvar_92 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_87 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (l_87 * _HeigtFogParams3.y);
  u_86 = tmpvar_93;
  fogInt_88 = (fogInt_88 * u_86);
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = clamp (((l_87 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_94 = tmpvar_95;
  r_84 = (tmpvar_94 * (2.0 - tmpvar_94));
  r_84 = ((r_84 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_85 = ((1.0 - clamp (
    exp2(-(fogInt_88))
  , 0.0, 1.0)) * r_84);
  highp float tmpvar_96;
  tmpvar_96 = min (f_85, _HeigtFogColBase3.w);
  tmpvar_83 = tmpvar_96;
  HeightFogFactor_71 = tmpvar_83;
  highp vec3 tmpvar_97;
  tmpvar_97 = _Mihoyo_FogColor3.xyz;
  heightFogColor_70 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = ((heightFogColor_70 * HeightFogFactor_71) + ((atomesphereFogColor_72 * tmpvar_78) * (1.0 - HeightFogFactor_71)));
  fogColor_69 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((1.0 - tmpvar_78) * (1.0 - HeightFogFactor_71));
  fogFactor_68 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.xyz = fogColor_69;
  tmpvar_100.w = fogFactor_68;
  tmpvar_67 = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = mix (tmpvar_33, tmpvar_67, vec4(_LerpFactor));
  tmpvar_31 = tmpvar_101;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_22;
  mediump vec3 tmpvar_23;
  tmpvar_23 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_23;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_24;
    mediump float tmpvar_25;
    tmpvar_25 = dot (tmpvar_23, vec3(0.299, 0.587, 0.114));
    gray_24 = tmpvar_25;
    highp vec2 tmpvar_26;
    tmpvar_26.y = 0.5;
    tmpvar_26.x = (gray_24 * _LightmapColorScale);
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_LightmapColorChange, tmpvar_26);
    fc_9 = mix (((tmpvar_27 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_23, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_28 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_29;
  lowp vec3 tmpvar_30;
  tmpvar_30 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_30;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_34;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = unity_MatrixV[0].xyz;
  tmpvar_35[1] = unity_MatrixV[1].xyz;
  tmpvar_35[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_35 * worldNorm_5);
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_36 - (2.0 * (
    dot (worldNorm_5, tmpvar_36)
   * worldNorm_5)));
  R_4 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = ((tmpvar_38.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_MatCap, tmpvar_39);
  mc_3 = tmpvar_40;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_41;
    highp vec2 P_42;
    P_42 = ((tmpvar_39 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_41 = texture2D (_SpecularMap, P_42);
    mediump float tmpvar_43;
    tmpvar_43 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_41 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_43 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_28 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_44;
  mediump vec3 srcColor_45;
  srcColor_45 = colorBlendLightMap_8;
  tmpvar_44 = (xlv_COLOR1.xyz + (srcColor_45 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_44;
  highp vec4 tmpvar_46;
  tmpvar_46.xyz = colorBlendLightMap_8;
  tmpvar_46.w = _BloomIntensity;
  tmpvar_1 = tmpvar_46;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_4 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.x;
  tmpvar_21.y = worldBinormal_2.x;
  tmpvar_21.z = worldNormal_4.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.y;
  tmpvar_22.y = worldBinormal_2.y;
  tmpvar_22.z = worldNormal_4.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_3.z;
  tmpvar_23.y = worldBinormal_2.z;
  tmpvar_23.z = worldNormal_4.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase.xyz + (h_39 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_41 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  tmpvar_31 = tmpvar_33;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_21;
  vpos_21 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_21.y = ((fract(vpos_21.y) * 0.0625) + unity_LODFade.y);
  lowp float x_22;
  x_22 = (texture2D (_DitherMaskLOD2D, vpos_21).w - 0.5);
  if ((x_22 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_23.w;
  lowp vec4 color_24;
  color_24 = tmpvar_23;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_24.xyz);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_26;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_27;
    mediump float tmpvar_28;
    tmpvar_28 = dot (tmpvar_26, vec3(0.299, 0.587, 0.114));
    gray_27 = tmpvar_28;
    highp vec2 tmpvar_29;
    tmpvar_29.y = 0.5;
    tmpvar_29.x = (gray_27 * _LightmapColorScale);
    lowp vec4 tmpvar_30;
    tmpvar_30 = texture2D (_LightmapColorChange, tmpvar_29);
    fc_9 = mix (((tmpvar_30 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_26, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_31;
  tmpvar_31 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_31 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_33;
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_37;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_MatrixV[0].xyz;
  tmpvar_38[1] = unity_MatrixV[1].xyz;
  tmpvar_38[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_38 * worldNorm_5);
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_39 - (2.0 * (
    dot (worldNorm_5, tmpvar_39)
   * worldNorm_5)));
  R_4 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = ((tmpvar_41.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatCap, tmpvar_42);
  mc_3 = tmpvar_43;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_44;
    highp vec2 P_45;
    P_45 = ((tmpvar_42 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_44 = texture2D (_SpecularMap, P_45);
    mediump float tmpvar_46;
    tmpvar_46 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_44 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_46 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_31 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_47;
  mediump vec3 srcColor_48;
  srcColor_48 = colorBlendLightMap_8;
  tmpvar_47 = (xlv_COLOR1.xyz + (srcColor_48 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_47;
  highp vec4 tmpvar_49;
  tmpvar_49.xyz = colorBlendLightMap_8;
  tmpvar_49.w = _BloomIntensity;
  tmpvar_1 = tmpvar_49;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_4 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.x;
  tmpvar_21.y = worldBinormal_2.x;
  tmpvar_21.z = worldNormal_4.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.y;
  tmpvar_22.y = worldBinormal_2.y;
  tmpvar_22.z = worldNormal_4.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_3.z;
  tmpvar_23.y = worldBinormal_2.z;
  tmpvar_23.z = worldNormal_4.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase.xyz + (h_39 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_41 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  tmpvar_31 = tmpvar_33;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_21;
  vpos_21 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_21.y = ((fract(vpos_21.y) * 0.0625) + unity_LODFade.y);
  lowp float x_22;
  x_22 = (texture2D (_DitherMaskLOD2D, vpos_21).w - 0.5);
  if ((x_22 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_23.w;
  lowp vec4 color_24;
  color_24 = tmpvar_23;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_24.xyz);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_26;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_27;
    mediump float tmpvar_28;
    tmpvar_28 = dot (tmpvar_26, vec3(0.299, 0.587, 0.114));
    gray_27 = tmpvar_28;
    highp vec2 tmpvar_29;
    tmpvar_29.y = 0.5;
    tmpvar_29.x = (gray_27 * _LightmapColorScale);
    lowp vec4 tmpvar_30;
    tmpvar_30 = texture2D (_LightmapColorChange, tmpvar_29);
    fc_9 = mix (((tmpvar_30 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_26, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_31;
  tmpvar_31 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_31 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_33;
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_37;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_MatrixV[0].xyz;
  tmpvar_38[1] = unity_MatrixV[1].xyz;
  tmpvar_38[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_38 * worldNorm_5);
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_39 - (2.0 * (
    dot (worldNorm_5, tmpvar_39)
   * worldNorm_5)));
  R_4 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = ((tmpvar_41.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatCap, tmpvar_42);
  mc_3 = tmpvar_43;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_44;
    highp vec2 P_45;
    P_45 = ((tmpvar_42 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_44 = texture2D (_SpecularMap, P_45);
    mediump float tmpvar_46;
    tmpvar_46 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_44 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_46 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_31 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_47;
  mediump vec3 srcColor_48;
  srcColor_48 = colorBlendLightMap_8;
  tmpvar_47 = (xlv_COLOR1.xyz + (srcColor_48 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_47;
  highp vec4 tmpvar_49;
  tmpvar_49.xyz = colorBlendLightMap_8;
  tmpvar_49.w = _BloomIntensity;
  tmpvar_1 = tmpvar_49;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_4 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.x;
  tmpvar_21.y = worldBinormal_2.x;
  tmpvar_21.z = worldNormal_4.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.y;
  tmpvar_22.y = worldBinormal_2.y;
  tmpvar_22.z = worldNormal_4.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_3.z;
  tmpvar_23.y = worldBinormal_2.z;
  tmpvar_23.z = worldNormal_4.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase.xyz + (h_39 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_41 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  tmpvar_31 = tmpvar_33;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_21;
  vpos_21 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_21.y = ((fract(vpos_21.y) * 0.0625) + unity_LODFade.y);
  lowp float x_22;
  x_22 = (texture2D (_DitherMaskLOD2D, vpos_21).w - 0.5);
  if ((x_22 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_23.w;
  lowp vec4 color_24;
  color_24 = tmpvar_23;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_24.xyz);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_26;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_27;
    mediump float tmpvar_28;
    tmpvar_28 = dot (tmpvar_26, vec3(0.299, 0.587, 0.114));
    gray_27 = tmpvar_28;
    highp vec2 tmpvar_29;
    tmpvar_29.y = 0.5;
    tmpvar_29.x = (gray_27 * _LightmapColorScale);
    lowp vec4 tmpvar_30;
    tmpvar_30 = texture2D (_LightmapColorChange, tmpvar_29);
    fc_9 = mix (((tmpvar_30 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_26, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_31;
  tmpvar_31 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_31 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_33;
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_37;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_MatrixV[0].xyz;
  tmpvar_38[1] = unity_MatrixV[1].xyz;
  tmpvar_38[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_38 * worldNorm_5);
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_39 - (2.0 * (
    dot (worldNorm_5, tmpvar_39)
   * worldNorm_5)));
  R_4 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = ((tmpvar_41.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatCap, tmpvar_42);
  mc_3 = tmpvar_43;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_44;
    highp vec2 P_45;
    P_45 = ((tmpvar_42 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_44 = texture2D (_SpecularMap, P_45);
    mediump float tmpvar_46;
    tmpvar_46 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_44 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_46 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_31 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_47;
  mediump vec3 srcColor_48;
  srcColor_48 = colorBlendLightMap_8;
  tmpvar_47 = (xlv_COLOR1.xyz + (srcColor_48 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_47;
  highp vec4 tmpvar_49;
  tmpvar_49.xyz = colorBlendLightMap_8;
  tmpvar_49.w = _BloomIntensity;
  tmpvar_1 = tmpvar_49;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_3 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.x;
  tmpvar_21.y = worldBinormal_1.x;
  tmpvar_21.z = worldNormal_3.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.y;
  tmpvar_22.y = worldBinormal_1.y;
  tmpvar_22.z = worldNormal_3.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_2.z;
  tmpvar_23.y = worldBinormal_1.z;
  tmpvar_23.z = worldNormal_3.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase2.xyz + (h_39 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_41 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams2.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams2.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase2.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor2.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  highp vec4 tmpvar_67;
  mediump float fogFactor_68;
  mediump vec3 fogColor_69;
  mediump vec3 heightFogColor_70;
  highp float HeightFogFactor_71;
  mediump vec3 atomesphereFogColor_72;
  mediump float h_73;
  highp float linearFogDensity_74;
  mediump float len_75;
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((len_75 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_74 = (tmpvar_77 * (2.0 - tmpvar_77));
  if ((len_75 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_74 = (linearFogDensity_74 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_78;
  tmpvar_78 = min (pow (linearFogDensity_74, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_74 = tmpvar_78;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_79 = tmpvar_80;
  h_73 = (tmpvar_79 * (2.0 - tmpvar_79));
  highp vec3 tmpvar_81;
  tmpvar_81 = (_HeigtFogColBase3.xyz + (h_73 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_72 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (atomesphereFogColor_72, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_75 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_72 = tmpvar_82;
  mediump float tmpvar_83;
  mediump float r_84;
  mediump float f_85;
  mediump float u_86;
  mediump float l_87;
  mediump float fogInt_88;
  fogInt_88 = 1.0;
  highp float tmpvar_89;
  tmpvar_89 = (_HeigtFogParams3.x * tmpvar_32.y);
  highp float tmpvar_90;
  tmpvar_90 = abs(tmpvar_89);
  if ((tmpvar_90 > 0.01)) {
    highp float tmpvar_91;
    tmpvar_91 = exp(-(tmpvar_89));
    fogInt_88 = ((1.0 - tmpvar_91) / tmpvar_89);
  };
  highp float tmpvar_92;
  tmpvar_92 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_87 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (l_87 * _HeigtFogParams3.y);
  u_86 = tmpvar_93;
  fogInt_88 = (fogInt_88 * u_86);
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = clamp (((l_87 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_94 = tmpvar_95;
  r_84 = (tmpvar_94 * (2.0 - tmpvar_94));
  r_84 = ((r_84 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_85 = ((1.0 - clamp (
    exp2(-(fogInt_88))
  , 0.0, 1.0)) * r_84);
  highp float tmpvar_96;
  tmpvar_96 = min (f_85, _HeigtFogColBase3.w);
  tmpvar_83 = tmpvar_96;
  HeightFogFactor_71 = tmpvar_83;
  highp vec3 tmpvar_97;
  tmpvar_97 = _Mihoyo_FogColor3.xyz;
  heightFogColor_70 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = ((heightFogColor_70 * HeightFogFactor_71) + ((atomesphereFogColor_72 * tmpvar_78) * (1.0 - HeightFogFactor_71)));
  fogColor_69 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((1.0 - tmpvar_78) * (1.0 - HeightFogFactor_71));
  fogFactor_68 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.xyz = fogColor_69;
  tmpvar_100.w = fogFactor_68;
  tmpvar_67 = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = mix (tmpvar_33, tmpvar_67, vec4(_LerpFactor));
  tmpvar_31 = tmpvar_101;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_21;
  vpos_21 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_21.y = ((fract(vpos_21.y) * 0.0625) + unity_LODFade.y);
  lowp float x_22;
  x_22 = (texture2D (_DitherMaskLOD2D, vpos_21).w - 0.5);
  if ((x_22 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_23.w;
  lowp vec4 color_24;
  color_24 = tmpvar_23;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_24.xyz);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_26;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_27;
    mediump float tmpvar_28;
    tmpvar_28 = dot (tmpvar_26, vec3(0.299, 0.587, 0.114));
    gray_27 = tmpvar_28;
    highp vec2 tmpvar_29;
    tmpvar_29.y = 0.5;
    tmpvar_29.x = (gray_27 * _LightmapColorScale);
    lowp vec4 tmpvar_30;
    tmpvar_30 = texture2D (_LightmapColorChange, tmpvar_29);
    fc_9 = mix (((tmpvar_30 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_26, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_31;
  tmpvar_31 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_31 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_33;
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_37;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_MatrixV[0].xyz;
  tmpvar_38[1] = unity_MatrixV[1].xyz;
  tmpvar_38[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_38 * worldNorm_5);
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_39 - (2.0 * (
    dot (worldNorm_5, tmpvar_39)
   * worldNorm_5)));
  R_4 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = ((tmpvar_41.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatCap, tmpvar_42);
  mc_3 = tmpvar_43;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_44;
    highp vec2 P_45;
    P_45 = ((tmpvar_42 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_44 = texture2D (_SpecularMap, P_45);
    mediump float tmpvar_46;
    tmpvar_46 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_44 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_46 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_31 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_47;
  mediump vec3 srcColor_48;
  srcColor_48 = colorBlendLightMap_8;
  tmpvar_47 = (xlv_COLOR1.xyz + (srcColor_48 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_47;
  highp vec4 tmpvar_49;
  tmpvar_49.xyz = colorBlendLightMap_8;
  tmpvar_49.w = _BloomIntensity;
  tmpvar_1 = tmpvar_49;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_3 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.x;
  tmpvar_21.y = worldBinormal_1.x;
  tmpvar_21.z = worldNormal_3.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.y;
  tmpvar_22.y = worldBinormal_1.y;
  tmpvar_22.z = worldNormal_3.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_2.z;
  tmpvar_23.y = worldBinormal_1.z;
  tmpvar_23.z = worldNormal_3.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase2.xyz + (h_39 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_41 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams2.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams2.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase2.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor2.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  highp vec4 tmpvar_67;
  mediump float fogFactor_68;
  mediump vec3 fogColor_69;
  mediump vec3 heightFogColor_70;
  highp float HeightFogFactor_71;
  mediump vec3 atomesphereFogColor_72;
  mediump float h_73;
  highp float linearFogDensity_74;
  mediump float len_75;
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((len_75 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_74 = (tmpvar_77 * (2.0 - tmpvar_77));
  if ((len_75 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_74 = (linearFogDensity_74 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_78;
  tmpvar_78 = min (pow (linearFogDensity_74, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_74 = tmpvar_78;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_79 = tmpvar_80;
  h_73 = (tmpvar_79 * (2.0 - tmpvar_79));
  highp vec3 tmpvar_81;
  tmpvar_81 = (_HeigtFogColBase3.xyz + (h_73 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_72 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (atomesphereFogColor_72, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_75 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_72 = tmpvar_82;
  mediump float tmpvar_83;
  mediump float r_84;
  mediump float f_85;
  mediump float u_86;
  mediump float l_87;
  mediump float fogInt_88;
  fogInt_88 = 1.0;
  highp float tmpvar_89;
  tmpvar_89 = (_HeigtFogParams3.x * tmpvar_32.y);
  highp float tmpvar_90;
  tmpvar_90 = abs(tmpvar_89);
  if ((tmpvar_90 > 0.01)) {
    highp float tmpvar_91;
    tmpvar_91 = exp(-(tmpvar_89));
    fogInt_88 = ((1.0 - tmpvar_91) / tmpvar_89);
  };
  highp float tmpvar_92;
  tmpvar_92 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_87 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (l_87 * _HeigtFogParams3.y);
  u_86 = tmpvar_93;
  fogInt_88 = (fogInt_88 * u_86);
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = clamp (((l_87 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_94 = tmpvar_95;
  r_84 = (tmpvar_94 * (2.0 - tmpvar_94));
  r_84 = ((r_84 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_85 = ((1.0 - clamp (
    exp2(-(fogInt_88))
  , 0.0, 1.0)) * r_84);
  highp float tmpvar_96;
  tmpvar_96 = min (f_85, _HeigtFogColBase3.w);
  tmpvar_83 = tmpvar_96;
  HeightFogFactor_71 = tmpvar_83;
  highp vec3 tmpvar_97;
  tmpvar_97 = _Mihoyo_FogColor3.xyz;
  heightFogColor_70 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = ((heightFogColor_70 * HeightFogFactor_71) + ((atomesphereFogColor_72 * tmpvar_78) * (1.0 - HeightFogFactor_71)));
  fogColor_69 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((1.0 - tmpvar_78) * (1.0 - HeightFogFactor_71));
  fogFactor_68 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.xyz = fogColor_69;
  tmpvar_100.w = fogFactor_68;
  tmpvar_67 = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = mix (tmpvar_33, tmpvar_67, vec4(_LerpFactor));
  tmpvar_31 = tmpvar_101;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_21;
  vpos_21 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_21.y = ((fract(vpos_21.y) * 0.0625) + unity_LODFade.y);
  lowp float x_22;
  x_22 = (texture2D (_DitherMaskLOD2D, vpos_21).w - 0.5);
  if ((x_22 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_23.w;
  lowp vec4 color_24;
  color_24 = tmpvar_23;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_24.xyz);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_26;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_27;
    mediump float tmpvar_28;
    tmpvar_28 = dot (tmpvar_26, vec3(0.299, 0.587, 0.114));
    gray_27 = tmpvar_28;
    highp vec2 tmpvar_29;
    tmpvar_29.y = 0.5;
    tmpvar_29.x = (gray_27 * _LightmapColorScale);
    lowp vec4 tmpvar_30;
    tmpvar_30 = texture2D (_LightmapColorChange, tmpvar_29);
    fc_9 = mix (((tmpvar_30 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_26, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_31;
  tmpvar_31 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_31 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_33;
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_37;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_MatrixV[0].xyz;
  tmpvar_38[1] = unity_MatrixV[1].xyz;
  tmpvar_38[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_38 * worldNorm_5);
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_39 - (2.0 * (
    dot (worldNorm_5, tmpvar_39)
   * worldNorm_5)));
  R_4 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = ((tmpvar_41.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatCap, tmpvar_42);
  mc_3 = tmpvar_43;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_44;
    highp vec2 P_45;
    P_45 = ((tmpvar_42 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_44 = texture2D (_SpecularMap, P_45);
    mediump float tmpvar_46;
    tmpvar_46 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_44 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_46 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_31 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_47;
  mediump vec3 srcColor_48;
  srcColor_48 = colorBlendLightMap_8;
  tmpvar_47 = (xlv_COLOR1.xyz + (srcColor_48 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_47;
  highp vec4 tmpvar_49;
  tmpvar_49.xyz = colorBlendLightMap_8;
  tmpvar_49.w = _BloomIntensity;
  tmpvar_1 = tmpvar_49;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_3 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.x;
  tmpvar_21.y = worldBinormal_1.x;
  tmpvar_21.z = worldNormal_3.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.y;
  tmpvar_22.y = worldBinormal_1.y;
  tmpvar_22.z = worldNormal_3.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_2.z;
  tmpvar_23.y = worldBinormal_1.z;
  tmpvar_23.z = worldNormal_3.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase2.xyz + (h_39 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_41 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams2.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams2.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase2.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor2.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  highp vec4 tmpvar_67;
  mediump float fogFactor_68;
  mediump vec3 fogColor_69;
  mediump vec3 heightFogColor_70;
  highp float HeightFogFactor_71;
  mediump vec3 atomesphereFogColor_72;
  mediump float h_73;
  highp float linearFogDensity_74;
  mediump float len_75;
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((len_75 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_74 = (tmpvar_77 * (2.0 - tmpvar_77));
  if ((len_75 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_74 = (linearFogDensity_74 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_78;
  tmpvar_78 = min (pow (linearFogDensity_74, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_74 = tmpvar_78;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_79 = tmpvar_80;
  h_73 = (tmpvar_79 * (2.0 - tmpvar_79));
  highp vec3 tmpvar_81;
  tmpvar_81 = (_HeigtFogColBase3.xyz + (h_73 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_72 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (atomesphereFogColor_72, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_75 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_72 = tmpvar_82;
  mediump float tmpvar_83;
  mediump float r_84;
  mediump float f_85;
  mediump float u_86;
  mediump float l_87;
  mediump float fogInt_88;
  fogInt_88 = 1.0;
  highp float tmpvar_89;
  tmpvar_89 = (_HeigtFogParams3.x * tmpvar_32.y);
  highp float tmpvar_90;
  tmpvar_90 = abs(tmpvar_89);
  if ((tmpvar_90 > 0.01)) {
    highp float tmpvar_91;
    tmpvar_91 = exp(-(tmpvar_89));
    fogInt_88 = ((1.0 - tmpvar_91) / tmpvar_89);
  };
  highp float tmpvar_92;
  tmpvar_92 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_87 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (l_87 * _HeigtFogParams3.y);
  u_86 = tmpvar_93;
  fogInt_88 = (fogInt_88 * u_86);
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = clamp (((l_87 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_94 = tmpvar_95;
  r_84 = (tmpvar_94 * (2.0 - tmpvar_94));
  r_84 = ((r_84 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_85 = ((1.0 - clamp (
    exp2(-(fogInt_88))
  , 0.0, 1.0)) * r_84);
  highp float tmpvar_96;
  tmpvar_96 = min (f_85, _HeigtFogColBase3.w);
  tmpvar_83 = tmpvar_96;
  HeightFogFactor_71 = tmpvar_83;
  highp vec3 tmpvar_97;
  tmpvar_97 = _Mihoyo_FogColor3.xyz;
  heightFogColor_70 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = ((heightFogColor_70 * HeightFogFactor_71) + ((atomesphereFogColor_72 * tmpvar_78) * (1.0 - HeightFogFactor_71)));
  fogColor_69 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((1.0 - tmpvar_78) * (1.0 - HeightFogFactor_71));
  fogFactor_68 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.xyz = fogColor_69;
  tmpvar_100.w = fogFactor_68;
  tmpvar_67 = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = mix (tmpvar_33, tmpvar_67, vec4(_LerpFactor));
  tmpvar_31 = tmpvar_101;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_21;
  vpos_21 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_21.y = ((fract(vpos_21.y) * 0.0625) + unity_LODFade.y);
  lowp float x_22;
  x_22 = (texture2D (_DitherMaskLOD2D, vpos_21).w - 0.5);
  if ((x_22 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_23.w;
  lowp vec4 color_24;
  color_24 = tmpvar_23;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_24.xyz);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_26;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_27;
    mediump float tmpvar_28;
    tmpvar_28 = dot (tmpvar_26, vec3(0.299, 0.587, 0.114));
    gray_27 = tmpvar_28;
    highp vec2 tmpvar_29;
    tmpvar_29.y = 0.5;
    tmpvar_29.x = (gray_27 * _LightmapColorScale);
    lowp vec4 tmpvar_30;
    tmpvar_30 = texture2D (_LightmapColorChange, tmpvar_29);
    fc_9 = mix (((tmpvar_30 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_26, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_31;
  tmpvar_31 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_31 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_33;
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_37;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_MatrixV[0].xyz;
  tmpvar_38[1] = unity_MatrixV[1].xyz;
  tmpvar_38[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_38 * worldNorm_5);
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_39 - (2.0 * (
    dot (worldNorm_5, tmpvar_39)
   * worldNorm_5)));
  R_4 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = ((tmpvar_41.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatCap, tmpvar_42);
  mc_3 = tmpvar_43;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_44;
    highp vec2 P_45;
    P_45 = ((tmpvar_42 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_44 = texture2D (_SpecularMap, P_45);
    mediump float tmpvar_46;
    tmpvar_46 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_44 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_46 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_31 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_47;
  mediump vec3 srcColor_48;
  srcColor_48 = colorBlendLightMap_8;
  tmpvar_47 = (xlv_COLOR1.xyz + (srcColor_48 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_47;
  highp vec4 tmpvar_49;
  tmpvar_49.xyz = colorBlendLightMap_8;
  tmpvar_49.w = _BloomIntensity;
  tmpvar_1 = tmpvar_49;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_4 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.x;
  tmpvar_21.y = worldBinormal_2.x;
  tmpvar_21.z = worldNormal_4.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.y;
  tmpvar_22.y = worldBinormal_2.y;
  tmpvar_22.z = worldNormal_4.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_3.z;
  tmpvar_23.y = worldBinormal_2.z;
  tmpvar_23.z = worldNormal_4.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase.xyz + (h_39 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_41 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  tmpvar_31 = tmpvar_33;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_21;
  vpos_21 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_21.y = ((fract(vpos_21.y) * 0.0625) + unity_LODFade.y);
  lowp float x_22;
  x_22 = (texture2D (_DitherMaskLOD2D, vpos_21).w - 0.5);
  if ((x_22 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_25;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_26;
    mediump float tmpvar_27;
    tmpvar_27 = dot (tmpvar_25, vec3(0.299, 0.587, 0.114));
    gray_26 = tmpvar_27;
    highp vec2 tmpvar_28;
    tmpvar_28.y = 0.5;
    tmpvar_28.x = (gray_26 * _LightmapColorScale);
    lowp vec4 tmpvar_29;
    tmpvar_29 = texture2D (_LightmapColorChange, tmpvar_28);
    fc_9 = mix (((tmpvar_29 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_25, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_30;
  tmpvar_30 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_30 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_32;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_36;
  highp mat3 tmpvar_37;
  tmpvar_37[0] = unity_MatrixV[0].xyz;
  tmpvar_37[1] = unity_MatrixV[1].xyz;
  tmpvar_37[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_37 * worldNorm_5);
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_39;
  tmpvar_39 = (tmpvar_38 - (2.0 * (
    dot (worldNorm_5, tmpvar_38)
   * worldNorm_5)));
  R_4 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = ((tmpvar_40.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_MatCap, tmpvar_41);
  mc_3 = tmpvar_42;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_43;
    highp vec2 P_44;
    P_44 = ((tmpvar_41 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_43 = texture2D (_SpecularMap, P_44);
    mediump float tmpvar_45;
    tmpvar_45 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_43 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_45 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_30 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_46;
  mediump vec3 srcColor_47;
  srcColor_47 = colorBlendLightMap_8;
  tmpvar_46 = (xlv_COLOR1.xyz + (srcColor_47 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_46;
  highp vec4 tmpvar_48;
  tmpvar_48.xyz = colorBlendLightMap_8;
  tmpvar_48.w = _BloomIntensity;
  tmpvar_1 = tmpvar_48;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_4 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.x;
  tmpvar_21.y = worldBinormal_2.x;
  tmpvar_21.z = worldNormal_4.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.y;
  tmpvar_22.y = worldBinormal_2.y;
  tmpvar_22.z = worldNormal_4.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_3.z;
  tmpvar_23.y = worldBinormal_2.z;
  tmpvar_23.z = worldNormal_4.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase.xyz + (h_39 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_41 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  tmpvar_31 = tmpvar_33;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_21;
  vpos_21 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_21.y = ((fract(vpos_21.y) * 0.0625) + unity_LODFade.y);
  lowp float x_22;
  x_22 = (texture2D (_DitherMaskLOD2D, vpos_21).w - 0.5);
  if ((x_22 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_25;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_26;
    mediump float tmpvar_27;
    tmpvar_27 = dot (tmpvar_25, vec3(0.299, 0.587, 0.114));
    gray_26 = tmpvar_27;
    highp vec2 tmpvar_28;
    tmpvar_28.y = 0.5;
    tmpvar_28.x = (gray_26 * _LightmapColorScale);
    lowp vec4 tmpvar_29;
    tmpvar_29 = texture2D (_LightmapColorChange, tmpvar_28);
    fc_9 = mix (((tmpvar_29 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_25, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_30;
  tmpvar_30 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_30 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_32;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_36;
  highp mat3 tmpvar_37;
  tmpvar_37[0] = unity_MatrixV[0].xyz;
  tmpvar_37[1] = unity_MatrixV[1].xyz;
  tmpvar_37[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_37 * worldNorm_5);
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_39;
  tmpvar_39 = (tmpvar_38 - (2.0 * (
    dot (worldNorm_5, tmpvar_38)
   * worldNorm_5)));
  R_4 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = ((tmpvar_40.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_MatCap, tmpvar_41);
  mc_3 = tmpvar_42;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_43;
    highp vec2 P_44;
    P_44 = ((tmpvar_41 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_43 = texture2D (_SpecularMap, P_44);
    mediump float tmpvar_45;
    tmpvar_45 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_43 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_45 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_30 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_46;
  mediump vec3 srcColor_47;
  srcColor_47 = colorBlendLightMap_8;
  tmpvar_46 = (xlv_COLOR1.xyz + (srcColor_47 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_46;
  highp vec4 tmpvar_48;
  tmpvar_48.xyz = colorBlendLightMap_8;
  tmpvar_48.w = _BloomIntensity;
  tmpvar_1 = tmpvar_48;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_4 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.x;
  tmpvar_21.y = worldBinormal_2.x;
  tmpvar_21.z = worldNormal_4.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.y;
  tmpvar_22.y = worldBinormal_2.y;
  tmpvar_22.z = worldNormal_4.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_3.z;
  tmpvar_23.y = worldBinormal_2.z;
  tmpvar_23.z = worldNormal_4.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase.xyz + (h_39 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_41 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  tmpvar_31 = tmpvar_33;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_21;
  vpos_21 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_21.y = ((fract(vpos_21.y) * 0.0625) + unity_LODFade.y);
  lowp float x_22;
  x_22 = (texture2D (_DitherMaskLOD2D, vpos_21).w - 0.5);
  if ((x_22 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_25;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_26;
    mediump float tmpvar_27;
    tmpvar_27 = dot (tmpvar_25, vec3(0.299, 0.587, 0.114));
    gray_26 = tmpvar_27;
    highp vec2 tmpvar_28;
    tmpvar_28.y = 0.5;
    tmpvar_28.x = (gray_26 * _LightmapColorScale);
    lowp vec4 tmpvar_29;
    tmpvar_29 = texture2D (_LightmapColorChange, tmpvar_28);
    fc_9 = mix (((tmpvar_29 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_25, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_30;
  tmpvar_30 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_30 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_32;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_36;
  highp mat3 tmpvar_37;
  tmpvar_37[0] = unity_MatrixV[0].xyz;
  tmpvar_37[1] = unity_MatrixV[1].xyz;
  tmpvar_37[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_37 * worldNorm_5);
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_39;
  tmpvar_39 = (tmpvar_38 - (2.0 * (
    dot (worldNorm_5, tmpvar_38)
   * worldNorm_5)));
  R_4 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = ((tmpvar_40.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_MatCap, tmpvar_41);
  mc_3 = tmpvar_42;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_43;
    highp vec2 P_44;
    P_44 = ((tmpvar_41 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_43 = texture2D (_SpecularMap, P_44);
    mediump float tmpvar_45;
    tmpvar_45 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_43 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_45 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_30 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_46;
  mediump vec3 srcColor_47;
  srcColor_47 = colorBlendLightMap_8;
  tmpvar_46 = (xlv_COLOR1.xyz + (srcColor_47 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_46;
  highp vec4 tmpvar_48;
  tmpvar_48.xyz = colorBlendLightMap_8;
  tmpvar_48.w = _BloomIntensity;
  tmpvar_1 = tmpvar_48;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_3 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.x;
  tmpvar_21.y = worldBinormal_1.x;
  tmpvar_21.z = worldNormal_3.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.y;
  tmpvar_22.y = worldBinormal_1.y;
  tmpvar_22.z = worldNormal_3.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_2.z;
  tmpvar_23.y = worldBinormal_1.z;
  tmpvar_23.z = worldNormal_3.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase2.xyz + (h_39 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_41 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams2.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams2.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase2.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor2.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  highp vec4 tmpvar_67;
  mediump float fogFactor_68;
  mediump vec3 fogColor_69;
  mediump vec3 heightFogColor_70;
  highp float HeightFogFactor_71;
  mediump vec3 atomesphereFogColor_72;
  mediump float h_73;
  highp float linearFogDensity_74;
  mediump float len_75;
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((len_75 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_74 = (tmpvar_77 * (2.0 - tmpvar_77));
  if ((len_75 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_74 = (linearFogDensity_74 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_78;
  tmpvar_78 = min (pow (linearFogDensity_74, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_74 = tmpvar_78;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_79 = tmpvar_80;
  h_73 = (tmpvar_79 * (2.0 - tmpvar_79));
  highp vec3 tmpvar_81;
  tmpvar_81 = (_HeigtFogColBase3.xyz + (h_73 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_72 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (atomesphereFogColor_72, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_75 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_72 = tmpvar_82;
  mediump float tmpvar_83;
  mediump float r_84;
  mediump float f_85;
  mediump float u_86;
  mediump float l_87;
  mediump float fogInt_88;
  fogInt_88 = 1.0;
  highp float tmpvar_89;
  tmpvar_89 = (_HeigtFogParams3.x * tmpvar_32.y);
  highp float tmpvar_90;
  tmpvar_90 = abs(tmpvar_89);
  if ((tmpvar_90 > 0.01)) {
    highp float tmpvar_91;
    tmpvar_91 = exp(-(tmpvar_89));
    fogInt_88 = ((1.0 - tmpvar_91) / tmpvar_89);
  };
  highp float tmpvar_92;
  tmpvar_92 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_87 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (l_87 * _HeigtFogParams3.y);
  u_86 = tmpvar_93;
  fogInt_88 = (fogInt_88 * u_86);
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = clamp (((l_87 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_94 = tmpvar_95;
  r_84 = (tmpvar_94 * (2.0 - tmpvar_94));
  r_84 = ((r_84 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_85 = ((1.0 - clamp (
    exp2(-(fogInt_88))
  , 0.0, 1.0)) * r_84);
  highp float tmpvar_96;
  tmpvar_96 = min (f_85, _HeigtFogColBase3.w);
  tmpvar_83 = tmpvar_96;
  HeightFogFactor_71 = tmpvar_83;
  highp vec3 tmpvar_97;
  tmpvar_97 = _Mihoyo_FogColor3.xyz;
  heightFogColor_70 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = ((heightFogColor_70 * HeightFogFactor_71) + ((atomesphereFogColor_72 * tmpvar_78) * (1.0 - HeightFogFactor_71)));
  fogColor_69 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((1.0 - tmpvar_78) * (1.0 - HeightFogFactor_71));
  fogFactor_68 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.xyz = fogColor_69;
  tmpvar_100.w = fogFactor_68;
  tmpvar_67 = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = mix (tmpvar_33, tmpvar_67, vec4(_LerpFactor));
  tmpvar_31 = tmpvar_101;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_21;
  vpos_21 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_21.y = ((fract(vpos_21.y) * 0.0625) + unity_LODFade.y);
  lowp float x_22;
  x_22 = (texture2D (_DitherMaskLOD2D, vpos_21).w - 0.5);
  if ((x_22 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_25;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_26;
    mediump float tmpvar_27;
    tmpvar_27 = dot (tmpvar_25, vec3(0.299, 0.587, 0.114));
    gray_26 = tmpvar_27;
    highp vec2 tmpvar_28;
    tmpvar_28.y = 0.5;
    tmpvar_28.x = (gray_26 * _LightmapColorScale);
    lowp vec4 tmpvar_29;
    tmpvar_29 = texture2D (_LightmapColorChange, tmpvar_28);
    fc_9 = mix (((tmpvar_29 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_25, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_30;
  tmpvar_30 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_30 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_32;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_36;
  highp mat3 tmpvar_37;
  tmpvar_37[0] = unity_MatrixV[0].xyz;
  tmpvar_37[1] = unity_MatrixV[1].xyz;
  tmpvar_37[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_37 * worldNorm_5);
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_39;
  tmpvar_39 = (tmpvar_38 - (2.0 * (
    dot (worldNorm_5, tmpvar_38)
   * worldNorm_5)));
  R_4 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = ((tmpvar_40.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_MatCap, tmpvar_41);
  mc_3 = tmpvar_42;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_43;
    highp vec2 P_44;
    P_44 = ((tmpvar_41 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_43 = texture2D (_SpecularMap, P_44);
    mediump float tmpvar_45;
    tmpvar_45 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_43 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_45 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_30 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_46;
  mediump vec3 srcColor_47;
  srcColor_47 = colorBlendLightMap_8;
  tmpvar_46 = (xlv_COLOR1.xyz + (srcColor_47 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_46;
  highp vec4 tmpvar_48;
  tmpvar_48.xyz = colorBlendLightMap_8;
  tmpvar_48.w = _BloomIntensity;
  tmpvar_1 = tmpvar_48;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_3 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.x;
  tmpvar_21.y = worldBinormal_1.x;
  tmpvar_21.z = worldNormal_3.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.y;
  tmpvar_22.y = worldBinormal_1.y;
  tmpvar_22.z = worldNormal_3.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_2.z;
  tmpvar_23.y = worldBinormal_1.z;
  tmpvar_23.z = worldNormal_3.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase2.xyz + (h_39 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_41 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams2.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams2.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase2.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor2.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  highp vec4 tmpvar_67;
  mediump float fogFactor_68;
  mediump vec3 fogColor_69;
  mediump vec3 heightFogColor_70;
  highp float HeightFogFactor_71;
  mediump vec3 atomesphereFogColor_72;
  mediump float h_73;
  highp float linearFogDensity_74;
  mediump float len_75;
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((len_75 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_74 = (tmpvar_77 * (2.0 - tmpvar_77));
  if ((len_75 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_74 = (linearFogDensity_74 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_78;
  tmpvar_78 = min (pow (linearFogDensity_74, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_74 = tmpvar_78;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_79 = tmpvar_80;
  h_73 = (tmpvar_79 * (2.0 - tmpvar_79));
  highp vec3 tmpvar_81;
  tmpvar_81 = (_HeigtFogColBase3.xyz + (h_73 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_72 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (atomesphereFogColor_72, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_75 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_72 = tmpvar_82;
  mediump float tmpvar_83;
  mediump float r_84;
  mediump float f_85;
  mediump float u_86;
  mediump float l_87;
  mediump float fogInt_88;
  fogInt_88 = 1.0;
  highp float tmpvar_89;
  tmpvar_89 = (_HeigtFogParams3.x * tmpvar_32.y);
  highp float tmpvar_90;
  tmpvar_90 = abs(tmpvar_89);
  if ((tmpvar_90 > 0.01)) {
    highp float tmpvar_91;
    tmpvar_91 = exp(-(tmpvar_89));
    fogInt_88 = ((1.0 - tmpvar_91) / tmpvar_89);
  };
  highp float tmpvar_92;
  tmpvar_92 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_87 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (l_87 * _HeigtFogParams3.y);
  u_86 = tmpvar_93;
  fogInt_88 = (fogInt_88 * u_86);
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = clamp (((l_87 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_94 = tmpvar_95;
  r_84 = (tmpvar_94 * (2.0 - tmpvar_94));
  r_84 = ((r_84 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_85 = ((1.0 - clamp (
    exp2(-(fogInt_88))
  , 0.0, 1.0)) * r_84);
  highp float tmpvar_96;
  tmpvar_96 = min (f_85, _HeigtFogColBase3.w);
  tmpvar_83 = tmpvar_96;
  HeightFogFactor_71 = tmpvar_83;
  highp vec3 tmpvar_97;
  tmpvar_97 = _Mihoyo_FogColor3.xyz;
  heightFogColor_70 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = ((heightFogColor_70 * HeightFogFactor_71) + ((atomesphereFogColor_72 * tmpvar_78) * (1.0 - HeightFogFactor_71)));
  fogColor_69 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((1.0 - tmpvar_78) * (1.0 - HeightFogFactor_71));
  fogFactor_68 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.xyz = fogColor_69;
  tmpvar_100.w = fogFactor_68;
  tmpvar_67 = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = mix (tmpvar_33, tmpvar_67, vec4(_LerpFactor));
  tmpvar_31 = tmpvar_101;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_21;
  vpos_21 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_21.y = ((fract(vpos_21.y) * 0.0625) + unity_LODFade.y);
  lowp float x_22;
  x_22 = (texture2D (_DitherMaskLOD2D, vpos_21).w - 0.5);
  if ((x_22 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_25;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_26;
    mediump float tmpvar_27;
    tmpvar_27 = dot (tmpvar_25, vec3(0.299, 0.587, 0.114));
    gray_26 = tmpvar_27;
    highp vec2 tmpvar_28;
    tmpvar_28.y = 0.5;
    tmpvar_28.x = (gray_26 * _LightmapColorScale);
    lowp vec4 tmpvar_29;
    tmpvar_29 = texture2D (_LightmapColorChange, tmpvar_28);
    fc_9 = mix (((tmpvar_29 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_25, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_30;
  tmpvar_30 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_30 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_32;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_36;
  highp mat3 tmpvar_37;
  tmpvar_37[0] = unity_MatrixV[0].xyz;
  tmpvar_37[1] = unity_MatrixV[1].xyz;
  tmpvar_37[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_37 * worldNorm_5);
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_39;
  tmpvar_39 = (tmpvar_38 - (2.0 * (
    dot (worldNorm_5, tmpvar_38)
   * worldNorm_5)));
  R_4 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = ((tmpvar_40.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_MatCap, tmpvar_41);
  mc_3 = tmpvar_42;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_43;
    highp vec2 P_44;
    P_44 = ((tmpvar_41 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_43 = texture2D (_SpecularMap, P_44);
    mediump float tmpvar_45;
    tmpvar_45 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_43 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_45 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_30 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_46;
  mediump vec3 srcColor_47;
  srcColor_47 = colorBlendLightMap_8;
  tmpvar_46 = (xlv_COLOR1.xyz + (srcColor_47 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_46;
  highp vec4 tmpvar_48;
  tmpvar_48.xyz = colorBlendLightMap_8;
  tmpvar_48.w = _BloomIntensity;
  tmpvar_1 = tmpvar_48;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_3 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.x;
  tmpvar_21.y = worldBinormal_1.x;
  tmpvar_21.z = worldNormal_3.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.y;
  tmpvar_22.y = worldBinormal_1.y;
  tmpvar_22.z = worldNormal_3.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_2.z;
  tmpvar_23.y = worldBinormal_1.z;
  tmpvar_23.z = worldNormal_3.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase2.xyz + (h_39 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_41 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams2.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams2.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase2.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor2.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  highp vec4 tmpvar_67;
  mediump float fogFactor_68;
  mediump vec3 fogColor_69;
  mediump vec3 heightFogColor_70;
  highp float HeightFogFactor_71;
  mediump vec3 atomesphereFogColor_72;
  mediump float h_73;
  highp float linearFogDensity_74;
  mediump float len_75;
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((len_75 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_74 = (tmpvar_77 * (2.0 - tmpvar_77));
  if ((len_75 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_74 = (linearFogDensity_74 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_78;
  tmpvar_78 = min (pow (linearFogDensity_74, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_74 = tmpvar_78;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_79 = tmpvar_80;
  h_73 = (tmpvar_79 * (2.0 - tmpvar_79));
  highp vec3 tmpvar_81;
  tmpvar_81 = (_HeigtFogColBase3.xyz + (h_73 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_72 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (atomesphereFogColor_72, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_75 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_72 = tmpvar_82;
  mediump float tmpvar_83;
  mediump float r_84;
  mediump float f_85;
  mediump float u_86;
  mediump float l_87;
  mediump float fogInt_88;
  fogInt_88 = 1.0;
  highp float tmpvar_89;
  tmpvar_89 = (_HeigtFogParams3.x * tmpvar_32.y);
  highp float tmpvar_90;
  tmpvar_90 = abs(tmpvar_89);
  if ((tmpvar_90 > 0.01)) {
    highp float tmpvar_91;
    tmpvar_91 = exp(-(tmpvar_89));
    fogInt_88 = ((1.0 - tmpvar_91) / tmpvar_89);
  };
  highp float tmpvar_92;
  tmpvar_92 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_87 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (l_87 * _HeigtFogParams3.y);
  u_86 = tmpvar_93;
  fogInt_88 = (fogInt_88 * u_86);
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = clamp (((l_87 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_94 = tmpvar_95;
  r_84 = (tmpvar_94 * (2.0 - tmpvar_94));
  r_84 = ((r_84 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_85 = ((1.0 - clamp (
    exp2(-(fogInt_88))
  , 0.0, 1.0)) * r_84);
  highp float tmpvar_96;
  tmpvar_96 = min (f_85, _HeigtFogColBase3.w);
  tmpvar_83 = tmpvar_96;
  HeightFogFactor_71 = tmpvar_83;
  highp vec3 tmpvar_97;
  tmpvar_97 = _Mihoyo_FogColor3.xyz;
  heightFogColor_70 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = ((heightFogColor_70 * HeightFogFactor_71) + ((atomesphereFogColor_72 * tmpvar_78) * (1.0 - HeightFogFactor_71)));
  fogColor_69 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((1.0 - tmpvar_78) * (1.0 - HeightFogFactor_71));
  fogFactor_68 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.xyz = fogColor_69;
  tmpvar_100.w = fogFactor_68;
  tmpvar_67 = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = mix (tmpvar_33, tmpvar_67, vec4(_LerpFactor));
  tmpvar_31 = tmpvar_101;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_21;
  vpos_21 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_21.y = ((fract(vpos_21.y) * 0.0625) + unity_LODFade.y);
  lowp float x_22;
  x_22 = (texture2D (_DitherMaskLOD2D, vpos_21).w - 0.5);
  if ((x_22 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_25;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_26;
    mediump float tmpvar_27;
    tmpvar_27 = dot (tmpvar_25, vec3(0.299, 0.587, 0.114));
    gray_26 = tmpvar_27;
    highp vec2 tmpvar_28;
    tmpvar_28.y = 0.5;
    tmpvar_28.x = (gray_26 * _LightmapColorScale);
    lowp vec4 tmpvar_29;
    tmpvar_29 = texture2D (_LightmapColorChange, tmpvar_28);
    fc_9 = mix (((tmpvar_29 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_25, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_30;
  tmpvar_30 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_30 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_32;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_36;
  highp mat3 tmpvar_37;
  tmpvar_37[0] = unity_MatrixV[0].xyz;
  tmpvar_37[1] = unity_MatrixV[1].xyz;
  tmpvar_37[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_37 * worldNorm_5);
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_39;
  tmpvar_39 = (tmpvar_38 - (2.0 * (
    dot (worldNorm_5, tmpvar_38)
   * worldNorm_5)));
  R_4 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = ((tmpvar_40.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_MatCap, tmpvar_41);
  mc_3 = tmpvar_42;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_43;
    highp vec2 P_44;
    P_44 = ((tmpvar_41 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_43 = texture2D (_SpecularMap, P_44);
    mediump float tmpvar_45;
    tmpvar_45 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_43 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_45 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_30 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_46;
  mediump vec3 srcColor_47;
  srcColor_47 = colorBlendLightMap_8;
  tmpvar_46 = (xlv_COLOR1.xyz + (srcColor_47 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_46;
  highp vec4 tmpvar_48;
  tmpvar_48.xyz = colorBlendLightMap_8;
  tmpvar_48.w = _BloomIntensity;
  tmpvar_1 = tmpvar_48;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_4 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.x;
  tmpvar_21.y = worldBinormal_2.x;
  tmpvar_21.z = worldNormal_4.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.y;
  tmpvar_22.y = worldBinormal_2.y;
  tmpvar_22.z = worldNormal_4.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_3.z;
  tmpvar_23.y = worldBinormal_2.z;
  tmpvar_23.z = worldNormal_4.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase.xyz + (h_39 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_41 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  tmpvar_31 = tmpvar_33;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_21;
  tmpvar_21 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_21.w;
  lowp vec4 color_22;
  color_22 = tmpvar_21;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_22.xyz);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_23;
  highp vec2 screenCoord_24;
  screenCoord_24 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_25;
  shadow_25 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_26;
    tmpvar_26 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_24);
    shadow_25 = tmpvar_26.x;
  };
  mediump vec3 tmpvar_27;
  tmpvar_27 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_27;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_28;
    mediump float tmpvar_29;
    tmpvar_29 = dot (tmpvar_27, vec3(0.299, 0.587, 0.114));
    gray_28 = tmpvar_29;
    highp vec2 tmpvar_30;
    tmpvar_30.y = 0.5;
    tmpvar_30.x = (gray_28 * _LightmapColorScale);
    lowp vec4 tmpvar_31;
    tmpvar_31 = texture2D (_LightmapColorChange, tmpvar_30);
    fc_9 = mix (((tmpvar_31 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_27, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_25))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_32 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_33;
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_38;
  highp mat3 tmpvar_39;
  tmpvar_39[0] = unity_MatrixV[0].xyz;
  tmpvar_39[1] = unity_MatrixV[1].xyz;
  tmpvar_39[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_39 * worldNorm_5);
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_41;
  tmpvar_41 = (tmpvar_40 - (2.0 * (
    dot (worldNorm_5, tmpvar_40)
   * worldNorm_5)));
  R_4 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = ((tmpvar_42.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MatCap, tmpvar_43);
  mc_3 = tmpvar_44;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_45;
    highp vec2 P_46;
    P_46 = ((tmpvar_43 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_45 = texture2D (_SpecularMap, P_46);
    mediump float tmpvar_47;
    tmpvar_47 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_45 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_47 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_32 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_48;
  mediump vec3 srcColor_49;
  srcColor_49 = colorBlendLightMap_8;
  tmpvar_48 = (xlv_COLOR1.xyz + (srcColor_49 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_48;
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = colorBlendLightMap_8;
  tmpvar_50.w = _BloomIntensity;
  tmpvar_1 = tmpvar_50;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_4 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.x;
  tmpvar_21.y = worldBinormal_2.x;
  tmpvar_21.z = worldNormal_4.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.y;
  tmpvar_22.y = worldBinormal_2.y;
  tmpvar_22.z = worldNormal_4.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_3.z;
  tmpvar_23.y = worldBinormal_2.z;
  tmpvar_23.z = worldNormal_4.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase.xyz + (h_39 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_41 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  tmpvar_31 = tmpvar_33;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_21;
  tmpvar_21 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_21.w;
  lowp vec4 color_22;
  color_22 = tmpvar_21;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_22.xyz);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_23;
  highp vec2 screenCoord_24;
  screenCoord_24 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_25;
  shadow_25 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_26;
    tmpvar_26 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_24);
    shadow_25 = tmpvar_26.x;
  };
  mediump vec3 tmpvar_27;
  tmpvar_27 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_27;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_28;
    mediump float tmpvar_29;
    tmpvar_29 = dot (tmpvar_27, vec3(0.299, 0.587, 0.114));
    gray_28 = tmpvar_29;
    highp vec2 tmpvar_30;
    tmpvar_30.y = 0.5;
    tmpvar_30.x = (gray_28 * _LightmapColorScale);
    lowp vec4 tmpvar_31;
    tmpvar_31 = texture2D (_LightmapColorChange, tmpvar_30);
    fc_9 = mix (((tmpvar_31 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_27, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_25))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_32 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_33;
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_38;
  highp mat3 tmpvar_39;
  tmpvar_39[0] = unity_MatrixV[0].xyz;
  tmpvar_39[1] = unity_MatrixV[1].xyz;
  tmpvar_39[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_39 * worldNorm_5);
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_41;
  tmpvar_41 = (tmpvar_40 - (2.0 * (
    dot (worldNorm_5, tmpvar_40)
   * worldNorm_5)));
  R_4 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = ((tmpvar_42.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MatCap, tmpvar_43);
  mc_3 = tmpvar_44;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_45;
    highp vec2 P_46;
    P_46 = ((tmpvar_43 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_45 = texture2D (_SpecularMap, P_46);
    mediump float tmpvar_47;
    tmpvar_47 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_45 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_47 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_32 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_48;
  mediump vec3 srcColor_49;
  srcColor_49 = colorBlendLightMap_8;
  tmpvar_48 = (xlv_COLOR1.xyz + (srcColor_49 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_48;
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = colorBlendLightMap_8;
  tmpvar_50.w = _BloomIntensity;
  tmpvar_1 = tmpvar_50;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_4 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.x;
  tmpvar_21.y = worldBinormal_2.x;
  tmpvar_21.z = worldNormal_4.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.y;
  tmpvar_22.y = worldBinormal_2.y;
  tmpvar_22.z = worldNormal_4.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_3.z;
  tmpvar_23.y = worldBinormal_2.z;
  tmpvar_23.z = worldNormal_4.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase.xyz + (h_39 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_41 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  tmpvar_31 = tmpvar_33;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_21;
  tmpvar_21 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_21.w;
  lowp vec4 color_22;
  color_22 = tmpvar_21;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_22.xyz);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_23;
  highp vec2 screenCoord_24;
  screenCoord_24 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_25;
  shadow_25 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_26;
    tmpvar_26 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_24);
    shadow_25 = tmpvar_26.x;
  };
  mediump vec3 tmpvar_27;
  tmpvar_27 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_27;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_28;
    mediump float tmpvar_29;
    tmpvar_29 = dot (tmpvar_27, vec3(0.299, 0.587, 0.114));
    gray_28 = tmpvar_29;
    highp vec2 tmpvar_30;
    tmpvar_30.y = 0.5;
    tmpvar_30.x = (gray_28 * _LightmapColorScale);
    lowp vec4 tmpvar_31;
    tmpvar_31 = texture2D (_LightmapColorChange, tmpvar_30);
    fc_9 = mix (((tmpvar_31 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_27, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_25))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_32 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_33;
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_38;
  highp mat3 tmpvar_39;
  tmpvar_39[0] = unity_MatrixV[0].xyz;
  tmpvar_39[1] = unity_MatrixV[1].xyz;
  tmpvar_39[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_39 * worldNorm_5);
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_41;
  tmpvar_41 = (tmpvar_40 - (2.0 * (
    dot (worldNorm_5, tmpvar_40)
   * worldNorm_5)));
  R_4 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = ((tmpvar_42.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MatCap, tmpvar_43);
  mc_3 = tmpvar_44;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_45;
    highp vec2 P_46;
    P_46 = ((tmpvar_43 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_45 = texture2D (_SpecularMap, P_46);
    mediump float tmpvar_47;
    tmpvar_47 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_45 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_47 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_32 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_48;
  mediump vec3 srcColor_49;
  srcColor_49 = colorBlendLightMap_8;
  tmpvar_48 = (xlv_COLOR1.xyz + (srcColor_49 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_48;
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = colorBlendLightMap_8;
  tmpvar_50.w = _BloomIntensity;
  tmpvar_1 = tmpvar_50;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_3 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.x;
  tmpvar_21.y = worldBinormal_1.x;
  tmpvar_21.z = worldNormal_3.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.y;
  tmpvar_22.y = worldBinormal_1.y;
  tmpvar_22.z = worldNormal_3.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_2.z;
  tmpvar_23.y = worldBinormal_1.z;
  tmpvar_23.z = worldNormal_3.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase2.xyz + (h_39 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_41 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams2.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams2.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase2.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor2.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  highp vec4 tmpvar_67;
  mediump float fogFactor_68;
  mediump vec3 fogColor_69;
  mediump vec3 heightFogColor_70;
  highp float HeightFogFactor_71;
  mediump vec3 atomesphereFogColor_72;
  mediump float h_73;
  highp float linearFogDensity_74;
  mediump float len_75;
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((len_75 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_74 = (tmpvar_77 * (2.0 - tmpvar_77));
  if ((len_75 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_74 = (linearFogDensity_74 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_78;
  tmpvar_78 = min (pow (linearFogDensity_74, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_74 = tmpvar_78;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_79 = tmpvar_80;
  h_73 = (tmpvar_79 * (2.0 - tmpvar_79));
  highp vec3 tmpvar_81;
  tmpvar_81 = (_HeigtFogColBase3.xyz + (h_73 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_72 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (atomesphereFogColor_72, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_75 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_72 = tmpvar_82;
  mediump float tmpvar_83;
  mediump float r_84;
  mediump float f_85;
  mediump float u_86;
  mediump float l_87;
  mediump float fogInt_88;
  fogInt_88 = 1.0;
  highp float tmpvar_89;
  tmpvar_89 = (_HeigtFogParams3.x * tmpvar_32.y);
  highp float tmpvar_90;
  tmpvar_90 = abs(tmpvar_89);
  if ((tmpvar_90 > 0.01)) {
    highp float tmpvar_91;
    tmpvar_91 = exp(-(tmpvar_89));
    fogInt_88 = ((1.0 - tmpvar_91) / tmpvar_89);
  };
  highp float tmpvar_92;
  tmpvar_92 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_87 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (l_87 * _HeigtFogParams3.y);
  u_86 = tmpvar_93;
  fogInt_88 = (fogInt_88 * u_86);
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = clamp (((l_87 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_94 = tmpvar_95;
  r_84 = (tmpvar_94 * (2.0 - tmpvar_94));
  r_84 = ((r_84 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_85 = ((1.0 - clamp (
    exp2(-(fogInt_88))
  , 0.0, 1.0)) * r_84);
  highp float tmpvar_96;
  tmpvar_96 = min (f_85, _HeigtFogColBase3.w);
  tmpvar_83 = tmpvar_96;
  HeightFogFactor_71 = tmpvar_83;
  highp vec3 tmpvar_97;
  tmpvar_97 = _Mihoyo_FogColor3.xyz;
  heightFogColor_70 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = ((heightFogColor_70 * HeightFogFactor_71) + ((atomesphereFogColor_72 * tmpvar_78) * (1.0 - HeightFogFactor_71)));
  fogColor_69 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((1.0 - tmpvar_78) * (1.0 - HeightFogFactor_71));
  fogFactor_68 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.xyz = fogColor_69;
  tmpvar_100.w = fogFactor_68;
  tmpvar_67 = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = mix (tmpvar_33, tmpvar_67, vec4(_LerpFactor));
  tmpvar_31 = tmpvar_101;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_21;
  tmpvar_21 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_21.w;
  lowp vec4 color_22;
  color_22 = tmpvar_21;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_22.xyz);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_23;
  highp vec2 screenCoord_24;
  screenCoord_24 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_25;
  shadow_25 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_26;
    tmpvar_26 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_24);
    shadow_25 = tmpvar_26.x;
  };
  mediump vec3 tmpvar_27;
  tmpvar_27 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_27;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_28;
    mediump float tmpvar_29;
    tmpvar_29 = dot (tmpvar_27, vec3(0.299, 0.587, 0.114));
    gray_28 = tmpvar_29;
    highp vec2 tmpvar_30;
    tmpvar_30.y = 0.5;
    tmpvar_30.x = (gray_28 * _LightmapColorScale);
    lowp vec4 tmpvar_31;
    tmpvar_31 = texture2D (_LightmapColorChange, tmpvar_30);
    fc_9 = mix (((tmpvar_31 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_27, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_25))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_32 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_33;
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_38;
  highp mat3 tmpvar_39;
  tmpvar_39[0] = unity_MatrixV[0].xyz;
  tmpvar_39[1] = unity_MatrixV[1].xyz;
  tmpvar_39[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_39 * worldNorm_5);
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_41;
  tmpvar_41 = (tmpvar_40 - (2.0 * (
    dot (worldNorm_5, tmpvar_40)
   * worldNorm_5)));
  R_4 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = ((tmpvar_42.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MatCap, tmpvar_43);
  mc_3 = tmpvar_44;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_45;
    highp vec2 P_46;
    P_46 = ((tmpvar_43 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_45 = texture2D (_SpecularMap, P_46);
    mediump float tmpvar_47;
    tmpvar_47 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_45 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_47 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_32 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_48;
  mediump vec3 srcColor_49;
  srcColor_49 = colorBlendLightMap_8;
  tmpvar_48 = (xlv_COLOR1.xyz + (srcColor_49 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_48;
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = colorBlendLightMap_8;
  tmpvar_50.w = _BloomIntensity;
  tmpvar_1 = tmpvar_50;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_3 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.x;
  tmpvar_21.y = worldBinormal_1.x;
  tmpvar_21.z = worldNormal_3.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.y;
  tmpvar_22.y = worldBinormal_1.y;
  tmpvar_22.z = worldNormal_3.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_2.z;
  tmpvar_23.y = worldBinormal_1.z;
  tmpvar_23.z = worldNormal_3.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase2.xyz + (h_39 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_41 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams2.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams2.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase2.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor2.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  highp vec4 tmpvar_67;
  mediump float fogFactor_68;
  mediump vec3 fogColor_69;
  mediump vec3 heightFogColor_70;
  highp float HeightFogFactor_71;
  mediump vec3 atomesphereFogColor_72;
  mediump float h_73;
  highp float linearFogDensity_74;
  mediump float len_75;
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((len_75 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_74 = (tmpvar_77 * (2.0 - tmpvar_77));
  if ((len_75 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_74 = (linearFogDensity_74 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_78;
  tmpvar_78 = min (pow (linearFogDensity_74, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_74 = tmpvar_78;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_79 = tmpvar_80;
  h_73 = (tmpvar_79 * (2.0 - tmpvar_79));
  highp vec3 tmpvar_81;
  tmpvar_81 = (_HeigtFogColBase3.xyz + (h_73 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_72 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (atomesphereFogColor_72, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_75 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_72 = tmpvar_82;
  mediump float tmpvar_83;
  mediump float r_84;
  mediump float f_85;
  mediump float u_86;
  mediump float l_87;
  mediump float fogInt_88;
  fogInt_88 = 1.0;
  highp float tmpvar_89;
  tmpvar_89 = (_HeigtFogParams3.x * tmpvar_32.y);
  highp float tmpvar_90;
  tmpvar_90 = abs(tmpvar_89);
  if ((tmpvar_90 > 0.01)) {
    highp float tmpvar_91;
    tmpvar_91 = exp(-(tmpvar_89));
    fogInt_88 = ((1.0 - tmpvar_91) / tmpvar_89);
  };
  highp float tmpvar_92;
  tmpvar_92 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_87 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (l_87 * _HeigtFogParams3.y);
  u_86 = tmpvar_93;
  fogInt_88 = (fogInt_88 * u_86);
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = clamp (((l_87 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_94 = tmpvar_95;
  r_84 = (tmpvar_94 * (2.0 - tmpvar_94));
  r_84 = ((r_84 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_85 = ((1.0 - clamp (
    exp2(-(fogInt_88))
  , 0.0, 1.0)) * r_84);
  highp float tmpvar_96;
  tmpvar_96 = min (f_85, _HeigtFogColBase3.w);
  tmpvar_83 = tmpvar_96;
  HeightFogFactor_71 = tmpvar_83;
  highp vec3 tmpvar_97;
  tmpvar_97 = _Mihoyo_FogColor3.xyz;
  heightFogColor_70 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = ((heightFogColor_70 * HeightFogFactor_71) + ((atomesphereFogColor_72 * tmpvar_78) * (1.0 - HeightFogFactor_71)));
  fogColor_69 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((1.0 - tmpvar_78) * (1.0 - HeightFogFactor_71));
  fogFactor_68 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.xyz = fogColor_69;
  tmpvar_100.w = fogFactor_68;
  tmpvar_67 = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = mix (tmpvar_33, tmpvar_67, vec4(_LerpFactor));
  tmpvar_31 = tmpvar_101;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_21;
  tmpvar_21 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_21.w;
  lowp vec4 color_22;
  color_22 = tmpvar_21;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_22.xyz);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_23;
  highp vec2 screenCoord_24;
  screenCoord_24 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_25;
  shadow_25 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_26;
    tmpvar_26 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_24);
    shadow_25 = tmpvar_26.x;
  };
  mediump vec3 tmpvar_27;
  tmpvar_27 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_27;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_28;
    mediump float tmpvar_29;
    tmpvar_29 = dot (tmpvar_27, vec3(0.299, 0.587, 0.114));
    gray_28 = tmpvar_29;
    highp vec2 tmpvar_30;
    tmpvar_30.y = 0.5;
    tmpvar_30.x = (gray_28 * _LightmapColorScale);
    lowp vec4 tmpvar_31;
    tmpvar_31 = texture2D (_LightmapColorChange, tmpvar_30);
    fc_9 = mix (((tmpvar_31 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_27, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_25))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_32 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_33;
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_38;
  highp mat3 tmpvar_39;
  tmpvar_39[0] = unity_MatrixV[0].xyz;
  tmpvar_39[1] = unity_MatrixV[1].xyz;
  tmpvar_39[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_39 * worldNorm_5);
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_41;
  tmpvar_41 = (tmpvar_40 - (2.0 * (
    dot (worldNorm_5, tmpvar_40)
   * worldNorm_5)));
  R_4 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = ((tmpvar_42.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MatCap, tmpvar_43);
  mc_3 = tmpvar_44;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_45;
    highp vec2 P_46;
    P_46 = ((tmpvar_43 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_45 = texture2D (_SpecularMap, P_46);
    mediump float tmpvar_47;
    tmpvar_47 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_45 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_47 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_32 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_48;
  mediump vec3 srcColor_49;
  srcColor_49 = colorBlendLightMap_8;
  tmpvar_48 = (xlv_COLOR1.xyz + (srcColor_49 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_48;
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = colorBlendLightMap_8;
  tmpvar_50.w = _BloomIntensity;
  tmpvar_1 = tmpvar_50;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_3 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.x;
  tmpvar_21.y = worldBinormal_1.x;
  tmpvar_21.z = worldNormal_3.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.y;
  tmpvar_22.y = worldBinormal_1.y;
  tmpvar_22.z = worldNormal_3.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_2.z;
  tmpvar_23.y = worldBinormal_1.z;
  tmpvar_23.z = worldNormal_3.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase2.xyz + (h_39 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_41 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams2.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams2.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase2.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor2.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  highp vec4 tmpvar_67;
  mediump float fogFactor_68;
  mediump vec3 fogColor_69;
  mediump vec3 heightFogColor_70;
  highp float HeightFogFactor_71;
  mediump vec3 atomesphereFogColor_72;
  mediump float h_73;
  highp float linearFogDensity_74;
  mediump float len_75;
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((len_75 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_74 = (tmpvar_77 * (2.0 - tmpvar_77));
  if ((len_75 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_74 = (linearFogDensity_74 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_78;
  tmpvar_78 = min (pow (linearFogDensity_74, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_74 = tmpvar_78;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_79 = tmpvar_80;
  h_73 = (tmpvar_79 * (2.0 - tmpvar_79));
  highp vec3 tmpvar_81;
  tmpvar_81 = (_HeigtFogColBase3.xyz + (h_73 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_72 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (atomesphereFogColor_72, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_75 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_72 = tmpvar_82;
  mediump float tmpvar_83;
  mediump float r_84;
  mediump float f_85;
  mediump float u_86;
  mediump float l_87;
  mediump float fogInt_88;
  fogInt_88 = 1.0;
  highp float tmpvar_89;
  tmpvar_89 = (_HeigtFogParams3.x * tmpvar_32.y);
  highp float tmpvar_90;
  tmpvar_90 = abs(tmpvar_89);
  if ((tmpvar_90 > 0.01)) {
    highp float tmpvar_91;
    tmpvar_91 = exp(-(tmpvar_89));
    fogInt_88 = ((1.0 - tmpvar_91) / tmpvar_89);
  };
  highp float tmpvar_92;
  tmpvar_92 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_87 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (l_87 * _HeigtFogParams3.y);
  u_86 = tmpvar_93;
  fogInt_88 = (fogInt_88 * u_86);
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = clamp (((l_87 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_94 = tmpvar_95;
  r_84 = (tmpvar_94 * (2.0 - tmpvar_94));
  r_84 = ((r_84 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_85 = ((1.0 - clamp (
    exp2(-(fogInt_88))
  , 0.0, 1.0)) * r_84);
  highp float tmpvar_96;
  tmpvar_96 = min (f_85, _HeigtFogColBase3.w);
  tmpvar_83 = tmpvar_96;
  HeightFogFactor_71 = tmpvar_83;
  highp vec3 tmpvar_97;
  tmpvar_97 = _Mihoyo_FogColor3.xyz;
  heightFogColor_70 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = ((heightFogColor_70 * HeightFogFactor_71) + ((atomesphereFogColor_72 * tmpvar_78) * (1.0 - HeightFogFactor_71)));
  fogColor_69 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((1.0 - tmpvar_78) * (1.0 - HeightFogFactor_71));
  fogFactor_68 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.xyz = fogColor_69;
  tmpvar_100.w = fogFactor_68;
  tmpvar_67 = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = mix (tmpvar_33, tmpvar_67, vec4(_LerpFactor));
  tmpvar_31 = tmpvar_101;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  mediump vec4 tmpvar_21;
  tmpvar_21 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_21.w;
  lowp vec4 color_22;
  color_22 = tmpvar_21;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_22.xyz);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_23;
  highp vec2 screenCoord_24;
  screenCoord_24 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_25;
  shadow_25 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_26;
    tmpvar_26 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_24);
    shadow_25 = tmpvar_26.x;
  };
  mediump vec3 tmpvar_27;
  tmpvar_27 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_27;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_28;
    mediump float tmpvar_29;
    tmpvar_29 = dot (tmpvar_27, vec3(0.299, 0.587, 0.114));
    gray_28 = tmpvar_29;
    highp vec2 tmpvar_30;
    tmpvar_30.y = 0.5;
    tmpvar_30.x = (gray_28 * _LightmapColorScale);
    lowp vec4 tmpvar_31;
    tmpvar_31 = texture2D (_LightmapColorChange, tmpvar_30);
    fc_9 = mix (((tmpvar_31 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_27, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_25))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_32 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_33;
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_34;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_38;
  highp mat3 tmpvar_39;
  tmpvar_39[0] = unity_MatrixV[0].xyz;
  tmpvar_39[1] = unity_MatrixV[1].xyz;
  tmpvar_39[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_39 * worldNorm_5);
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_41;
  tmpvar_41 = (tmpvar_40 - (2.0 * (
    dot (worldNorm_5, tmpvar_40)
   * worldNorm_5)));
  R_4 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = ((tmpvar_42.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MatCap, tmpvar_43);
  mc_3 = tmpvar_44;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_45;
    highp vec2 P_46;
    P_46 = ((tmpvar_43 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_45 = texture2D (_SpecularMap, P_46);
    mediump float tmpvar_47;
    tmpvar_47 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_45 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_47 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_32 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_48;
  mediump vec3 srcColor_49;
  srcColor_49 = colorBlendLightMap_8;
  tmpvar_48 = (xlv_COLOR1.xyz + (srcColor_49 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_48;
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = colorBlendLightMap_8;
  tmpvar_50.w = _BloomIntensity;
  tmpvar_1 = tmpvar_50;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_4 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.x;
  tmpvar_21.y = worldBinormal_2.x;
  tmpvar_21.z = worldNormal_4.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.y;
  tmpvar_22.y = worldBinormal_2.y;
  tmpvar_22.z = worldNormal_4.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_3.z;
  tmpvar_23.y = worldBinormal_2.z;
  tmpvar_23.z = worldNormal_4.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase.xyz + (h_39 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_41 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  tmpvar_31 = tmpvar_33;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_22;
  highp vec2 screenCoord_23;
  screenCoord_23 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_24;
  shadow_24 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_25;
    tmpvar_25 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_23);
    shadow_24 = tmpvar_25.x;
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_26;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_27;
    mediump float tmpvar_28;
    tmpvar_28 = dot (tmpvar_26, vec3(0.299, 0.587, 0.114));
    gray_27 = tmpvar_28;
    highp vec2 tmpvar_29;
    tmpvar_29.y = 0.5;
    tmpvar_29.x = (gray_27 * _LightmapColorScale);
    lowp vec4 tmpvar_30;
    tmpvar_30 = texture2D (_LightmapColorChange, tmpvar_29);
    fc_9 = mix (((tmpvar_30 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_26, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_24))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_31 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_33;
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_37;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_MatrixV[0].xyz;
  tmpvar_38[1] = unity_MatrixV[1].xyz;
  tmpvar_38[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_38 * worldNorm_5);
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_39 - (2.0 * (
    dot (worldNorm_5, tmpvar_39)
   * worldNorm_5)));
  R_4 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = ((tmpvar_41.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatCap, tmpvar_42);
  mc_3 = tmpvar_43;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_44;
    highp vec2 P_45;
    P_45 = ((tmpvar_42 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_44 = texture2D (_SpecularMap, P_45);
    mediump float tmpvar_46;
    tmpvar_46 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_44 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_46 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_31 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_47;
  mediump vec3 srcColor_48;
  srcColor_48 = colorBlendLightMap_8;
  tmpvar_47 = (xlv_COLOR1.xyz + (srcColor_48 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_47;
  highp vec4 tmpvar_49;
  tmpvar_49.xyz = colorBlendLightMap_8;
  tmpvar_49.w = _BloomIntensity;
  tmpvar_1 = tmpvar_49;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_4 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.x;
  tmpvar_21.y = worldBinormal_2.x;
  tmpvar_21.z = worldNormal_4.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.y;
  tmpvar_22.y = worldBinormal_2.y;
  tmpvar_22.z = worldNormal_4.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_3.z;
  tmpvar_23.y = worldBinormal_2.z;
  tmpvar_23.z = worldNormal_4.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase.xyz + (h_39 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_41 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  tmpvar_31 = tmpvar_33;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_22;
  highp vec2 screenCoord_23;
  screenCoord_23 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_24;
  shadow_24 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_25;
    tmpvar_25 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_23);
    shadow_24 = tmpvar_25.x;
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_26;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_27;
    mediump float tmpvar_28;
    tmpvar_28 = dot (tmpvar_26, vec3(0.299, 0.587, 0.114));
    gray_27 = tmpvar_28;
    highp vec2 tmpvar_29;
    tmpvar_29.y = 0.5;
    tmpvar_29.x = (gray_27 * _LightmapColorScale);
    lowp vec4 tmpvar_30;
    tmpvar_30 = texture2D (_LightmapColorChange, tmpvar_29);
    fc_9 = mix (((tmpvar_30 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_26, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_24))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_31 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_33;
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_37;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_MatrixV[0].xyz;
  tmpvar_38[1] = unity_MatrixV[1].xyz;
  tmpvar_38[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_38 * worldNorm_5);
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_39 - (2.0 * (
    dot (worldNorm_5, tmpvar_39)
   * worldNorm_5)));
  R_4 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = ((tmpvar_41.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatCap, tmpvar_42);
  mc_3 = tmpvar_43;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_44;
    highp vec2 P_45;
    P_45 = ((tmpvar_42 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_44 = texture2D (_SpecularMap, P_45);
    mediump float tmpvar_46;
    tmpvar_46 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_44 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_46 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_31 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_47;
  mediump vec3 srcColor_48;
  srcColor_48 = colorBlendLightMap_8;
  tmpvar_47 = (xlv_COLOR1.xyz + (srcColor_48 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_47;
  highp vec4 tmpvar_49;
  tmpvar_49.xyz = colorBlendLightMap_8;
  tmpvar_49.w = _BloomIntensity;
  tmpvar_1 = tmpvar_49;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_4 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.x;
  tmpvar_21.y = worldBinormal_2.x;
  tmpvar_21.z = worldNormal_4.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.y;
  tmpvar_22.y = worldBinormal_2.y;
  tmpvar_22.z = worldNormal_4.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_3.z;
  tmpvar_23.y = worldBinormal_2.z;
  tmpvar_23.z = worldNormal_4.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase.xyz + (h_39 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_41 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  tmpvar_31 = tmpvar_33;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_22;
  highp vec2 screenCoord_23;
  screenCoord_23 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_24;
  shadow_24 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_25;
    tmpvar_25 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_23);
    shadow_24 = tmpvar_25.x;
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_26;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_27;
    mediump float tmpvar_28;
    tmpvar_28 = dot (tmpvar_26, vec3(0.299, 0.587, 0.114));
    gray_27 = tmpvar_28;
    highp vec2 tmpvar_29;
    tmpvar_29.y = 0.5;
    tmpvar_29.x = (gray_27 * _LightmapColorScale);
    lowp vec4 tmpvar_30;
    tmpvar_30 = texture2D (_LightmapColorChange, tmpvar_29);
    fc_9 = mix (((tmpvar_30 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_26, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_24))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_31 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_33;
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_37;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_MatrixV[0].xyz;
  tmpvar_38[1] = unity_MatrixV[1].xyz;
  tmpvar_38[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_38 * worldNorm_5);
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_39 - (2.0 * (
    dot (worldNorm_5, tmpvar_39)
   * worldNorm_5)));
  R_4 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = ((tmpvar_41.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatCap, tmpvar_42);
  mc_3 = tmpvar_43;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_44;
    highp vec2 P_45;
    P_45 = ((tmpvar_42 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_44 = texture2D (_SpecularMap, P_45);
    mediump float tmpvar_46;
    tmpvar_46 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_44 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_46 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_31 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_47;
  mediump vec3 srcColor_48;
  srcColor_48 = colorBlendLightMap_8;
  tmpvar_47 = (xlv_COLOR1.xyz + (srcColor_48 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_47;
  highp vec4 tmpvar_49;
  tmpvar_49.xyz = colorBlendLightMap_8;
  tmpvar_49.w = _BloomIntensity;
  tmpvar_1 = tmpvar_49;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_3 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.x;
  tmpvar_21.y = worldBinormal_1.x;
  tmpvar_21.z = worldNormal_3.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.y;
  tmpvar_22.y = worldBinormal_1.y;
  tmpvar_22.z = worldNormal_3.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_2.z;
  tmpvar_23.y = worldBinormal_1.z;
  tmpvar_23.z = worldNormal_3.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase2.xyz + (h_39 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_41 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams2.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams2.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase2.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor2.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  highp vec4 tmpvar_67;
  mediump float fogFactor_68;
  mediump vec3 fogColor_69;
  mediump vec3 heightFogColor_70;
  highp float HeightFogFactor_71;
  mediump vec3 atomesphereFogColor_72;
  mediump float h_73;
  highp float linearFogDensity_74;
  mediump float len_75;
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((len_75 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_74 = (tmpvar_77 * (2.0 - tmpvar_77));
  if ((len_75 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_74 = (linearFogDensity_74 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_78;
  tmpvar_78 = min (pow (linearFogDensity_74, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_74 = tmpvar_78;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_79 = tmpvar_80;
  h_73 = (tmpvar_79 * (2.0 - tmpvar_79));
  highp vec3 tmpvar_81;
  tmpvar_81 = (_HeigtFogColBase3.xyz + (h_73 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_72 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (atomesphereFogColor_72, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_75 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_72 = tmpvar_82;
  mediump float tmpvar_83;
  mediump float r_84;
  mediump float f_85;
  mediump float u_86;
  mediump float l_87;
  mediump float fogInt_88;
  fogInt_88 = 1.0;
  highp float tmpvar_89;
  tmpvar_89 = (_HeigtFogParams3.x * tmpvar_32.y);
  highp float tmpvar_90;
  tmpvar_90 = abs(tmpvar_89);
  if ((tmpvar_90 > 0.01)) {
    highp float tmpvar_91;
    tmpvar_91 = exp(-(tmpvar_89));
    fogInt_88 = ((1.0 - tmpvar_91) / tmpvar_89);
  };
  highp float tmpvar_92;
  tmpvar_92 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_87 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (l_87 * _HeigtFogParams3.y);
  u_86 = tmpvar_93;
  fogInt_88 = (fogInt_88 * u_86);
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = clamp (((l_87 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_94 = tmpvar_95;
  r_84 = (tmpvar_94 * (2.0 - tmpvar_94));
  r_84 = ((r_84 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_85 = ((1.0 - clamp (
    exp2(-(fogInt_88))
  , 0.0, 1.0)) * r_84);
  highp float tmpvar_96;
  tmpvar_96 = min (f_85, _HeigtFogColBase3.w);
  tmpvar_83 = tmpvar_96;
  HeightFogFactor_71 = tmpvar_83;
  highp vec3 tmpvar_97;
  tmpvar_97 = _Mihoyo_FogColor3.xyz;
  heightFogColor_70 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = ((heightFogColor_70 * HeightFogFactor_71) + ((atomesphereFogColor_72 * tmpvar_78) * (1.0 - HeightFogFactor_71)));
  fogColor_69 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((1.0 - tmpvar_78) * (1.0 - HeightFogFactor_71));
  fogFactor_68 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.xyz = fogColor_69;
  tmpvar_100.w = fogFactor_68;
  tmpvar_67 = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = mix (tmpvar_33, tmpvar_67, vec4(_LerpFactor));
  tmpvar_31 = tmpvar_101;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_22;
  highp vec2 screenCoord_23;
  screenCoord_23 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_24;
  shadow_24 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_25;
    tmpvar_25 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_23);
    shadow_24 = tmpvar_25.x;
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_26;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_27;
    mediump float tmpvar_28;
    tmpvar_28 = dot (tmpvar_26, vec3(0.299, 0.587, 0.114));
    gray_27 = tmpvar_28;
    highp vec2 tmpvar_29;
    tmpvar_29.y = 0.5;
    tmpvar_29.x = (gray_27 * _LightmapColorScale);
    lowp vec4 tmpvar_30;
    tmpvar_30 = texture2D (_LightmapColorChange, tmpvar_29);
    fc_9 = mix (((tmpvar_30 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_26, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_24))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_31 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_33;
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_37;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_MatrixV[0].xyz;
  tmpvar_38[1] = unity_MatrixV[1].xyz;
  tmpvar_38[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_38 * worldNorm_5);
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_39 - (2.0 * (
    dot (worldNorm_5, tmpvar_39)
   * worldNorm_5)));
  R_4 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = ((tmpvar_41.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatCap, tmpvar_42);
  mc_3 = tmpvar_43;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_44;
    highp vec2 P_45;
    P_45 = ((tmpvar_42 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_44 = texture2D (_SpecularMap, P_45);
    mediump float tmpvar_46;
    tmpvar_46 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_44 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_46 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_31 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_47;
  mediump vec3 srcColor_48;
  srcColor_48 = colorBlendLightMap_8;
  tmpvar_47 = (xlv_COLOR1.xyz + (srcColor_48 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_47;
  highp vec4 tmpvar_49;
  tmpvar_49.xyz = colorBlendLightMap_8;
  tmpvar_49.w = _BloomIntensity;
  tmpvar_1 = tmpvar_49;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_3 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.x;
  tmpvar_21.y = worldBinormal_1.x;
  tmpvar_21.z = worldNormal_3.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.y;
  tmpvar_22.y = worldBinormal_1.y;
  tmpvar_22.z = worldNormal_3.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_2.z;
  tmpvar_23.y = worldBinormal_1.z;
  tmpvar_23.z = worldNormal_3.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase2.xyz + (h_39 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_41 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams2.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams2.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase2.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor2.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  highp vec4 tmpvar_67;
  mediump float fogFactor_68;
  mediump vec3 fogColor_69;
  mediump vec3 heightFogColor_70;
  highp float HeightFogFactor_71;
  mediump vec3 atomesphereFogColor_72;
  mediump float h_73;
  highp float linearFogDensity_74;
  mediump float len_75;
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((len_75 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_74 = (tmpvar_77 * (2.0 - tmpvar_77));
  if ((len_75 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_74 = (linearFogDensity_74 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_78;
  tmpvar_78 = min (pow (linearFogDensity_74, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_74 = tmpvar_78;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_79 = tmpvar_80;
  h_73 = (tmpvar_79 * (2.0 - tmpvar_79));
  highp vec3 tmpvar_81;
  tmpvar_81 = (_HeigtFogColBase3.xyz + (h_73 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_72 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (atomesphereFogColor_72, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_75 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_72 = tmpvar_82;
  mediump float tmpvar_83;
  mediump float r_84;
  mediump float f_85;
  mediump float u_86;
  mediump float l_87;
  mediump float fogInt_88;
  fogInt_88 = 1.0;
  highp float tmpvar_89;
  tmpvar_89 = (_HeigtFogParams3.x * tmpvar_32.y);
  highp float tmpvar_90;
  tmpvar_90 = abs(tmpvar_89);
  if ((tmpvar_90 > 0.01)) {
    highp float tmpvar_91;
    tmpvar_91 = exp(-(tmpvar_89));
    fogInt_88 = ((1.0 - tmpvar_91) / tmpvar_89);
  };
  highp float tmpvar_92;
  tmpvar_92 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_87 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (l_87 * _HeigtFogParams3.y);
  u_86 = tmpvar_93;
  fogInt_88 = (fogInt_88 * u_86);
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = clamp (((l_87 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_94 = tmpvar_95;
  r_84 = (tmpvar_94 * (2.0 - tmpvar_94));
  r_84 = ((r_84 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_85 = ((1.0 - clamp (
    exp2(-(fogInt_88))
  , 0.0, 1.0)) * r_84);
  highp float tmpvar_96;
  tmpvar_96 = min (f_85, _HeigtFogColBase3.w);
  tmpvar_83 = tmpvar_96;
  HeightFogFactor_71 = tmpvar_83;
  highp vec3 tmpvar_97;
  tmpvar_97 = _Mihoyo_FogColor3.xyz;
  heightFogColor_70 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = ((heightFogColor_70 * HeightFogFactor_71) + ((atomesphereFogColor_72 * tmpvar_78) * (1.0 - HeightFogFactor_71)));
  fogColor_69 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((1.0 - tmpvar_78) * (1.0 - HeightFogFactor_71));
  fogFactor_68 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.xyz = fogColor_69;
  tmpvar_100.w = fogFactor_68;
  tmpvar_67 = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = mix (tmpvar_33, tmpvar_67, vec4(_LerpFactor));
  tmpvar_31 = tmpvar_101;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_22;
  highp vec2 screenCoord_23;
  screenCoord_23 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_24;
  shadow_24 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_25;
    tmpvar_25 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_23);
    shadow_24 = tmpvar_25.x;
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_26;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_27;
    mediump float tmpvar_28;
    tmpvar_28 = dot (tmpvar_26, vec3(0.299, 0.587, 0.114));
    gray_27 = tmpvar_28;
    highp vec2 tmpvar_29;
    tmpvar_29.y = 0.5;
    tmpvar_29.x = (gray_27 * _LightmapColorScale);
    lowp vec4 tmpvar_30;
    tmpvar_30 = texture2D (_LightmapColorChange, tmpvar_29);
    fc_9 = mix (((tmpvar_30 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_26, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_24))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_31 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_33;
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_37;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_MatrixV[0].xyz;
  tmpvar_38[1] = unity_MatrixV[1].xyz;
  tmpvar_38[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_38 * worldNorm_5);
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_39 - (2.0 * (
    dot (worldNorm_5, tmpvar_39)
   * worldNorm_5)));
  R_4 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = ((tmpvar_41.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatCap, tmpvar_42);
  mc_3 = tmpvar_43;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_44;
    highp vec2 P_45;
    P_45 = ((tmpvar_42 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_44 = texture2D (_SpecularMap, P_45);
    mediump float tmpvar_46;
    tmpvar_46 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_44 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_46 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_31 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_47;
  mediump vec3 srcColor_48;
  srcColor_48 = colorBlendLightMap_8;
  tmpvar_47 = (xlv_COLOR1.xyz + (srcColor_48 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_47;
  highp vec4 tmpvar_49;
  tmpvar_49.xyz = colorBlendLightMap_8;
  tmpvar_49.w = _BloomIntensity;
  tmpvar_1 = tmpvar_49;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_3 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.x;
  tmpvar_21.y = worldBinormal_1.x;
  tmpvar_21.z = worldNormal_3.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.y;
  tmpvar_22.y = worldBinormal_1.y;
  tmpvar_22.z = worldNormal_3.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_2.z;
  tmpvar_23.y = worldBinormal_1.z;
  tmpvar_23.z = worldNormal_3.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase2.xyz + (h_39 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_41 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams2.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams2.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase2.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor2.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  highp vec4 tmpvar_67;
  mediump float fogFactor_68;
  mediump vec3 fogColor_69;
  mediump vec3 heightFogColor_70;
  highp float HeightFogFactor_71;
  mediump vec3 atomesphereFogColor_72;
  mediump float h_73;
  highp float linearFogDensity_74;
  mediump float len_75;
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((len_75 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_74 = (tmpvar_77 * (2.0 - tmpvar_77));
  if ((len_75 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_74 = (linearFogDensity_74 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_78;
  tmpvar_78 = min (pow (linearFogDensity_74, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_74 = tmpvar_78;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_79 = tmpvar_80;
  h_73 = (tmpvar_79 * (2.0 - tmpvar_79));
  highp vec3 tmpvar_81;
  tmpvar_81 = (_HeigtFogColBase3.xyz + (h_73 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_72 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (atomesphereFogColor_72, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_75 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_72 = tmpvar_82;
  mediump float tmpvar_83;
  mediump float r_84;
  mediump float f_85;
  mediump float u_86;
  mediump float l_87;
  mediump float fogInt_88;
  fogInt_88 = 1.0;
  highp float tmpvar_89;
  tmpvar_89 = (_HeigtFogParams3.x * tmpvar_32.y);
  highp float tmpvar_90;
  tmpvar_90 = abs(tmpvar_89);
  if ((tmpvar_90 > 0.01)) {
    highp float tmpvar_91;
    tmpvar_91 = exp(-(tmpvar_89));
    fogInt_88 = ((1.0 - tmpvar_91) / tmpvar_89);
  };
  highp float tmpvar_92;
  tmpvar_92 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_87 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (l_87 * _HeigtFogParams3.y);
  u_86 = tmpvar_93;
  fogInt_88 = (fogInt_88 * u_86);
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = clamp (((l_87 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_94 = tmpvar_95;
  r_84 = (tmpvar_94 * (2.0 - tmpvar_94));
  r_84 = ((r_84 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_85 = ((1.0 - clamp (
    exp2(-(fogInt_88))
  , 0.0, 1.0)) * r_84);
  highp float tmpvar_96;
  tmpvar_96 = min (f_85, _HeigtFogColBase3.w);
  tmpvar_83 = tmpvar_96;
  HeightFogFactor_71 = tmpvar_83;
  highp vec3 tmpvar_97;
  tmpvar_97 = _Mihoyo_FogColor3.xyz;
  heightFogColor_70 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = ((heightFogColor_70 * HeightFogFactor_71) + ((atomesphereFogColor_72 * tmpvar_78) * (1.0 - HeightFogFactor_71)));
  fogColor_69 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((1.0 - tmpvar_78) * (1.0 - HeightFogFactor_71));
  fogFactor_68 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.xyz = fogColor_69;
  tmpvar_100.w = fogFactor_68;
  tmpvar_67 = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = mix (tmpvar_33, tmpvar_67, vec4(_LerpFactor));
  tmpvar_31 = tmpvar_101;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_22;
  highp vec2 screenCoord_23;
  screenCoord_23 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_24;
  shadow_24 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_25;
    tmpvar_25 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_23);
    shadow_24 = tmpvar_25.x;
  };
  mediump vec3 tmpvar_26;
  tmpvar_26 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_26;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_27;
    mediump float tmpvar_28;
    tmpvar_28 = dot (tmpvar_26, vec3(0.299, 0.587, 0.114));
    gray_27 = tmpvar_28;
    highp vec2 tmpvar_29;
    tmpvar_29.y = 0.5;
    tmpvar_29.x = (gray_27 * _LightmapColorScale);
    lowp vec4 tmpvar_30;
    tmpvar_30 = texture2D (_LightmapColorChange, tmpvar_29);
    fc_9 = mix (((tmpvar_30 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_26, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_24))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_32;
  tmpvar_32 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_31 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_33;
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_37;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_MatrixV[0].xyz;
  tmpvar_38[1] = unity_MatrixV[1].xyz;
  tmpvar_38[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_38 * worldNorm_5);
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_39 - (2.0 * (
    dot (worldNorm_5, tmpvar_39)
   * worldNorm_5)));
  R_4 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = ((tmpvar_41.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MatCap, tmpvar_42);
  mc_3 = tmpvar_43;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_44;
    highp vec2 P_45;
    P_45 = ((tmpvar_42 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_44 = texture2D (_SpecularMap, P_45);
    mediump float tmpvar_46;
    tmpvar_46 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_44 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_46 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_31 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_47;
  mediump vec3 srcColor_48;
  srcColor_48 = colorBlendLightMap_8;
  tmpvar_47 = (xlv_COLOR1.xyz + (srcColor_48 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_47;
  highp vec4 tmpvar_49;
  tmpvar_49.xyz = colorBlendLightMap_8;
  tmpvar_49.w = _BloomIntensity;
  tmpvar_1 = tmpvar_49;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_4 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.x;
  tmpvar_21.y = worldBinormal_2.x;
  tmpvar_21.z = worldNormal_4.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.y;
  tmpvar_22.y = worldBinormal_2.y;
  tmpvar_22.z = worldNormal_4.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_3.z;
  tmpvar_23.y = worldBinormal_2.z;
  tmpvar_23.z = worldNormal_4.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase.xyz + (h_39 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_41 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  tmpvar_31 = tmpvar_33;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_21;
  vpos_21 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_21.y = ((fract(vpos_21.y) * 0.0625) + unity_LODFade.y);
  lowp float x_22;
  x_22 = (texture2D (_DitherMaskLOD2D, vpos_21).w - 0.5);
  if ((x_22 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_23.w;
  lowp vec4 color_24;
  color_24 = tmpvar_23;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_24.xyz);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_25;
  highp vec2 screenCoord_26;
  screenCoord_26 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_27;
  shadow_27 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_28;
    tmpvar_28 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_26);
    shadow_27 = tmpvar_28.x;
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_29;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_30;
    mediump float tmpvar_31;
    tmpvar_31 = dot (tmpvar_29, vec3(0.299, 0.587, 0.114));
    gray_30 = tmpvar_31;
    highp vec2 tmpvar_32;
    tmpvar_32.y = 0.5;
    tmpvar_32.x = (gray_30 * _LightmapColorScale);
    lowp vec4 tmpvar_33;
    tmpvar_33 = texture2D (_LightmapColorChange, tmpvar_32);
    fc_9 = mix (((tmpvar_33 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_29, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_27))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_34 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_35;
  lowp vec3 tmpvar_36;
  tmpvar_36 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_40;
  highp mat3 tmpvar_41;
  tmpvar_41[0] = unity_MatrixV[0].xyz;
  tmpvar_41[1] = unity_MatrixV[1].xyz;
  tmpvar_41[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_41 * worldNorm_5);
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_43;
  tmpvar_43 = (tmpvar_42 - (2.0 * (
    dot (worldNorm_5, tmpvar_42)
   * worldNorm_5)));
  R_4 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = ((tmpvar_44.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_MatCap, tmpvar_45);
  mc_3 = tmpvar_46;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_47;
    highp vec2 P_48;
    P_48 = ((tmpvar_45 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_47 = texture2D (_SpecularMap, P_48);
    mediump float tmpvar_49;
    tmpvar_49 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_47 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_49 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_34 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_50;
  mediump vec3 srcColor_51;
  srcColor_51 = colorBlendLightMap_8;
  tmpvar_50 = (xlv_COLOR1.xyz + (srcColor_51 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_50;
  highp vec4 tmpvar_52;
  tmpvar_52.xyz = colorBlendLightMap_8;
  tmpvar_52.w = _BloomIntensity;
  tmpvar_1 = tmpvar_52;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_4 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.x;
  tmpvar_21.y = worldBinormal_2.x;
  tmpvar_21.z = worldNormal_4.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.y;
  tmpvar_22.y = worldBinormal_2.y;
  tmpvar_22.z = worldNormal_4.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_3.z;
  tmpvar_23.y = worldBinormal_2.z;
  tmpvar_23.z = worldNormal_4.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase.xyz + (h_39 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_41 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  tmpvar_31 = tmpvar_33;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_21;
  vpos_21 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_21.y = ((fract(vpos_21.y) * 0.0625) + unity_LODFade.y);
  lowp float x_22;
  x_22 = (texture2D (_DitherMaskLOD2D, vpos_21).w - 0.5);
  if ((x_22 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_23.w;
  lowp vec4 color_24;
  color_24 = tmpvar_23;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_24.xyz);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_25;
  highp vec2 screenCoord_26;
  screenCoord_26 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_27;
  shadow_27 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_28;
    tmpvar_28 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_26);
    shadow_27 = tmpvar_28.x;
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_29;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_30;
    mediump float tmpvar_31;
    tmpvar_31 = dot (tmpvar_29, vec3(0.299, 0.587, 0.114));
    gray_30 = tmpvar_31;
    highp vec2 tmpvar_32;
    tmpvar_32.y = 0.5;
    tmpvar_32.x = (gray_30 * _LightmapColorScale);
    lowp vec4 tmpvar_33;
    tmpvar_33 = texture2D (_LightmapColorChange, tmpvar_32);
    fc_9 = mix (((tmpvar_33 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_29, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_27))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_34 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_35;
  lowp vec3 tmpvar_36;
  tmpvar_36 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_40;
  highp mat3 tmpvar_41;
  tmpvar_41[0] = unity_MatrixV[0].xyz;
  tmpvar_41[1] = unity_MatrixV[1].xyz;
  tmpvar_41[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_41 * worldNorm_5);
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_43;
  tmpvar_43 = (tmpvar_42 - (2.0 * (
    dot (worldNorm_5, tmpvar_42)
   * worldNorm_5)));
  R_4 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = ((tmpvar_44.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_MatCap, tmpvar_45);
  mc_3 = tmpvar_46;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_47;
    highp vec2 P_48;
    P_48 = ((tmpvar_45 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_47 = texture2D (_SpecularMap, P_48);
    mediump float tmpvar_49;
    tmpvar_49 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_47 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_49 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_34 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_50;
  mediump vec3 srcColor_51;
  srcColor_51 = colorBlendLightMap_8;
  tmpvar_50 = (xlv_COLOR1.xyz + (srcColor_51 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_50;
  highp vec4 tmpvar_52;
  tmpvar_52.xyz = colorBlendLightMap_8;
  tmpvar_52.w = _BloomIntensity;
  tmpvar_1 = tmpvar_52;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_4 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.x;
  tmpvar_21.y = worldBinormal_2.x;
  tmpvar_21.z = worldNormal_4.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.y;
  tmpvar_22.y = worldBinormal_2.y;
  tmpvar_22.z = worldNormal_4.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_3.z;
  tmpvar_23.y = worldBinormal_2.z;
  tmpvar_23.z = worldNormal_4.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase.xyz + (h_39 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_41 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  tmpvar_31 = tmpvar_33;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_21;
  vpos_21 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_21.y = ((fract(vpos_21.y) * 0.0625) + unity_LODFade.y);
  lowp float x_22;
  x_22 = (texture2D (_DitherMaskLOD2D, vpos_21).w - 0.5);
  if ((x_22 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_23.w;
  lowp vec4 color_24;
  color_24 = tmpvar_23;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_24.xyz);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_25;
  highp vec2 screenCoord_26;
  screenCoord_26 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_27;
  shadow_27 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_28;
    tmpvar_28 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_26);
    shadow_27 = tmpvar_28.x;
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_29;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_30;
    mediump float tmpvar_31;
    tmpvar_31 = dot (tmpvar_29, vec3(0.299, 0.587, 0.114));
    gray_30 = tmpvar_31;
    highp vec2 tmpvar_32;
    tmpvar_32.y = 0.5;
    tmpvar_32.x = (gray_30 * _LightmapColorScale);
    lowp vec4 tmpvar_33;
    tmpvar_33 = texture2D (_LightmapColorChange, tmpvar_32);
    fc_9 = mix (((tmpvar_33 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_29, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_27))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_34 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_35;
  lowp vec3 tmpvar_36;
  tmpvar_36 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_40;
  highp mat3 tmpvar_41;
  tmpvar_41[0] = unity_MatrixV[0].xyz;
  tmpvar_41[1] = unity_MatrixV[1].xyz;
  tmpvar_41[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_41 * worldNorm_5);
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_43;
  tmpvar_43 = (tmpvar_42 - (2.0 * (
    dot (worldNorm_5, tmpvar_42)
   * worldNorm_5)));
  R_4 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = ((tmpvar_44.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_MatCap, tmpvar_45);
  mc_3 = tmpvar_46;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_47;
    highp vec2 P_48;
    P_48 = ((tmpvar_45 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_47 = texture2D (_SpecularMap, P_48);
    mediump float tmpvar_49;
    tmpvar_49 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_47 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_49 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_34 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_50;
  mediump vec3 srcColor_51;
  srcColor_51 = colorBlendLightMap_8;
  tmpvar_50 = (xlv_COLOR1.xyz + (srcColor_51 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_50;
  highp vec4 tmpvar_52;
  tmpvar_52.xyz = colorBlendLightMap_8;
  tmpvar_52.w = _BloomIntensity;
  tmpvar_1 = tmpvar_52;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_3 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.x;
  tmpvar_21.y = worldBinormal_1.x;
  tmpvar_21.z = worldNormal_3.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.y;
  tmpvar_22.y = worldBinormal_1.y;
  tmpvar_22.z = worldNormal_3.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_2.z;
  tmpvar_23.y = worldBinormal_1.z;
  tmpvar_23.z = worldNormal_3.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase2.xyz + (h_39 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_41 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams2.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams2.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase2.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor2.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  highp vec4 tmpvar_67;
  mediump float fogFactor_68;
  mediump vec3 fogColor_69;
  mediump vec3 heightFogColor_70;
  highp float HeightFogFactor_71;
  mediump vec3 atomesphereFogColor_72;
  mediump float h_73;
  highp float linearFogDensity_74;
  mediump float len_75;
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((len_75 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_74 = (tmpvar_77 * (2.0 - tmpvar_77));
  if ((len_75 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_74 = (linearFogDensity_74 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_78;
  tmpvar_78 = min (pow (linearFogDensity_74, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_74 = tmpvar_78;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_79 = tmpvar_80;
  h_73 = (tmpvar_79 * (2.0 - tmpvar_79));
  highp vec3 tmpvar_81;
  tmpvar_81 = (_HeigtFogColBase3.xyz + (h_73 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_72 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (atomesphereFogColor_72, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_75 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_72 = tmpvar_82;
  mediump float tmpvar_83;
  mediump float r_84;
  mediump float f_85;
  mediump float u_86;
  mediump float l_87;
  mediump float fogInt_88;
  fogInt_88 = 1.0;
  highp float tmpvar_89;
  tmpvar_89 = (_HeigtFogParams3.x * tmpvar_32.y);
  highp float tmpvar_90;
  tmpvar_90 = abs(tmpvar_89);
  if ((tmpvar_90 > 0.01)) {
    highp float tmpvar_91;
    tmpvar_91 = exp(-(tmpvar_89));
    fogInt_88 = ((1.0 - tmpvar_91) / tmpvar_89);
  };
  highp float tmpvar_92;
  tmpvar_92 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_87 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (l_87 * _HeigtFogParams3.y);
  u_86 = tmpvar_93;
  fogInt_88 = (fogInt_88 * u_86);
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = clamp (((l_87 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_94 = tmpvar_95;
  r_84 = (tmpvar_94 * (2.0 - tmpvar_94));
  r_84 = ((r_84 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_85 = ((1.0 - clamp (
    exp2(-(fogInt_88))
  , 0.0, 1.0)) * r_84);
  highp float tmpvar_96;
  tmpvar_96 = min (f_85, _HeigtFogColBase3.w);
  tmpvar_83 = tmpvar_96;
  HeightFogFactor_71 = tmpvar_83;
  highp vec3 tmpvar_97;
  tmpvar_97 = _Mihoyo_FogColor3.xyz;
  heightFogColor_70 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = ((heightFogColor_70 * HeightFogFactor_71) + ((atomesphereFogColor_72 * tmpvar_78) * (1.0 - HeightFogFactor_71)));
  fogColor_69 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((1.0 - tmpvar_78) * (1.0 - HeightFogFactor_71));
  fogFactor_68 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.xyz = fogColor_69;
  tmpvar_100.w = fogFactor_68;
  tmpvar_67 = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = mix (tmpvar_33, tmpvar_67, vec4(_LerpFactor));
  tmpvar_31 = tmpvar_101;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_21;
  vpos_21 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_21.y = ((fract(vpos_21.y) * 0.0625) + unity_LODFade.y);
  lowp float x_22;
  x_22 = (texture2D (_DitherMaskLOD2D, vpos_21).w - 0.5);
  if ((x_22 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_23.w;
  lowp vec4 color_24;
  color_24 = tmpvar_23;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_24.xyz);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_25;
  highp vec2 screenCoord_26;
  screenCoord_26 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_27;
  shadow_27 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_28;
    tmpvar_28 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_26);
    shadow_27 = tmpvar_28.x;
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_29;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_30;
    mediump float tmpvar_31;
    tmpvar_31 = dot (tmpvar_29, vec3(0.299, 0.587, 0.114));
    gray_30 = tmpvar_31;
    highp vec2 tmpvar_32;
    tmpvar_32.y = 0.5;
    tmpvar_32.x = (gray_30 * _LightmapColorScale);
    lowp vec4 tmpvar_33;
    tmpvar_33 = texture2D (_LightmapColorChange, tmpvar_32);
    fc_9 = mix (((tmpvar_33 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_29, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_27))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_34 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_35;
  lowp vec3 tmpvar_36;
  tmpvar_36 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_40;
  highp mat3 tmpvar_41;
  tmpvar_41[0] = unity_MatrixV[0].xyz;
  tmpvar_41[1] = unity_MatrixV[1].xyz;
  tmpvar_41[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_41 * worldNorm_5);
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_43;
  tmpvar_43 = (tmpvar_42 - (2.0 * (
    dot (worldNorm_5, tmpvar_42)
   * worldNorm_5)));
  R_4 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = ((tmpvar_44.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_MatCap, tmpvar_45);
  mc_3 = tmpvar_46;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_47;
    highp vec2 P_48;
    P_48 = ((tmpvar_45 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_47 = texture2D (_SpecularMap, P_48);
    mediump float tmpvar_49;
    tmpvar_49 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_47 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_49 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_34 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_50;
  mediump vec3 srcColor_51;
  srcColor_51 = colorBlendLightMap_8;
  tmpvar_50 = (xlv_COLOR1.xyz + (srcColor_51 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_50;
  highp vec4 tmpvar_52;
  tmpvar_52.xyz = colorBlendLightMap_8;
  tmpvar_52.w = _BloomIntensity;
  tmpvar_1 = tmpvar_52;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_3 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.x;
  tmpvar_21.y = worldBinormal_1.x;
  tmpvar_21.z = worldNormal_3.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.y;
  tmpvar_22.y = worldBinormal_1.y;
  tmpvar_22.z = worldNormal_3.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_2.z;
  tmpvar_23.y = worldBinormal_1.z;
  tmpvar_23.z = worldNormal_3.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase2.xyz + (h_39 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_41 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams2.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams2.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase2.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor2.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  highp vec4 tmpvar_67;
  mediump float fogFactor_68;
  mediump vec3 fogColor_69;
  mediump vec3 heightFogColor_70;
  highp float HeightFogFactor_71;
  mediump vec3 atomesphereFogColor_72;
  mediump float h_73;
  highp float linearFogDensity_74;
  mediump float len_75;
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((len_75 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_74 = (tmpvar_77 * (2.0 - tmpvar_77));
  if ((len_75 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_74 = (linearFogDensity_74 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_78;
  tmpvar_78 = min (pow (linearFogDensity_74, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_74 = tmpvar_78;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_79 = tmpvar_80;
  h_73 = (tmpvar_79 * (2.0 - tmpvar_79));
  highp vec3 tmpvar_81;
  tmpvar_81 = (_HeigtFogColBase3.xyz + (h_73 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_72 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (atomesphereFogColor_72, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_75 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_72 = tmpvar_82;
  mediump float tmpvar_83;
  mediump float r_84;
  mediump float f_85;
  mediump float u_86;
  mediump float l_87;
  mediump float fogInt_88;
  fogInt_88 = 1.0;
  highp float tmpvar_89;
  tmpvar_89 = (_HeigtFogParams3.x * tmpvar_32.y);
  highp float tmpvar_90;
  tmpvar_90 = abs(tmpvar_89);
  if ((tmpvar_90 > 0.01)) {
    highp float tmpvar_91;
    tmpvar_91 = exp(-(tmpvar_89));
    fogInt_88 = ((1.0 - tmpvar_91) / tmpvar_89);
  };
  highp float tmpvar_92;
  tmpvar_92 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_87 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (l_87 * _HeigtFogParams3.y);
  u_86 = tmpvar_93;
  fogInt_88 = (fogInt_88 * u_86);
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = clamp (((l_87 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_94 = tmpvar_95;
  r_84 = (tmpvar_94 * (2.0 - tmpvar_94));
  r_84 = ((r_84 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_85 = ((1.0 - clamp (
    exp2(-(fogInt_88))
  , 0.0, 1.0)) * r_84);
  highp float tmpvar_96;
  tmpvar_96 = min (f_85, _HeigtFogColBase3.w);
  tmpvar_83 = tmpvar_96;
  HeightFogFactor_71 = tmpvar_83;
  highp vec3 tmpvar_97;
  tmpvar_97 = _Mihoyo_FogColor3.xyz;
  heightFogColor_70 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = ((heightFogColor_70 * HeightFogFactor_71) + ((atomesphereFogColor_72 * tmpvar_78) * (1.0 - HeightFogFactor_71)));
  fogColor_69 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((1.0 - tmpvar_78) * (1.0 - HeightFogFactor_71));
  fogFactor_68 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.xyz = fogColor_69;
  tmpvar_100.w = fogFactor_68;
  tmpvar_67 = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = mix (tmpvar_33, tmpvar_67, vec4(_LerpFactor));
  tmpvar_31 = tmpvar_101;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_21;
  vpos_21 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_21.y = ((fract(vpos_21.y) * 0.0625) + unity_LODFade.y);
  lowp float x_22;
  x_22 = (texture2D (_DitherMaskLOD2D, vpos_21).w - 0.5);
  if ((x_22 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_23.w;
  lowp vec4 color_24;
  color_24 = tmpvar_23;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_24.xyz);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_25;
  highp vec2 screenCoord_26;
  screenCoord_26 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_27;
  shadow_27 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_28;
    tmpvar_28 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_26);
    shadow_27 = tmpvar_28.x;
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_29;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_30;
    mediump float tmpvar_31;
    tmpvar_31 = dot (tmpvar_29, vec3(0.299, 0.587, 0.114));
    gray_30 = tmpvar_31;
    highp vec2 tmpvar_32;
    tmpvar_32.y = 0.5;
    tmpvar_32.x = (gray_30 * _LightmapColorScale);
    lowp vec4 tmpvar_33;
    tmpvar_33 = texture2D (_LightmapColorChange, tmpvar_32);
    fc_9 = mix (((tmpvar_33 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_29, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_27))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_34 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_35;
  lowp vec3 tmpvar_36;
  tmpvar_36 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_40;
  highp mat3 tmpvar_41;
  tmpvar_41[0] = unity_MatrixV[0].xyz;
  tmpvar_41[1] = unity_MatrixV[1].xyz;
  tmpvar_41[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_41 * worldNorm_5);
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_43;
  tmpvar_43 = (tmpvar_42 - (2.0 * (
    dot (worldNorm_5, tmpvar_42)
   * worldNorm_5)));
  R_4 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = ((tmpvar_44.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_MatCap, tmpvar_45);
  mc_3 = tmpvar_46;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_47;
    highp vec2 P_48;
    P_48 = ((tmpvar_45 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_47 = texture2D (_SpecularMap, P_48);
    mediump float tmpvar_49;
    tmpvar_49 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_47 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_49 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_34 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_50;
  mediump vec3 srcColor_51;
  srcColor_51 = colorBlendLightMap_8;
  tmpvar_50 = (xlv_COLOR1.xyz + (srcColor_51 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_50;
  highp vec4 tmpvar_52;
  tmpvar_52.xyz = colorBlendLightMap_8;
  tmpvar_52.w = _BloomIntensity;
  tmpvar_1 = tmpvar_52;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_3 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.x;
  tmpvar_21.y = worldBinormal_1.x;
  tmpvar_21.z = worldNormal_3.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.y;
  tmpvar_22.y = worldBinormal_1.y;
  tmpvar_22.z = worldNormal_3.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_2.z;
  tmpvar_23.y = worldBinormal_1.z;
  tmpvar_23.z = worldNormal_3.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase2.xyz + (h_39 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_41 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams2.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams2.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase2.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor2.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  highp vec4 tmpvar_67;
  mediump float fogFactor_68;
  mediump vec3 fogColor_69;
  mediump vec3 heightFogColor_70;
  highp float HeightFogFactor_71;
  mediump vec3 atomesphereFogColor_72;
  mediump float h_73;
  highp float linearFogDensity_74;
  mediump float len_75;
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((len_75 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_74 = (tmpvar_77 * (2.0 - tmpvar_77));
  if ((len_75 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_74 = (linearFogDensity_74 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_78;
  tmpvar_78 = min (pow (linearFogDensity_74, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_74 = tmpvar_78;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_79 = tmpvar_80;
  h_73 = (tmpvar_79 * (2.0 - tmpvar_79));
  highp vec3 tmpvar_81;
  tmpvar_81 = (_HeigtFogColBase3.xyz + (h_73 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_72 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (atomesphereFogColor_72, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_75 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_72 = tmpvar_82;
  mediump float tmpvar_83;
  mediump float r_84;
  mediump float f_85;
  mediump float u_86;
  mediump float l_87;
  mediump float fogInt_88;
  fogInt_88 = 1.0;
  highp float tmpvar_89;
  tmpvar_89 = (_HeigtFogParams3.x * tmpvar_32.y);
  highp float tmpvar_90;
  tmpvar_90 = abs(tmpvar_89);
  if ((tmpvar_90 > 0.01)) {
    highp float tmpvar_91;
    tmpvar_91 = exp(-(tmpvar_89));
    fogInt_88 = ((1.0 - tmpvar_91) / tmpvar_89);
  };
  highp float tmpvar_92;
  tmpvar_92 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_87 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (l_87 * _HeigtFogParams3.y);
  u_86 = tmpvar_93;
  fogInt_88 = (fogInt_88 * u_86);
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = clamp (((l_87 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_94 = tmpvar_95;
  r_84 = (tmpvar_94 * (2.0 - tmpvar_94));
  r_84 = ((r_84 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_85 = ((1.0 - clamp (
    exp2(-(fogInt_88))
  , 0.0, 1.0)) * r_84);
  highp float tmpvar_96;
  tmpvar_96 = min (f_85, _HeigtFogColBase3.w);
  tmpvar_83 = tmpvar_96;
  HeightFogFactor_71 = tmpvar_83;
  highp vec3 tmpvar_97;
  tmpvar_97 = _Mihoyo_FogColor3.xyz;
  heightFogColor_70 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = ((heightFogColor_70 * HeightFogFactor_71) + ((atomesphereFogColor_72 * tmpvar_78) * (1.0 - HeightFogFactor_71)));
  fogColor_69 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((1.0 - tmpvar_78) * (1.0 - HeightFogFactor_71));
  fogFactor_68 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.xyz = fogColor_69;
  tmpvar_100.w = fogFactor_68;
  tmpvar_67 = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = mix (tmpvar_33, tmpvar_67, vec4(_LerpFactor));
  tmpvar_31 = tmpvar_101;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_21;
  vpos_21 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_21.y = ((fract(vpos_21.y) * 0.0625) + unity_LODFade.y);
  lowp float x_22;
  x_22 = (texture2D (_DitherMaskLOD2D, vpos_21).w - 0.5);
  if ((x_22 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_23;
  tmpvar_23 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_23.w;
  lowp vec4 color_24;
  color_24 = tmpvar_23;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_24.xyz);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_25;
  highp vec2 screenCoord_26;
  screenCoord_26 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_27;
  shadow_27 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_28;
    tmpvar_28 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_26);
    shadow_27 = tmpvar_28.x;
  };
  mediump vec3 tmpvar_29;
  tmpvar_29 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_29;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_30;
    mediump float tmpvar_31;
    tmpvar_31 = dot (tmpvar_29, vec3(0.299, 0.587, 0.114));
    gray_30 = tmpvar_31;
    highp vec2 tmpvar_32;
    tmpvar_32.y = 0.5;
    tmpvar_32.x = (gray_30 * _LightmapColorScale);
    lowp vec4 tmpvar_33;
    tmpvar_33 = texture2D (_LightmapColorChange, tmpvar_32);
    fc_9 = mix (((tmpvar_33 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_29, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_27))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_35;
  tmpvar_35 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_34 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_35;
  lowp vec3 tmpvar_36;
  tmpvar_36 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_40;
  highp mat3 tmpvar_41;
  tmpvar_41[0] = unity_MatrixV[0].xyz;
  tmpvar_41[1] = unity_MatrixV[1].xyz;
  tmpvar_41[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_41 * worldNorm_5);
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_43;
  tmpvar_43 = (tmpvar_42 - (2.0 * (
    dot (worldNorm_5, tmpvar_42)
   * worldNorm_5)));
  R_4 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = ((tmpvar_44.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_MatCap, tmpvar_45);
  mc_3 = tmpvar_46;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_47;
    highp vec2 P_48;
    P_48 = ((tmpvar_45 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_47 = texture2D (_SpecularMap, P_48);
    mediump float tmpvar_49;
    tmpvar_49 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_47 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_49 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_34 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_50;
  mediump vec3 srcColor_51;
  srcColor_51 = colorBlendLightMap_8;
  tmpvar_50 = (xlv_COLOR1.xyz + (srcColor_51 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_50;
  highp vec4 tmpvar_52;
  tmpvar_52.xyz = colorBlendLightMap_8;
  tmpvar_52.w = _BloomIntensity;
  tmpvar_1 = tmpvar_52;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_4 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.x;
  tmpvar_21.y = worldBinormal_2.x;
  tmpvar_21.z = worldNormal_4.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.y;
  tmpvar_22.y = worldBinormal_2.y;
  tmpvar_22.z = worldNormal_4.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_3.z;
  tmpvar_23.y = worldBinormal_2.z;
  tmpvar_23.z = worldNormal_4.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase.xyz + (h_39 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_41 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  tmpvar_31 = tmpvar_33;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_21;
  vpos_21 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_21.y = ((fract(vpos_21.y) * 0.0625) + unity_LODFade.y);
  lowp float x_22;
  x_22 = (texture2D (_DitherMaskLOD2D, vpos_21).w - 0.5);
  if ((x_22 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_24;
  highp vec2 screenCoord_25;
  screenCoord_25 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_26;
  shadow_26 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_25);
    shadow_26 = tmpvar_27.x;
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_28;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_29;
    mediump float tmpvar_30;
    tmpvar_30 = dot (tmpvar_28, vec3(0.299, 0.587, 0.114));
    gray_29 = tmpvar_30;
    highp vec2 tmpvar_31;
    tmpvar_31.y = 0.5;
    tmpvar_31.x = (gray_29 * _LightmapColorScale);
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_LightmapColorChange, tmpvar_31);
    fc_9 = mix (((tmpvar_32 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_28, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_26))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_33 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_34;
  lowp vec3 tmpvar_35;
  tmpvar_35 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_39;
  highp mat3 tmpvar_40;
  tmpvar_40[0] = unity_MatrixV[0].xyz;
  tmpvar_40[1] = unity_MatrixV[1].xyz;
  tmpvar_40[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_40 * worldNorm_5);
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_41 - (2.0 * (
    dot (worldNorm_5, tmpvar_41)
   * worldNorm_5)));
  R_4 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = ((tmpvar_43.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_MatCap, tmpvar_44);
  mc_3 = tmpvar_45;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_46;
    highp vec2 P_47;
    P_47 = ((tmpvar_44 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_46 = texture2D (_SpecularMap, P_47);
    mediump float tmpvar_48;
    tmpvar_48 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_46 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_48 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_33 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_49;
  mediump vec3 srcColor_50;
  srcColor_50 = colorBlendLightMap_8;
  tmpvar_49 = (xlv_COLOR1.xyz + (srcColor_50 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_49;
  highp vec4 tmpvar_51;
  tmpvar_51.xyz = colorBlendLightMap_8;
  tmpvar_51.w = _BloomIntensity;
  tmpvar_1 = tmpvar_51;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_4 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.x;
  tmpvar_21.y = worldBinormal_2.x;
  tmpvar_21.z = worldNormal_4.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.y;
  tmpvar_22.y = worldBinormal_2.y;
  tmpvar_22.z = worldNormal_4.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_3.z;
  tmpvar_23.y = worldBinormal_2.z;
  tmpvar_23.z = worldNormal_4.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase.xyz + (h_39 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_41 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  tmpvar_31 = tmpvar_33;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_21;
  vpos_21 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_21.y = ((fract(vpos_21.y) * 0.0625) + unity_LODFade.y);
  lowp float x_22;
  x_22 = (texture2D (_DitherMaskLOD2D, vpos_21).w - 0.5);
  if ((x_22 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_24;
  highp vec2 screenCoord_25;
  screenCoord_25 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_26;
  shadow_26 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_25);
    shadow_26 = tmpvar_27.x;
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_28;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_29;
    mediump float tmpvar_30;
    tmpvar_30 = dot (tmpvar_28, vec3(0.299, 0.587, 0.114));
    gray_29 = tmpvar_30;
    highp vec2 tmpvar_31;
    tmpvar_31.y = 0.5;
    tmpvar_31.x = (gray_29 * _LightmapColorScale);
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_LightmapColorChange, tmpvar_31);
    fc_9 = mix (((tmpvar_32 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_28, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_26))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_33 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_34;
  lowp vec3 tmpvar_35;
  tmpvar_35 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_39;
  highp mat3 tmpvar_40;
  tmpvar_40[0] = unity_MatrixV[0].xyz;
  tmpvar_40[1] = unity_MatrixV[1].xyz;
  tmpvar_40[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_40 * worldNorm_5);
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_41 - (2.0 * (
    dot (worldNorm_5, tmpvar_41)
   * worldNorm_5)));
  R_4 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = ((tmpvar_43.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_MatCap, tmpvar_44);
  mc_3 = tmpvar_45;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_46;
    highp vec2 P_47;
    P_47 = ((tmpvar_44 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_46 = texture2D (_SpecularMap, P_47);
    mediump float tmpvar_48;
    tmpvar_48 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_46 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_48 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_33 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_49;
  mediump vec3 srcColor_50;
  srcColor_50 = colorBlendLightMap_8;
  tmpvar_49 = (xlv_COLOR1.xyz + (srcColor_50 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_49;
  highp vec4 tmpvar_51;
  tmpvar_51.xyz = colorBlendLightMap_8;
  tmpvar_51.w = _BloomIntensity;
  tmpvar_1 = tmpvar_51;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_4 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.x;
  tmpvar_21.y = worldBinormal_2.x;
  tmpvar_21.z = worldNormal_4.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_3.y;
  tmpvar_22.y = worldBinormal_2.y;
  tmpvar_22.z = worldNormal_4.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_3.z;
  tmpvar_23.y = worldBinormal_2.z;
  tmpvar_23.z = worldNormal_4.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase.xyz + (h_39 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_41 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  tmpvar_31 = tmpvar_33;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_21;
  vpos_21 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_21.y = ((fract(vpos_21.y) * 0.0625) + unity_LODFade.y);
  lowp float x_22;
  x_22 = (texture2D (_DitherMaskLOD2D, vpos_21).w - 0.5);
  if ((x_22 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_24;
  highp vec2 screenCoord_25;
  screenCoord_25 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_26;
  shadow_26 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_25);
    shadow_26 = tmpvar_27.x;
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_28;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_29;
    mediump float tmpvar_30;
    tmpvar_30 = dot (tmpvar_28, vec3(0.299, 0.587, 0.114));
    gray_29 = tmpvar_30;
    highp vec2 tmpvar_31;
    tmpvar_31.y = 0.5;
    tmpvar_31.x = (gray_29 * _LightmapColorScale);
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_LightmapColorChange, tmpvar_31);
    fc_9 = mix (((tmpvar_32 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_28, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_26))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_33 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_34;
  lowp vec3 tmpvar_35;
  tmpvar_35 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_39;
  highp mat3 tmpvar_40;
  tmpvar_40[0] = unity_MatrixV[0].xyz;
  tmpvar_40[1] = unity_MatrixV[1].xyz;
  tmpvar_40[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_40 * worldNorm_5);
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_41 - (2.0 * (
    dot (worldNorm_5, tmpvar_41)
   * worldNorm_5)));
  R_4 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = ((tmpvar_43.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_MatCap, tmpvar_44);
  mc_3 = tmpvar_45;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_46;
    highp vec2 P_47;
    P_47 = ((tmpvar_44 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_46 = texture2D (_SpecularMap, P_47);
    mediump float tmpvar_48;
    tmpvar_48 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_46 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_48 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_33 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_49;
  mediump vec3 srcColor_50;
  srcColor_50 = colorBlendLightMap_8;
  tmpvar_49 = (xlv_COLOR1.xyz + (srcColor_50 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_49;
  highp vec4 tmpvar_51;
  tmpvar_51.xyz = colorBlendLightMap_8;
  tmpvar_51.w = _BloomIntensity;
  tmpvar_1 = tmpvar_51;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_3 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.x;
  tmpvar_21.y = worldBinormal_1.x;
  tmpvar_21.z = worldNormal_3.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.y;
  tmpvar_22.y = worldBinormal_1.y;
  tmpvar_22.z = worldNormal_3.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_2.z;
  tmpvar_23.y = worldBinormal_1.z;
  tmpvar_23.z = worldNormal_3.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase2.xyz + (h_39 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_41 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams2.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams2.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase2.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor2.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  highp vec4 tmpvar_67;
  mediump float fogFactor_68;
  mediump vec3 fogColor_69;
  mediump vec3 heightFogColor_70;
  highp float HeightFogFactor_71;
  mediump vec3 atomesphereFogColor_72;
  mediump float h_73;
  highp float linearFogDensity_74;
  mediump float len_75;
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((len_75 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_74 = (tmpvar_77 * (2.0 - tmpvar_77));
  if ((len_75 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_74 = (linearFogDensity_74 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_78;
  tmpvar_78 = min (pow (linearFogDensity_74, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_74 = tmpvar_78;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_79 = tmpvar_80;
  h_73 = (tmpvar_79 * (2.0 - tmpvar_79));
  highp vec3 tmpvar_81;
  tmpvar_81 = (_HeigtFogColBase3.xyz + (h_73 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_72 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (atomesphereFogColor_72, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_75 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_72 = tmpvar_82;
  mediump float tmpvar_83;
  mediump float r_84;
  mediump float f_85;
  mediump float u_86;
  mediump float l_87;
  mediump float fogInt_88;
  fogInt_88 = 1.0;
  highp float tmpvar_89;
  tmpvar_89 = (_HeigtFogParams3.x * tmpvar_32.y);
  highp float tmpvar_90;
  tmpvar_90 = abs(tmpvar_89);
  if ((tmpvar_90 > 0.01)) {
    highp float tmpvar_91;
    tmpvar_91 = exp(-(tmpvar_89));
    fogInt_88 = ((1.0 - tmpvar_91) / tmpvar_89);
  };
  highp float tmpvar_92;
  tmpvar_92 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_87 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (l_87 * _HeigtFogParams3.y);
  u_86 = tmpvar_93;
  fogInt_88 = (fogInt_88 * u_86);
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = clamp (((l_87 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_94 = tmpvar_95;
  r_84 = (tmpvar_94 * (2.0 - tmpvar_94));
  r_84 = ((r_84 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_85 = ((1.0 - clamp (
    exp2(-(fogInt_88))
  , 0.0, 1.0)) * r_84);
  highp float tmpvar_96;
  tmpvar_96 = min (f_85, _HeigtFogColBase3.w);
  tmpvar_83 = tmpvar_96;
  HeightFogFactor_71 = tmpvar_83;
  highp vec3 tmpvar_97;
  tmpvar_97 = _Mihoyo_FogColor3.xyz;
  heightFogColor_70 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = ((heightFogColor_70 * HeightFogFactor_71) + ((atomesphereFogColor_72 * tmpvar_78) * (1.0 - HeightFogFactor_71)));
  fogColor_69 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((1.0 - tmpvar_78) * (1.0 - HeightFogFactor_71));
  fogFactor_68 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.xyz = fogColor_69;
  tmpvar_100.w = fogFactor_68;
  tmpvar_67 = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = mix (tmpvar_33, tmpvar_67, vec4(_LerpFactor));
  tmpvar_31 = tmpvar_101;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_21;
  vpos_21 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_21.y = ((fract(vpos_21.y) * 0.0625) + unity_LODFade.y);
  lowp float x_22;
  x_22 = (texture2D (_DitherMaskLOD2D, vpos_21).w - 0.5);
  if ((x_22 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_24;
  highp vec2 screenCoord_25;
  screenCoord_25 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_26;
  shadow_26 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_25);
    shadow_26 = tmpvar_27.x;
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_28;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_29;
    mediump float tmpvar_30;
    tmpvar_30 = dot (tmpvar_28, vec3(0.299, 0.587, 0.114));
    gray_29 = tmpvar_30;
    highp vec2 tmpvar_31;
    tmpvar_31.y = 0.5;
    tmpvar_31.x = (gray_29 * _LightmapColorScale);
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_LightmapColorChange, tmpvar_31);
    fc_9 = mix (((tmpvar_32 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_28, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_26))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_33 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_34;
  lowp vec3 tmpvar_35;
  tmpvar_35 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_39;
  highp mat3 tmpvar_40;
  tmpvar_40[0] = unity_MatrixV[0].xyz;
  tmpvar_40[1] = unity_MatrixV[1].xyz;
  tmpvar_40[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_40 * worldNorm_5);
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_41 - (2.0 * (
    dot (worldNorm_5, tmpvar_41)
   * worldNorm_5)));
  R_4 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = ((tmpvar_43.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_MatCap, tmpvar_44);
  mc_3 = tmpvar_45;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_46;
    highp vec2 P_47;
    P_47 = ((tmpvar_44 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_46 = texture2D (_SpecularMap, P_47);
    mediump float tmpvar_48;
    tmpvar_48 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_46 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_48 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_33 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_49;
  mediump vec3 srcColor_50;
  srcColor_50 = colorBlendLightMap_8;
  tmpvar_49 = (xlv_COLOR1.xyz + (srcColor_50 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_49;
  highp vec4 tmpvar_51;
  tmpvar_51.xyz = colorBlendLightMap_8;
  tmpvar_51.w = _BloomIntensity;
  tmpvar_1 = tmpvar_51;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_3 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.x;
  tmpvar_21.y = worldBinormal_1.x;
  tmpvar_21.z = worldNormal_3.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.y;
  tmpvar_22.y = worldBinormal_1.y;
  tmpvar_22.z = worldNormal_3.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_2.z;
  tmpvar_23.y = worldBinormal_1.z;
  tmpvar_23.z = worldNormal_3.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase2.xyz + (h_39 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_41 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams2.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams2.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase2.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor2.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  highp vec4 tmpvar_67;
  mediump float fogFactor_68;
  mediump vec3 fogColor_69;
  mediump vec3 heightFogColor_70;
  highp float HeightFogFactor_71;
  mediump vec3 atomesphereFogColor_72;
  mediump float h_73;
  highp float linearFogDensity_74;
  mediump float len_75;
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((len_75 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_74 = (tmpvar_77 * (2.0 - tmpvar_77));
  if ((len_75 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_74 = (linearFogDensity_74 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_78;
  tmpvar_78 = min (pow (linearFogDensity_74, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_74 = tmpvar_78;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_79 = tmpvar_80;
  h_73 = (tmpvar_79 * (2.0 - tmpvar_79));
  highp vec3 tmpvar_81;
  tmpvar_81 = (_HeigtFogColBase3.xyz + (h_73 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_72 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (atomesphereFogColor_72, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_75 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_72 = tmpvar_82;
  mediump float tmpvar_83;
  mediump float r_84;
  mediump float f_85;
  mediump float u_86;
  mediump float l_87;
  mediump float fogInt_88;
  fogInt_88 = 1.0;
  highp float tmpvar_89;
  tmpvar_89 = (_HeigtFogParams3.x * tmpvar_32.y);
  highp float tmpvar_90;
  tmpvar_90 = abs(tmpvar_89);
  if ((tmpvar_90 > 0.01)) {
    highp float tmpvar_91;
    tmpvar_91 = exp(-(tmpvar_89));
    fogInt_88 = ((1.0 - tmpvar_91) / tmpvar_89);
  };
  highp float tmpvar_92;
  tmpvar_92 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_87 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (l_87 * _HeigtFogParams3.y);
  u_86 = tmpvar_93;
  fogInt_88 = (fogInt_88 * u_86);
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = clamp (((l_87 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_94 = tmpvar_95;
  r_84 = (tmpvar_94 * (2.0 - tmpvar_94));
  r_84 = ((r_84 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_85 = ((1.0 - clamp (
    exp2(-(fogInt_88))
  , 0.0, 1.0)) * r_84);
  highp float tmpvar_96;
  tmpvar_96 = min (f_85, _HeigtFogColBase3.w);
  tmpvar_83 = tmpvar_96;
  HeightFogFactor_71 = tmpvar_83;
  highp vec3 tmpvar_97;
  tmpvar_97 = _Mihoyo_FogColor3.xyz;
  heightFogColor_70 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = ((heightFogColor_70 * HeightFogFactor_71) + ((atomesphereFogColor_72 * tmpvar_78) * (1.0 - HeightFogFactor_71)));
  fogColor_69 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((1.0 - tmpvar_78) * (1.0 - HeightFogFactor_71));
  fogFactor_68 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.xyz = fogColor_69;
  tmpvar_100.w = fogFactor_68;
  tmpvar_67 = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = mix (tmpvar_33, tmpvar_67, vec4(_LerpFactor));
  tmpvar_31 = tmpvar_101;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_21;
  vpos_21 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_21.y = ((fract(vpos_21.y) * 0.0625) + unity_LODFade.y);
  lowp float x_22;
  x_22 = (texture2D (_DitherMaskLOD2D, vpos_21).w - 0.5);
  if ((x_22 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_24;
  highp vec2 screenCoord_25;
  screenCoord_25 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_26;
  shadow_26 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_25);
    shadow_26 = tmpvar_27.x;
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_28;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_29;
    mediump float tmpvar_30;
    tmpvar_30 = dot (tmpvar_28, vec3(0.299, 0.587, 0.114));
    gray_29 = tmpvar_30;
    highp vec2 tmpvar_31;
    tmpvar_31.y = 0.5;
    tmpvar_31.x = (gray_29 * _LightmapColorScale);
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_LightmapColorChange, tmpvar_31);
    fc_9 = mix (((tmpvar_32 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_28, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_26))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_33 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_34;
  lowp vec3 tmpvar_35;
  tmpvar_35 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_39;
  highp mat3 tmpvar_40;
  tmpvar_40[0] = unity_MatrixV[0].xyz;
  tmpvar_40[1] = unity_MatrixV[1].xyz;
  tmpvar_40[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_40 * worldNorm_5);
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_41 - (2.0 * (
    dot (worldNorm_5, tmpvar_41)
   * worldNorm_5)));
  R_4 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = ((tmpvar_43.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_MatCap, tmpvar_44);
  mc_3 = tmpvar_45;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_46;
    highp vec2 P_47;
    P_47 = ((tmpvar_44 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_46 = texture2D (_SpecularMap, P_47);
    mediump float tmpvar_48;
    tmpvar_48 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_46 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_48 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_33 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_49;
  mediump vec3 srcColor_50;
  srcColor_50 = colorBlendLightMap_8;
  tmpvar_49 = (xlv_COLOR1.xyz + (srcColor_50 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_49;
  highp vec4 tmpvar_51;
  tmpvar_51.xyz = colorBlendLightMap_8;
  tmpvar_51.w = _BloomIntensity;
  tmpvar_1 = tmpvar_51;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_9.zw;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_WorldToObject[0].xyz;
  tmpvar_15[1] = unity_WorldToObject[1].xyz;
  tmpvar_15[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_glesNormal * tmpvar_15));
  worldNormal_3 = tmpvar_16;
  highp mat3 tmpvar_17;
  tmpvar_17[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_17[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_17[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_17 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.x;
  tmpvar_21.y = worldBinormal_1.x;
  tmpvar_21.z = worldNormal_3.x;
  mediump vec3 tmpvar_22;
  tmpvar_22.x = worldTangent_2.y;
  tmpvar_22.y = worldBinormal_1.y;
  tmpvar_22.z = worldNormal_3.y;
  mediump vec3 tmpvar_23;
  tmpvar_23.x = worldTangent_2.z;
  tmpvar_23.y = worldBinormal_1.z;
  tmpvar_23.z = worldNormal_3.z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(_glesNormal);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_26 = _glesTANGENT.xyz;
  tmpvar_27 = (((tmpvar_24.yzx * tmpvar_25.zxy) - (tmpvar_24.zxy * tmpvar_25.yzx)) * _glesTANGENT.w);
  tmpvar_28 = _glesNormal;
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_26.x;
  tmpvar_29[0].y = tmpvar_27.x;
  tmpvar_29[0].z = tmpvar_28.x;
  tmpvar_29[1].x = tmpvar_26.y;
  tmpvar_29[1].y = tmpvar_27.y;
  tmpvar_29[1].z = tmpvar_28.y;
  tmpvar_29[2].x = tmpvar_26.z;
  tmpvar_29[2].y = tmpvar_27.z;
  tmpvar_29[2].z = tmpvar_28.z;
  tmpvar_6 = (tmpvar_29 * _glesNormal);
  tmpvar_7 = (tmpvar_29 * ((unity_WorldToObject * _WorldSpaceLightPos0).xyz - (_glesVertex.xyz * _WorldSpaceLightPos0.w)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  tmpvar_8 = (tmpvar_29 * ((unity_WorldToObject * tmpvar_30).xyz - _glesVertex.xyz));
  mediump vec4 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_14.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_33;
  mediump float fogFactor_34;
  mediump vec3 fogColor_35;
  mediump vec3 heightFogColor_36;
  highp float HeightFogFactor_37;
  mediump vec3 atomesphereFogColor_38;
  mediump float h_39;
  highp float linearFogDensity_40;
  mediump float len_41;
  highp float tmpvar_42;
  tmpvar_42 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_41 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = clamp (((len_41 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_40 = (tmpvar_43 * (2.0 - tmpvar_43));
  if ((len_41 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_40 = (linearFogDensity_40 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_44;
  tmpvar_44 = min (pow (linearFogDensity_40, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_40 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((tmpvar_14.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  h_39 = (tmpvar_45 * (2.0 - tmpvar_45));
  highp vec3 tmpvar_47;
  tmpvar_47 = (_HeigtFogColBase2.xyz + (h_39 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_38 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix (atomesphereFogColor_38, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_41 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_38 = tmpvar_48;
  mediump float tmpvar_49;
  mediump float r_50;
  mediump float f_51;
  mediump float u_52;
  mediump float l_53;
  mediump float fogInt_54;
  fogInt_54 = 1.0;
  highp float tmpvar_55;
  tmpvar_55 = (_HeigtFogParams2.x * tmpvar_32.y);
  highp float tmpvar_56;
  tmpvar_56 = abs(tmpvar_55);
  if ((tmpvar_56 > 0.01)) {
    highp float tmpvar_57;
    tmpvar_57 = exp(-(tmpvar_55));
    fogInt_54 = ((1.0 - tmpvar_57) / tmpvar_55);
  };
  highp float tmpvar_58;
  tmpvar_58 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_53 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (l_53 * _HeigtFogParams2.y);
  u_52 = tmpvar_59;
  fogInt_54 = (fogInt_54 * u_52);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((l_53 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  r_50 = (tmpvar_60 * (2.0 - tmpvar_60));
  r_50 = ((r_50 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_51 = ((1.0 - clamp (
    exp2(-(fogInt_54))
  , 0.0, 1.0)) * r_50);
  highp float tmpvar_62;
  tmpvar_62 = min (f_51, _HeigtFogColBase2.w);
  tmpvar_49 = tmpvar_62;
  HeightFogFactor_37 = tmpvar_49;
  highp vec3 tmpvar_63;
  tmpvar_63 = _Mihoyo_FogColor2.xyz;
  heightFogColor_36 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = ((heightFogColor_36 * HeightFogFactor_37) + ((atomesphereFogColor_38 * tmpvar_44) * (1.0 - HeightFogFactor_37)));
  fogColor_35 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = ((1.0 - tmpvar_44) * (1.0 - HeightFogFactor_37));
  fogFactor_34 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66.xyz = fogColor_35;
  tmpvar_66.w = fogFactor_34;
  tmpvar_33 = tmpvar_66;
  highp vec4 tmpvar_67;
  mediump float fogFactor_68;
  mediump vec3 fogColor_69;
  mediump vec3 heightFogColor_70;
  highp float HeightFogFactor_71;
  mediump vec3 atomesphereFogColor_72;
  mediump float h_73;
  highp float linearFogDensity_74;
  mediump float len_75;
  highp float tmpvar_76;
  tmpvar_76 = sqrt(dot (tmpvar_32, tmpvar_32));
  len_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = clamp (((len_75 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_74 = (tmpvar_77 * (2.0 - tmpvar_77));
  if ((len_75 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_74 = (linearFogDensity_74 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_78;
  tmpvar_78 = min (pow (linearFogDensity_74, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_74 = tmpvar_78;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((tmpvar_14.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_79 = tmpvar_80;
  h_73 = (tmpvar_79 * (2.0 - tmpvar_79));
  highp vec3 tmpvar_81;
  tmpvar_81 = (_HeigtFogColBase3.xyz + (h_73 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_72 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (atomesphereFogColor_72, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_75 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_72 = tmpvar_82;
  mediump float tmpvar_83;
  mediump float r_84;
  mediump float f_85;
  mediump float u_86;
  mediump float l_87;
  mediump float fogInt_88;
  fogInt_88 = 1.0;
  highp float tmpvar_89;
  tmpvar_89 = (_HeigtFogParams3.x * tmpvar_32.y);
  highp float tmpvar_90;
  tmpvar_90 = abs(tmpvar_89);
  if ((tmpvar_90 > 0.01)) {
    highp float tmpvar_91;
    tmpvar_91 = exp(-(tmpvar_89));
    fogInt_88 = ((1.0 - tmpvar_91) / tmpvar_89);
  };
  highp float tmpvar_92;
  tmpvar_92 = sqrt(dot (tmpvar_32, tmpvar_32));
  l_87 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (l_87 * _HeigtFogParams3.y);
  u_86 = tmpvar_93;
  fogInt_88 = (fogInt_88 * u_86);
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = clamp (((l_87 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_94 = tmpvar_95;
  r_84 = (tmpvar_94 * (2.0 - tmpvar_94));
  r_84 = ((r_84 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_85 = ((1.0 - clamp (
    exp2(-(fogInt_88))
  , 0.0, 1.0)) * r_84);
  highp float tmpvar_96;
  tmpvar_96 = min (f_85, _HeigtFogColBase3.w);
  tmpvar_83 = tmpvar_96;
  HeightFogFactor_71 = tmpvar_83;
  highp vec3 tmpvar_97;
  tmpvar_97 = _Mihoyo_FogColor3.xyz;
  heightFogColor_70 = tmpvar_97;
  highp vec3 tmpvar_98;
  tmpvar_98 = ((heightFogColor_70 * HeightFogFactor_71) + ((atomesphereFogColor_72 * tmpvar_78) * (1.0 - HeightFogFactor_71)));
  fogColor_69 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((1.0 - tmpvar_78) * (1.0 - HeightFogFactor_71));
  fogFactor_68 = tmpvar_99;
  mediump vec4 tmpvar_100;
  tmpvar_100.xyz = fogColor_69;
  tmpvar_100.w = fogFactor_68;
  tmpvar_67 = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = mix (tmpvar_33, tmpvar_67, vec4(_LerpFactor));
  tmpvar_31 = tmpvar_101;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_11;
  xlv_TEXCOORD3 = tmpvar_14;
  xlv_TEXCOORD4 = tmpvar_21;
  xlv_TEXCOORD5 = tmpvar_22;
  xlv_TEXCOORD6 = tmpvar_23;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = tmpvar_8;
  xlv_COLOR1 = tmpvar_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform highp float _Transparent;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump float _BloomIntensity;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _EnableMatcapSpecular;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _SpecularMap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
uniform highp vec4 _SpecularMap_ST;
uniform highp float _SpecularIntensity;
uniform highp float _LightmapThreshold;
uniform highp float _IntensityInLightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec3 matcapSpecular_2;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp float THRESHOLDS_MATRIX_12[16];
  THRESHOLDS_MATRIX_12[0] = 0.05882353;
  THRESHOLDS_MATRIX_12[1] = 0.5294118;
  THRESHOLDS_MATRIX_12[2] = 0.1764706;
  THRESHOLDS_MATRIX_12[3] = 0.6470588;
  THRESHOLDS_MATRIX_12[4] = 0.7647059;
  THRESHOLDS_MATRIX_12[5] = 0.2941177;
  THRESHOLDS_MATRIX_12[6] = 0.8823529;
  THRESHOLDS_MATRIX_12[7] = 0.4117647;
  THRESHOLDS_MATRIX_12[8] = 0.2352941;
  THRESHOLDS_MATRIX_12[9] = 0.7058824;
  THRESHOLDS_MATRIX_12[10] = 0.1176471;
  THRESHOLDS_MATRIX_12[11] = 0.5882353;
  THRESHOLDS_MATRIX_12[12] = 0.9411765;
  THRESHOLDS_MATRIX_12[13] = 0.4705882;
  THRESHOLDS_MATRIX_12[14] = 0.8235294;
  THRESHOLDS_MATRIX_12[15] = 0.3529412;
  if ((_Transparent < 0.95)) {
    highp vec2 tmpvar_13;
    tmpvar_13 = ((xlv_TEXCOORD2 / xlv_TEXCOORD2.w).xy * _ScreenParams.xy);
    highp float tmpvar_14;
    tmpvar_14 = (tmpvar_13.x / 4.0);
    highp float tmpvar_15;
    tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
    highp float tmpvar_16;
    if ((tmpvar_14 >= 0.0)) {
      tmpvar_16 = tmpvar_15;
    } else {
      tmpvar_16 = -(tmpvar_15);
    };
    highp float tmpvar_17;
    tmpvar_17 = (tmpvar_13.y / 4.0);
    highp float tmpvar_18;
    tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
    highp float tmpvar_19;
    if ((tmpvar_17 >= 0.0)) {
      tmpvar_19 = tmpvar_18;
    } else {
      tmpvar_19 = -(tmpvar_18);
    };
    highp float x_20;
    x_20 = (_Transparent - THRESHOLDS_MATRIX_12[int((
      (tmpvar_16 * 4.0)
     + tmpvar_19))]);
    if ((x_20 < 0.0)) {
      discard;
    };
  };
  highp vec2 vpos_21;
  vpos_21 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_21.y = ((fract(vpos_21.y) * 0.0625) + unity_LODFade.y);
  lowp float x_22;
  x_22 = (texture2D (_DitherMaskLOD2D, vpos_21).w - 0.5);
  if ((x_22 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_24;
  highp vec2 screenCoord_25;
  screenCoord_25 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_26;
  shadow_26 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_27;
    tmpvar_27 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_25);
    shadow_26 = tmpvar_27.x;
  };
  mediump vec3 tmpvar_28;
  tmpvar_28 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_28;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_29;
    mediump float tmpvar_30;
    tmpvar_30 = dot (tmpvar_28, vec3(0.299, 0.587, 0.114));
    gray_29 = tmpvar_30;
    highp vec2 tmpvar_31;
    tmpvar_31.y = 0.5;
    tmpvar_31.x = (gray_29 * _LightmapColorScale);
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_LightmapColorChange, tmpvar_31);
    fc_9 = mix (((tmpvar_32 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_28, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_26))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_34;
  tmpvar_34 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_33 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_34;
  lowp vec3 tmpvar_35;
  tmpvar_35 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (xlv_TEXCOORD4, normals_7);
  worldNorm_5.x = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_39;
  highp mat3 tmpvar_40;
  tmpvar_40[0] = unity_MatrixV[0].xyz;
  tmpvar_40[1] = unity_MatrixV[1].xyz;
  tmpvar_40[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_40 * worldNorm_5);
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_41 - (2.0 * (
    dot (worldNorm_5, tmpvar_41)
   * worldNorm_5)));
  R_4 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = ((tmpvar_43.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_MatCap, tmpvar_44);
  mc_3 = tmpvar_45;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  matcapSpecular_2 = vec3(0.0, 0.0, 0.0);
  if ((_EnableMatcapSpecular > 0.0)) {
    lowp vec4 tmpvar_46;
    highp vec2 P_47;
    P_47 = ((tmpvar_44 * _SpecularMap_ST.xy) + _SpecularMap_ST.zw);
    tmpvar_46 = texture2D (_SpecularMap, P_47);
    mediump float tmpvar_48;
    tmpvar_48 = dot (lmtex_11.xyz, vec3(0.22, 0.707, 0.071));
    matcapSpecular_2 = ((tmpvar_46 * _SpecularIntensity).xyz * clamp ((
      float((tmpvar_48 >= _LightmapThreshold))
     + _IntensityInLightmap), 0.0, 1.0));
  };
  mc_3.xyz = ((mc_3.xyz * (tmpvar_33 + _LightingColor)) + matcapSpecular_2);
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_49;
  mediump vec3 srcColor_50;
  srcColor_50 = colorBlendLightMap_8;
  tmpvar_49 = (xlv_COLOR1.xyz + (srcColor_50 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_49;
  highp vec4 tmpvar_51;
  tmpvar_51.xyz = colorBlendLightMap_8;
  tmpvar_51.w = _BloomIntensity;
  tmpvar_1 = tmpvar_51;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
""
}
SubProgram "gles hw_tier01 " {
""
}
SubProgram "gles hw_tier02 " {
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
}
}
 UsePass "Hidden/miHoYo/DLC/Common/Shared/PREDEPTH"
}
}