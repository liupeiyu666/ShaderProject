//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "miHoYo/miHoYo_Scenes/Scenes_DLC/Broken" {
Properties {
[MHYHelpBox(Info, Vertex Color B(outline width))] [MHYHeaderBox(OPTIONS)] [Enum(UnityEngine.Rendering.CullMode)] _CullMode ("Cull Mode", Float) = 2
[Toggle(_ALPHATEST_ON)] _EnableAlphaCutoff ("Enable Alpha Cutoff", Float) = 0
[MHYKeywordFilter(_ALPHATEST_ON On)] _AlphaCutoff ("Alpha Cutoff", Range(0, 1)) = 0.5
_PolygonOffsetFactor ("Polygon Offset Factor", Float) = 0
_PolygonOffsetUnits ("Polygon Offset Units", Float) = 0
_OutlinePolygonOffsetFactor ("Outline Polygon Offset Factor", Float) = 0
_OutlinePolygonOffsetUnits ("Outline Polygon Offset Units", Float) = 0
[MHYHeaderBox(MAPS)] [MHYHeader(Main Maps)] [MHYSingleLineTextureNoScaleOffset(_Color)] _MainTex ("Albedo |RGB(base color) A (alpha)", 2D) = "white" { }
_Color ("Color", Color) = (1,1,1,1)
[MHYSingleLineTextureNoScaleOffset] _LightMap ("Light Map |R (sepcular intensity) G (diffuse threshold) B (specular threshold) A (material id)", 2D) = "grey" { }
[MHYSingleLineTextureNoScaleOffset] _MaskMap ("Mask Map |R (curvature) G (metal mask)", 2D) = "grey" { }
[MHYTextureScaleOffset] _MainMaps_ST ("Main Maps ST", Vector) = (1,1,0,0)
[MHYHeaderBox(LIGHTING)] [Toggle(_MULTI_BLOOM_ON)] _EnableMultipleBloom ("Enable Multiple Bloom", Float) = 0
[MHYKeywordFilter(_MULTI_BLOOM_ON Off)] _BloomIntensity ("Bloom Intensity", Float) = 1
[MHYKeywordFilter(_MULTI_BLOOM_ON On)] _BloomIntensity0 ("Bloom Intensity 0 (ID = 0)", Float) = 1
[MHYKeywordFilter(_MULTI_BLOOM_ON On)] _BloomIntensity1 ("Bloom Intensity 1 (ID = 31)", Float) = 1
[MHYKeywordFilter(_MULTI_BLOOM_ON On)] _BloomIntensity2 ("Bloom Intensity 2 (ID = 63)", Float) = 1
[MHYKeywordFilter(_MULTI_BLOOM_ON On)] _BloomIntensity3 ("Bloom Intensity 3 (ID = 95)", Float) = 1
[MHYKeywordFilter(_MULTI_BLOOM_ON On)] _BloomIntensity4 ("Bloom Intensity 4 (ID = 127)", Float) = 1
[MHYKeywordFilter(_MULTI_BLOOM_ON On)] _BloomIntensity5 ("Bloom Intensity 5 (ID = 159)", Float) = 1
[MHYKeywordFilter(_MULTI_BLOOM_ON On)] _BloomIntensity6 ("Bloom Intensity 6 (ID = 192)", Float) = 1
[MHYKeywordFilter(_MULTI_BLOOM_ON On)] _BloomIntensity7 ("Bloom Intensity 7 (ID = 223)", Float) = 1
[MHYHeaderBox(DIFFUSE)] [Toggle(_MULTI_DIFFUSE_ON)] _EnableMultipleDiffuse ("Enable Multiple Diffuse", Float) = 0
[MHYColorGradient(_MULTI_DIFFUSE_ON On)] _DiffuseRampMuitiTex ("Diffuse Multiple Ramp", 2D) = "white" { }
[MHYColorGradient(_MULTI_DIFFUSE_ON Off)] _DiffuseRampTex ("Diffuse Ramp", 2D) = "white" { }
_DiffuseRanges ("Diffuse Ranges", Vector) = (0.4,0.6,0,0)
_ShadowThreshold ("Shadow Threshold", Range(0, 1)) = 0.5
[MHYHeaderBox(SPECULAR)] [Toggle(_MULTI_SPECULAR_ON)] _EnableMultipleSpecular ("Enable Multiple Specular", Float) = 0
[MHYKeywordFilter(_MULTI_SPECULAR_ON Off)] _SpecularColor ("Specular Color", Color) = (1,1,1,1)
[MHYKeywordFilter(_MULTI_SPECULAR_ON On)] _SpecularColor0 ("Specular Color (ID = 0)", Color) = (1,1,1,1)
[MHYKeywordFilter(_MULTI_SPECULAR_ON On)] _SpecularColor1 ("Specular Color (ID = 31)", Color) = (1,1,1,1)
[MHYKeywordFilter(_MULTI_SPECULAR_ON On)] _SpecularColor2 ("Specular Color (ID = 63)", Color) = (1,1,1,1)
[MHYKeywordFilter(_MULTI_SPECULAR_ON On)] _SpecularColor3 ("Specular Color (ID = 95)", Color) = (1,1,1,1)
[MHYKeywordFilter(_MULTI_SPECULAR_ON On)] _SpecularColor4 ("Specular Color (ID = 127)", Color) = (1,1,1,1)
[MHYKeywordFilter(_MULTI_SPECULAR_ON On)] _SpecularColor5 ("Specular Color (ID = 159)", Color) = (1,1,1,1)
[MHYKeywordFilter(_MULTI_SPECULAR_ON On)] _SpecularColor6 ("Specular Color (ID = 192)", Color) = (1,1,1,1)
[MHYKeywordFilter(_MULTI_SPECULAR_ON On)] _SpecularColor7 ("Specular Color (ID = 223)", Color) = (1,1,1,1)
_SpecularShininess ("Specular Shininess", Range(0.1, 500)) = 10
_SpecularIntensity ("Specular Intensity", Range(0, 50)) = 1
[MHYHeaderBox(OUTLINE)] [Toggle(_MULTI_OUTLINE_ON)] _EnableMultipleOutline ("Enable Multiple Outline", Float) = 0
[MHYKeywordFilter(_MULTI_OUTLINE_ON Off)] _OutlineColor ("Outline Color", Color) = (0,0,0,1)
[MHYKeywordFilter(_MULTI_OUTLINE_ON On)] _OutlineColor0 ("Outline Color 0 (ID = 0)", Color) = (0,0,0,1)
[MHYKeywordFilter(_MULTI_OUTLINE_ON On)] _OutlineColor1 ("Outline Color 1 (ID = 31)", Color) = (0,0,0,1)
[MHYKeywordFilter(_MULTI_OUTLINE_ON On)] _OutlineColor2 ("Outline Color 2 (ID = 63)", Color) = (0,0,0,1)
[MHYKeywordFilter(_MULTI_OUTLINE_ON On)] _OutlineColor3 ("Outline Color 3 (ID = 95)", Color) = (0,0,0,1)
[MHYKeywordFilter(_MULTI_OUTLINE_ON On)] _OutlineColor4 ("Outline Color 4 (ID = 127)", Color) = (0,0,0,1)
[MHYKeywordFilter(_MULTI_OUTLINE_ON On)] _OutlineColor5 ("Outline Color 5 (ID = 159)", Color) = (0,0,0,1)
[MHYKeywordFilter(_MULTI_OUTLINE_ON On)] _OutlineColor6 ("Outline Color 6 (ID = 192)", Color) = (0,0,0,1)
[MHYKeywordFilter(_MULTI_OUTLINE_ON On)] _OutlineColor7 ("Outline Color 7 (ID = 223)", Color) = (0,0,0,1)
_OutlineWidth ("Outline Width", Range(0, 1)) = 0.1
[KeywordEnum(Normal, Tangent, UV2)] _OutlineNormalFrom ("Outline Normal From", Float) = 0
}
SubShader {
 Tags { "PerformanceChecks" = "False" "QUEUE" = "Geometry" "RenderType" = "Opaque" }
 Pass {
  Name "FORWARDONLY"
  Tags { "LIGHTMODE" = "FORWARDBASE" "PASSFLAGS" = "OnlyDirectional" "PerformanceChecks" = "False" "QUEUE" = "Geometry" "RenderType" = "Opaque" }
  Cull Off
  GpuProgramID 12824
Program "vp" {
SubProgram "gles3 hw_tier00 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_5;
lowp vec3 u_xlat10_6;
bvec3 u_xlatb8;
mediump float u_xlat16_10;
mediump vec2 u_xlat16_11;
bvec2 u_xlatb14;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
lowp float u_xlat10_21;
float u_xlat22;
mediump float u_xlat16_24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_21 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(u_xlat22) + _LightPosDir.xyz;
    u_xlat16_24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_24 = inversesqrt(u_xlat16_24);
    u_xlat16_3.xyz = vec3(u_xlat16_24) * u_xlat16_3.xyz;
    u_xlat22 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat2.xyz = vec3(u_xlat22) * vs_TEXCOORD4.xyz;
    u_xlat16_24 = dot(u_xlat2.xyz, _LightPosDir.xyz);
    u_xlat16_24 = u_xlat16_24 * 0.5 + 0.5;
    u_xlat16_24 = dot(vec2(u_xlat16_24), u_xlat10_1.yy);
    u_xlat16_4.x = (-u_xlat10_21) + 1.0;
    u_xlat16_11.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_4.xy = u_xlat16_4.xx * u_xlat16_11.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_18 = max(u_xlat16_4.x, 9.99999975e-05);
    u_xlat16_18 = u_xlat16_24 / u_xlat16_18;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_18 = u_xlat16_18 * 0.25;
    u_xlatb8.xz = lessThan(vec4(u_xlat16_24), u_xlat16_4.xxyy).xz;
    u_xlat16_5.xy = vec2(u_xlat16_24) + (-u_xlat16_4.xy);
    u_xlat16_24 = (-u_xlat16_4.x) + u_xlat16_4.y;
    u_xlat16_24 = max(u_xlat16_24, 9.99999975e-05);
    u_xlat16_24 = u_xlat16_5.x / u_xlat16_24;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
#else
    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
#endif
    u_xlat16_24 = u_xlat16_24 * 0.5 + 0.25;
    u_xlat16_4.x = (-u_xlat16_4.y) + 1.0;
    u_xlat16_4.x = max(u_xlat16_4.x, 9.99999975e-05);
    u_xlat16_4.x = u_xlat16_5.y / u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * 0.25 + 0.75;
    u_xlat16_24 = (u_xlatb8.z) ? u_xlat16_24 : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb8.x) ? u_xlat16_18 : u_xlat16_24;
    u_xlat16_4.y = 0.5;
    u_xlat10_6.xyz = texture(_DiffuseRampTex, u_xlat16_4.xy).xyz;
    u_xlat16_3.x = dot(u_xlat2.xyz, u_xlat16_3.xyz);
    u_xlat16_3.x = max(u_xlat16_3.x, 0.0);
    u_xlat16_3.x = log2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _SpecularShininess;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_10 = dFdx(u_xlat16_3.x);
    u_xlat16_17 = dFdy(u_xlat16_3.x);
    u_xlat16_10 = abs(u_xlat16_17) + abs(u_xlat16_10);
    u_xlat16_17 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_24 = (-u_xlat16_10) + u_xlat16_17;
    u_xlat16_3.y = u_xlat16_10 + u_xlat16_17;
    u_xlat16_3.xy = (-vec2(u_xlat16_24)) + u_xlat16_3.xy;
    u_xlat16_10 = float(1.0) / u_xlat16_3.y;
    u_xlat16_3.x = u_xlat16_10 * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_10 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _SpecularColor.xyz;
    u_xlat16_3.xyz = u_xlat10_1.xxx * u_xlat16_3.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
    u_xlat16_3.xyz = u_xlat10_6.xyz * u_xlat16_0.xyz + u_xlat16_3.xyz;
    u_xlat16_4.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_4.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_4.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-unity_SHC.xyz);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_0.xyz + u_xlat16_3.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_5;
lowp vec3 u_xlat10_6;
bvec3 u_xlatb8;
mediump float u_xlat16_10;
mediump vec2 u_xlat16_11;
bvec2 u_xlatb14;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
lowp float u_xlat10_21;
float u_xlat22;
mediump float u_xlat16_24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_21 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(u_xlat22) + _LightPosDir.xyz;
    u_xlat16_24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_24 = inversesqrt(u_xlat16_24);
    u_xlat16_3.xyz = vec3(u_xlat16_24) * u_xlat16_3.xyz;
    u_xlat22 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat2.xyz = vec3(u_xlat22) * vs_TEXCOORD4.xyz;
    u_xlat16_24 = dot(u_xlat2.xyz, _LightPosDir.xyz);
    u_xlat16_24 = u_xlat16_24 * 0.5 + 0.5;
    u_xlat16_24 = dot(vec2(u_xlat16_24), u_xlat10_1.yy);
    u_xlat16_4.x = (-u_xlat10_21) + 1.0;
    u_xlat16_11.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_4.xy = u_xlat16_4.xx * u_xlat16_11.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_18 = max(u_xlat16_4.x, 9.99999975e-05);
    u_xlat16_18 = u_xlat16_24 / u_xlat16_18;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_18 = u_xlat16_18 * 0.25;
    u_xlatb8.xz = lessThan(vec4(u_xlat16_24), u_xlat16_4.xxyy).xz;
    u_xlat16_5.xy = vec2(u_xlat16_24) + (-u_xlat16_4.xy);
    u_xlat16_24 = (-u_xlat16_4.x) + u_xlat16_4.y;
    u_xlat16_24 = max(u_xlat16_24, 9.99999975e-05);
    u_xlat16_24 = u_xlat16_5.x / u_xlat16_24;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
#else
    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
#endif
    u_xlat16_24 = u_xlat16_24 * 0.5 + 0.25;
    u_xlat16_4.x = (-u_xlat16_4.y) + 1.0;
    u_xlat16_4.x = max(u_xlat16_4.x, 9.99999975e-05);
    u_xlat16_4.x = u_xlat16_5.y / u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * 0.25 + 0.75;
    u_xlat16_24 = (u_xlatb8.z) ? u_xlat16_24 : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb8.x) ? u_xlat16_18 : u_xlat16_24;
    u_xlat16_4.y = 0.5;
    u_xlat10_6.xyz = texture(_DiffuseRampTex, u_xlat16_4.xy).xyz;
    u_xlat16_3.x = dot(u_xlat2.xyz, u_xlat16_3.xyz);
    u_xlat16_3.x = max(u_xlat16_3.x, 0.0);
    u_xlat16_3.x = log2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _SpecularShininess;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_10 = dFdx(u_xlat16_3.x);
    u_xlat16_17 = dFdy(u_xlat16_3.x);
    u_xlat16_10 = abs(u_xlat16_17) + abs(u_xlat16_10);
    u_xlat16_17 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_24 = (-u_xlat16_10) + u_xlat16_17;
    u_xlat16_3.y = u_xlat16_10 + u_xlat16_17;
    u_xlat16_3.xy = (-vec2(u_xlat16_24)) + u_xlat16_3.xy;
    u_xlat16_10 = float(1.0) / u_xlat16_3.y;
    u_xlat16_3.x = u_xlat16_10 * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_10 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _SpecularColor.xyz;
    u_xlat16_3.xyz = u_xlat10_1.xxx * u_xlat16_3.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
    u_xlat16_3.xyz = u_xlat10_6.xyz * u_xlat16_0.xyz + u_xlat16_3.xyz;
    u_xlat16_4.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_4.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_4.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-unity_SHC.xyz);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_0.xyz + u_xlat16_3.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_5;
lowp vec3 u_xlat10_6;
bvec3 u_xlatb8;
mediump float u_xlat16_10;
mediump vec2 u_xlat16_11;
bvec2 u_xlatb14;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
lowp float u_xlat10_21;
float u_xlat22;
mediump float u_xlat16_24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_21 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat16_3.xyz = u_xlat2.xyz * vec3(u_xlat22) + _LightPosDir.xyz;
    u_xlat16_24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_24 = inversesqrt(u_xlat16_24);
    u_xlat16_3.xyz = vec3(u_xlat16_24) * u_xlat16_3.xyz;
    u_xlat22 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat2.xyz = vec3(u_xlat22) * vs_TEXCOORD4.xyz;
    u_xlat16_24 = dot(u_xlat2.xyz, _LightPosDir.xyz);
    u_xlat16_24 = u_xlat16_24 * 0.5 + 0.5;
    u_xlat16_24 = dot(vec2(u_xlat16_24), u_xlat10_1.yy);
    u_xlat16_4.x = (-u_xlat10_21) + 1.0;
    u_xlat16_11.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_4.xy = u_xlat16_4.xx * u_xlat16_11.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_18 = max(u_xlat16_4.x, 9.99999975e-05);
    u_xlat16_18 = u_xlat16_24 / u_xlat16_18;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_18 = u_xlat16_18 * 0.25;
    u_xlatb8.xz = lessThan(vec4(u_xlat16_24), u_xlat16_4.xxyy).xz;
    u_xlat16_5.xy = vec2(u_xlat16_24) + (-u_xlat16_4.xy);
    u_xlat16_24 = (-u_xlat16_4.x) + u_xlat16_4.y;
    u_xlat16_24 = max(u_xlat16_24, 9.99999975e-05);
    u_xlat16_24 = u_xlat16_5.x / u_xlat16_24;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
#else
    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
#endif
    u_xlat16_24 = u_xlat16_24 * 0.5 + 0.25;
    u_xlat16_4.x = (-u_xlat16_4.y) + 1.0;
    u_xlat16_4.x = max(u_xlat16_4.x, 9.99999975e-05);
    u_xlat16_4.x = u_xlat16_5.y / u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * 0.25 + 0.75;
    u_xlat16_24 = (u_xlatb8.z) ? u_xlat16_24 : u_xlat16_4.x;
    u_xlat16_4.x = (u_xlatb8.x) ? u_xlat16_18 : u_xlat16_24;
    u_xlat16_4.y = 0.5;
    u_xlat10_6.xyz = texture(_DiffuseRampTex, u_xlat16_4.xy).xyz;
    u_xlat16_3.x = dot(u_xlat2.xyz, u_xlat16_3.xyz);
    u_xlat16_3.x = max(u_xlat16_3.x, 0.0);
    u_xlat16_3.x = log2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _SpecularShininess;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_10 = dFdx(u_xlat16_3.x);
    u_xlat16_17 = dFdy(u_xlat16_3.x);
    u_xlat16_10 = abs(u_xlat16_17) + abs(u_xlat16_10);
    u_xlat16_17 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_24 = (-u_xlat16_10) + u_xlat16_17;
    u_xlat16_3.y = u_xlat16_10 + u_xlat16_17;
    u_xlat16_3.xy = (-vec2(u_xlat16_24)) + u_xlat16_3.xy;
    u_xlat16_10 = float(1.0) / u_xlat16_3.y;
    u_xlat16_3.x = u_xlat16_10 * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_10 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _SpecularColor.xyz;
    u_xlat16_3.xyz = u_xlat10_1.xxx * u_xlat16_3.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
    u_xlat16_3.xyz = u_xlat10_6.xyz * u_xlat16_0.xyz + u_xlat16_3.xyz;
    u_xlat16_4.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_4.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_4.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-unity_SHC.xyz);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_0.xyz + u_xlat16_3.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_8;
bvec3 u_xlatb9;
mediump vec2 u_xlat16_11;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
mediump float u_xlat16_15;
mediump vec2 u_xlat16_18;
float u_xlat21;
lowp float u_xlat10_21;
mediump float u_xlat16_22;
float u_xlat23;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb14.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb14.x){
        u_xlat10_14 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_14;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb14.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb14.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb14.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb14.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb14.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_21 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat16_8.xyz = u_xlat3.xyz * vec3(u_xlat23) + _LightPosDir.xyz;
    u_xlat16_4.x = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_4.xxx;
    u_xlat23 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat3.xyz = vec3(u_xlat23) * vs_TEXCOORD4.xyz;
    u_xlat16_4.x = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.x = dot(u_xlat16_4.xx, u_xlat10_2.yy);
    u_xlat16_11.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_18.x = u_xlat16_1.x + -0.5;
    u_xlat16_18.x = u_xlat16_18.x + u_xlat16_18.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18.x = min(max(u_xlat16_18.x, 0.0), 1.0);
#else
    u_xlat16_18.x = clamp(u_xlat16_18.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_18.x * -2.0 + 3.0;
    u_xlat16_18.x = u_xlat16_18.x * u_xlat16_18.x;
    u_xlat16_18.x = u_xlat16_18.x * u_xlat16_25;
    u_xlat16_4.x = (-u_xlat16_11.x) + u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_18.x * u_xlat16_4.x + u_xlat16_11.x;
    u_xlat16_11.x = (-u_xlat10_21) + 1.0;
    u_xlat16_18.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_11.xy = u_xlat16_11.xx * u_xlat16_18.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_11.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_4.x / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb9.xz = lessThan(u_xlat16_4.xxxx, u_xlat16_11.xxyy).xz;
    u_xlat16_5.xy = (-u_xlat16_11.xy) + u_xlat16_4.xx;
    u_xlat16_4.x = (-u_xlat16_11.x) + u_xlat16_11.y;
    u_xlat16_4.x = max(u_xlat16_4.x, 9.99999975e-05);
    u_xlat16_4.x = u_xlat16_5.x / u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.25;
    u_xlat16_11.x = (-u_xlat16_11.y) + 1.0;
    u_xlat16_11.x = max(u_xlat16_11.x, 9.99999975e-05);
    u_xlat16_11.x = u_xlat16_5.y / u_xlat16_11.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat16_11.x = u_xlat16_11.x * 0.25 + 0.75;
    u_xlat16_4.x = (u_xlatb9.z) ? u_xlat16_4.x : u_xlat16_11.x;
    u_xlat16_4.x = (u_xlatb9.x) ? u_xlat16_25 : u_xlat16_4.x;
    u_xlat16_4.y = 0.5;
    u_xlat10_6.xyz = texture(_DiffuseRampTex, u_xlat16_4.xy).xyz;
    u_xlat16_8.x = dot(u_xlat3.xyz, u_xlat16_8.xyz);
    u_xlat16_8.x = max(u_xlat16_8.x, 0.0);
    u_xlat16_8.x = log2(u_xlat16_8.x);
    u_xlat16_8.x = u_xlat16_8.x * _SpecularShininess;
    u_xlat16_8.x = exp2(u_xlat16_8.x);
    u_xlat21 = u_xlat16_8.x * u_xlat16_1.x;
    u_xlat16_15 = dFdx(u_xlat21);
    u_xlat16_22 = dFdy(u_xlat21);
    u_xlat16_15 = abs(u_xlat16_22) + abs(u_xlat16_15);
    u_xlat16_22 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_4.x = (-u_xlat16_15) + u_xlat16_22;
    u_xlat16_15 = u_xlat16_15 + u_xlat16_22;
    u_xlat16_15 = (-u_xlat16_4.x) + u_xlat16_15;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x + (-u_xlat16_4.x);
    u_xlat16_8.x = float(1.0) / u_xlat16_15;
    u_xlat16_1.x = u_xlat16_8.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_4.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_4.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_4.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-unity_SHC.xyz);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_4.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_8;
bvec3 u_xlatb9;
mediump vec2 u_xlat16_11;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
mediump float u_xlat16_15;
mediump vec2 u_xlat16_18;
float u_xlat21;
lowp float u_xlat10_21;
mediump float u_xlat16_22;
float u_xlat23;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb14.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb14.x){
        u_xlat10_14 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_14;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb14.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb14.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb14.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb14.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb14.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_21 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat16_8.xyz = u_xlat3.xyz * vec3(u_xlat23) + _LightPosDir.xyz;
    u_xlat16_4.x = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_4.xxx;
    u_xlat23 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat3.xyz = vec3(u_xlat23) * vs_TEXCOORD4.xyz;
    u_xlat16_4.x = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.x = dot(u_xlat16_4.xx, u_xlat10_2.yy);
    u_xlat16_11.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_18.x = u_xlat16_1.x + -0.5;
    u_xlat16_18.x = u_xlat16_18.x + u_xlat16_18.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18.x = min(max(u_xlat16_18.x, 0.0), 1.0);
#else
    u_xlat16_18.x = clamp(u_xlat16_18.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_18.x * -2.0 + 3.0;
    u_xlat16_18.x = u_xlat16_18.x * u_xlat16_18.x;
    u_xlat16_18.x = u_xlat16_18.x * u_xlat16_25;
    u_xlat16_4.x = (-u_xlat16_11.x) + u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_18.x * u_xlat16_4.x + u_xlat16_11.x;
    u_xlat16_11.x = (-u_xlat10_21) + 1.0;
    u_xlat16_18.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_11.xy = u_xlat16_11.xx * u_xlat16_18.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_11.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_4.x / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb9.xz = lessThan(u_xlat16_4.xxxx, u_xlat16_11.xxyy).xz;
    u_xlat16_5.xy = (-u_xlat16_11.xy) + u_xlat16_4.xx;
    u_xlat16_4.x = (-u_xlat16_11.x) + u_xlat16_11.y;
    u_xlat16_4.x = max(u_xlat16_4.x, 9.99999975e-05);
    u_xlat16_4.x = u_xlat16_5.x / u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.25;
    u_xlat16_11.x = (-u_xlat16_11.y) + 1.0;
    u_xlat16_11.x = max(u_xlat16_11.x, 9.99999975e-05);
    u_xlat16_11.x = u_xlat16_5.y / u_xlat16_11.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat16_11.x = u_xlat16_11.x * 0.25 + 0.75;
    u_xlat16_4.x = (u_xlatb9.z) ? u_xlat16_4.x : u_xlat16_11.x;
    u_xlat16_4.x = (u_xlatb9.x) ? u_xlat16_25 : u_xlat16_4.x;
    u_xlat16_4.y = 0.5;
    u_xlat10_6.xyz = texture(_DiffuseRampTex, u_xlat16_4.xy).xyz;
    u_xlat16_8.x = dot(u_xlat3.xyz, u_xlat16_8.xyz);
    u_xlat16_8.x = max(u_xlat16_8.x, 0.0);
    u_xlat16_8.x = log2(u_xlat16_8.x);
    u_xlat16_8.x = u_xlat16_8.x * _SpecularShininess;
    u_xlat16_8.x = exp2(u_xlat16_8.x);
    u_xlat21 = u_xlat16_8.x * u_xlat16_1.x;
    u_xlat16_15 = dFdx(u_xlat21);
    u_xlat16_22 = dFdy(u_xlat21);
    u_xlat16_15 = abs(u_xlat16_22) + abs(u_xlat16_15);
    u_xlat16_22 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_4.x = (-u_xlat16_15) + u_xlat16_22;
    u_xlat16_15 = u_xlat16_15 + u_xlat16_22;
    u_xlat16_15 = (-u_xlat16_4.x) + u_xlat16_15;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x + (-u_xlat16_4.x);
    u_xlat16_8.x = float(1.0) / u_xlat16_15;
    u_xlat16_1.x = u_xlat16_8.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_4.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_4.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_4.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-unity_SHC.xyz);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_4.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_8;
bvec3 u_xlatb9;
mediump vec2 u_xlat16_11;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
mediump float u_xlat16_15;
mediump vec2 u_xlat16_18;
float u_xlat21;
lowp float u_xlat10_21;
mediump float u_xlat16_22;
float u_xlat23;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb14.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb14.x){
        u_xlat10_14 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_14;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb14.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb14.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb14.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb14.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb14.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_21 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat16_8.xyz = u_xlat3.xyz * vec3(u_xlat23) + _LightPosDir.xyz;
    u_xlat16_4.x = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_4.xxx;
    u_xlat23 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat3.xyz = vec3(u_xlat23) * vs_TEXCOORD4.xyz;
    u_xlat16_4.x = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.x = dot(u_xlat16_4.xx, u_xlat10_2.yy);
    u_xlat16_11.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_18.x = u_xlat16_1.x + -0.5;
    u_xlat16_18.x = u_xlat16_18.x + u_xlat16_18.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18.x = min(max(u_xlat16_18.x, 0.0), 1.0);
#else
    u_xlat16_18.x = clamp(u_xlat16_18.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_18.x * -2.0 + 3.0;
    u_xlat16_18.x = u_xlat16_18.x * u_xlat16_18.x;
    u_xlat16_18.x = u_xlat16_18.x * u_xlat16_25;
    u_xlat16_4.x = (-u_xlat16_11.x) + u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_18.x * u_xlat16_4.x + u_xlat16_11.x;
    u_xlat16_11.x = (-u_xlat10_21) + 1.0;
    u_xlat16_18.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_11.xy = u_xlat16_11.xx * u_xlat16_18.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_11.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_4.x / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb9.xz = lessThan(u_xlat16_4.xxxx, u_xlat16_11.xxyy).xz;
    u_xlat16_5.xy = (-u_xlat16_11.xy) + u_xlat16_4.xx;
    u_xlat16_4.x = (-u_xlat16_11.x) + u_xlat16_11.y;
    u_xlat16_4.x = max(u_xlat16_4.x, 9.99999975e-05);
    u_xlat16_4.x = u_xlat16_5.x / u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.25;
    u_xlat16_11.x = (-u_xlat16_11.y) + 1.0;
    u_xlat16_11.x = max(u_xlat16_11.x, 9.99999975e-05);
    u_xlat16_11.x = u_xlat16_5.y / u_xlat16_11.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat16_11.x = u_xlat16_11.x * 0.25 + 0.75;
    u_xlat16_4.x = (u_xlatb9.z) ? u_xlat16_4.x : u_xlat16_11.x;
    u_xlat16_4.x = (u_xlatb9.x) ? u_xlat16_25 : u_xlat16_4.x;
    u_xlat16_4.y = 0.5;
    u_xlat10_6.xyz = texture(_DiffuseRampTex, u_xlat16_4.xy).xyz;
    u_xlat16_8.x = dot(u_xlat3.xyz, u_xlat16_8.xyz);
    u_xlat16_8.x = max(u_xlat16_8.x, 0.0);
    u_xlat16_8.x = log2(u_xlat16_8.x);
    u_xlat16_8.x = u_xlat16_8.x * _SpecularShininess;
    u_xlat16_8.x = exp2(u_xlat16_8.x);
    u_xlat21 = u_xlat16_8.x * u_xlat16_1.x;
    u_xlat16_15 = dFdx(u_xlat21);
    u_xlat16_22 = dFdy(u_xlat21);
    u_xlat16_15 = abs(u_xlat16_22) + abs(u_xlat16_15);
    u_xlat16_22 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_4.x = (-u_xlat16_15) + u_xlat16_22;
    u_xlat16_15 = u_xlat16_15 + u_xlat16_22;
    u_xlat16_15 = (-u_xlat16_4.x) + u_xlat16_15;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x + (-u_xlat16_4.x);
    u_xlat16_8.x = float(1.0) / u_xlat16_15;
    u_xlat16_1.x = u_xlat16_8.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_4.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_4.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_4.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-unity_SHC.xyz);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_4.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_MULTI_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor0;
uniform 	mediump vec4 _SpecularColor1;
uniform 	mediump vec4 _SpecularColor2;
uniform 	mediump vec4 _SpecularColor3;
uniform 	mediump vec4 _SpecularColor4;
uniform 	mediump vec4 _SpecularColor5;
uniform 	mediump vec4 _SpecularColor6;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
uvec2 u_xlatu2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_5;
lowp vec3 u_xlat10_6;
bvec3 u_xlatb7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_11;
bvec2 u_xlatb16;
mediump float u_xlat16_18;
mediump vec2 u_xlat16_19;
float u_xlat21;
lowp float u_xlat10_21;
int u_xlati21;
bool u_xlatb21;
float u_xlat23;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_1.x = u_xlat10_0.w * 8.0;
    u_xlat16_1.x = roundEven(u_xlat16_1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<u_xlat16_1.x);
#else
    u_xlatb21 = 0.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_1.x<1.5);
#else
    u_xlatb2.x = u_xlat16_1.x<1.5;
#endif
    u_xlatb21 = u_xlatb21 && u_xlatb2.x;
    if(u_xlatb21){
        u_xlat16_8.xyz = _SpecularColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(1.5<u_xlat16_1.x);
#else
        u_xlatb21 = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb2.x = !!(u_xlat16_1.x<2.5);
#else
        u_xlatb2.x = u_xlat16_1.x<2.5;
#endif
        u_xlatb21 = u_xlatb21 && u_xlatb2.x;
        if(u_xlatb21){
            u_xlat16_8.xyz = _SpecularColor2.xyz;
        } else {
            u_xlatb2 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
            u_xlatb3 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb2.x = u_xlatb2.x && u_xlatb3.x;
            u_xlatb2.y = u_xlatb2.y && u_xlatb3.y;
            u_xlatb2.z = u_xlatb2.z && u_xlatb3.z;
            u_xlatb2.w = u_xlatb2.w && u_xlatb3.w;
            u_xlat16_4.xyz = (u_xlatb2.w) ? _SpecularColor6.xyz : _SpecularColor0.xyz;
            u_xlat16_4.xyz = (u_xlatb2.z) ? _SpecularColor5.xyz : u_xlat16_4.xyz;
            u_xlat16_4.xyz = (u_xlatb2.y) ? _SpecularColor4.xyz : u_xlat16_4.xyz;
            u_xlat16_8.xyz = (u_xlatb2.x) ? _SpecularColor3.xyz : u_xlat16_4.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb21){
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb21 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb21){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb16.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb16.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat21 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat21 = vs_TEXCOORD2.z * 17.0 + (-u_xlat21);
            u_xlat21 = u_xlat21 + 0.99000001;
            u_xlat21 = floor(u_xlat21);
            u_xlat21 = max(u_xlat21, 0.0);
            u_xlati21 = int(u_xlat21);
            if((u_xlati21)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat10_21 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(u_xlat23) + _LightPosDir.xyz;
    u_xlat16_1.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
    u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz;
    u_xlat23 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat3.xyz = vec3(u_xlat23) * vs_TEXCOORD4.xyz;
    u_xlat16_1.x = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_1.x = u_xlat16_1.x * 0.5 + 0.5;
    u_xlat16_1.x = dot(u_xlat16_1.xx, u_xlat10_0.yy);
    u_xlat16_25 = (-u_xlat10_21) + 1.0;
    u_xlat16_5.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_5.xy = vec2(u_xlat16_25) * u_xlat16_5.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_5.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_1.x / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb7.xz = lessThan(u_xlat16_1.xxxx, u_xlat16_5.xxyy).xz;
    u_xlat16_19.xy = u_xlat16_1.xx + (-u_xlat16_5.xy);
    u_xlat16_1.x = (-u_xlat16_5.x) + u_xlat16_5.y;
    u_xlat16_1.x = max(u_xlat16_1.x, 9.99999975e-05);
    u_xlat16_1.x = u_xlat16_19.x / u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 0.5 + 0.25;
    u_xlat16_5.x = (-u_xlat16_5.y) + 1.0;
    u_xlat16_5.x = max(u_xlat16_5.x, 9.99999975e-05);
    u_xlat16_5.x = u_xlat16_19.y / u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x * 0.25 + 0.75;
    u_xlat16_1.x = (u_xlatb7.z) ? u_xlat16_1.x : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb7.x) ? u_xlat16_25 : u_xlat16_1.x;
    u_xlat16_5.y = 0.5;
    u_xlat10_6.xyz = texture(_DiffuseRampTex, u_xlat16_5.xy).xyz;
    u_xlat16_1.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * _SpecularShininess;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat16_4.x = dFdx(u_xlat16_1.x);
    u_xlat16_11 = dFdy(u_xlat16_1.x);
    u_xlat16_4.x = abs(u_xlat16_11) + abs(u_xlat16_4.x);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_18 = (-u_xlat16_4.x) + u_xlat16_11;
    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_11;
    u_xlat16_4.x = (-u_xlat16_18) + u_xlat16_4.x;
    u_xlat16_1.x = u_xlat16_1.x + (-u_xlat16_18);
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4.x;
    u_xlat16_1.xyz = u_xlat16_8.xyz * u_xlat16_1.xxx;
    u_xlat16_1.xyz = u_xlat10_0.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_6.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_4.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_4.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_4.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-unity_SHC.xyz);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_4.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = u_xlat16_0.xyz * _CharacterSHColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_MULTI_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor0;
uniform 	mediump vec4 _SpecularColor1;
uniform 	mediump vec4 _SpecularColor2;
uniform 	mediump vec4 _SpecularColor3;
uniform 	mediump vec4 _SpecularColor4;
uniform 	mediump vec4 _SpecularColor5;
uniform 	mediump vec4 _SpecularColor6;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
uvec2 u_xlatu2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_5;
lowp vec3 u_xlat10_6;
bvec3 u_xlatb7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_11;
bvec2 u_xlatb16;
mediump float u_xlat16_18;
mediump vec2 u_xlat16_19;
float u_xlat21;
lowp float u_xlat10_21;
int u_xlati21;
bool u_xlatb21;
float u_xlat23;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_1.x = u_xlat10_0.w * 8.0;
    u_xlat16_1.x = roundEven(u_xlat16_1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<u_xlat16_1.x);
#else
    u_xlatb21 = 0.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_1.x<1.5);
#else
    u_xlatb2.x = u_xlat16_1.x<1.5;
#endif
    u_xlatb21 = u_xlatb21 && u_xlatb2.x;
    if(u_xlatb21){
        u_xlat16_8.xyz = _SpecularColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(1.5<u_xlat16_1.x);
#else
        u_xlatb21 = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb2.x = !!(u_xlat16_1.x<2.5);
#else
        u_xlatb2.x = u_xlat16_1.x<2.5;
#endif
        u_xlatb21 = u_xlatb21 && u_xlatb2.x;
        if(u_xlatb21){
            u_xlat16_8.xyz = _SpecularColor2.xyz;
        } else {
            u_xlatb2 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
            u_xlatb3 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb2.x = u_xlatb2.x && u_xlatb3.x;
            u_xlatb2.y = u_xlatb2.y && u_xlatb3.y;
            u_xlatb2.z = u_xlatb2.z && u_xlatb3.z;
            u_xlatb2.w = u_xlatb2.w && u_xlatb3.w;
            u_xlat16_4.xyz = (u_xlatb2.w) ? _SpecularColor6.xyz : _SpecularColor0.xyz;
            u_xlat16_4.xyz = (u_xlatb2.z) ? _SpecularColor5.xyz : u_xlat16_4.xyz;
            u_xlat16_4.xyz = (u_xlatb2.y) ? _SpecularColor4.xyz : u_xlat16_4.xyz;
            u_xlat16_8.xyz = (u_xlatb2.x) ? _SpecularColor3.xyz : u_xlat16_4.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb21){
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb21 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb21){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb16.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb16.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat21 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat21 = vs_TEXCOORD2.z * 17.0 + (-u_xlat21);
            u_xlat21 = u_xlat21 + 0.99000001;
            u_xlat21 = floor(u_xlat21);
            u_xlat21 = max(u_xlat21, 0.0);
            u_xlati21 = int(u_xlat21);
            if((u_xlati21)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat10_21 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(u_xlat23) + _LightPosDir.xyz;
    u_xlat16_1.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
    u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz;
    u_xlat23 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat3.xyz = vec3(u_xlat23) * vs_TEXCOORD4.xyz;
    u_xlat16_1.x = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_1.x = u_xlat16_1.x * 0.5 + 0.5;
    u_xlat16_1.x = dot(u_xlat16_1.xx, u_xlat10_0.yy);
    u_xlat16_25 = (-u_xlat10_21) + 1.0;
    u_xlat16_5.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_5.xy = vec2(u_xlat16_25) * u_xlat16_5.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_5.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_1.x / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb7.xz = lessThan(u_xlat16_1.xxxx, u_xlat16_5.xxyy).xz;
    u_xlat16_19.xy = u_xlat16_1.xx + (-u_xlat16_5.xy);
    u_xlat16_1.x = (-u_xlat16_5.x) + u_xlat16_5.y;
    u_xlat16_1.x = max(u_xlat16_1.x, 9.99999975e-05);
    u_xlat16_1.x = u_xlat16_19.x / u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 0.5 + 0.25;
    u_xlat16_5.x = (-u_xlat16_5.y) + 1.0;
    u_xlat16_5.x = max(u_xlat16_5.x, 9.99999975e-05);
    u_xlat16_5.x = u_xlat16_19.y / u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x * 0.25 + 0.75;
    u_xlat16_1.x = (u_xlatb7.z) ? u_xlat16_1.x : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb7.x) ? u_xlat16_25 : u_xlat16_1.x;
    u_xlat16_5.y = 0.5;
    u_xlat10_6.xyz = texture(_DiffuseRampTex, u_xlat16_5.xy).xyz;
    u_xlat16_1.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * _SpecularShininess;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat16_4.x = dFdx(u_xlat16_1.x);
    u_xlat16_11 = dFdy(u_xlat16_1.x);
    u_xlat16_4.x = abs(u_xlat16_11) + abs(u_xlat16_4.x);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_18 = (-u_xlat16_4.x) + u_xlat16_11;
    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_11;
    u_xlat16_4.x = (-u_xlat16_18) + u_xlat16_4.x;
    u_xlat16_1.x = u_xlat16_1.x + (-u_xlat16_18);
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4.x;
    u_xlat16_1.xyz = u_xlat16_8.xyz * u_xlat16_1.xxx;
    u_xlat16_1.xyz = u_xlat10_0.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_6.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_4.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_4.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_4.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-unity_SHC.xyz);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_4.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = u_xlat16_0.xyz * _CharacterSHColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_MULTI_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor0;
uniform 	mediump vec4 _SpecularColor1;
uniform 	mediump vec4 _SpecularColor2;
uniform 	mediump vec4 _SpecularColor3;
uniform 	mediump vec4 _SpecularColor4;
uniform 	mediump vec4 _SpecularColor5;
uniform 	mediump vec4 _SpecularColor6;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
uvec2 u_xlatu2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_5;
lowp vec3 u_xlat10_6;
bvec3 u_xlatb7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_11;
bvec2 u_xlatb16;
mediump float u_xlat16_18;
mediump vec2 u_xlat16_19;
float u_xlat21;
lowp float u_xlat10_21;
int u_xlati21;
bool u_xlatb21;
float u_xlat23;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_1.x = u_xlat10_0.w * 8.0;
    u_xlat16_1.x = roundEven(u_xlat16_1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<u_xlat16_1.x);
#else
    u_xlatb21 = 0.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_1.x<1.5);
#else
    u_xlatb2.x = u_xlat16_1.x<1.5;
#endif
    u_xlatb21 = u_xlatb21 && u_xlatb2.x;
    if(u_xlatb21){
        u_xlat16_8.xyz = _SpecularColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(1.5<u_xlat16_1.x);
#else
        u_xlatb21 = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb2.x = !!(u_xlat16_1.x<2.5);
#else
        u_xlatb2.x = u_xlat16_1.x<2.5;
#endif
        u_xlatb21 = u_xlatb21 && u_xlatb2.x;
        if(u_xlatb21){
            u_xlat16_8.xyz = _SpecularColor2.xyz;
        } else {
            u_xlatb2 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
            u_xlatb3 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb2.x = u_xlatb2.x && u_xlatb3.x;
            u_xlatb2.y = u_xlatb2.y && u_xlatb3.y;
            u_xlatb2.z = u_xlatb2.z && u_xlatb3.z;
            u_xlatb2.w = u_xlatb2.w && u_xlatb3.w;
            u_xlat16_4.xyz = (u_xlatb2.w) ? _SpecularColor6.xyz : _SpecularColor0.xyz;
            u_xlat16_4.xyz = (u_xlatb2.z) ? _SpecularColor5.xyz : u_xlat16_4.xyz;
            u_xlat16_4.xyz = (u_xlatb2.y) ? _SpecularColor4.xyz : u_xlat16_4.xyz;
            u_xlat16_8.xyz = (u_xlatb2.x) ? _SpecularColor3.xyz : u_xlat16_4.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb21){
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb21 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb21){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb16.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb16.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat21 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat21 = vs_TEXCOORD2.z * 17.0 + (-u_xlat21);
            u_xlat21 = u_xlat21 + 0.99000001;
            u_xlat21 = floor(u_xlat21);
            u_xlat21 = max(u_xlat21, 0.0);
            u_xlati21 = int(u_xlat21);
            if((u_xlati21)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat10_21 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(u_xlat23) + _LightPosDir.xyz;
    u_xlat16_1.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
    u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz;
    u_xlat23 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat3.xyz = vec3(u_xlat23) * vs_TEXCOORD4.xyz;
    u_xlat16_1.x = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_1.x = u_xlat16_1.x * 0.5 + 0.5;
    u_xlat16_1.x = dot(u_xlat16_1.xx, u_xlat10_0.yy);
    u_xlat16_25 = (-u_xlat10_21) + 1.0;
    u_xlat16_5.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_5.xy = vec2(u_xlat16_25) * u_xlat16_5.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_5.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_1.x / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb7.xz = lessThan(u_xlat16_1.xxxx, u_xlat16_5.xxyy).xz;
    u_xlat16_19.xy = u_xlat16_1.xx + (-u_xlat16_5.xy);
    u_xlat16_1.x = (-u_xlat16_5.x) + u_xlat16_5.y;
    u_xlat16_1.x = max(u_xlat16_1.x, 9.99999975e-05);
    u_xlat16_1.x = u_xlat16_19.x / u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 0.5 + 0.25;
    u_xlat16_5.x = (-u_xlat16_5.y) + 1.0;
    u_xlat16_5.x = max(u_xlat16_5.x, 9.99999975e-05);
    u_xlat16_5.x = u_xlat16_19.y / u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x * 0.25 + 0.75;
    u_xlat16_1.x = (u_xlatb7.z) ? u_xlat16_1.x : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb7.x) ? u_xlat16_25 : u_xlat16_1.x;
    u_xlat16_5.y = 0.5;
    u_xlat10_6.xyz = texture(_DiffuseRampTex, u_xlat16_5.xy).xyz;
    u_xlat16_1.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * _SpecularShininess;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat16_4.x = dFdx(u_xlat16_1.x);
    u_xlat16_11 = dFdy(u_xlat16_1.x);
    u_xlat16_4.x = abs(u_xlat16_11) + abs(u_xlat16_4.x);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_18 = (-u_xlat16_4.x) + u_xlat16_11;
    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_11;
    u_xlat16_4.x = (-u_xlat16_18) + u_xlat16_4.x;
    u_xlat16_1.x = u_xlat16_1.x + (-u_xlat16_18);
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4.x;
    u_xlat16_1.xyz = u_xlat16_8.xyz * u_xlat16_1.xxx;
    u_xlat16_1.xyz = u_xlat10_0.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_6.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_4.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_4.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_4.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-unity_SHC.xyz);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_4.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = u_xlat16_0.xyz * _CharacterSHColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor0;
uniform 	mediump vec4 _SpecularColor1;
uniform 	mediump vec4 _SpecularColor2;
uniform 	mediump vec4 _SpecularColor3;
uniform 	mediump vec4 _SpecularColor4;
uniform 	mediump vec4 _SpecularColor5;
uniform 	mediump vec4 _SpecularColor6;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
uvec2 u_xlatu2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
bvec4 u_xlatb4;
lowp vec3 u_xlat10_5;
bvec4 u_xlatb5;
mediump vec2 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
bvec3 u_xlatb8;
mediump float u_xlat16_9;
mediump vec2 u_xlat16_14;
mediump float u_xlat16_17;
bvec2 u_xlatb18;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
int u_xlati24;
bool u_xlatb24;
mediump float u_xlat16_25;
float u_xlat26;
mediump float u_xlat16_27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_1.x = u_xlat10_0.w * 8.0;
    u_xlat16_1.x = roundEven(u_xlat16_1.x);
    u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb24 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb24){
        u_xlat10_24 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat2.yx).x;
        u_xlat16_9 = u_xlat10_24;
    } else {
        u_xlat16_9 = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<u_xlat16_1.x);
#else
    u_xlatb24 = 0.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(u_xlat16_1.x<1.5);
#else
    u_xlatb18.x = u_xlat16_1.x<1.5;
#endif
    u_xlatb24 = u_xlatb24 && u_xlatb18.x;
    if(u_xlatb24){
        u_xlat16_3.xyz = _SpecularColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(1.5<u_xlat16_1.x);
#else
        u_xlatb24 = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(u_xlat16_1.x<2.5);
#else
        u_xlatb18.x = u_xlat16_1.x<2.5;
#endif
        u_xlatb24 = u_xlatb24 && u_xlatb18.x;
        if(u_xlatb24){
            u_xlat16_3.xyz = _SpecularColor2.xyz;
        } else {
            u_xlatb4 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
            u_xlatb5 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb4.x = u_xlatb4.x && u_xlatb5.x;
            u_xlatb4.y = u_xlatb4.y && u_xlatb5.y;
            u_xlatb4.z = u_xlatb4.z && u_xlatb5.z;
            u_xlatb4.w = u_xlatb4.w && u_xlatb5.w;
            u_xlat16_1.xzw = (u_xlatb4.w) ? _SpecularColor6.xyz : _SpecularColor0.xyz;
            u_xlat16_1.xzw = (u_xlatb4.z) ? _SpecularColor5.xyz : u_xlat16_1.xzw;
            u_xlat16_1.xzw = (u_xlatb4.y) ? _SpecularColor4.xyz : u_xlat16_1.xzw;
            u_xlat16_3.xyz = (u_xlatb4.x) ? _SpecularColor3.xyz : u_xlat16_1.xzw;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb24){
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb24 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb24){
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb18.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb18.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat24 = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat24 = vs_TEXCOORD2.z * 17.0 + (-u_xlat24);
            u_xlat24 = u_xlat24 + 0.99000001;
            u_xlat24 = floor(u_xlat24);
            u_xlat24 = max(u_xlat24, 0.0);
            u_xlati24 = int(u_xlat24);
            if((u_xlati24)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat10_24 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat16_1.xzw = u_xlat4.xyz * vec3(u_xlat26) + _LightPosDir.xyz;
    u_xlat16_27 = dot(u_xlat16_1.xzw, u_xlat16_1.xzw);
    u_xlat16_27 = inversesqrt(u_xlat16_27);
    u_xlat16_1.xzw = u_xlat16_1.xzw * vec3(u_xlat16_27);
    u_xlat26 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat4.xyz = vec3(u_xlat26) * vs_TEXCOORD4.xyz;
    u_xlat16_27 = dot(u_xlat4.xyz, _LightPosDir.xyz);
    u_xlat16_27 = u_xlat16_27 * 0.5 + 0.5;
    u_xlat16_27 = dot(vec2(u_xlat16_27), u_xlat10_0.yy);
    u_xlat16_6.x = u_xlat16_9 * 0.099999994 + 0.400000006;
    u_xlat16_14.x = u_xlat16_9 + -0.5;
    u_xlat16_14.x = u_xlat16_14.x + u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_14.x * -2.0 + 3.0;
    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_14.x;
    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_22;
    u_xlat16_27 = u_xlat16_27 + (-u_xlat16_6.x);
    u_xlat16_27 = u_xlat16_14.x * u_xlat16_27 + u_xlat16_6.x;
    u_xlat16_6.x = (-u_xlat10_24) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_27 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb8.xz = lessThan(vec4(u_xlat16_27), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_27) + (-u_xlat16_6.xy);
    u_xlat16_27 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_27 = max(u_xlat16_27, 9.99999975e-05);
    u_xlat16_27 = u_xlat16_7.x / u_xlat16_27;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
#else
    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
#endif
    u_xlat16_27 = u_xlat16_27 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_27 = (u_xlatb8.z) ? u_xlat16_27 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb8.x) ? u_xlat16_22 : u_xlat16_27;
    u_xlat16_6.y = 0.5;
    u_xlat10_5.xyz = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_1.x = dot(u_xlat4.xyz, u_xlat16_1.xzw);
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * _SpecularShininess;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat8 = u_xlat16_1.x * u_xlat16_9;
    u_xlat16_17 = dFdx(u_xlat8);
    u_xlat16_25 = dFdy(u_xlat8);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_27 = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_27) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9 * u_xlat16_1.x + (-u_xlat16_27);
    u_xlat16_9 = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9 * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9 = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9;
    u_xlat16_1.xyz = u_xlat16_3.xyz * u_xlat16_1.xxx;
    u_xlat16_1.xyz = u_xlat10_0.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_3.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_3.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_3.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_3.xyz = u_xlat16_3.xyz + (-unity_SHC.xyz);
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = u_xlat16_0.xyz * _CharacterSHColor.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor0;
uniform 	mediump vec4 _SpecularColor1;
uniform 	mediump vec4 _SpecularColor2;
uniform 	mediump vec4 _SpecularColor3;
uniform 	mediump vec4 _SpecularColor4;
uniform 	mediump vec4 _SpecularColor5;
uniform 	mediump vec4 _SpecularColor6;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
uvec2 u_xlatu2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
bvec4 u_xlatb4;
lowp vec3 u_xlat10_5;
bvec4 u_xlatb5;
mediump vec2 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
bvec3 u_xlatb8;
mediump float u_xlat16_9;
mediump vec2 u_xlat16_14;
mediump float u_xlat16_17;
bvec2 u_xlatb18;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
int u_xlati24;
bool u_xlatb24;
mediump float u_xlat16_25;
float u_xlat26;
mediump float u_xlat16_27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_1.x = u_xlat10_0.w * 8.0;
    u_xlat16_1.x = roundEven(u_xlat16_1.x);
    u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb24 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb24){
        u_xlat10_24 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat2.yx).x;
        u_xlat16_9 = u_xlat10_24;
    } else {
        u_xlat16_9 = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<u_xlat16_1.x);
#else
    u_xlatb24 = 0.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(u_xlat16_1.x<1.5);
#else
    u_xlatb18.x = u_xlat16_1.x<1.5;
#endif
    u_xlatb24 = u_xlatb24 && u_xlatb18.x;
    if(u_xlatb24){
        u_xlat16_3.xyz = _SpecularColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(1.5<u_xlat16_1.x);
#else
        u_xlatb24 = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(u_xlat16_1.x<2.5);
#else
        u_xlatb18.x = u_xlat16_1.x<2.5;
#endif
        u_xlatb24 = u_xlatb24 && u_xlatb18.x;
        if(u_xlatb24){
            u_xlat16_3.xyz = _SpecularColor2.xyz;
        } else {
            u_xlatb4 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
            u_xlatb5 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb4.x = u_xlatb4.x && u_xlatb5.x;
            u_xlatb4.y = u_xlatb4.y && u_xlatb5.y;
            u_xlatb4.z = u_xlatb4.z && u_xlatb5.z;
            u_xlatb4.w = u_xlatb4.w && u_xlatb5.w;
            u_xlat16_1.xzw = (u_xlatb4.w) ? _SpecularColor6.xyz : _SpecularColor0.xyz;
            u_xlat16_1.xzw = (u_xlatb4.z) ? _SpecularColor5.xyz : u_xlat16_1.xzw;
            u_xlat16_1.xzw = (u_xlatb4.y) ? _SpecularColor4.xyz : u_xlat16_1.xzw;
            u_xlat16_3.xyz = (u_xlatb4.x) ? _SpecularColor3.xyz : u_xlat16_1.xzw;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb24){
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb24 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb24){
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb18.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb18.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat24 = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat24 = vs_TEXCOORD2.z * 17.0 + (-u_xlat24);
            u_xlat24 = u_xlat24 + 0.99000001;
            u_xlat24 = floor(u_xlat24);
            u_xlat24 = max(u_xlat24, 0.0);
            u_xlati24 = int(u_xlat24);
            if((u_xlati24)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat10_24 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat16_1.xzw = u_xlat4.xyz * vec3(u_xlat26) + _LightPosDir.xyz;
    u_xlat16_27 = dot(u_xlat16_1.xzw, u_xlat16_1.xzw);
    u_xlat16_27 = inversesqrt(u_xlat16_27);
    u_xlat16_1.xzw = u_xlat16_1.xzw * vec3(u_xlat16_27);
    u_xlat26 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat4.xyz = vec3(u_xlat26) * vs_TEXCOORD4.xyz;
    u_xlat16_27 = dot(u_xlat4.xyz, _LightPosDir.xyz);
    u_xlat16_27 = u_xlat16_27 * 0.5 + 0.5;
    u_xlat16_27 = dot(vec2(u_xlat16_27), u_xlat10_0.yy);
    u_xlat16_6.x = u_xlat16_9 * 0.099999994 + 0.400000006;
    u_xlat16_14.x = u_xlat16_9 + -0.5;
    u_xlat16_14.x = u_xlat16_14.x + u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_14.x * -2.0 + 3.0;
    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_14.x;
    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_22;
    u_xlat16_27 = u_xlat16_27 + (-u_xlat16_6.x);
    u_xlat16_27 = u_xlat16_14.x * u_xlat16_27 + u_xlat16_6.x;
    u_xlat16_6.x = (-u_xlat10_24) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_27 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb8.xz = lessThan(vec4(u_xlat16_27), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_27) + (-u_xlat16_6.xy);
    u_xlat16_27 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_27 = max(u_xlat16_27, 9.99999975e-05);
    u_xlat16_27 = u_xlat16_7.x / u_xlat16_27;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
#else
    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
#endif
    u_xlat16_27 = u_xlat16_27 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_27 = (u_xlatb8.z) ? u_xlat16_27 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb8.x) ? u_xlat16_22 : u_xlat16_27;
    u_xlat16_6.y = 0.5;
    u_xlat10_5.xyz = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_1.x = dot(u_xlat4.xyz, u_xlat16_1.xzw);
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * _SpecularShininess;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat8 = u_xlat16_1.x * u_xlat16_9;
    u_xlat16_17 = dFdx(u_xlat8);
    u_xlat16_25 = dFdy(u_xlat8);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_27 = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_27) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9 * u_xlat16_1.x + (-u_xlat16_27);
    u_xlat16_9 = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9 * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9 = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9;
    u_xlat16_1.xyz = u_xlat16_3.xyz * u_xlat16_1.xxx;
    u_xlat16_1.xyz = u_xlat10_0.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_3.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_3.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_3.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_3.xyz = u_xlat16_3.xyz + (-unity_SHC.xyz);
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = u_xlat16_0.xyz * _CharacterSHColor.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor0;
uniform 	mediump vec4 _SpecularColor1;
uniform 	mediump vec4 _SpecularColor2;
uniform 	mediump vec4 _SpecularColor3;
uniform 	mediump vec4 _SpecularColor4;
uniform 	mediump vec4 _SpecularColor5;
uniform 	mediump vec4 _SpecularColor6;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
uvec2 u_xlatu2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
bvec4 u_xlatb4;
lowp vec3 u_xlat10_5;
bvec4 u_xlatb5;
mediump vec2 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
bvec3 u_xlatb8;
mediump float u_xlat16_9;
mediump vec2 u_xlat16_14;
mediump float u_xlat16_17;
bvec2 u_xlatb18;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
int u_xlati24;
bool u_xlatb24;
mediump float u_xlat16_25;
float u_xlat26;
mediump float u_xlat16_27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_1.x = u_xlat10_0.w * 8.0;
    u_xlat16_1.x = roundEven(u_xlat16_1.x);
    u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb24 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb24){
        u_xlat10_24 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat2.yx).x;
        u_xlat16_9 = u_xlat10_24;
    } else {
        u_xlat16_9 = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<u_xlat16_1.x);
#else
    u_xlatb24 = 0.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(u_xlat16_1.x<1.5);
#else
    u_xlatb18.x = u_xlat16_1.x<1.5;
#endif
    u_xlatb24 = u_xlatb24 && u_xlatb18.x;
    if(u_xlatb24){
        u_xlat16_3.xyz = _SpecularColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(1.5<u_xlat16_1.x);
#else
        u_xlatb24 = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(u_xlat16_1.x<2.5);
#else
        u_xlatb18.x = u_xlat16_1.x<2.5;
#endif
        u_xlatb24 = u_xlatb24 && u_xlatb18.x;
        if(u_xlatb24){
            u_xlat16_3.xyz = _SpecularColor2.xyz;
        } else {
            u_xlatb4 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
            u_xlatb5 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb4.x = u_xlatb4.x && u_xlatb5.x;
            u_xlatb4.y = u_xlatb4.y && u_xlatb5.y;
            u_xlatb4.z = u_xlatb4.z && u_xlatb5.z;
            u_xlatb4.w = u_xlatb4.w && u_xlatb5.w;
            u_xlat16_1.xzw = (u_xlatb4.w) ? _SpecularColor6.xyz : _SpecularColor0.xyz;
            u_xlat16_1.xzw = (u_xlatb4.z) ? _SpecularColor5.xyz : u_xlat16_1.xzw;
            u_xlat16_1.xzw = (u_xlatb4.y) ? _SpecularColor4.xyz : u_xlat16_1.xzw;
            u_xlat16_3.xyz = (u_xlatb4.x) ? _SpecularColor3.xyz : u_xlat16_1.xzw;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb24){
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb24 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb24){
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb18.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb18.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat24 = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat24 = vs_TEXCOORD2.z * 17.0 + (-u_xlat24);
            u_xlat24 = u_xlat24 + 0.99000001;
            u_xlat24 = floor(u_xlat24);
            u_xlat24 = max(u_xlat24, 0.0);
            u_xlati24 = int(u_xlat24);
            if((u_xlati24)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat10_24 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat16_1.xzw = u_xlat4.xyz * vec3(u_xlat26) + _LightPosDir.xyz;
    u_xlat16_27 = dot(u_xlat16_1.xzw, u_xlat16_1.xzw);
    u_xlat16_27 = inversesqrt(u_xlat16_27);
    u_xlat16_1.xzw = u_xlat16_1.xzw * vec3(u_xlat16_27);
    u_xlat26 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat4.xyz = vec3(u_xlat26) * vs_TEXCOORD4.xyz;
    u_xlat16_27 = dot(u_xlat4.xyz, _LightPosDir.xyz);
    u_xlat16_27 = u_xlat16_27 * 0.5 + 0.5;
    u_xlat16_27 = dot(vec2(u_xlat16_27), u_xlat10_0.yy);
    u_xlat16_6.x = u_xlat16_9 * 0.099999994 + 0.400000006;
    u_xlat16_14.x = u_xlat16_9 + -0.5;
    u_xlat16_14.x = u_xlat16_14.x + u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_14.x * -2.0 + 3.0;
    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_14.x;
    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_22;
    u_xlat16_27 = u_xlat16_27 + (-u_xlat16_6.x);
    u_xlat16_27 = u_xlat16_14.x * u_xlat16_27 + u_xlat16_6.x;
    u_xlat16_6.x = (-u_xlat10_24) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_27 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb8.xz = lessThan(vec4(u_xlat16_27), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_27) + (-u_xlat16_6.xy);
    u_xlat16_27 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_27 = max(u_xlat16_27, 9.99999975e-05);
    u_xlat16_27 = u_xlat16_7.x / u_xlat16_27;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
#else
    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
#endif
    u_xlat16_27 = u_xlat16_27 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_27 = (u_xlatb8.z) ? u_xlat16_27 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb8.x) ? u_xlat16_22 : u_xlat16_27;
    u_xlat16_6.y = 0.5;
    u_xlat10_5.xyz = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_1.x = dot(u_xlat4.xyz, u_xlat16_1.xzw);
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * _SpecularShininess;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat8 = u_xlat16_1.x * u_xlat16_9;
    u_xlat16_17 = dFdx(u_xlat8);
    u_xlat16_25 = dFdy(u_xlat8);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_27 = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_27) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9 * u_xlat16_1.x + (-u_xlat16_27);
    u_xlat16_9 = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9 * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9 = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9;
    u_xlat16_1.xyz = u_xlat16_3.xyz * u_xlat16_1.xxx;
    u_xlat16_1.xyz = u_xlat10_0.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_3.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_3.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_3.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_3.xyz = u_xlat16_3.xyz + (-unity_SHC.xyz);
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = u_xlat16_0.xyz * _CharacterSHColor.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_MULTI_DIFFUSE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampMuitiTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_5;
lowp vec3 u_xlat10_6;
bvec3 u_xlatb8;
mediump vec3 u_xlat16_9;
mediump vec2 u_xlat16_11;
bvec2 u_xlatb14;
mediump float u_xlat16_16;
mediump vec2 u_xlat16_18;
lowp float u_xlat10_21;
float u_xlat22;
mediump float u_xlat16_23;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat10_21 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat16_2.x = u_xlat10_1.w * 8.0;
    u_xlat16_2.x = roundEven(u_xlat16_2.x);
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat16_9.xyz = u_xlat3.xyz * vec3(u_xlat22) + _LightPosDir.xyz;
    u_xlat16_4.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_4.xxx;
    u_xlat22 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat3.xyz = vec3(u_xlat22) * vs_TEXCOORD4.xyz;
    u_xlat16_4.x = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.x = dot(u_xlat16_4.xx, u_xlat10_1.yy);
    u_xlat16_11.x = (-u_xlat10_21) + 1.0;
    u_xlat16_18.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_11.xy = u_xlat16_11.xx * u_xlat16_18.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_11.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_4.x / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb8.xz = lessThan(u_xlat16_4.xxxx, u_xlat16_11.xxyy).xz;
    u_xlat16_5.xy = (-u_xlat16_11.xy) + u_xlat16_4.xx;
    u_xlat16_4.x = (-u_xlat16_11.x) + u_xlat16_11.y;
    u_xlat16_4.x = max(u_xlat16_4.x, 9.99999975e-05);
    u_xlat16_4.x = u_xlat16_5.x / u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.25;
    u_xlat16_11.x = (-u_xlat16_11.y) + 1.0;
    u_xlat16_11.x = max(u_xlat16_11.x, 9.99999975e-05);
    u_xlat16_11.x = u_xlat16_5.y / u_xlat16_11.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat16_11.x = u_xlat16_11.x * 0.25 + 0.75;
    u_xlat16_4.x = (u_xlatb8.z) ? u_xlat16_4.x : u_xlat16_11.x;
    u_xlat16_4.x = (u_xlatb8.x) ? u_xlat16_25 : u_xlat16_4.x;
    u_xlat16_2.x = u_xlat16_2.x * 2.0 + 1.0;
    u_xlat16_4.y = u_xlat16_2.x * 0.0625;
    u_xlat10_6.xyz = texture(_DiffuseRampMuitiTex, u_xlat16_4.xy).xyz;
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat16_9.xyz);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _SpecularShininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_9.x = dFdx(u_xlat16_2.x);
    u_xlat16_16 = dFdy(u_xlat16_2.x);
    u_xlat16_9.x = abs(u_xlat16_16) + abs(u_xlat16_9.x);
    u_xlat16_16 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_23 = (-u_xlat16_9.x) + u_xlat16_16;
    u_xlat16_2.y = u_xlat16_9.x + u_xlat16_16;
    u_xlat16_2.xy = (-vec2(u_xlat16_23)) + u_xlat16_2.xy;
    u_xlat16_9.x = float(1.0) / u_xlat16_2.y;
    u_xlat16_2.x = u_xlat16_9.x * u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _SpecularColor.xyz;
    u_xlat16_2.xyz = u_xlat10_1.xxx * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_6.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    u_xlat16_4.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_4.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_4.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-unity_SHC.xyz);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_MULTI_DIFFUSE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampMuitiTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_5;
lowp vec3 u_xlat10_6;
bvec3 u_xlatb8;
mediump vec3 u_xlat16_9;
mediump vec2 u_xlat16_11;
bvec2 u_xlatb14;
mediump float u_xlat16_16;
mediump vec2 u_xlat16_18;
lowp float u_xlat10_21;
float u_xlat22;
mediump float u_xlat16_23;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat10_21 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat16_2.x = u_xlat10_1.w * 8.0;
    u_xlat16_2.x = roundEven(u_xlat16_2.x);
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat16_9.xyz = u_xlat3.xyz * vec3(u_xlat22) + _LightPosDir.xyz;
    u_xlat16_4.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_4.xxx;
    u_xlat22 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat3.xyz = vec3(u_xlat22) * vs_TEXCOORD4.xyz;
    u_xlat16_4.x = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.x = dot(u_xlat16_4.xx, u_xlat10_1.yy);
    u_xlat16_11.x = (-u_xlat10_21) + 1.0;
    u_xlat16_18.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_11.xy = u_xlat16_11.xx * u_xlat16_18.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_11.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_4.x / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb8.xz = lessThan(u_xlat16_4.xxxx, u_xlat16_11.xxyy).xz;
    u_xlat16_5.xy = (-u_xlat16_11.xy) + u_xlat16_4.xx;
    u_xlat16_4.x = (-u_xlat16_11.x) + u_xlat16_11.y;
    u_xlat16_4.x = max(u_xlat16_4.x, 9.99999975e-05);
    u_xlat16_4.x = u_xlat16_5.x / u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.25;
    u_xlat16_11.x = (-u_xlat16_11.y) + 1.0;
    u_xlat16_11.x = max(u_xlat16_11.x, 9.99999975e-05);
    u_xlat16_11.x = u_xlat16_5.y / u_xlat16_11.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat16_11.x = u_xlat16_11.x * 0.25 + 0.75;
    u_xlat16_4.x = (u_xlatb8.z) ? u_xlat16_4.x : u_xlat16_11.x;
    u_xlat16_4.x = (u_xlatb8.x) ? u_xlat16_25 : u_xlat16_4.x;
    u_xlat16_2.x = u_xlat16_2.x * 2.0 + 1.0;
    u_xlat16_4.y = u_xlat16_2.x * 0.0625;
    u_xlat10_6.xyz = texture(_DiffuseRampMuitiTex, u_xlat16_4.xy).xyz;
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat16_9.xyz);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _SpecularShininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_9.x = dFdx(u_xlat16_2.x);
    u_xlat16_16 = dFdy(u_xlat16_2.x);
    u_xlat16_9.x = abs(u_xlat16_16) + abs(u_xlat16_9.x);
    u_xlat16_16 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_23 = (-u_xlat16_9.x) + u_xlat16_16;
    u_xlat16_2.y = u_xlat16_9.x + u_xlat16_16;
    u_xlat16_2.xy = (-vec2(u_xlat16_23)) + u_xlat16_2.xy;
    u_xlat16_9.x = float(1.0) / u_xlat16_2.y;
    u_xlat16_2.x = u_xlat16_9.x * u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _SpecularColor.xyz;
    u_xlat16_2.xyz = u_xlat10_1.xxx * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_6.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    u_xlat16_4.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_4.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_4.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-unity_SHC.xyz);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_MULTI_DIFFUSE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampMuitiTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_5;
lowp vec3 u_xlat10_6;
bvec3 u_xlatb8;
mediump vec3 u_xlat16_9;
mediump vec2 u_xlat16_11;
bvec2 u_xlatb14;
mediump float u_xlat16_16;
mediump vec2 u_xlat16_18;
lowp float u_xlat10_21;
float u_xlat22;
mediump float u_xlat16_23;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat10_21 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat16_2.x = u_xlat10_1.w * 8.0;
    u_xlat16_2.x = roundEven(u_xlat16_2.x);
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat16_9.xyz = u_xlat3.xyz * vec3(u_xlat22) + _LightPosDir.xyz;
    u_xlat16_4.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_4.xxx;
    u_xlat22 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat3.xyz = vec3(u_xlat22) * vs_TEXCOORD4.xyz;
    u_xlat16_4.x = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.x = dot(u_xlat16_4.xx, u_xlat10_1.yy);
    u_xlat16_11.x = (-u_xlat10_21) + 1.0;
    u_xlat16_18.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_11.xy = u_xlat16_11.xx * u_xlat16_18.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_11.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_4.x / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb8.xz = lessThan(u_xlat16_4.xxxx, u_xlat16_11.xxyy).xz;
    u_xlat16_5.xy = (-u_xlat16_11.xy) + u_xlat16_4.xx;
    u_xlat16_4.x = (-u_xlat16_11.x) + u_xlat16_11.y;
    u_xlat16_4.x = max(u_xlat16_4.x, 9.99999975e-05);
    u_xlat16_4.x = u_xlat16_5.x / u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.25;
    u_xlat16_11.x = (-u_xlat16_11.y) + 1.0;
    u_xlat16_11.x = max(u_xlat16_11.x, 9.99999975e-05);
    u_xlat16_11.x = u_xlat16_5.y / u_xlat16_11.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat16_11.x = u_xlat16_11.x * 0.25 + 0.75;
    u_xlat16_4.x = (u_xlatb8.z) ? u_xlat16_4.x : u_xlat16_11.x;
    u_xlat16_4.x = (u_xlatb8.x) ? u_xlat16_25 : u_xlat16_4.x;
    u_xlat16_2.x = u_xlat16_2.x * 2.0 + 1.0;
    u_xlat16_4.y = u_xlat16_2.x * 0.0625;
    u_xlat10_6.xyz = texture(_DiffuseRampMuitiTex, u_xlat16_4.xy).xyz;
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat16_9.xyz);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _SpecularShininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_9.x = dFdx(u_xlat16_2.x);
    u_xlat16_16 = dFdy(u_xlat16_2.x);
    u_xlat16_9.x = abs(u_xlat16_16) + abs(u_xlat16_9.x);
    u_xlat16_16 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_23 = (-u_xlat16_9.x) + u_xlat16_16;
    u_xlat16_2.y = u_xlat16_9.x + u_xlat16_16;
    u_xlat16_2.xy = (-vec2(u_xlat16_23)) + u_xlat16_2.xy;
    u_xlat16_9.x = float(1.0) / u_xlat16_2.y;
    u_xlat16_2.x = u_xlat16_9.x * u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _SpecularColor.xyz;
    u_xlat16_2.xyz = u_xlat10_1.xxx * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_6.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    u_xlat16_4.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_4.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_4.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-unity_SHC.xyz);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_4.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_DIFFUSE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampMuitiTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_5;
lowp vec3 u_xlat10_6;
mediump float u_xlat16_8;
bvec3 u_xlatb9;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
mediump float u_xlat16_15;
mediump vec2 u_xlat16_19;
float u_xlat21;
lowp float u_xlat10_21;
mediump float u_xlat16_22;
float u_xlat23;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb14.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb14.x){
        u_xlat10_14 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_14;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb14.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb14.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb14.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb14.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb14.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat10_21 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat16_8 = u_xlat10_2.w * 8.0;
    u_xlat16_8 = roundEven(u_xlat16_8);
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(u_xlat23) + _LightPosDir.xyz;
    u_xlat16_15 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_15 = inversesqrt(u_xlat16_15);
    u_xlat16_4.xyz = vec3(u_xlat16_15) * u_xlat16_4.xyz;
    u_xlat23 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat3.xyz = vec3(u_xlat23) * vs_TEXCOORD4.xyz;
    u_xlat16_15 = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
    u_xlat16_15 = dot(vec2(u_xlat16_15), u_xlat10_2.yy);
    u_xlat16_22 = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_25 = u_xlat16_1.x + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_15 = (-u_xlat16_22) + u_xlat16_15;
    u_xlat16_15 = u_xlat16_25 * u_xlat16_15 + u_xlat16_22;
    u_xlat16_22 = (-u_xlat10_21) + 1.0;
    u_xlat16_5.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_5.xy = vec2(u_xlat16_22) * u_xlat16_5.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_5.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_15 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_15), u_xlat16_5.xxyy).xz;
    u_xlat16_19.xy = vec2(u_xlat16_15) + (-u_xlat16_5.xy);
    u_xlat16_15 = (-u_xlat16_5.x) + u_xlat16_5.y;
    u_xlat16_15 = max(u_xlat16_15, 9.99999975e-05);
    u_xlat16_15 = u_xlat16_19.x / u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.25;
    u_xlat16_25 = (-u_xlat16_5.y) + 1.0;
    u_xlat16_25 = max(u_xlat16_25, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_19.y / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25 + 0.75;
    u_xlat16_15 = (u_xlatb9.z) ? u_xlat16_15 : u_xlat16_25;
    u_xlat16_5.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_15;
    u_xlat16_8 = u_xlat16_8 * 2.0 + 1.0;
    u_xlat16_5.y = u_xlat16_8 * 0.0625;
    u_xlat10_6.xyz = texture(_DiffuseRampMuitiTex, u_xlat16_5.xy).xyz;
    u_xlat16_8 = dot(u_xlat3.xyz, u_xlat16_4.xyz);
    u_xlat16_8 = max(u_xlat16_8, 0.0);
    u_xlat16_8 = log2(u_xlat16_8);
    u_xlat16_8 = u_xlat16_8 * _SpecularShininess;
    u_xlat16_8 = exp2(u_xlat16_8);
    u_xlat21 = u_xlat16_8 * u_xlat16_1.x;
    u_xlat16_15 = dFdx(u_xlat21);
    u_xlat16_22 = dFdy(u_xlat21);
    u_xlat16_15 = abs(u_xlat16_22) + abs(u_xlat16_15);
    u_xlat16_22 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_4.x = (-u_xlat16_15) + u_xlat16_22;
    u_xlat16_15 = u_xlat16_15 + u_xlat16_22;
    u_xlat16_15 = (-u_xlat16_4.x) + u_xlat16_15;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + (-u_xlat16_4.x);
    u_xlat16_8 = float(1.0) / u_xlat16_15;
    u_xlat16_1.x = u_xlat16_8 * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8 = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_4.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_4.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_4.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-unity_SHC.xyz);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_4.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_DIFFUSE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampMuitiTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_5;
lowp vec3 u_xlat10_6;
mediump float u_xlat16_8;
bvec3 u_xlatb9;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
mediump float u_xlat16_15;
mediump vec2 u_xlat16_19;
float u_xlat21;
lowp float u_xlat10_21;
mediump float u_xlat16_22;
float u_xlat23;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb14.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb14.x){
        u_xlat10_14 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_14;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb14.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb14.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb14.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb14.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb14.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat10_21 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat16_8 = u_xlat10_2.w * 8.0;
    u_xlat16_8 = roundEven(u_xlat16_8);
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(u_xlat23) + _LightPosDir.xyz;
    u_xlat16_15 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_15 = inversesqrt(u_xlat16_15);
    u_xlat16_4.xyz = vec3(u_xlat16_15) * u_xlat16_4.xyz;
    u_xlat23 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat3.xyz = vec3(u_xlat23) * vs_TEXCOORD4.xyz;
    u_xlat16_15 = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
    u_xlat16_15 = dot(vec2(u_xlat16_15), u_xlat10_2.yy);
    u_xlat16_22 = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_25 = u_xlat16_1.x + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_15 = (-u_xlat16_22) + u_xlat16_15;
    u_xlat16_15 = u_xlat16_25 * u_xlat16_15 + u_xlat16_22;
    u_xlat16_22 = (-u_xlat10_21) + 1.0;
    u_xlat16_5.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_5.xy = vec2(u_xlat16_22) * u_xlat16_5.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_5.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_15 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_15), u_xlat16_5.xxyy).xz;
    u_xlat16_19.xy = vec2(u_xlat16_15) + (-u_xlat16_5.xy);
    u_xlat16_15 = (-u_xlat16_5.x) + u_xlat16_5.y;
    u_xlat16_15 = max(u_xlat16_15, 9.99999975e-05);
    u_xlat16_15 = u_xlat16_19.x / u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.25;
    u_xlat16_25 = (-u_xlat16_5.y) + 1.0;
    u_xlat16_25 = max(u_xlat16_25, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_19.y / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25 + 0.75;
    u_xlat16_15 = (u_xlatb9.z) ? u_xlat16_15 : u_xlat16_25;
    u_xlat16_5.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_15;
    u_xlat16_8 = u_xlat16_8 * 2.0 + 1.0;
    u_xlat16_5.y = u_xlat16_8 * 0.0625;
    u_xlat10_6.xyz = texture(_DiffuseRampMuitiTex, u_xlat16_5.xy).xyz;
    u_xlat16_8 = dot(u_xlat3.xyz, u_xlat16_4.xyz);
    u_xlat16_8 = max(u_xlat16_8, 0.0);
    u_xlat16_8 = log2(u_xlat16_8);
    u_xlat16_8 = u_xlat16_8 * _SpecularShininess;
    u_xlat16_8 = exp2(u_xlat16_8);
    u_xlat21 = u_xlat16_8 * u_xlat16_1.x;
    u_xlat16_15 = dFdx(u_xlat21);
    u_xlat16_22 = dFdy(u_xlat21);
    u_xlat16_15 = abs(u_xlat16_22) + abs(u_xlat16_15);
    u_xlat16_22 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_4.x = (-u_xlat16_15) + u_xlat16_22;
    u_xlat16_15 = u_xlat16_15 + u_xlat16_22;
    u_xlat16_15 = (-u_xlat16_4.x) + u_xlat16_15;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + (-u_xlat16_4.x);
    u_xlat16_8 = float(1.0) / u_xlat16_15;
    u_xlat16_1.x = u_xlat16_8 * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8 = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_4.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_4.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_4.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-unity_SHC.xyz);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_4.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_DIFFUSE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampMuitiTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_5;
lowp vec3 u_xlat10_6;
mediump float u_xlat16_8;
bvec3 u_xlatb9;
lowp float u_xlat10_14;
bvec2 u_xlatb14;
mediump float u_xlat16_15;
mediump vec2 u_xlat16_19;
float u_xlat21;
lowp float u_xlat10_21;
mediump float u_xlat16_22;
float u_xlat23;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb14.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb14.x){
        u_xlat10_14 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_14;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb14.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb14.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb14.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb14.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb14.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb14.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat10_21 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat16_8 = u_xlat10_2.w * 8.0;
    u_xlat16_8 = roundEven(u_xlat16_8);
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(u_xlat23) + _LightPosDir.xyz;
    u_xlat16_15 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_15 = inversesqrt(u_xlat16_15);
    u_xlat16_4.xyz = vec3(u_xlat16_15) * u_xlat16_4.xyz;
    u_xlat23 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat3.xyz = vec3(u_xlat23) * vs_TEXCOORD4.xyz;
    u_xlat16_15 = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
    u_xlat16_15 = dot(vec2(u_xlat16_15), u_xlat10_2.yy);
    u_xlat16_22 = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_25 = u_xlat16_1.x + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_15 = (-u_xlat16_22) + u_xlat16_15;
    u_xlat16_15 = u_xlat16_25 * u_xlat16_15 + u_xlat16_22;
    u_xlat16_22 = (-u_xlat10_21) + 1.0;
    u_xlat16_5.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_5.xy = vec2(u_xlat16_22) * u_xlat16_5.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_5.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_15 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_15), u_xlat16_5.xxyy).xz;
    u_xlat16_19.xy = vec2(u_xlat16_15) + (-u_xlat16_5.xy);
    u_xlat16_15 = (-u_xlat16_5.x) + u_xlat16_5.y;
    u_xlat16_15 = max(u_xlat16_15, 9.99999975e-05);
    u_xlat16_15 = u_xlat16_19.x / u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.25;
    u_xlat16_25 = (-u_xlat16_5.y) + 1.0;
    u_xlat16_25 = max(u_xlat16_25, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_19.y / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25 + 0.75;
    u_xlat16_15 = (u_xlatb9.z) ? u_xlat16_15 : u_xlat16_25;
    u_xlat16_5.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_15;
    u_xlat16_8 = u_xlat16_8 * 2.0 + 1.0;
    u_xlat16_5.y = u_xlat16_8 * 0.0625;
    u_xlat10_6.xyz = texture(_DiffuseRampMuitiTex, u_xlat16_5.xy).xyz;
    u_xlat16_8 = dot(u_xlat3.xyz, u_xlat16_4.xyz);
    u_xlat16_8 = max(u_xlat16_8, 0.0);
    u_xlat16_8 = log2(u_xlat16_8);
    u_xlat16_8 = u_xlat16_8 * _SpecularShininess;
    u_xlat16_8 = exp2(u_xlat16_8);
    u_xlat21 = u_xlat16_8 * u_xlat16_1.x;
    u_xlat16_15 = dFdx(u_xlat21);
    u_xlat16_22 = dFdy(u_xlat21);
    u_xlat16_15 = abs(u_xlat16_22) + abs(u_xlat16_15);
    u_xlat16_22 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_4.x = (-u_xlat16_15) + u_xlat16_22;
    u_xlat16_15 = u_xlat16_15 + u_xlat16_22;
    u_xlat16_15 = (-u_xlat16_4.x) + u_xlat16_15;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + (-u_xlat16_4.x);
    u_xlat16_8 = float(1.0) / u_xlat16_15;
    u_xlat16_1.x = u_xlat16_8 * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8 = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_4.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_4.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_4.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-unity_SHC.xyz);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_4.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_MULTI_DIFFUSE_ON" "_MULTI_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor0;
uniform 	mediump vec4 _SpecularColor1;
uniform 	mediump vec4 _SpecularColor2;
uniform 	mediump vec4 _SpecularColor3;
uniform 	mediump vec4 _SpecularColor4;
uniform 	mediump vec4 _SpecularColor5;
uniform 	mediump vec4 _SpecularColor6;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampMuitiTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
uvec2 u_xlatu2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_5;
mediump vec2 u_xlat16_6;
lowp vec3 u_xlat10_7;
bvec3 u_xlatb8;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_12;
mediump vec2 u_xlat16_13;
bvec2 u_xlatb18;
mediump float u_xlat16_20;
mediump float u_xlat16_21;
float u_xlat24;
lowp float u_xlat10_24;
int u_xlati24;
bool u_xlatb24;
float u_xlat26;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_1.x = u_xlat10_0.w * 8.0;
    u_xlat16_1.x = roundEven(u_xlat16_1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<u_xlat16_1.x);
#else
    u_xlatb24 = 0.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_1.x<1.5);
#else
    u_xlatb2.x = u_xlat16_1.x<1.5;
#endif
    u_xlatb24 = u_xlatb24 && u_xlatb2.x;
    if(u_xlatb24){
        u_xlat16_9.xyz = _SpecularColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(1.5<u_xlat16_1.x);
#else
        u_xlatb24 = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb2.x = !!(u_xlat16_1.x<2.5);
#else
        u_xlatb2.x = u_xlat16_1.x<2.5;
#endif
        u_xlatb24 = u_xlatb24 && u_xlatb2.x;
        if(u_xlatb24){
            u_xlat16_9.xyz = _SpecularColor2.xyz;
        } else {
            u_xlatb2 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
            u_xlatb3 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb2.x = u_xlatb2.x && u_xlatb3.x;
            u_xlatb2.y = u_xlatb2.y && u_xlatb3.y;
            u_xlatb2.z = u_xlatb2.z && u_xlatb3.z;
            u_xlatb2.w = u_xlatb2.w && u_xlatb3.w;
            u_xlat16_4.xyz = (u_xlatb2.w) ? _SpecularColor6.xyz : _SpecularColor0.xyz;
            u_xlat16_4.xyz = (u_xlatb2.z) ? _SpecularColor5.xyz : u_xlat16_4.xyz;
            u_xlat16_4.xyz = (u_xlatb2.y) ? _SpecularColor4.xyz : u_xlat16_4.xyz;
            u_xlat16_9.xyz = (u_xlatb2.x) ? _SpecularColor3.xyz : u_xlat16_4.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb24){
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb24 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb24){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb18.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb18.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat24 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat24 = vs_TEXCOORD2.z * 17.0 + (-u_xlat24);
            u_xlat24 = u_xlat24 + 0.99000001;
            u_xlat24 = floor(u_xlat24);
            u_xlat24 = max(u_xlat24, 0.0);
            u_xlati24 = int(u_xlat24);
            if((u_xlati24)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat10_24 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat26 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(u_xlat26) + _LightPosDir.xyz;
    u_xlat16_28 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_4.xyz;
    u_xlat26 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat3.xyz = vec3(u_xlat26) * vs_TEXCOORD4.xyz;
    u_xlat16_28 = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_28 = u_xlat16_28 * 0.5 + 0.5;
    u_xlat16_28 = dot(vec2(u_xlat16_28), u_xlat10_0.yy);
    u_xlat16_5.x = (-u_xlat10_24) + 1.0;
    u_xlat16_13.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_5.xy = u_xlat16_5.xx * u_xlat16_13.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_21 = max(u_xlat16_5.x, 9.99999975e-05);
    u_xlat16_21 = u_xlat16_28 / u_xlat16_21;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_21 * 0.25;
    u_xlatb8.xz = lessThan(vec4(u_xlat16_28), u_xlat16_5.xxyy).xz;
    u_xlat16_6.xy = vec2(u_xlat16_28) + (-u_xlat16_5.xy);
    u_xlat16_28 = (-u_xlat16_5.x) + u_xlat16_5.y;
    u_xlat16_28 = max(u_xlat16_28, 9.99999975e-05);
    u_xlat16_28 = u_xlat16_6.x / u_xlat16_28;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = u_xlat16_28 * 0.5 + 0.25;
    u_xlat16_5.x = (-u_xlat16_5.y) + 1.0;
    u_xlat16_5.x = max(u_xlat16_5.x, 9.99999975e-05);
    u_xlat16_5.x = u_xlat16_6.y / u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x * 0.25 + 0.75;
    u_xlat16_28 = (u_xlatb8.z) ? u_xlat16_28 : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb8.x) ? u_xlat16_21 : u_xlat16_28;
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + 1.0;
    u_xlat16_5.y = u_xlat16_1.x * 0.0625;
    u_xlat10_7.xyz = texture(_DiffuseRampMuitiTex, u_xlat16_5.xy).xyz;
    u_xlat16_1.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * _SpecularShininess;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat16_4.x = dFdx(u_xlat16_1.x);
    u_xlat16_12 = dFdy(u_xlat16_1.x);
    u_xlat16_4.x = abs(u_xlat16_12) + abs(u_xlat16_4.x);
    u_xlat16_12 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_4.x) + u_xlat16_12;
    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_12;
    u_xlat16_4.x = (-u_xlat16_20) + u_xlat16_4.x;
    u_xlat16_1.x = u_xlat16_1.x + (-u_xlat16_20);
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4.x;
    u_xlat16_1.xyz = u_xlat16_9.xyz * u_xlat16_1.xxx;
    u_xlat16_1.xyz = u_xlat10_0.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_7.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_4.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_4.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_4.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-unity_SHC.xyz);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_4.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = u_xlat16_0.xyz * _CharacterSHColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_MULTI_DIFFUSE_ON" "_MULTI_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor0;
uniform 	mediump vec4 _SpecularColor1;
uniform 	mediump vec4 _SpecularColor2;
uniform 	mediump vec4 _SpecularColor3;
uniform 	mediump vec4 _SpecularColor4;
uniform 	mediump vec4 _SpecularColor5;
uniform 	mediump vec4 _SpecularColor6;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampMuitiTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
uvec2 u_xlatu2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_5;
mediump vec2 u_xlat16_6;
lowp vec3 u_xlat10_7;
bvec3 u_xlatb8;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_12;
mediump vec2 u_xlat16_13;
bvec2 u_xlatb18;
mediump float u_xlat16_20;
mediump float u_xlat16_21;
float u_xlat24;
lowp float u_xlat10_24;
int u_xlati24;
bool u_xlatb24;
float u_xlat26;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_1.x = u_xlat10_0.w * 8.0;
    u_xlat16_1.x = roundEven(u_xlat16_1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<u_xlat16_1.x);
#else
    u_xlatb24 = 0.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_1.x<1.5);
#else
    u_xlatb2.x = u_xlat16_1.x<1.5;
#endif
    u_xlatb24 = u_xlatb24 && u_xlatb2.x;
    if(u_xlatb24){
        u_xlat16_9.xyz = _SpecularColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(1.5<u_xlat16_1.x);
#else
        u_xlatb24 = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb2.x = !!(u_xlat16_1.x<2.5);
#else
        u_xlatb2.x = u_xlat16_1.x<2.5;
#endif
        u_xlatb24 = u_xlatb24 && u_xlatb2.x;
        if(u_xlatb24){
            u_xlat16_9.xyz = _SpecularColor2.xyz;
        } else {
            u_xlatb2 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
            u_xlatb3 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb2.x = u_xlatb2.x && u_xlatb3.x;
            u_xlatb2.y = u_xlatb2.y && u_xlatb3.y;
            u_xlatb2.z = u_xlatb2.z && u_xlatb3.z;
            u_xlatb2.w = u_xlatb2.w && u_xlatb3.w;
            u_xlat16_4.xyz = (u_xlatb2.w) ? _SpecularColor6.xyz : _SpecularColor0.xyz;
            u_xlat16_4.xyz = (u_xlatb2.z) ? _SpecularColor5.xyz : u_xlat16_4.xyz;
            u_xlat16_4.xyz = (u_xlatb2.y) ? _SpecularColor4.xyz : u_xlat16_4.xyz;
            u_xlat16_9.xyz = (u_xlatb2.x) ? _SpecularColor3.xyz : u_xlat16_4.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb24){
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb24 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb24){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb18.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb18.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat24 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat24 = vs_TEXCOORD2.z * 17.0 + (-u_xlat24);
            u_xlat24 = u_xlat24 + 0.99000001;
            u_xlat24 = floor(u_xlat24);
            u_xlat24 = max(u_xlat24, 0.0);
            u_xlati24 = int(u_xlat24);
            if((u_xlati24)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat10_24 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat26 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(u_xlat26) + _LightPosDir.xyz;
    u_xlat16_28 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_4.xyz;
    u_xlat26 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat3.xyz = vec3(u_xlat26) * vs_TEXCOORD4.xyz;
    u_xlat16_28 = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_28 = u_xlat16_28 * 0.5 + 0.5;
    u_xlat16_28 = dot(vec2(u_xlat16_28), u_xlat10_0.yy);
    u_xlat16_5.x = (-u_xlat10_24) + 1.0;
    u_xlat16_13.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_5.xy = u_xlat16_5.xx * u_xlat16_13.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_21 = max(u_xlat16_5.x, 9.99999975e-05);
    u_xlat16_21 = u_xlat16_28 / u_xlat16_21;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_21 * 0.25;
    u_xlatb8.xz = lessThan(vec4(u_xlat16_28), u_xlat16_5.xxyy).xz;
    u_xlat16_6.xy = vec2(u_xlat16_28) + (-u_xlat16_5.xy);
    u_xlat16_28 = (-u_xlat16_5.x) + u_xlat16_5.y;
    u_xlat16_28 = max(u_xlat16_28, 9.99999975e-05);
    u_xlat16_28 = u_xlat16_6.x / u_xlat16_28;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = u_xlat16_28 * 0.5 + 0.25;
    u_xlat16_5.x = (-u_xlat16_5.y) + 1.0;
    u_xlat16_5.x = max(u_xlat16_5.x, 9.99999975e-05);
    u_xlat16_5.x = u_xlat16_6.y / u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x * 0.25 + 0.75;
    u_xlat16_28 = (u_xlatb8.z) ? u_xlat16_28 : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb8.x) ? u_xlat16_21 : u_xlat16_28;
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + 1.0;
    u_xlat16_5.y = u_xlat16_1.x * 0.0625;
    u_xlat10_7.xyz = texture(_DiffuseRampMuitiTex, u_xlat16_5.xy).xyz;
    u_xlat16_1.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * _SpecularShininess;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat16_4.x = dFdx(u_xlat16_1.x);
    u_xlat16_12 = dFdy(u_xlat16_1.x);
    u_xlat16_4.x = abs(u_xlat16_12) + abs(u_xlat16_4.x);
    u_xlat16_12 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_4.x) + u_xlat16_12;
    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_12;
    u_xlat16_4.x = (-u_xlat16_20) + u_xlat16_4.x;
    u_xlat16_1.x = u_xlat16_1.x + (-u_xlat16_20);
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4.x;
    u_xlat16_1.xyz = u_xlat16_9.xyz * u_xlat16_1.xxx;
    u_xlat16_1.xyz = u_xlat10_0.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_7.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_4.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_4.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_4.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-unity_SHC.xyz);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_4.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = u_xlat16_0.xyz * _CharacterSHColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_MULTI_DIFFUSE_ON" "_MULTI_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor0;
uniform 	mediump vec4 _SpecularColor1;
uniform 	mediump vec4 _SpecularColor2;
uniform 	mediump vec4 _SpecularColor3;
uniform 	mediump vec4 _SpecularColor4;
uniform 	mediump vec4 _SpecularColor5;
uniform 	mediump vec4 _SpecularColor6;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampMuitiTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
uvec2 u_xlatu2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_5;
mediump vec2 u_xlat16_6;
lowp vec3 u_xlat10_7;
bvec3 u_xlatb8;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_12;
mediump vec2 u_xlat16_13;
bvec2 u_xlatb18;
mediump float u_xlat16_20;
mediump float u_xlat16_21;
float u_xlat24;
lowp float u_xlat10_24;
int u_xlati24;
bool u_xlatb24;
float u_xlat26;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_1.x = u_xlat10_0.w * 8.0;
    u_xlat16_1.x = roundEven(u_xlat16_1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<u_xlat16_1.x);
#else
    u_xlatb24 = 0.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_1.x<1.5);
#else
    u_xlatb2.x = u_xlat16_1.x<1.5;
#endif
    u_xlatb24 = u_xlatb24 && u_xlatb2.x;
    if(u_xlatb24){
        u_xlat16_9.xyz = _SpecularColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(1.5<u_xlat16_1.x);
#else
        u_xlatb24 = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb2.x = !!(u_xlat16_1.x<2.5);
#else
        u_xlatb2.x = u_xlat16_1.x<2.5;
#endif
        u_xlatb24 = u_xlatb24 && u_xlatb2.x;
        if(u_xlatb24){
            u_xlat16_9.xyz = _SpecularColor2.xyz;
        } else {
            u_xlatb2 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
            u_xlatb3 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb2.x = u_xlatb2.x && u_xlatb3.x;
            u_xlatb2.y = u_xlatb2.y && u_xlatb3.y;
            u_xlatb2.z = u_xlatb2.z && u_xlatb3.z;
            u_xlatb2.w = u_xlatb2.w && u_xlatb3.w;
            u_xlat16_4.xyz = (u_xlatb2.w) ? _SpecularColor6.xyz : _SpecularColor0.xyz;
            u_xlat16_4.xyz = (u_xlatb2.z) ? _SpecularColor5.xyz : u_xlat16_4.xyz;
            u_xlat16_4.xyz = (u_xlatb2.y) ? _SpecularColor4.xyz : u_xlat16_4.xyz;
            u_xlat16_9.xyz = (u_xlatb2.x) ? _SpecularColor3.xyz : u_xlat16_4.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb24){
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb24 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb24){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb18.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb18.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat24 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat24 = vs_TEXCOORD2.z * 17.0 + (-u_xlat24);
            u_xlat24 = u_xlat24 + 0.99000001;
            u_xlat24 = floor(u_xlat24);
            u_xlat24 = max(u_xlat24, 0.0);
            u_xlati24 = int(u_xlat24);
            if((u_xlati24)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat10_24 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat26 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(u_xlat26) + _LightPosDir.xyz;
    u_xlat16_28 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_4.xyz;
    u_xlat26 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat3.xyz = vec3(u_xlat26) * vs_TEXCOORD4.xyz;
    u_xlat16_28 = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_28 = u_xlat16_28 * 0.5 + 0.5;
    u_xlat16_28 = dot(vec2(u_xlat16_28), u_xlat10_0.yy);
    u_xlat16_5.x = (-u_xlat10_24) + 1.0;
    u_xlat16_13.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_5.xy = u_xlat16_5.xx * u_xlat16_13.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_21 = max(u_xlat16_5.x, 9.99999975e-05);
    u_xlat16_21 = u_xlat16_28 / u_xlat16_21;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_21 * 0.25;
    u_xlatb8.xz = lessThan(vec4(u_xlat16_28), u_xlat16_5.xxyy).xz;
    u_xlat16_6.xy = vec2(u_xlat16_28) + (-u_xlat16_5.xy);
    u_xlat16_28 = (-u_xlat16_5.x) + u_xlat16_5.y;
    u_xlat16_28 = max(u_xlat16_28, 9.99999975e-05);
    u_xlat16_28 = u_xlat16_6.x / u_xlat16_28;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = u_xlat16_28 * 0.5 + 0.25;
    u_xlat16_5.x = (-u_xlat16_5.y) + 1.0;
    u_xlat16_5.x = max(u_xlat16_5.x, 9.99999975e-05);
    u_xlat16_5.x = u_xlat16_6.y / u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x * 0.25 + 0.75;
    u_xlat16_28 = (u_xlatb8.z) ? u_xlat16_28 : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb8.x) ? u_xlat16_21 : u_xlat16_28;
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + 1.0;
    u_xlat16_5.y = u_xlat16_1.x * 0.0625;
    u_xlat10_7.xyz = texture(_DiffuseRampMuitiTex, u_xlat16_5.xy).xyz;
    u_xlat16_1.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * _SpecularShininess;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat16_4.x = dFdx(u_xlat16_1.x);
    u_xlat16_12 = dFdy(u_xlat16_1.x);
    u_xlat16_4.x = abs(u_xlat16_12) + abs(u_xlat16_4.x);
    u_xlat16_12 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_4.x) + u_xlat16_12;
    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_12;
    u_xlat16_4.x = (-u_xlat16_20) + u_xlat16_4.x;
    u_xlat16_1.x = u_xlat16_1.x + (-u_xlat16_20);
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4.x;
    u_xlat16_1.xyz = u_xlat16_9.xyz * u_xlat16_1.xxx;
    u_xlat16_1.xyz = u_xlat10_0.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_7.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_4.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_4.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_4.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-unity_SHC.xyz);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_4.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = u_xlat16_0.xyz * _CharacterSHColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_DIFFUSE_ON" "_MULTI_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor0;
uniform 	mediump vec4 _SpecularColor1;
uniform 	mediump vec4 _SpecularColor2;
uniform 	mediump vec4 _SpecularColor3;
uniform 	mediump vec4 _SpecularColor4;
uniform 	mediump vec4 _SpecularColor5;
uniform 	mediump vec4 _SpecularColor6;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampMuitiTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
uvec2 u_xlatu2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
bvec4 u_xlatb4;
lowp vec3 u_xlat10_5;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
bvec3 u_xlatb8;
mediump float u_xlat16_9;
mediump float u_xlat16_17;
bvec2 u_xlatb18;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
int u_xlati24;
bool u_xlatb24;
mediump float u_xlat16_25;
float u_xlat26;
mediump float u_xlat16_27;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_1.x = u_xlat10_0.w * 8.0;
    u_xlat16_1.x = roundEven(u_xlat16_1.x);
    u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb24 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb24){
        u_xlat10_24 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat2.yx).x;
        u_xlat16_9 = u_xlat10_24;
    } else {
        u_xlat16_9 = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<u_xlat16_1.x);
#else
    u_xlatb24 = 0.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(u_xlat16_1.x<1.5);
#else
    u_xlatb18.x = u_xlat16_1.x<1.5;
#endif
    u_xlatb24 = u_xlatb24 && u_xlatb18.x;
    if(u_xlatb24){
        u_xlat16_3.xyz = _SpecularColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(1.5<u_xlat16_1.x);
#else
        u_xlatb24 = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(u_xlat16_1.x<2.5);
#else
        u_xlatb18.x = u_xlat16_1.x<2.5;
#endif
        u_xlatb24 = u_xlatb24 && u_xlatb18.x;
        if(u_xlatb24){
            u_xlat16_3.xyz = _SpecularColor2.xyz;
        } else {
            u_xlatb4 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
            u_xlatb5 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb4.x = u_xlatb4.x && u_xlatb5.x;
            u_xlatb4.y = u_xlatb4.y && u_xlatb5.y;
            u_xlatb4.z = u_xlatb4.z && u_xlatb5.z;
            u_xlatb4.w = u_xlatb4.w && u_xlatb5.w;
            u_xlat16_6.xyz = (u_xlatb4.w) ? _SpecularColor6.xyz : _SpecularColor0.xyz;
            u_xlat16_6.xyz = (u_xlatb4.z) ? _SpecularColor5.xyz : u_xlat16_6.xyz;
            u_xlat16_6.xyz = (u_xlatb4.y) ? _SpecularColor4.xyz : u_xlat16_6.xyz;
            u_xlat16_3.xyz = (u_xlatb4.x) ? _SpecularColor3.xyz : u_xlat16_6.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb24){
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb24 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb24){
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb18.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb18.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat24 = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat24 = vs_TEXCOORD2.z * 17.0 + (-u_xlat24);
            u_xlat24 = u_xlat24 + 0.99000001;
            u_xlat24 = floor(u_xlat24);
            u_xlat24 = max(u_xlat24, 0.0);
            u_xlati24 = int(u_xlat24);
            if((u_xlati24)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat10_24 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat16_6.xyz = u_xlat4.xyz * vec3(u_xlat26) + _LightPosDir.xyz;
    u_xlat16_17 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_17 = inversesqrt(u_xlat16_17);
    u_xlat16_6.xyz = vec3(u_xlat16_17) * u_xlat16_6.xyz;
    u_xlat26 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat4.xyz = vec3(u_xlat26) * vs_TEXCOORD4.xyz;
    u_xlat16_17 = dot(u_xlat4.xyz, _LightPosDir.xyz);
    u_xlat16_17 = u_xlat16_17 * 0.5 + 0.5;
    u_xlat16_17 = dot(vec2(u_xlat16_17), u_xlat10_0.yy);
    u_xlat16_25 = u_xlat16_9 * 0.099999994 + 0.400000006;
    u_xlat16_27 = u_xlat16_9 + -0.5;
    u_xlat16_27 = u_xlat16_27 + u_xlat16_27;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
#else
    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_27 * -2.0 + 3.0;
    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;
    u_xlat16_27 = u_xlat16_27 * u_xlat16_30;
    u_xlat16_17 = (-u_xlat16_25) + u_xlat16_17;
    u_xlat16_17 = u_xlat16_27 * u_xlat16_17 + u_xlat16_25;
    u_xlat16_25 = (-u_xlat10_24) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_25) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_17 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb8.xz = lessThan(vec4(u_xlat16_17), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_17) + (-u_xlat16_7.xy);
    u_xlat16_17 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_17 = max(u_xlat16_17, 9.99999975e-05);
    u_xlat16_17 = u_xlat16_23.x / u_xlat16_17;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_17 = min(max(u_xlat16_17, 0.0), 1.0);
#else
    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);
#endif
    u_xlat16_17 = u_xlat16_17 * 0.5 + 0.25;
    u_xlat16_27 = (-u_xlat16_7.y) + 1.0;
    u_xlat16_27 = max(u_xlat16_27, 9.99999975e-05);
    u_xlat16_27 = u_xlat16_23.y / u_xlat16_27;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
#else
    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
#endif
    u_xlat16_27 = u_xlat16_27 * 0.25 + 0.75;
    u_xlat16_17 = (u_xlatb8.z) ? u_xlat16_17 : u_xlat16_27;
    u_xlat16_7.x = (u_xlatb8.x) ? u_xlat16_25 : u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + 1.0;
    u_xlat16_7.y = u_xlat16_1.x * 0.0625;
    u_xlat10_5.xyz = texture(_DiffuseRampMuitiTex, u_xlat16_7.xy).xyz;
    u_xlat16_1.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * _SpecularShininess;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat8 = u_xlat16_1.x * u_xlat16_9;
    u_xlat16_17 = dFdx(u_xlat8);
    u_xlat16_25 = dFdy(u_xlat8);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_27 = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_27) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9 * u_xlat16_1.x + (-u_xlat16_27);
    u_xlat16_9 = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9 * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9 = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9;
    u_xlat16_1.xyz = u_xlat16_3.xyz * u_xlat16_1.xxx;
    u_xlat16_1.xyz = u_xlat10_0.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_3.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_3.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_3.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_3.xyz = u_xlat16_3.xyz + (-unity_SHC.xyz);
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = u_xlat16_0.xyz * _CharacterSHColor.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_DIFFUSE_ON" "_MULTI_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor0;
uniform 	mediump vec4 _SpecularColor1;
uniform 	mediump vec4 _SpecularColor2;
uniform 	mediump vec4 _SpecularColor3;
uniform 	mediump vec4 _SpecularColor4;
uniform 	mediump vec4 _SpecularColor5;
uniform 	mediump vec4 _SpecularColor6;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampMuitiTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
uvec2 u_xlatu2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
bvec4 u_xlatb4;
lowp vec3 u_xlat10_5;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
bvec3 u_xlatb8;
mediump float u_xlat16_9;
mediump float u_xlat16_17;
bvec2 u_xlatb18;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
int u_xlati24;
bool u_xlatb24;
mediump float u_xlat16_25;
float u_xlat26;
mediump float u_xlat16_27;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_1.x = u_xlat10_0.w * 8.0;
    u_xlat16_1.x = roundEven(u_xlat16_1.x);
    u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb24 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb24){
        u_xlat10_24 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat2.yx).x;
        u_xlat16_9 = u_xlat10_24;
    } else {
        u_xlat16_9 = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<u_xlat16_1.x);
#else
    u_xlatb24 = 0.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(u_xlat16_1.x<1.5);
#else
    u_xlatb18.x = u_xlat16_1.x<1.5;
#endif
    u_xlatb24 = u_xlatb24 && u_xlatb18.x;
    if(u_xlatb24){
        u_xlat16_3.xyz = _SpecularColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(1.5<u_xlat16_1.x);
#else
        u_xlatb24 = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(u_xlat16_1.x<2.5);
#else
        u_xlatb18.x = u_xlat16_1.x<2.5;
#endif
        u_xlatb24 = u_xlatb24 && u_xlatb18.x;
        if(u_xlatb24){
            u_xlat16_3.xyz = _SpecularColor2.xyz;
        } else {
            u_xlatb4 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
            u_xlatb5 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb4.x = u_xlatb4.x && u_xlatb5.x;
            u_xlatb4.y = u_xlatb4.y && u_xlatb5.y;
            u_xlatb4.z = u_xlatb4.z && u_xlatb5.z;
            u_xlatb4.w = u_xlatb4.w && u_xlatb5.w;
            u_xlat16_6.xyz = (u_xlatb4.w) ? _SpecularColor6.xyz : _SpecularColor0.xyz;
            u_xlat16_6.xyz = (u_xlatb4.z) ? _SpecularColor5.xyz : u_xlat16_6.xyz;
            u_xlat16_6.xyz = (u_xlatb4.y) ? _SpecularColor4.xyz : u_xlat16_6.xyz;
            u_xlat16_3.xyz = (u_xlatb4.x) ? _SpecularColor3.xyz : u_xlat16_6.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb24){
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb24 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb24){
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb18.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb18.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat24 = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat24 = vs_TEXCOORD2.z * 17.0 + (-u_xlat24);
            u_xlat24 = u_xlat24 + 0.99000001;
            u_xlat24 = floor(u_xlat24);
            u_xlat24 = max(u_xlat24, 0.0);
            u_xlati24 = int(u_xlat24);
            if((u_xlati24)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat10_24 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat16_6.xyz = u_xlat4.xyz * vec3(u_xlat26) + _LightPosDir.xyz;
    u_xlat16_17 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_17 = inversesqrt(u_xlat16_17);
    u_xlat16_6.xyz = vec3(u_xlat16_17) * u_xlat16_6.xyz;
    u_xlat26 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat4.xyz = vec3(u_xlat26) * vs_TEXCOORD4.xyz;
    u_xlat16_17 = dot(u_xlat4.xyz, _LightPosDir.xyz);
    u_xlat16_17 = u_xlat16_17 * 0.5 + 0.5;
    u_xlat16_17 = dot(vec2(u_xlat16_17), u_xlat10_0.yy);
    u_xlat16_25 = u_xlat16_9 * 0.099999994 + 0.400000006;
    u_xlat16_27 = u_xlat16_9 + -0.5;
    u_xlat16_27 = u_xlat16_27 + u_xlat16_27;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
#else
    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_27 * -2.0 + 3.0;
    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;
    u_xlat16_27 = u_xlat16_27 * u_xlat16_30;
    u_xlat16_17 = (-u_xlat16_25) + u_xlat16_17;
    u_xlat16_17 = u_xlat16_27 * u_xlat16_17 + u_xlat16_25;
    u_xlat16_25 = (-u_xlat10_24) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_25) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_17 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb8.xz = lessThan(vec4(u_xlat16_17), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_17) + (-u_xlat16_7.xy);
    u_xlat16_17 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_17 = max(u_xlat16_17, 9.99999975e-05);
    u_xlat16_17 = u_xlat16_23.x / u_xlat16_17;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_17 = min(max(u_xlat16_17, 0.0), 1.0);
#else
    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);
#endif
    u_xlat16_17 = u_xlat16_17 * 0.5 + 0.25;
    u_xlat16_27 = (-u_xlat16_7.y) + 1.0;
    u_xlat16_27 = max(u_xlat16_27, 9.99999975e-05);
    u_xlat16_27 = u_xlat16_23.y / u_xlat16_27;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
#else
    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
#endif
    u_xlat16_27 = u_xlat16_27 * 0.25 + 0.75;
    u_xlat16_17 = (u_xlatb8.z) ? u_xlat16_17 : u_xlat16_27;
    u_xlat16_7.x = (u_xlatb8.x) ? u_xlat16_25 : u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + 1.0;
    u_xlat16_7.y = u_xlat16_1.x * 0.0625;
    u_xlat10_5.xyz = texture(_DiffuseRampMuitiTex, u_xlat16_7.xy).xyz;
    u_xlat16_1.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * _SpecularShininess;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat8 = u_xlat16_1.x * u_xlat16_9;
    u_xlat16_17 = dFdx(u_xlat8);
    u_xlat16_25 = dFdy(u_xlat8);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_27 = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_27) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9 * u_xlat16_1.x + (-u_xlat16_27);
    u_xlat16_9 = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9 * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9 = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9;
    u_xlat16_1.xyz = u_xlat16_3.xyz * u_xlat16_1.xxx;
    u_xlat16_1.xyz = u_xlat10_0.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_3.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_3.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_3.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_3.xyz = u_xlat16_3.xyz + (-unity_SHC.xyz);
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = u_xlat16_0.xyz * _CharacterSHColor.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_DIFFUSE_ON" "_MULTI_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor0;
uniform 	mediump vec4 _SpecularColor1;
uniform 	mediump vec4 _SpecularColor2;
uniform 	mediump vec4 _SpecularColor3;
uniform 	mediump vec4 _SpecularColor4;
uniform 	mediump vec4 _SpecularColor5;
uniform 	mediump vec4 _SpecularColor6;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampMuitiTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
uvec2 u_xlatu2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
bvec4 u_xlatb4;
lowp vec3 u_xlat10_5;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
bvec3 u_xlatb8;
mediump float u_xlat16_9;
mediump float u_xlat16_17;
bvec2 u_xlatb18;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
int u_xlati24;
bool u_xlatb24;
mediump float u_xlat16_25;
float u_xlat26;
mediump float u_xlat16_27;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_1.x = u_xlat10_0.w * 8.0;
    u_xlat16_1.x = roundEven(u_xlat16_1.x);
    u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb24 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb24){
        u_xlat10_24 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat2.yx).x;
        u_xlat16_9 = u_xlat10_24;
    } else {
        u_xlat16_9 = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<u_xlat16_1.x);
#else
    u_xlatb24 = 0.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(u_xlat16_1.x<1.5);
#else
    u_xlatb18.x = u_xlat16_1.x<1.5;
#endif
    u_xlatb24 = u_xlatb24 && u_xlatb18.x;
    if(u_xlatb24){
        u_xlat16_3.xyz = _SpecularColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(1.5<u_xlat16_1.x);
#else
        u_xlatb24 = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(u_xlat16_1.x<2.5);
#else
        u_xlatb18.x = u_xlat16_1.x<2.5;
#endif
        u_xlatb24 = u_xlatb24 && u_xlatb18.x;
        if(u_xlatb24){
            u_xlat16_3.xyz = _SpecularColor2.xyz;
        } else {
            u_xlatb4 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
            u_xlatb5 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb4.x = u_xlatb4.x && u_xlatb5.x;
            u_xlatb4.y = u_xlatb4.y && u_xlatb5.y;
            u_xlatb4.z = u_xlatb4.z && u_xlatb5.z;
            u_xlatb4.w = u_xlatb4.w && u_xlatb5.w;
            u_xlat16_6.xyz = (u_xlatb4.w) ? _SpecularColor6.xyz : _SpecularColor0.xyz;
            u_xlat16_6.xyz = (u_xlatb4.z) ? _SpecularColor5.xyz : u_xlat16_6.xyz;
            u_xlat16_6.xyz = (u_xlatb4.y) ? _SpecularColor4.xyz : u_xlat16_6.xyz;
            u_xlat16_3.xyz = (u_xlatb4.x) ? _SpecularColor3.xyz : u_xlat16_6.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb24){
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb24 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb24){
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb18.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb18.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat24 = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat24 = vs_TEXCOORD2.z * 17.0 + (-u_xlat24);
            u_xlat24 = u_xlat24 + 0.99000001;
            u_xlat24 = floor(u_xlat24);
            u_xlat24 = max(u_xlat24, 0.0);
            u_xlati24 = int(u_xlat24);
            if((u_xlati24)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat10_24 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat16_6.xyz = u_xlat4.xyz * vec3(u_xlat26) + _LightPosDir.xyz;
    u_xlat16_17 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_17 = inversesqrt(u_xlat16_17);
    u_xlat16_6.xyz = vec3(u_xlat16_17) * u_xlat16_6.xyz;
    u_xlat26 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat4.xyz = vec3(u_xlat26) * vs_TEXCOORD4.xyz;
    u_xlat16_17 = dot(u_xlat4.xyz, _LightPosDir.xyz);
    u_xlat16_17 = u_xlat16_17 * 0.5 + 0.5;
    u_xlat16_17 = dot(vec2(u_xlat16_17), u_xlat10_0.yy);
    u_xlat16_25 = u_xlat16_9 * 0.099999994 + 0.400000006;
    u_xlat16_27 = u_xlat16_9 + -0.5;
    u_xlat16_27 = u_xlat16_27 + u_xlat16_27;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
#else
    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_27 * -2.0 + 3.0;
    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;
    u_xlat16_27 = u_xlat16_27 * u_xlat16_30;
    u_xlat16_17 = (-u_xlat16_25) + u_xlat16_17;
    u_xlat16_17 = u_xlat16_27 * u_xlat16_17 + u_xlat16_25;
    u_xlat16_25 = (-u_xlat10_24) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_25) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_17 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb8.xz = lessThan(vec4(u_xlat16_17), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_17) + (-u_xlat16_7.xy);
    u_xlat16_17 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_17 = max(u_xlat16_17, 9.99999975e-05);
    u_xlat16_17 = u_xlat16_23.x / u_xlat16_17;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_17 = min(max(u_xlat16_17, 0.0), 1.0);
#else
    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);
#endif
    u_xlat16_17 = u_xlat16_17 * 0.5 + 0.25;
    u_xlat16_27 = (-u_xlat16_7.y) + 1.0;
    u_xlat16_27 = max(u_xlat16_27, 9.99999975e-05);
    u_xlat16_27 = u_xlat16_23.y / u_xlat16_27;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
#else
    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
#endif
    u_xlat16_27 = u_xlat16_27 * 0.25 + 0.75;
    u_xlat16_17 = (u_xlatb8.z) ? u_xlat16_17 : u_xlat16_27;
    u_xlat16_7.x = (u_xlatb8.x) ? u_xlat16_25 : u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + 1.0;
    u_xlat16_7.y = u_xlat16_1.x * 0.0625;
    u_xlat10_5.xyz = texture(_DiffuseRampMuitiTex, u_xlat16_7.xy).xyz;
    u_xlat16_1.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * _SpecularShininess;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat8 = u_xlat16_1.x * u_xlat16_9;
    u_xlat16_17 = dFdx(u_xlat8);
    u_xlat16_25 = dFdy(u_xlat8);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_27 = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_27) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9 * u_xlat16_1.x + (-u_xlat16_27);
    u_xlat16_9 = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9 * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9 = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9;
    u_xlat16_1.xyz = u_xlat16_3.xyz * u_xlat16_1.xxx;
    u_xlat16_1.xyz = u_xlat10_0.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_3.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_3.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_3.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_3.xyz = u_xlat16_3.xyz + (-unity_SHC.xyz);
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = u_xlat16_0.xyz * _CharacterSHColor.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
uvec2 u_xlatu2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec2 u_xlat16_6;
lowp vec3 u_xlat10_7;
bvec3 u_xlatb8;
mediump float u_xlat16_11;
mediump vec2 u_xlat16_13;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
mediump float u_xlat16_21;
float u_xlat24;
lowp float u_xlat10_24;
int u_xlati24;
bool u_xlatb24;
float u_xlat26;
mediump float u_xlat16_27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_0.w * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(-0.5<u_xlat16_1);
#else
    u_xlatb24 = -0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_1<0.5);
#else
    u_xlatb2.x = u_xlat16_1<0.5;
#endif
    u_xlatb24 = u_xlatb24 && u_xlatb2.x;
    if(u_xlatb24){
        SV_Target0.w = _BloomIntensity0;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(0.5<u_xlat16_1);
#else
        u_xlatb24 = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb2.x = !!(u_xlat16_1<1.5);
#else
        u_xlatb2.x = u_xlat16_1<1.5;
#endif
        u_xlatb24 = u_xlatb24 && u_xlatb2.x;
        if(u_xlatb24){
            SV_Target0.w = _BloomIntensity1;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb24 = !!(1.5<u_xlat16_1);
#else
            u_xlatb24 = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb2.x = !!(u_xlat16_1<2.5);
#else
            u_xlatb2.x = u_xlat16_1<2.5;
#endif
            u_xlatb24 = u_xlatb24 && u_xlatb2.x;
            if(u_xlatb24){
                SV_Target0.w = _BloomIntensity2;
            } else {
                u_xlatb2 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_1));
                u_xlatb1 = lessThan(vec4(u_xlat16_1), vec4(3.5, 4.5, 5.5, 6.5));
                u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
                u_xlatb1.y = u_xlatb1.y && u_xlatb2.y;
                u_xlatb1.z = u_xlatb1.z && u_xlatb2.z;
                u_xlatb1.w = u_xlatb1.w && u_xlatb2.w;
                u_xlat16_3.x = (u_xlatb1.w) ? _BloomIntensity6 : _BloomIntensity7;
                u_xlat16_3.x = (u_xlatb1.z) ? _BloomIntensity5 : u_xlat16_3.x;
                u_xlat16_3.x = (u_xlatb1.y) ? _BloomIntensity4 : u_xlat16_3.x;
                SV_Target0.w = (u_xlatb1.x) ? _BloomIntensity3 : u_xlat16_3.x;
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb24){
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb24 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb24){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb18.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb18.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat24 = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat24 = vs_TEXCOORD2.z * 17.0 + (-u_xlat24);
            u_xlat24 = u_xlat24 + 0.99000001;
            u_xlat24 = floor(u_xlat24);
            u_xlat24 = max(u_xlat24, 0.0);
            u_xlati24 = int(u_xlat24);
            if((u_xlati24)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat10_24 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat16_3.xyz = u_xlat4.xyz * vec3(u_xlat26) + _LightPosDir.xyz;
    u_xlat16_27 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_27 = inversesqrt(u_xlat16_27);
    u_xlat16_3.xyz = vec3(u_xlat16_27) * u_xlat16_3.xyz;
    u_xlat26 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat4.xyz = vec3(u_xlat26) * vs_TEXCOORD4.xyz;
    u_xlat16_27 = dot(u_xlat4.xyz, _LightPosDir.xyz);
    u_xlat16_27 = u_xlat16_27 * 0.5 + 0.5;
    u_xlat16_27 = dot(vec2(u_xlat16_27), u_xlat10_0.yy);
    u_xlat16_5.x = (-u_xlat10_24) + 1.0;
    u_xlat16_13.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_5.xy = u_xlat16_5.xx * u_xlat16_13.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_21 = max(u_xlat16_5.x, 9.99999975e-05);
    u_xlat16_21 = u_xlat16_27 / u_xlat16_21;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_21 * 0.25;
    u_xlatb8.xz = lessThan(vec4(u_xlat16_27), u_xlat16_5.xxyy).xz;
    u_xlat16_6.xy = vec2(u_xlat16_27) + (-u_xlat16_5.xy);
    u_xlat16_27 = (-u_xlat16_5.x) + u_xlat16_5.y;
    u_xlat16_27 = max(u_xlat16_27, 9.99999975e-05);
    u_xlat16_27 = u_xlat16_6.x / u_xlat16_27;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
#else
    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
#endif
    u_xlat16_27 = u_xlat16_27 * 0.5 + 0.25;
    u_xlat16_5.x = (-u_xlat16_5.y) + 1.0;
    u_xlat16_5.x = max(u_xlat16_5.x, 9.99999975e-05);
    u_xlat16_5.x = u_xlat16_6.y / u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x * 0.25 + 0.75;
    u_xlat16_27 = (u_xlatb8.z) ? u_xlat16_27 : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb8.x) ? u_xlat16_21 : u_xlat16_27;
    u_xlat16_5.y = 0.5;
    u_xlat10_7.xyz = texture(_DiffuseRampTex, u_xlat16_5.xy).xyz;
    u_xlat16_3.x = dot(u_xlat4.xyz, u_xlat16_3.xyz);
    u_xlat16_3.x = max(u_xlat16_3.x, 0.0);
    u_xlat16_3.x = log2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _SpecularShininess;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_11 = dFdx(u_xlat16_3.x);
    u_xlat16_19 = dFdy(u_xlat16_3.x);
    u_xlat16_11 = abs(u_xlat16_19) + abs(u_xlat16_11);
    u_xlat16_19 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_27 = (-u_xlat16_11) + u_xlat16_19;
    u_xlat16_3.y = u_xlat16_11 + u_xlat16_19;
    u_xlat16_3.xy = (-vec2(u_xlat16_27)) + u_xlat16_3.xy;
    u_xlat16_11 = float(1.0) / u_xlat16_3.y;
    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_11 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_11;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _SpecularColor.xyz;
    u_xlat16_3.xyz = u_xlat10_0.xxx * u_xlat16_3.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat16_3.xyz = u_xlat10_7.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_5.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_5.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_5.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-unity_SHC.xyz);
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_5.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_5.xyz = u_xlat16_0.xyz * _CharacterSHColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
uvec2 u_xlatu2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec2 u_xlat16_6;
lowp vec3 u_xlat10_7;
bvec3 u_xlatb8;
mediump float u_xlat16_11;
mediump vec2 u_xlat16_13;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
mediump float u_xlat16_21;
float u_xlat24;
lowp float u_xlat10_24;
int u_xlati24;
bool u_xlatb24;
float u_xlat26;
mediump float u_xlat16_27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_0.w * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(-0.5<u_xlat16_1);
#else
    u_xlatb24 = -0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_1<0.5);
#else
    u_xlatb2.x = u_xlat16_1<0.5;
#endif
    u_xlatb24 = u_xlatb24 && u_xlatb2.x;
    if(u_xlatb24){
        SV_Target0.w = _BloomIntensity0;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(0.5<u_xlat16_1);
#else
        u_xlatb24 = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb2.x = !!(u_xlat16_1<1.5);
#else
        u_xlatb2.x = u_xlat16_1<1.5;
#endif
        u_xlatb24 = u_xlatb24 && u_xlatb2.x;
        if(u_xlatb24){
            SV_Target0.w = _BloomIntensity1;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb24 = !!(1.5<u_xlat16_1);
#else
            u_xlatb24 = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb2.x = !!(u_xlat16_1<2.5);
#else
            u_xlatb2.x = u_xlat16_1<2.5;
#endif
            u_xlatb24 = u_xlatb24 && u_xlatb2.x;
            if(u_xlatb24){
                SV_Target0.w = _BloomIntensity2;
            } else {
                u_xlatb2 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_1));
                u_xlatb1 = lessThan(vec4(u_xlat16_1), vec4(3.5, 4.5, 5.5, 6.5));
                u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
                u_xlatb1.y = u_xlatb1.y && u_xlatb2.y;
                u_xlatb1.z = u_xlatb1.z && u_xlatb2.z;
                u_xlatb1.w = u_xlatb1.w && u_xlatb2.w;
                u_xlat16_3.x = (u_xlatb1.w) ? _BloomIntensity6 : _BloomIntensity7;
                u_xlat16_3.x = (u_xlatb1.z) ? _BloomIntensity5 : u_xlat16_3.x;
                u_xlat16_3.x = (u_xlatb1.y) ? _BloomIntensity4 : u_xlat16_3.x;
                SV_Target0.w = (u_xlatb1.x) ? _BloomIntensity3 : u_xlat16_3.x;
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb24){
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb24 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb24){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb18.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb18.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat24 = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat24 = vs_TEXCOORD2.z * 17.0 + (-u_xlat24);
            u_xlat24 = u_xlat24 + 0.99000001;
            u_xlat24 = floor(u_xlat24);
            u_xlat24 = max(u_xlat24, 0.0);
            u_xlati24 = int(u_xlat24);
            if((u_xlati24)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat10_24 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat16_3.xyz = u_xlat4.xyz * vec3(u_xlat26) + _LightPosDir.xyz;
    u_xlat16_27 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_27 = inversesqrt(u_xlat16_27);
    u_xlat16_3.xyz = vec3(u_xlat16_27) * u_xlat16_3.xyz;
    u_xlat26 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat4.xyz = vec3(u_xlat26) * vs_TEXCOORD4.xyz;
    u_xlat16_27 = dot(u_xlat4.xyz, _LightPosDir.xyz);
    u_xlat16_27 = u_xlat16_27 * 0.5 + 0.5;
    u_xlat16_27 = dot(vec2(u_xlat16_27), u_xlat10_0.yy);
    u_xlat16_5.x = (-u_xlat10_24) + 1.0;
    u_xlat16_13.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_5.xy = u_xlat16_5.xx * u_xlat16_13.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_21 = max(u_xlat16_5.x, 9.99999975e-05);
    u_xlat16_21 = u_xlat16_27 / u_xlat16_21;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_21 * 0.25;
    u_xlatb8.xz = lessThan(vec4(u_xlat16_27), u_xlat16_5.xxyy).xz;
    u_xlat16_6.xy = vec2(u_xlat16_27) + (-u_xlat16_5.xy);
    u_xlat16_27 = (-u_xlat16_5.x) + u_xlat16_5.y;
    u_xlat16_27 = max(u_xlat16_27, 9.99999975e-05);
    u_xlat16_27 = u_xlat16_6.x / u_xlat16_27;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
#else
    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
#endif
    u_xlat16_27 = u_xlat16_27 * 0.5 + 0.25;
    u_xlat16_5.x = (-u_xlat16_5.y) + 1.0;
    u_xlat16_5.x = max(u_xlat16_5.x, 9.99999975e-05);
    u_xlat16_5.x = u_xlat16_6.y / u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x * 0.25 + 0.75;
    u_xlat16_27 = (u_xlatb8.z) ? u_xlat16_27 : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb8.x) ? u_xlat16_21 : u_xlat16_27;
    u_xlat16_5.y = 0.5;
    u_xlat10_7.xyz = texture(_DiffuseRampTex, u_xlat16_5.xy).xyz;
    u_xlat16_3.x = dot(u_xlat4.xyz, u_xlat16_3.xyz);
    u_xlat16_3.x = max(u_xlat16_3.x, 0.0);
    u_xlat16_3.x = log2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _SpecularShininess;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_11 = dFdx(u_xlat16_3.x);
    u_xlat16_19 = dFdy(u_xlat16_3.x);
    u_xlat16_11 = abs(u_xlat16_19) + abs(u_xlat16_11);
    u_xlat16_19 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_27 = (-u_xlat16_11) + u_xlat16_19;
    u_xlat16_3.y = u_xlat16_11 + u_xlat16_19;
    u_xlat16_3.xy = (-vec2(u_xlat16_27)) + u_xlat16_3.xy;
    u_xlat16_11 = float(1.0) / u_xlat16_3.y;
    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_11 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_11;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _SpecularColor.xyz;
    u_xlat16_3.xyz = u_xlat10_0.xxx * u_xlat16_3.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat16_3.xyz = u_xlat10_7.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_5.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_5.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_5.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-unity_SHC.xyz);
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_5.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_5.xyz = u_xlat16_0.xyz * _CharacterSHColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
uvec2 u_xlatu2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec2 u_xlat16_6;
lowp vec3 u_xlat10_7;
bvec3 u_xlatb8;
mediump float u_xlat16_11;
mediump vec2 u_xlat16_13;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
mediump float u_xlat16_21;
float u_xlat24;
lowp float u_xlat10_24;
int u_xlati24;
bool u_xlatb24;
float u_xlat26;
mediump float u_xlat16_27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_0.w * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(-0.5<u_xlat16_1);
#else
    u_xlatb24 = -0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_1<0.5);
#else
    u_xlatb2.x = u_xlat16_1<0.5;
#endif
    u_xlatb24 = u_xlatb24 && u_xlatb2.x;
    if(u_xlatb24){
        SV_Target0.w = _BloomIntensity0;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(0.5<u_xlat16_1);
#else
        u_xlatb24 = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb2.x = !!(u_xlat16_1<1.5);
#else
        u_xlatb2.x = u_xlat16_1<1.5;
#endif
        u_xlatb24 = u_xlatb24 && u_xlatb2.x;
        if(u_xlatb24){
            SV_Target0.w = _BloomIntensity1;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb24 = !!(1.5<u_xlat16_1);
#else
            u_xlatb24 = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb2.x = !!(u_xlat16_1<2.5);
#else
            u_xlatb2.x = u_xlat16_1<2.5;
#endif
            u_xlatb24 = u_xlatb24 && u_xlatb2.x;
            if(u_xlatb24){
                SV_Target0.w = _BloomIntensity2;
            } else {
                u_xlatb2 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_1));
                u_xlatb1 = lessThan(vec4(u_xlat16_1), vec4(3.5, 4.5, 5.5, 6.5));
                u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
                u_xlatb1.y = u_xlatb1.y && u_xlatb2.y;
                u_xlatb1.z = u_xlatb1.z && u_xlatb2.z;
                u_xlatb1.w = u_xlatb1.w && u_xlatb2.w;
                u_xlat16_3.x = (u_xlatb1.w) ? _BloomIntensity6 : _BloomIntensity7;
                u_xlat16_3.x = (u_xlatb1.z) ? _BloomIntensity5 : u_xlat16_3.x;
                u_xlat16_3.x = (u_xlatb1.y) ? _BloomIntensity4 : u_xlat16_3.x;
                SV_Target0.w = (u_xlatb1.x) ? _BloomIntensity3 : u_xlat16_3.x;
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb24){
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb24 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb24){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb18.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb18.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat24 = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat24 = vs_TEXCOORD2.z * 17.0 + (-u_xlat24);
            u_xlat24 = u_xlat24 + 0.99000001;
            u_xlat24 = floor(u_xlat24);
            u_xlat24 = max(u_xlat24, 0.0);
            u_xlati24 = int(u_xlat24);
            if((u_xlati24)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat10_24 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat16_3.xyz = u_xlat4.xyz * vec3(u_xlat26) + _LightPosDir.xyz;
    u_xlat16_27 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_27 = inversesqrt(u_xlat16_27);
    u_xlat16_3.xyz = vec3(u_xlat16_27) * u_xlat16_3.xyz;
    u_xlat26 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat4.xyz = vec3(u_xlat26) * vs_TEXCOORD4.xyz;
    u_xlat16_27 = dot(u_xlat4.xyz, _LightPosDir.xyz);
    u_xlat16_27 = u_xlat16_27 * 0.5 + 0.5;
    u_xlat16_27 = dot(vec2(u_xlat16_27), u_xlat10_0.yy);
    u_xlat16_5.x = (-u_xlat10_24) + 1.0;
    u_xlat16_13.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_5.xy = u_xlat16_5.xx * u_xlat16_13.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_21 = max(u_xlat16_5.x, 9.99999975e-05);
    u_xlat16_21 = u_xlat16_27 / u_xlat16_21;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_21 * 0.25;
    u_xlatb8.xz = lessThan(vec4(u_xlat16_27), u_xlat16_5.xxyy).xz;
    u_xlat16_6.xy = vec2(u_xlat16_27) + (-u_xlat16_5.xy);
    u_xlat16_27 = (-u_xlat16_5.x) + u_xlat16_5.y;
    u_xlat16_27 = max(u_xlat16_27, 9.99999975e-05);
    u_xlat16_27 = u_xlat16_6.x / u_xlat16_27;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
#else
    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
#endif
    u_xlat16_27 = u_xlat16_27 * 0.5 + 0.25;
    u_xlat16_5.x = (-u_xlat16_5.y) + 1.0;
    u_xlat16_5.x = max(u_xlat16_5.x, 9.99999975e-05);
    u_xlat16_5.x = u_xlat16_6.y / u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x * 0.25 + 0.75;
    u_xlat16_27 = (u_xlatb8.z) ? u_xlat16_27 : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb8.x) ? u_xlat16_21 : u_xlat16_27;
    u_xlat16_5.y = 0.5;
    u_xlat10_7.xyz = texture(_DiffuseRampTex, u_xlat16_5.xy).xyz;
    u_xlat16_3.x = dot(u_xlat4.xyz, u_xlat16_3.xyz);
    u_xlat16_3.x = max(u_xlat16_3.x, 0.0);
    u_xlat16_3.x = log2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _SpecularShininess;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_11 = dFdx(u_xlat16_3.x);
    u_xlat16_19 = dFdy(u_xlat16_3.x);
    u_xlat16_11 = abs(u_xlat16_19) + abs(u_xlat16_11);
    u_xlat16_19 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_27 = (-u_xlat16_11) + u_xlat16_19;
    u_xlat16_3.y = u_xlat16_11 + u_xlat16_19;
    u_xlat16_3.xy = (-vec2(u_xlat16_27)) + u_xlat16_3.xy;
    u_xlat16_11 = float(1.0) / u_xlat16_3.y;
    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_11 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_11;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _SpecularColor.xyz;
    u_xlat16_3.xyz = u_xlat10_0.xxx * u_xlat16_3.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    u_xlat16_3.xyz = u_xlat10_7.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_5.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_5.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_5.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-unity_SHC.xyz);
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_5.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_5.xyz = u_xlat16_0.xyz * _CharacterSHColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
uvec2 u_xlatu2;
vec4 u_xlat3;
bvec4 u_xlatb3;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec2 u_xlat16_6;
float u_xlat7;
bvec3 u_xlatb7;
mediump float u_xlat16_8;
mediump vec2 u_xlat16_12;
mediump float u_xlat16_15;
bvec2 u_xlatb16;
mediump vec2 u_xlat16_19;
float u_xlat21;
lowp float u_xlat10_21;
int u_xlati21;
bool u_xlatb21;
mediump float u_xlat16_22;
float u_xlat23;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_1.x = u_xlat10_0.w * 8.0;
    u_xlat16_1.x = roundEven(u_xlat16_1.x);
    u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb21 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb21){
        u_xlat10_21 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat2.yx).x;
        u_xlat16_8 = u_xlat10_21;
    } else {
        u_xlat16_8 = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(-0.5<u_xlat16_1.x);
#else
    u_xlatb21 = -0.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(u_xlat16_1.x<0.5);
#else
    u_xlatb16.x = u_xlat16_1.x<0.5;
#endif
    u_xlatb21 = u_xlatb21 && u_xlatb16.x;
    if(u_xlatb21){
        SV_Target0.w = _BloomIntensity0;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(0.5<u_xlat16_1.x);
#else
        u_xlatb21 = 0.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(u_xlat16_1.x<1.5);
#else
        u_xlatb16.x = u_xlat16_1.x<1.5;
#endif
        u_xlatb21 = u_xlatb21 && u_xlatb16.x;
        if(u_xlatb21){
            SV_Target0.w = _BloomIntensity1;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb21 = !!(1.5<u_xlat16_1.x);
#else
            u_xlatb21 = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb16.x = !!(u_xlat16_1.x<2.5);
#else
            u_xlatb16.x = u_xlat16_1.x<2.5;
#endif
            u_xlatb21 = u_xlatb21 && u_xlatb16.x;
            if(u_xlatb21){
                SV_Target0.w = _BloomIntensity2;
            } else {
                u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
                u_xlatb4 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
                u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
                u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
                u_xlatb3.z = u_xlatb3.z && u_xlatb4.z;
                u_xlatb3.w = u_xlatb3.w && u_xlatb4.w;
                u_xlat16_1.x = (u_xlatb3.w) ? _BloomIntensity6 : _BloomIntensity7;
                u_xlat16_1.x = (u_xlatb3.z) ? _BloomIntensity5 : u_xlat16_1.x;
                u_xlat16_1.x = (u_xlatb3.y) ? _BloomIntensity4 : u_xlat16_1.x;
                SV_Target0.w = (u_xlatb3.x) ? _BloomIntensity3 : u_xlat16_1.x;
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb21){
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb21 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb21){
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb16.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb16.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat21 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat21 = vs_TEXCOORD2.z * 17.0 + (-u_xlat21);
            u_xlat21 = u_xlat21 + 0.99000001;
            u_xlat21 = floor(u_xlat21);
            u_xlat21 = max(u_xlat21, 0.0);
            u_xlati21 = int(u_xlat21);
            if((u_xlati21)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat10_21 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat16_1.xzw = u_xlat3.xyz * vec3(u_xlat23) + _LightPosDir.xyz;
    u_xlat16_5.x = dot(u_xlat16_1.xzw, u_xlat16_1.xzw);
    u_xlat16_5.x = inversesqrt(u_xlat16_5.x);
    u_xlat16_1.xzw = u_xlat16_1.xzw * u_xlat16_5.xxx;
    u_xlat23 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat3.xyz = vec3(u_xlat23) * vs_TEXCOORD4.xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + 0.5;
    u_xlat16_5.x = dot(u_xlat16_5.xx, u_xlat10_0.yy);
    u_xlat16_12.x = u_xlat16_8 * 0.099999994 + 0.400000006;
    u_xlat16_19.x = u_xlat16_8 + -0.5;
    u_xlat16_19.x = u_xlat16_19.x + u_xlat16_19.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_19.x = min(max(u_xlat16_19.x, 0.0), 1.0);
#else
    u_xlat16_19.x = clamp(u_xlat16_19.x, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_19.x * -2.0 + 3.0;
    u_xlat16_19.x = u_xlat16_19.x * u_xlat16_19.x;
    u_xlat16_19.x = u_xlat16_19.x * u_xlat16_26;
    u_xlat16_5.x = (-u_xlat16_12.x) + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_19.x * u_xlat16_5.x + u_xlat16_12.x;
    u_xlat16_12.x = (-u_xlat10_21) + 1.0;
    u_xlat16_19.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_12.xy = u_xlat16_12.xx * u_xlat16_19.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_26 = max(u_xlat16_12.x, 9.99999975e-05);
    u_xlat16_26 = u_xlat16_5.x / u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_26 * 0.25;
    u_xlatb7.xz = lessThan(u_xlat16_5.xxxx, u_xlat16_12.xxyy).xz;
    u_xlat16_6.xy = (-u_xlat16_12.xy) + u_xlat16_5.xx;
    u_xlat16_5.x = (-u_xlat16_12.x) + u_xlat16_12.y;
    u_xlat16_5.x = max(u_xlat16_5.x, 9.99999975e-05);
    u_xlat16_5.x = u_xlat16_6.x / u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + 0.25;
    u_xlat16_12.x = (-u_xlat16_12.y) + 1.0;
    u_xlat16_12.x = max(u_xlat16_12.x, 9.99999975e-05);
    u_xlat16_12.x = u_xlat16_6.y / u_xlat16_12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_12.x = min(max(u_xlat16_12.x, 0.0), 1.0);
#else
    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);
#endif
    u_xlat16_12.x = u_xlat16_12.x * 0.25 + 0.75;
    u_xlat16_5.x = (u_xlatb7.z) ? u_xlat16_5.x : u_xlat16_12.x;
    u_xlat16_5.x = (u_xlatb7.x) ? u_xlat16_26 : u_xlat16_5.x;
    u_xlat16_5.y = 0.5;
    u_xlat10_4.xyz = texture(_DiffuseRampTex, u_xlat16_5.xy).xyz;
    u_xlat16_1.x = dot(u_xlat3.xyz, u_xlat16_1.xzw);
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * _SpecularShininess;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat7 = u_xlat16_1.x * u_xlat16_8;
    u_xlat16_15 = dFdx(u_xlat7);
    u_xlat16_22 = dFdy(u_xlat7);
    u_xlat16_15 = abs(u_xlat16_22) + abs(u_xlat16_15);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_5.x = (-u_xlat16_15) + u_xlat16_22;
    u_xlat16_15 = u_xlat16_15 + u_xlat16_22;
    u_xlat16_15 = (-u_xlat16_5.x) + u_xlat16_15;
    u_xlat16_1.x = u_xlat16_8 * u_xlat16_1.x + (-u_xlat16_5.x);
    u_xlat16_8 = float(1.0) / u_xlat16_15;
    u_xlat16_1.x = u_xlat16_8 * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8 = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_0.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_5.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_5.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_5.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-unity_SHC.xyz);
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_5.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_5.xyz = u_xlat16_0.xyz * _CharacterSHColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
uvec2 u_xlatu2;
vec4 u_xlat3;
bvec4 u_xlatb3;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec2 u_xlat16_6;
float u_xlat7;
bvec3 u_xlatb7;
mediump float u_xlat16_8;
mediump vec2 u_xlat16_12;
mediump float u_xlat16_15;
bvec2 u_xlatb16;
mediump vec2 u_xlat16_19;
float u_xlat21;
lowp float u_xlat10_21;
int u_xlati21;
bool u_xlatb21;
mediump float u_xlat16_22;
float u_xlat23;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_1.x = u_xlat10_0.w * 8.0;
    u_xlat16_1.x = roundEven(u_xlat16_1.x);
    u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb21 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb21){
        u_xlat10_21 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat2.yx).x;
        u_xlat16_8 = u_xlat10_21;
    } else {
        u_xlat16_8 = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(-0.5<u_xlat16_1.x);
#else
    u_xlatb21 = -0.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(u_xlat16_1.x<0.5);
#else
    u_xlatb16.x = u_xlat16_1.x<0.5;
#endif
    u_xlatb21 = u_xlatb21 && u_xlatb16.x;
    if(u_xlatb21){
        SV_Target0.w = _BloomIntensity0;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(0.5<u_xlat16_1.x);
#else
        u_xlatb21 = 0.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(u_xlat16_1.x<1.5);
#else
        u_xlatb16.x = u_xlat16_1.x<1.5;
#endif
        u_xlatb21 = u_xlatb21 && u_xlatb16.x;
        if(u_xlatb21){
            SV_Target0.w = _BloomIntensity1;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb21 = !!(1.5<u_xlat16_1.x);
#else
            u_xlatb21 = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb16.x = !!(u_xlat16_1.x<2.5);
#else
            u_xlatb16.x = u_xlat16_1.x<2.5;
#endif
            u_xlatb21 = u_xlatb21 && u_xlatb16.x;
            if(u_xlatb21){
                SV_Target0.w = _BloomIntensity2;
            } else {
                u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
                u_xlatb4 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
                u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
                u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
                u_xlatb3.z = u_xlatb3.z && u_xlatb4.z;
                u_xlatb3.w = u_xlatb3.w && u_xlatb4.w;
                u_xlat16_1.x = (u_xlatb3.w) ? _BloomIntensity6 : _BloomIntensity7;
                u_xlat16_1.x = (u_xlatb3.z) ? _BloomIntensity5 : u_xlat16_1.x;
                u_xlat16_1.x = (u_xlatb3.y) ? _BloomIntensity4 : u_xlat16_1.x;
                SV_Target0.w = (u_xlatb3.x) ? _BloomIntensity3 : u_xlat16_1.x;
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb21){
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb21 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb21){
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb16.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb16.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat21 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat21 = vs_TEXCOORD2.z * 17.0 + (-u_xlat21);
            u_xlat21 = u_xlat21 + 0.99000001;
            u_xlat21 = floor(u_xlat21);
            u_xlat21 = max(u_xlat21, 0.0);
            u_xlati21 = int(u_xlat21);
            if((u_xlati21)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat10_21 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat16_1.xzw = u_xlat3.xyz * vec3(u_xlat23) + _LightPosDir.xyz;
    u_xlat16_5.x = dot(u_xlat16_1.xzw, u_xlat16_1.xzw);
    u_xlat16_5.x = inversesqrt(u_xlat16_5.x);
    u_xlat16_1.xzw = u_xlat16_1.xzw * u_xlat16_5.xxx;
    u_xlat23 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat3.xyz = vec3(u_xlat23) * vs_TEXCOORD4.xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + 0.5;
    u_xlat16_5.x = dot(u_xlat16_5.xx, u_xlat10_0.yy);
    u_xlat16_12.x = u_xlat16_8 * 0.099999994 + 0.400000006;
    u_xlat16_19.x = u_xlat16_8 + -0.5;
    u_xlat16_19.x = u_xlat16_19.x + u_xlat16_19.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_19.x = min(max(u_xlat16_19.x, 0.0), 1.0);
#else
    u_xlat16_19.x = clamp(u_xlat16_19.x, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_19.x * -2.0 + 3.0;
    u_xlat16_19.x = u_xlat16_19.x * u_xlat16_19.x;
    u_xlat16_19.x = u_xlat16_19.x * u_xlat16_26;
    u_xlat16_5.x = (-u_xlat16_12.x) + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_19.x * u_xlat16_5.x + u_xlat16_12.x;
    u_xlat16_12.x = (-u_xlat10_21) + 1.0;
    u_xlat16_19.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_12.xy = u_xlat16_12.xx * u_xlat16_19.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_26 = max(u_xlat16_12.x, 9.99999975e-05);
    u_xlat16_26 = u_xlat16_5.x / u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_26 * 0.25;
    u_xlatb7.xz = lessThan(u_xlat16_5.xxxx, u_xlat16_12.xxyy).xz;
    u_xlat16_6.xy = (-u_xlat16_12.xy) + u_xlat16_5.xx;
    u_xlat16_5.x = (-u_xlat16_12.x) + u_xlat16_12.y;
    u_xlat16_5.x = max(u_xlat16_5.x, 9.99999975e-05);
    u_xlat16_5.x = u_xlat16_6.x / u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + 0.25;
    u_xlat16_12.x = (-u_xlat16_12.y) + 1.0;
    u_xlat16_12.x = max(u_xlat16_12.x, 9.99999975e-05);
    u_xlat16_12.x = u_xlat16_6.y / u_xlat16_12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_12.x = min(max(u_xlat16_12.x, 0.0), 1.0);
#else
    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);
#endif
    u_xlat16_12.x = u_xlat16_12.x * 0.25 + 0.75;
    u_xlat16_5.x = (u_xlatb7.z) ? u_xlat16_5.x : u_xlat16_12.x;
    u_xlat16_5.x = (u_xlatb7.x) ? u_xlat16_26 : u_xlat16_5.x;
    u_xlat16_5.y = 0.5;
    u_xlat10_4.xyz = texture(_DiffuseRampTex, u_xlat16_5.xy).xyz;
    u_xlat16_1.x = dot(u_xlat3.xyz, u_xlat16_1.xzw);
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * _SpecularShininess;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat7 = u_xlat16_1.x * u_xlat16_8;
    u_xlat16_15 = dFdx(u_xlat7);
    u_xlat16_22 = dFdy(u_xlat7);
    u_xlat16_15 = abs(u_xlat16_22) + abs(u_xlat16_15);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_5.x = (-u_xlat16_15) + u_xlat16_22;
    u_xlat16_15 = u_xlat16_15 + u_xlat16_22;
    u_xlat16_15 = (-u_xlat16_5.x) + u_xlat16_15;
    u_xlat16_1.x = u_xlat16_8 * u_xlat16_1.x + (-u_xlat16_5.x);
    u_xlat16_8 = float(1.0) / u_xlat16_15;
    u_xlat16_1.x = u_xlat16_8 * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8 = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_0.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_5.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_5.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_5.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-unity_SHC.xyz);
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_5.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_5.xyz = u_xlat16_0.xyz * _CharacterSHColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
uvec2 u_xlatu2;
vec4 u_xlat3;
bvec4 u_xlatb3;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec2 u_xlat16_6;
float u_xlat7;
bvec3 u_xlatb7;
mediump float u_xlat16_8;
mediump vec2 u_xlat16_12;
mediump float u_xlat16_15;
bvec2 u_xlatb16;
mediump vec2 u_xlat16_19;
float u_xlat21;
lowp float u_xlat10_21;
int u_xlati21;
bool u_xlatb21;
mediump float u_xlat16_22;
float u_xlat23;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_1.x = u_xlat10_0.w * 8.0;
    u_xlat16_1.x = roundEven(u_xlat16_1.x);
    u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb21 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb21){
        u_xlat10_21 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat2.yx).x;
        u_xlat16_8 = u_xlat10_21;
    } else {
        u_xlat16_8 = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(-0.5<u_xlat16_1.x);
#else
    u_xlatb21 = -0.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(u_xlat16_1.x<0.5);
#else
    u_xlatb16.x = u_xlat16_1.x<0.5;
#endif
    u_xlatb21 = u_xlatb21 && u_xlatb16.x;
    if(u_xlatb21){
        SV_Target0.w = _BloomIntensity0;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(0.5<u_xlat16_1.x);
#else
        u_xlatb21 = 0.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(u_xlat16_1.x<1.5);
#else
        u_xlatb16.x = u_xlat16_1.x<1.5;
#endif
        u_xlatb21 = u_xlatb21 && u_xlatb16.x;
        if(u_xlatb21){
            SV_Target0.w = _BloomIntensity1;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb21 = !!(1.5<u_xlat16_1.x);
#else
            u_xlatb21 = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb16.x = !!(u_xlat16_1.x<2.5);
#else
            u_xlatb16.x = u_xlat16_1.x<2.5;
#endif
            u_xlatb21 = u_xlatb21 && u_xlatb16.x;
            if(u_xlatb21){
                SV_Target0.w = _BloomIntensity2;
            } else {
                u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
                u_xlatb4 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
                u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
                u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
                u_xlatb3.z = u_xlatb3.z && u_xlatb4.z;
                u_xlatb3.w = u_xlatb3.w && u_xlatb4.w;
                u_xlat16_1.x = (u_xlatb3.w) ? _BloomIntensity6 : _BloomIntensity7;
                u_xlat16_1.x = (u_xlatb3.z) ? _BloomIntensity5 : u_xlat16_1.x;
                u_xlat16_1.x = (u_xlatb3.y) ? _BloomIntensity4 : u_xlat16_1.x;
                SV_Target0.w = (u_xlatb3.x) ? _BloomIntensity3 : u_xlat16_1.x;
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb21){
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb21 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb21){
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb16.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb16.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat21 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat21 = vs_TEXCOORD2.z * 17.0 + (-u_xlat21);
            u_xlat21 = u_xlat21 + 0.99000001;
            u_xlat21 = floor(u_xlat21);
            u_xlat21 = max(u_xlat21, 0.0);
            u_xlati21 = int(u_xlat21);
            if((u_xlati21)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat10_21 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat16_1.xzw = u_xlat3.xyz * vec3(u_xlat23) + _LightPosDir.xyz;
    u_xlat16_5.x = dot(u_xlat16_1.xzw, u_xlat16_1.xzw);
    u_xlat16_5.x = inversesqrt(u_xlat16_5.x);
    u_xlat16_1.xzw = u_xlat16_1.xzw * u_xlat16_5.xxx;
    u_xlat23 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat3.xyz = vec3(u_xlat23) * vs_TEXCOORD4.xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + 0.5;
    u_xlat16_5.x = dot(u_xlat16_5.xx, u_xlat10_0.yy);
    u_xlat16_12.x = u_xlat16_8 * 0.099999994 + 0.400000006;
    u_xlat16_19.x = u_xlat16_8 + -0.5;
    u_xlat16_19.x = u_xlat16_19.x + u_xlat16_19.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_19.x = min(max(u_xlat16_19.x, 0.0), 1.0);
#else
    u_xlat16_19.x = clamp(u_xlat16_19.x, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_19.x * -2.0 + 3.0;
    u_xlat16_19.x = u_xlat16_19.x * u_xlat16_19.x;
    u_xlat16_19.x = u_xlat16_19.x * u_xlat16_26;
    u_xlat16_5.x = (-u_xlat16_12.x) + u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_19.x * u_xlat16_5.x + u_xlat16_12.x;
    u_xlat16_12.x = (-u_xlat10_21) + 1.0;
    u_xlat16_19.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_12.xy = u_xlat16_12.xx * u_xlat16_19.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_26 = max(u_xlat16_12.x, 9.99999975e-05);
    u_xlat16_26 = u_xlat16_5.x / u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_26 * 0.25;
    u_xlatb7.xz = lessThan(u_xlat16_5.xxxx, u_xlat16_12.xxyy).xz;
    u_xlat16_6.xy = (-u_xlat16_12.xy) + u_xlat16_5.xx;
    u_xlat16_5.x = (-u_xlat16_12.x) + u_xlat16_12.y;
    u_xlat16_5.x = max(u_xlat16_5.x, 9.99999975e-05);
    u_xlat16_5.x = u_xlat16_6.x / u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + 0.25;
    u_xlat16_12.x = (-u_xlat16_12.y) + 1.0;
    u_xlat16_12.x = max(u_xlat16_12.x, 9.99999975e-05);
    u_xlat16_12.x = u_xlat16_6.y / u_xlat16_12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_12.x = min(max(u_xlat16_12.x, 0.0), 1.0);
#else
    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);
#endif
    u_xlat16_12.x = u_xlat16_12.x * 0.25 + 0.75;
    u_xlat16_5.x = (u_xlatb7.z) ? u_xlat16_5.x : u_xlat16_12.x;
    u_xlat16_5.x = (u_xlatb7.x) ? u_xlat16_26 : u_xlat16_5.x;
    u_xlat16_5.y = 0.5;
    u_xlat10_4.xyz = texture(_DiffuseRampTex, u_xlat16_5.xy).xyz;
    u_xlat16_1.x = dot(u_xlat3.xyz, u_xlat16_1.xzw);
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * _SpecularShininess;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat7 = u_xlat16_1.x * u_xlat16_8;
    u_xlat16_15 = dFdx(u_xlat7);
    u_xlat16_22 = dFdy(u_xlat7);
    u_xlat16_15 = abs(u_xlat16_22) + abs(u_xlat16_15);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_5.x = (-u_xlat16_15) + u_xlat16_22;
    u_xlat16_15 = u_xlat16_15 + u_xlat16_22;
    u_xlat16_15 = (-u_xlat16_5.x) + u_xlat16_15;
    u_xlat16_1.x = u_xlat16_8 * u_xlat16_1.x + (-u_xlat16_5.x);
    u_xlat16_8 = float(1.0) / u_xlat16_15;
    u_xlat16_1.x = u_xlat16_8 * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8 = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_0.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_5.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_5.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_5.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-unity_SHC.xyz);
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_5.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_5.xyz = u_xlat16_0.xyz * _CharacterSHColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_MULTI_BLOOM_ON" "_MULTI_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor0;
uniform 	mediump vec4 _SpecularColor1;
uniform 	mediump vec4 _SpecularColor2;
uniform 	mediump vec4 _SpecularColor3;
uniform 	mediump vec4 _SpecularColor4;
uniform 	mediump vec4 _SpecularColor5;
uniform 	mediump vec4 _SpecularColor6;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
uvec2 u_xlatu2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec2 u_xlat16_6;
bvec3 u_xlatb7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
bvec2 u_xlatb16;
mediump float u_xlat16_19;
mediump vec2 u_xlat16_20;
float u_xlat21;
lowp float u_xlat10_21;
int u_xlati21;
bool u_xlatb21;
float u_xlat23;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_1.x = u_xlat10_0.w * 8.0;
    u_xlat16_1.x = roundEven(u_xlat16_1.x);
    u_xlatb2.xy = lessThan(vec4(0.5, -0.5, 0.0, 0.0), u_xlat16_1.xxxx).xy;
    u_xlatb16.xy = lessThan(u_xlat16_1.xxxx, vec4(1.5, 0.5, 1.5, 0.5)).xy;
    u_xlatb2.x = u_xlatb16.x && u_xlatb2.x;
    u_xlatb2.y = u_xlatb16.y && u_xlatb2.y;
    if(u_xlatb2.x){
        u_xlat16_8.xyz = _SpecularColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(1.5<u_xlat16_1.x);
#else
        u_xlatb21 = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(u_xlat16_1.x<2.5);
#else
        u_xlatb16.x = u_xlat16_1.x<2.5;
#endif
        u_xlatb21 = u_xlatb21 && u_xlatb16.x;
        if(u_xlatb21){
            u_xlat16_8.xyz = _SpecularColor2.xyz;
        } else {
            u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
            u_xlatb4 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
            u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
            u_xlatb3.z = u_xlatb3.z && u_xlatb4.z;
            u_xlatb3.w = u_xlatb3.w && u_xlatb4.w;
            u_xlat16_5.xyz = (u_xlatb3.w) ? _SpecularColor6.xyz : _SpecularColor0.xyz;
            u_xlat16_5.xyz = (u_xlatb3.z) ? _SpecularColor5.xyz : u_xlat16_5.xyz;
            u_xlat16_5.xyz = (u_xlatb3.y) ? _SpecularColor4.xyz : u_xlat16_5.xyz;
            u_xlat16_8.xyz = (u_xlatb3.x) ? _SpecularColor3.xyz : u_xlat16_5.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.y){
        SV_Target0.w = _BloomIntensity0;
    } else {
        if(u_xlatb2.x){
            SV_Target0.w = _BloomIntensity1;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb21 = !!(1.5<u_xlat16_1.x);
#else
            u_xlatb21 = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb2.x = !!(u_xlat16_1.x<2.5);
#else
            u_xlatb2.x = u_xlat16_1.x<2.5;
#endif
            u_xlatb21 = u_xlatb21 && u_xlatb2.x;
            if(u_xlatb21){
                SV_Target0.w = _BloomIntensity2;
            } else {
                u_xlatb2 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
                u_xlatb3 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
                u_xlatb2.x = u_xlatb2.x && u_xlatb3.x;
                u_xlatb2.y = u_xlatb2.y && u_xlatb3.y;
                u_xlatb2.z = u_xlatb2.z && u_xlatb3.z;
                u_xlatb2.w = u_xlatb2.w && u_xlatb3.w;
                u_xlat16_1.x = (u_xlatb2.w) ? _BloomIntensity6 : _BloomIntensity7;
                u_xlat16_1.x = (u_xlatb2.z) ? _BloomIntensity5 : u_xlat16_1.x;
                u_xlat16_1.x = (u_xlatb2.y) ? _BloomIntensity4 : u_xlat16_1.x;
                SV_Target0.w = (u_xlatb2.x) ? _BloomIntensity3 : u_xlat16_1.x;
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb21){
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb21 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb21){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb16.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb16.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat21 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat21 = vs_TEXCOORD2.z * 17.0 + (-u_xlat21);
            u_xlat21 = u_xlat21 + 0.99000001;
            u_xlat21 = floor(u_xlat21);
            u_xlat21 = max(u_xlat21, 0.0);
            u_xlati21 = int(u_xlat21);
            if((u_xlati21)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat10_21 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat23) + _LightPosDir.xyz;
    u_xlat16_1.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
    u_xlat16_5.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
    u_xlat23 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat3.xyz = vec3(u_xlat23) * vs_TEXCOORD4.xyz;
    u_xlat16_1.x = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_1.x = u_xlat16_1.x * 0.5 + 0.5;
    u_xlat16_1.x = dot(u_xlat16_1.xx, u_xlat10_0.yy);
    u_xlat16_26 = (-u_xlat10_21) + 1.0;
    u_xlat16_6.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = vec2(u_xlat16_26) * u_xlat16_6.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_26 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_26 = u_xlat16_1.x / u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_26 * 0.25;
    u_xlatb7.xz = lessThan(u_xlat16_1.xxxx, u_xlat16_6.xxyy).xz;
    u_xlat16_20.xy = u_xlat16_1.xx + (-u_xlat16_6.xy);
    u_xlat16_1.x = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_1.x = max(u_xlat16_1.x, 9.99999975e-05);
    u_xlat16_1.x = u_xlat16_20.x / u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_20.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_1.x = (u_xlatb7.z) ? u_xlat16_1.x : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb7.x) ? u_xlat16_26 : u_xlat16_1.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_4.xyz = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_1.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * _SpecularShininess;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat16_5.x = dFdx(u_xlat16_1.x);
    u_xlat16_12 = dFdy(u_xlat16_1.x);
    u_xlat16_5.x = abs(u_xlat16_12) + abs(u_xlat16_5.x);
    u_xlat16_12 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_19 = (-u_xlat16_5.x) + u_xlat16_12;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_12;
    u_xlat16_5.x = (-u_xlat16_19) + u_xlat16_5.x;
    u_xlat16_1.x = u_xlat16_1.x + (-u_xlat16_19);
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5.x;
    u_xlat16_1.xyz = u_xlat16_8.xyz * u_xlat16_1.xxx;
    u_xlat16_1.xyz = u_xlat10_0.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_5.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_5.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_5.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-unity_SHC.xyz);
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_5.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_5.xyz = u_xlat16_0.xyz * _CharacterSHColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_MULTI_BLOOM_ON" "_MULTI_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor0;
uniform 	mediump vec4 _SpecularColor1;
uniform 	mediump vec4 _SpecularColor2;
uniform 	mediump vec4 _SpecularColor3;
uniform 	mediump vec4 _SpecularColor4;
uniform 	mediump vec4 _SpecularColor5;
uniform 	mediump vec4 _SpecularColor6;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
uvec2 u_xlatu2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec2 u_xlat16_6;
bvec3 u_xlatb7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
bvec2 u_xlatb16;
mediump float u_xlat16_19;
mediump vec2 u_xlat16_20;
float u_xlat21;
lowp float u_xlat10_21;
int u_xlati21;
bool u_xlatb21;
float u_xlat23;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_1.x = u_xlat10_0.w * 8.0;
    u_xlat16_1.x = roundEven(u_xlat16_1.x);
    u_xlatb2.xy = lessThan(vec4(0.5, -0.5, 0.0, 0.0), u_xlat16_1.xxxx).xy;
    u_xlatb16.xy = lessThan(u_xlat16_1.xxxx, vec4(1.5, 0.5, 1.5, 0.5)).xy;
    u_xlatb2.x = u_xlatb16.x && u_xlatb2.x;
    u_xlatb2.y = u_xlatb16.y && u_xlatb2.y;
    if(u_xlatb2.x){
        u_xlat16_8.xyz = _SpecularColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(1.5<u_xlat16_1.x);
#else
        u_xlatb21 = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(u_xlat16_1.x<2.5);
#else
        u_xlatb16.x = u_xlat16_1.x<2.5;
#endif
        u_xlatb21 = u_xlatb21 && u_xlatb16.x;
        if(u_xlatb21){
            u_xlat16_8.xyz = _SpecularColor2.xyz;
        } else {
            u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
            u_xlatb4 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
            u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
            u_xlatb3.z = u_xlatb3.z && u_xlatb4.z;
            u_xlatb3.w = u_xlatb3.w && u_xlatb4.w;
            u_xlat16_5.xyz = (u_xlatb3.w) ? _SpecularColor6.xyz : _SpecularColor0.xyz;
            u_xlat16_5.xyz = (u_xlatb3.z) ? _SpecularColor5.xyz : u_xlat16_5.xyz;
            u_xlat16_5.xyz = (u_xlatb3.y) ? _SpecularColor4.xyz : u_xlat16_5.xyz;
            u_xlat16_8.xyz = (u_xlatb3.x) ? _SpecularColor3.xyz : u_xlat16_5.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.y){
        SV_Target0.w = _BloomIntensity0;
    } else {
        if(u_xlatb2.x){
            SV_Target0.w = _BloomIntensity1;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb21 = !!(1.5<u_xlat16_1.x);
#else
            u_xlatb21 = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb2.x = !!(u_xlat16_1.x<2.5);
#else
            u_xlatb2.x = u_xlat16_1.x<2.5;
#endif
            u_xlatb21 = u_xlatb21 && u_xlatb2.x;
            if(u_xlatb21){
                SV_Target0.w = _BloomIntensity2;
            } else {
                u_xlatb2 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
                u_xlatb3 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
                u_xlatb2.x = u_xlatb2.x && u_xlatb3.x;
                u_xlatb2.y = u_xlatb2.y && u_xlatb3.y;
                u_xlatb2.z = u_xlatb2.z && u_xlatb3.z;
                u_xlatb2.w = u_xlatb2.w && u_xlatb3.w;
                u_xlat16_1.x = (u_xlatb2.w) ? _BloomIntensity6 : _BloomIntensity7;
                u_xlat16_1.x = (u_xlatb2.z) ? _BloomIntensity5 : u_xlat16_1.x;
                u_xlat16_1.x = (u_xlatb2.y) ? _BloomIntensity4 : u_xlat16_1.x;
                SV_Target0.w = (u_xlatb2.x) ? _BloomIntensity3 : u_xlat16_1.x;
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb21){
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb21 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb21){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb16.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb16.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat21 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat21 = vs_TEXCOORD2.z * 17.0 + (-u_xlat21);
            u_xlat21 = u_xlat21 + 0.99000001;
            u_xlat21 = floor(u_xlat21);
            u_xlat21 = max(u_xlat21, 0.0);
            u_xlati21 = int(u_xlat21);
            if((u_xlati21)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat10_21 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat23) + _LightPosDir.xyz;
    u_xlat16_1.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
    u_xlat16_5.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
    u_xlat23 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat3.xyz = vec3(u_xlat23) * vs_TEXCOORD4.xyz;
    u_xlat16_1.x = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_1.x = u_xlat16_1.x * 0.5 + 0.5;
    u_xlat16_1.x = dot(u_xlat16_1.xx, u_xlat10_0.yy);
    u_xlat16_26 = (-u_xlat10_21) + 1.0;
    u_xlat16_6.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = vec2(u_xlat16_26) * u_xlat16_6.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_26 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_26 = u_xlat16_1.x / u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_26 * 0.25;
    u_xlatb7.xz = lessThan(u_xlat16_1.xxxx, u_xlat16_6.xxyy).xz;
    u_xlat16_20.xy = u_xlat16_1.xx + (-u_xlat16_6.xy);
    u_xlat16_1.x = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_1.x = max(u_xlat16_1.x, 9.99999975e-05);
    u_xlat16_1.x = u_xlat16_20.x / u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_20.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_1.x = (u_xlatb7.z) ? u_xlat16_1.x : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb7.x) ? u_xlat16_26 : u_xlat16_1.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_4.xyz = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_1.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * _SpecularShininess;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat16_5.x = dFdx(u_xlat16_1.x);
    u_xlat16_12 = dFdy(u_xlat16_1.x);
    u_xlat16_5.x = abs(u_xlat16_12) + abs(u_xlat16_5.x);
    u_xlat16_12 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_19 = (-u_xlat16_5.x) + u_xlat16_12;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_12;
    u_xlat16_5.x = (-u_xlat16_19) + u_xlat16_5.x;
    u_xlat16_1.x = u_xlat16_1.x + (-u_xlat16_19);
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5.x;
    u_xlat16_1.xyz = u_xlat16_8.xyz * u_xlat16_1.xxx;
    u_xlat16_1.xyz = u_xlat10_0.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_5.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_5.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_5.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-unity_SHC.xyz);
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_5.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_5.xyz = u_xlat16_0.xyz * _CharacterSHColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_MULTI_BLOOM_ON" "_MULTI_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor0;
uniform 	mediump vec4 _SpecularColor1;
uniform 	mediump vec4 _SpecularColor2;
uniform 	mediump vec4 _SpecularColor3;
uniform 	mediump vec4 _SpecularColor4;
uniform 	mediump vec4 _SpecularColor5;
uniform 	mediump vec4 _SpecularColor6;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
uvec2 u_xlatu2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec2 u_xlat16_6;
bvec3 u_xlatb7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_12;
bvec2 u_xlatb16;
mediump float u_xlat16_19;
mediump vec2 u_xlat16_20;
float u_xlat21;
lowp float u_xlat10_21;
int u_xlati21;
bool u_xlatb21;
float u_xlat23;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_1.x = u_xlat10_0.w * 8.0;
    u_xlat16_1.x = roundEven(u_xlat16_1.x);
    u_xlatb2.xy = lessThan(vec4(0.5, -0.5, 0.0, 0.0), u_xlat16_1.xxxx).xy;
    u_xlatb16.xy = lessThan(u_xlat16_1.xxxx, vec4(1.5, 0.5, 1.5, 0.5)).xy;
    u_xlatb2.x = u_xlatb16.x && u_xlatb2.x;
    u_xlatb2.y = u_xlatb16.y && u_xlatb2.y;
    if(u_xlatb2.x){
        u_xlat16_8.xyz = _SpecularColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(1.5<u_xlat16_1.x);
#else
        u_xlatb21 = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(u_xlat16_1.x<2.5);
#else
        u_xlatb16.x = u_xlat16_1.x<2.5;
#endif
        u_xlatb21 = u_xlatb21 && u_xlatb16.x;
        if(u_xlatb21){
            u_xlat16_8.xyz = _SpecularColor2.xyz;
        } else {
            u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
            u_xlatb4 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
            u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
            u_xlatb3.z = u_xlatb3.z && u_xlatb4.z;
            u_xlatb3.w = u_xlatb3.w && u_xlatb4.w;
            u_xlat16_5.xyz = (u_xlatb3.w) ? _SpecularColor6.xyz : _SpecularColor0.xyz;
            u_xlat16_5.xyz = (u_xlatb3.z) ? _SpecularColor5.xyz : u_xlat16_5.xyz;
            u_xlat16_5.xyz = (u_xlatb3.y) ? _SpecularColor4.xyz : u_xlat16_5.xyz;
            u_xlat16_8.xyz = (u_xlatb3.x) ? _SpecularColor3.xyz : u_xlat16_5.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.y){
        SV_Target0.w = _BloomIntensity0;
    } else {
        if(u_xlatb2.x){
            SV_Target0.w = _BloomIntensity1;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb21 = !!(1.5<u_xlat16_1.x);
#else
            u_xlatb21 = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb2.x = !!(u_xlat16_1.x<2.5);
#else
            u_xlatb2.x = u_xlat16_1.x<2.5;
#endif
            u_xlatb21 = u_xlatb21 && u_xlatb2.x;
            if(u_xlatb21){
                SV_Target0.w = _BloomIntensity2;
            } else {
                u_xlatb2 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
                u_xlatb3 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
                u_xlatb2.x = u_xlatb2.x && u_xlatb3.x;
                u_xlatb2.y = u_xlatb2.y && u_xlatb3.y;
                u_xlatb2.z = u_xlatb2.z && u_xlatb3.z;
                u_xlatb2.w = u_xlatb2.w && u_xlatb3.w;
                u_xlat16_1.x = (u_xlatb2.w) ? _BloomIntensity6 : _BloomIntensity7;
                u_xlat16_1.x = (u_xlatb2.z) ? _BloomIntensity5 : u_xlat16_1.x;
                u_xlat16_1.x = (u_xlatb2.y) ? _BloomIntensity4 : u_xlat16_1.x;
                SV_Target0.w = (u_xlatb2.x) ? _BloomIntensity3 : u_xlat16_1.x;
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb21){
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb21 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb21){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb16.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb16.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat21 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat21 = vs_TEXCOORD2.z * 17.0 + (-u_xlat21);
            u_xlat21 = u_xlat21 + 0.99000001;
            u_xlat21 = floor(u_xlat21);
            u_xlat21 = max(u_xlat21, 0.0);
            u_xlati21 = int(u_xlat21);
            if((u_xlati21)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat10_21 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat23) + _LightPosDir.xyz;
    u_xlat16_1.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
    u_xlat16_5.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
    u_xlat23 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat3.xyz = vec3(u_xlat23) * vs_TEXCOORD4.xyz;
    u_xlat16_1.x = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_1.x = u_xlat16_1.x * 0.5 + 0.5;
    u_xlat16_1.x = dot(u_xlat16_1.xx, u_xlat10_0.yy);
    u_xlat16_26 = (-u_xlat10_21) + 1.0;
    u_xlat16_6.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = vec2(u_xlat16_26) * u_xlat16_6.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_26 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_26 = u_xlat16_1.x / u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_26 * 0.25;
    u_xlatb7.xz = lessThan(u_xlat16_1.xxxx, u_xlat16_6.xxyy).xz;
    u_xlat16_20.xy = u_xlat16_1.xx + (-u_xlat16_6.xy);
    u_xlat16_1.x = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_1.x = max(u_xlat16_1.x, 9.99999975e-05);
    u_xlat16_1.x = u_xlat16_20.x / u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_20.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_1.x = (u_xlatb7.z) ? u_xlat16_1.x : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb7.x) ? u_xlat16_26 : u_xlat16_1.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_4.xyz = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_1.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * _SpecularShininess;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat16_5.x = dFdx(u_xlat16_1.x);
    u_xlat16_12 = dFdy(u_xlat16_1.x);
    u_xlat16_5.x = abs(u_xlat16_12) + abs(u_xlat16_5.x);
    u_xlat16_12 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_19 = (-u_xlat16_5.x) + u_xlat16_12;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_12;
    u_xlat16_5.x = (-u_xlat16_19) + u_xlat16_5.x;
    u_xlat16_1.x = u_xlat16_1.x + (-u_xlat16_19);
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5.x;
    u_xlat16_1.xyz = u_xlat16_8.xyz * u_xlat16_1.xxx;
    u_xlat16_1.xyz = u_xlat10_0.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_5.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_5.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_5.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-unity_SHC.xyz);
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_5.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_5.xyz = u_xlat16_0.xyz * _CharacterSHColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_MULTI_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor0;
uniform 	mediump vec4 _SpecularColor1;
uniform 	mediump vec4 _SpecularColor2;
uniform 	mediump vec4 _SpecularColor3;
uniform 	mediump vec4 _SpecularColor4;
uniform 	mediump vec4 _SpecularColor5;
uniform 	mediump vec4 _SpecularColor6;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
uvec2 u_xlatu2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
lowp vec3 u_xlat10_5;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
bvec3 u_xlatb8;
mediump float u_xlat16_9;
mediump vec2 u_xlat16_14;
mediump float u_xlat16_17;
bvec2 u_xlatb18;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
int u_xlati24;
bool u_xlatb24;
mediump float u_xlat16_25;
float u_xlat26;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_1.x = u_xlat10_0.w * 8.0;
    u_xlat16_1.x = roundEven(u_xlat16_1.x);
    u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb24 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb24){
        u_xlat10_24 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat2.yx).x;
        u_xlat16_9 = u_xlat10_24;
    } else {
        u_xlat16_9 = 1.0;
    //ENDIF
    }
    u_xlatb18.xy = lessThan(vec4(0.5, -0.5, 0.5, -0.5), u_xlat16_1.xxxx).xy;
    u_xlatb3.xy = lessThan(u_xlat16_1.xxxx, vec4(1.5, 0.5, 0.0, 0.0)).xy;
    u_xlatb18.x = u_xlatb18.x && u_xlatb3.x;
    u_xlatb18.y = u_xlatb18.y && u_xlatb3.y;
    if(u_xlatb18.x){
        u_xlat16_4.xyz = _SpecularColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(1.5<u_xlat16_1.x);
#else
        u_xlatb24 = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(u_xlat16_1.x<2.5);
#else
        u_xlatb3.x = u_xlat16_1.x<2.5;
#endif
        u_xlatb24 = u_xlatb24 && u_xlatb3.x;
        if(u_xlatb24){
            u_xlat16_4.xyz = _SpecularColor2.xyz;
        } else {
            u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
            u_xlatb5 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb3.x = u_xlatb3.x && u_xlatb5.x;
            u_xlatb3.y = u_xlatb3.y && u_xlatb5.y;
            u_xlatb3.z = u_xlatb3.z && u_xlatb5.z;
            u_xlatb3.w = u_xlatb3.w && u_xlatb5.w;
            u_xlat16_6.xyz = (u_xlatb3.w) ? _SpecularColor6.xyz : _SpecularColor0.xyz;
            u_xlat16_6.xyz = (u_xlatb3.z) ? _SpecularColor5.xyz : u_xlat16_6.xyz;
            u_xlat16_6.xyz = (u_xlatb3.y) ? _SpecularColor4.xyz : u_xlat16_6.xyz;
            u_xlat16_4.xyz = (u_xlatb3.x) ? _SpecularColor3.xyz : u_xlat16_6.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb18.y){
        SV_Target0.w = _BloomIntensity0;
    } else {
        if(u_xlatb18.x){
            SV_Target0.w = _BloomIntensity1;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb24 = !!(1.5<u_xlat16_1.x);
#else
            u_xlatb24 = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb18.x = !!(u_xlat16_1.x<2.5);
#else
            u_xlatb18.x = u_xlat16_1.x<2.5;
#endif
            u_xlatb24 = u_xlatb24 && u_xlatb18.x;
            if(u_xlatb24){
                SV_Target0.w = _BloomIntensity2;
            } else {
                u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
                u_xlatb5 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
                u_xlatb3.x = u_xlatb3.x && u_xlatb5.x;
                u_xlatb3.y = u_xlatb3.y && u_xlatb5.y;
                u_xlatb3.z = u_xlatb3.z && u_xlatb5.z;
                u_xlatb3.w = u_xlatb3.w && u_xlatb5.w;
                u_xlat16_1.x = (u_xlatb3.w) ? _BloomIntensity6 : _BloomIntensity7;
                u_xlat16_1.x = (u_xlatb3.z) ? _BloomIntensity5 : u_xlat16_1.x;
                u_xlat16_1.x = (u_xlatb3.y) ? _BloomIntensity4 : u_xlat16_1.x;
                SV_Target0.w = (u_xlatb3.x) ? _BloomIntensity3 : u_xlat16_1.x;
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb24){
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb24 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb24){
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb18.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb18.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat24 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat24 = vs_TEXCOORD2.z * 17.0 + (-u_xlat24);
            u_xlat24 = u_xlat24 + 0.99000001;
            u_xlat24 = floor(u_xlat24);
            u_xlat24 = max(u_xlat24, 0.0);
            u_xlati24 = int(u_xlat24);
            if((u_xlati24)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat10_24 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat26 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat16_1.xzw = u_xlat3.xyz * vec3(u_xlat26) + _LightPosDir.xyz;
    u_xlat16_28 = dot(u_xlat16_1.xzw, u_xlat16_1.xzw);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xzw = u_xlat16_1.xzw * vec3(u_xlat16_28);
    u_xlat26 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat3.xyz = vec3(u_xlat26) * vs_TEXCOORD4.xyz;
    u_xlat16_28 = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_28 = u_xlat16_28 * 0.5 + 0.5;
    u_xlat16_28 = dot(vec2(u_xlat16_28), u_xlat10_0.yy);
    u_xlat16_6.x = u_xlat16_9 * 0.099999994 + 0.400000006;
    u_xlat16_14.x = u_xlat16_9 + -0.5;
    u_xlat16_14.x = u_xlat16_14.x + u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_14.x * -2.0 + 3.0;
    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_14.x;
    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_22;
    u_xlat16_28 = u_xlat16_28 + (-u_xlat16_6.x);
    u_xlat16_28 = u_xlat16_14.x * u_xlat16_28 + u_xlat16_6.x;
    u_xlat16_6.x = (-u_xlat10_24) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_28 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb8.xz = lessThan(vec4(u_xlat16_28), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_28) + (-u_xlat16_6.xy);
    u_xlat16_28 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_28 = max(u_xlat16_28, 9.99999975e-05);
    u_xlat16_28 = u_xlat16_7.x / u_xlat16_28;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = u_xlat16_28 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_28 = (u_xlatb8.z) ? u_xlat16_28 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb8.x) ? u_xlat16_22 : u_xlat16_28;
    u_xlat16_6.y = 0.5;
    u_xlat10_5.xyz = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_1.x = dot(u_xlat3.xyz, u_xlat16_1.xzw);
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * _SpecularShininess;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat8 = u_xlat16_1.x * u_xlat16_9;
    u_xlat16_17 = dFdx(u_xlat8);
    u_xlat16_25 = dFdy(u_xlat8);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_28 = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_28) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9 * u_xlat16_1.x + (-u_xlat16_28);
    u_xlat16_9 = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9 * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9 = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9;
    u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_1.xxx;
    u_xlat16_1.xyz = u_xlat10_0.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_4.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_4.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_4.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-unity_SHC.xyz);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_4.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = u_xlat16_0.xyz * _CharacterSHColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_MULTI_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor0;
uniform 	mediump vec4 _SpecularColor1;
uniform 	mediump vec4 _SpecularColor2;
uniform 	mediump vec4 _SpecularColor3;
uniform 	mediump vec4 _SpecularColor4;
uniform 	mediump vec4 _SpecularColor5;
uniform 	mediump vec4 _SpecularColor6;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
uvec2 u_xlatu2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
lowp vec3 u_xlat10_5;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
bvec3 u_xlatb8;
mediump float u_xlat16_9;
mediump vec2 u_xlat16_14;
mediump float u_xlat16_17;
bvec2 u_xlatb18;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
int u_xlati24;
bool u_xlatb24;
mediump float u_xlat16_25;
float u_xlat26;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_1.x = u_xlat10_0.w * 8.0;
    u_xlat16_1.x = roundEven(u_xlat16_1.x);
    u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb24 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb24){
        u_xlat10_24 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat2.yx).x;
        u_xlat16_9 = u_xlat10_24;
    } else {
        u_xlat16_9 = 1.0;
    //ENDIF
    }
    u_xlatb18.xy = lessThan(vec4(0.5, -0.5, 0.5, -0.5), u_xlat16_1.xxxx).xy;
    u_xlatb3.xy = lessThan(u_xlat16_1.xxxx, vec4(1.5, 0.5, 0.0, 0.0)).xy;
    u_xlatb18.x = u_xlatb18.x && u_xlatb3.x;
    u_xlatb18.y = u_xlatb18.y && u_xlatb3.y;
    if(u_xlatb18.x){
        u_xlat16_4.xyz = _SpecularColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(1.5<u_xlat16_1.x);
#else
        u_xlatb24 = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(u_xlat16_1.x<2.5);
#else
        u_xlatb3.x = u_xlat16_1.x<2.5;
#endif
        u_xlatb24 = u_xlatb24 && u_xlatb3.x;
        if(u_xlatb24){
            u_xlat16_4.xyz = _SpecularColor2.xyz;
        } else {
            u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
            u_xlatb5 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb3.x = u_xlatb3.x && u_xlatb5.x;
            u_xlatb3.y = u_xlatb3.y && u_xlatb5.y;
            u_xlatb3.z = u_xlatb3.z && u_xlatb5.z;
            u_xlatb3.w = u_xlatb3.w && u_xlatb5.w;
            u_xlat16_6.xyz = (u_xlatb3.w) ? _SpecularColor6.xyz : _SpecularColor0.xyz;
            u_xlat16_6.xyz = (u_xlatb3.z) ? _SpecularColor5.xyz : u_xlat16_6.xyz;
            u_xlat16_6.xyz = (u_xlatb3.y) ? _SpecularColor4.xyz : u_xlat16_6.xyz;
            u_xlat16_4.xyz = (u_xlatb3.x) ? _SpecularColor3.xyz : u_xlat16_6.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb18.y){
        SV_Target0.w = _BloomIntensity0;
    } else {
        if(u_xlatb18.x){
            SV_Target0.w = _BloomIntensity1;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb24 = !!(1.5<u_xlat16_1.x);
#else
            u_xlatb24 = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb18.x = !!(u_xlat16_1.x<2.5);
#else
            u_xlatb18.x = u_xlat16_1.x<2.5;
#endif
            u_xlatb24 = u_xlatb24 && u_xlatb18.x;
            if(u_xlatb24){
                SV_Target0.w = _BloomIntensity2;
            } else {
                u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
                u_xlatb5 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
                u_xlatb3.x = u_xlatb3.x && u_xlatb5.x;
                u_xlatb3.y = u_xlatb3.y && u_xlatb5.y;
                u_xlatb3.z = u_xlatb3.z && u_xlatb5.z;
                u_xlatb3.w = u_xlatb3.w && u_xlatb5.w;
                u_xlat16_1.x = (u_xlatb3.w) ? _BloomIntensity6 : _BloomIntensity7;
                u_xlat16_1.x = (u_xlatb3.z) ? _BloomIntensity5 : u_xlat16_1.x;
                u_xlat16_1.x = (u_xlatb3.y) ? _BloomIntensity4 : u_xlat16_1.x;
                SV_Target0.w = (u_xlatb3.x) ? _BloomIntensity3 : u_xlat16_1.x;
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb24){
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb24 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb24){
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb18.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb18.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat24 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat24 = vs_TEXCOORD2.z * 17.0 + (-u_xlat24);
            u_xlat24 = u_xlat24 + 0.99000001;
            u_xlat24 = floor(u_xlat24);
            u_xlat24 = max(u_xlat24, 0.0);
            u_xlati24 = int(u_xlat24);
            if((u_xlati24)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat10_24 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat26 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat16_1.xzw = u_xlat3.xyz * vec3(u_xlat26) + _LightPosDir.xyz;
    u_xlat16_28 = dot(u_xlat16_1.xzw, u_xlat16_1.xzw);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xzw = u_xlat16_1.xzw * vec3(u_xlat16_28);
    u_xlat26 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat3.xyz = vec3(u_xlat26) * vs_TEXCOORD4.xyz;
    u_xlat16_28 = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_28 = u_xlat16_28 * 0.5 + 0.5;
    u_xlat16_28 = dot(vec2(u_xlat16_28), u_xlat10_0.yy);
    u_xlat16_6.x = u_xlat16_9 * 0.099999994 + 0.400000006;
    u_xlat16_14.x = u_xlat16_9 + -0.5;
    u_xlat16_14.x = u_xlat16_14.x + u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_14.x * -2.0 + 3.0;
    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_14.x;
    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_22;
    u_xlat16_28 = u_xlat16_28 + (-u_xlat16_6.x);
    u_xlat16_28 = u_xlat16_14.x * u_xlat16_28 + u_xlat16_6.x;
    u_xlat16_6.x = (-u_xlat10_24) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_28 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb8.xz = lessThan(vec4(u_xlat16_28), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_28) + (-u_xlat16_6.xy);
    u_xlat16_28 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_28 = max(u_xlat16_28, 9.99999975e-05);
    u_xlat16_28 = u_xlat16_7.x / u_xlat16_28;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = u_xlat16_28 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_28 = (u_xlatb8.z) ? u_xlat16_28 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb8.x) ? u_xlat16_22 : u_xlat16_28;
    u_xlat16_6.y = 0.5;
    u_xlat10_5.xyz = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_1.x = dot(u_xlat3.xyz, u_xlat16_1.xzw);
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * _SpecularShininess;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat8 = u_xlat16_1.x * u_xlat16_9;
    u_xlat16_17 = dFdx(u_xlat8);
    u_xlat16_25 = dFdy(u_xlat8);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_28 = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_28) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9 * u_xlat16_1.x + (-u_xlat16_28);
    u_xlat16_9 = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9 * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9 = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9;
    u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_1.xxx;
    u_xlat16_1.xyz = u_xlat10_0.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_4.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_4.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_4.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-unity_SHC.xyz);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_4.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = u_xlat16_0.xyz * _CharacterSHColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_MULTI_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor0;
uniform 	mediump vec4 _SpecularColor1;
uniform 	mediump vec4 _SpecularColor2;
uniform 	mediump vec4 _SpecularColor3;
uniform 	mediump vec4 _SpecularColor4;
uniform 	mediump vec4 _SpecularColor5;
uniform 	mediump vec4 _SpecularColor6;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
uvec2 u_xlatu2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
lowp vec3 u_xlat10_5;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
bvec3 u_xlatb8;
mediump float u_xlat16_9;
mediump vec2 u_xlat16_14;
mediump float u_xlat16_17;
bvec2 u_xlatb18;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
int u_xlati24;
bool u_xlatb24;
mediump float u_xlat16_25;
float u_xlat26;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_1.x = u_xlat10_0.w * 8.0;
    u_xlat16_1.x = roundEven(u_xlat16_1.x);
    u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb24 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb24){
        u_xlat10_24 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat2.yx).x;
        u_xlat16_9 = u_xlat10_24;
    } else {
        u_xlat16_9 = 1.0;
    //ENDIF
    }
    u_xlatb18.xy = lessThan(vec4(0.5, -0.5, 0.5, -0.5), u_xlat16_1.xxxx).xy;
    u_xlatb3.xy = lessThan(u_xlat16_1.xxxx, vec4(1.5, 0.5, 0.0, 0.0)).xy;
    u_xlatb18.x = u_xlatb18.x && u_xlatb3.x;
    u_xlatb18.y = u_xlatb18.y && u_xlatb3.y;
    if(u_xlatb18.x){
        u_xlat16_4.xyz = _SpecularColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(1.5<u_xlat16_1.x);
#else
        u_xlatb24 = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(u_xlat16_1.x<2.5);
#else
        u_xlatb3.x = u_xlat16_1.x<2.5;
#endif
        u_xlatb24 = u_xlatb24 && u_xlatb3.x;
        if(u_xlatb24){
            u_xlat16_4.xyz = _SpecularColor2.xyz;
        } else {
            u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
            u_xlatb5 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb3.x = u_xlatb3.x && u_xlatb5.x;
            u_xlatb3.y = u_xlatb3.y && u_xlatb5.y;
            u_xlatb3.z = u_xlatb3.z && u_xlatb5.z;
            u_xlatb3.w = u_xlatb3.w && u_xlatb5.w;
            u_xlat16_6.xyz = (u_xlatb3.w) ? _SpecularColor6.xyz : _SpecularColor0.xyz;
            u_xlat16_6.xyz = (u_xlatb3.z) ? _SpecularColor5.xyz : u_xlat16_6.xyz;
            u_xlat16_6.xyz = (u_xlatb3.y) ? _SpecularColor4.xyz : u_xlat16_6.xyz;
            u_xlat16_4.xyz = (u_xlatb3.x) ? _SpecularColor3.xyz : u_xlat16_6.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb18.y){
        SV_Target0.w = _BloomIntensity0;
    } else {
        if(u_xlatb18.x){
            SV_Target0.w = _BloomIntensity1;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb24 = !!(1.5<u_xlat16_1.x);
#else
            u_xlatb24 = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb18.x = !!(u_xlat16_1.x<2.5);
#else
            u_xlatb18.x = u_xlat16_1.x<2.5;
#endif
            u_xlatb24 = u_xlatb24 && u_xlatb18.x;
            if(u_xlatb24){
                SV_Target0.w = _BloomIntensity2;
            } else {
                u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
                u_xlatb5 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
                u_xlatb3.x = u_xlatb3.x && u_xlatb5.x;
                u_xlatb3.y = u_xlatb3.y && u_xlatb5.y;
                u_xlatb3.z = u_xlatb3.z && u_xlatb5.z;
                u_xlatb3.w = u_xlatb3.w && u_xlatb5.w;
                u_xlat16_1.x = (u_xlatb3.w) ? _BloomIntensity6 : _BloomIntensity7;
                u_xlat16_1.x = (u_xlatb3.z) ? _BloomIntensity5 : u_xlat16_1.x;
                u_xlat16_1.x = (u_xlatb3.y) ? _BloomIntensity4 : u_xlat16_1.x;
                SV_Target0.w = (u_xlatb3.x) ? _BloomIntensity3 : u_xlat16_1.x;
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb24){
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb24 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb24){
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb18.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb18.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat24 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat24 = vs_TEXCOORD2.z * 17.0 + (-u_xlat24);
            u_xlat24 = u_xlat24 + 0.99000001;
            u_xlat24 = floor(u_xlat24);
            u_xlat24 = max(u_xlat24, 0.0);
            u_xlati24 = int(u_xlat24);
            if((u_xlati24)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat10_24 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat26 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat16_1.xzw = u_xlat3.xyz * vec3(u_xlat26) + _LightPosDir.xyz;
    u_xlat16_28 = dot(u_xlat16_1.xzw, u_xlat16_1.xzw);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_1.xzw = u_xlat16_1.xzw * vec3(u_xlat16_28);
    u_xlat26 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat3.xyz = vec3(u_xlat26) * vs_TEXCOORD4.xyz;
    u_xlat16_28 = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_28 = u_xlat16_28 * 0.5 + 0.5;
    u_xlat16_28 = dot(vec2(u_xlat16_28), u_xlat10_0.yy);
    u_xlat16_6.x = u_xlat16_9 * 0.099999994 + 0.400000006;
    u_xlat16_14.x = u_xlat16_9 + -0.5;
    u_xlat16_14.x = u_xlat16_14.x + u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_14.x * -2.0 + 3.0;
    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_14.x;
    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_22;
    u_xlat16_28 = u_xlat16_28 + (-u_xlat16_6.x);
    u_xlat16_28 = u_xlat16_14.x * u_xlat16_28 + u_xlat16_6.x;
    u_xlat16_6.x = (-u_xlat10_24) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_28 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb8.xz = lessThan(vec4(u_xlat16_28), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_28) + (-u_xlat16_6.xy);
    u_xlat16_28 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_28 = max(u_xlat16_28, 9.99999975e-05);
    u_xlat16_28 = u_xlat16_7.x / u_xlat16_28;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = u_xlat16_28 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_28 = (u_xlatb8.z) ? u_xlat16_28 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb8.x) ? u_xlat16_22 : u_xlat16_28;
    u_xlat16_6.y = 0.5;
    u_xlat10_5.xyz = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_1.x = dot(u_xlat3.xyz, u_xlat16_1.xzw);
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * _SpecularShininess;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat8 = u_xlat16_1.x * u_xlat16_9;
    u_xlat16_17 = dFdx(u_xlat8);
    u_xlat16_25 = dFdy(u_xlat8);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_28 = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_28) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9 * u_xlat16_1.x + (-u_xlat16_28);
    u_xlat16_9 = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9 * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9 = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9;
    u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_1.xxx;
    u_xlat16_1.xyz = u_xlat10_0.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_4.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_4.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_4.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-unity_SHC.xyz);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_4.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = u_xlat16_0.xyz * _CharacterSHColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_MULTI_BLOOM_ON" "_MULTI_DIFFUSE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampMuitiTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
uvec2 u_xlatu2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_5;
lowp vec3 u_xlat10_6;
bvec3 u_xlatb7;
mediump vec3 u_xlat16_8;
mediump vec2 u_xlat16_11;
mediump float u_xlat16_15;
bvec2 u_xlatb16;
mediump vec2 u_xlat16_18;
float u_xlat21;
lowp float u_xlat10_21;
int u_xlati21;
bool u_xlatb21;
mediump float u_xlat16_22;
float u_xlat23;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_1.x = u_xlat10_0.w * 8.0;
    u_xlat16_1.x = roundEven(u_xlat16_1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(-0.5<u_xlat16_1.x);
#else
    u_xlatb21 = -0.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_1.x<0.5);
#else
    u_xlatb2.x = u_xlat16_1.x<0.5;
#endif
    u_xlatb21 = u_xlatb21 && u_xlatb2.x;
    if(u_xlatb21){
        SV_Target0.w = _BloomIntensity0;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(0.5<u_xlat16_1.x);
#else
        u_xlatb21 = 0.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb2.x = !!(u_xlat16_1.x<1.5);
#else
        u_xlatb2.x = u_xlat16_1.x<1.5;
#endif
        u_xlatb21 = u_xlatb21 && u_xlatb2.x;
        if(u_xlatb21){
            SV_Target0.w = _BloomIntensity1;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb21 = !!(1.5<u_xlat16_1.x);
#else
            u_xlatb21 = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb2.x = !!(u_xlat16_1.x<2.5);
#else
            u_xlatb2.x = u_xlat16_1.x<2.5;
#endif
            u_xlatb21 = u_xlatb21 && u_xlatb2.x;
            if(u_xlatb21){
                SV_Target0.w = _BloomIntensity2;
            } else {
                u_xlatb2 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
                u_xlatb3 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
                u_xlatb2.x = u_xlatb2.x && u_xlatb3.x;
                u_xlatb2.y = u_xlatb2.y && u_xlatb3.y;
                u_xlatb2.z = u_xlatb2.z && u_xlatb3.z;
                u_xlatb2.w = u_xlatb2.w && u_xlatb3.w;
                u_xlat16_8.x = (u_xlatb2.w) ? _BloomIntensity6 : _BloomIntensity7;
                u_xlat16_8.x = (u_xlatb2.z) ? _BloomIntensity5 : u_xlat16_8.x;
                u_xlat16_8.x = (u_xlatb2.y) ? _BloomIntensity4 : u_xlat16_8.x;
                SV_Target0.w = (u_xlatb2.x) ? _BloomIntensity3 : u_xlat16_8.x;
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb21){
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb21 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb21){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb16.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb16.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat21 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat21 = vs_TEXCOORD2.z * 17.0 + (-u_xlat21);
            u_xlat21 = u_xlat21 + 0.99000001;
            u_xlat21 = floor(u_xlat21);
            u_xlat21 = max(u_xlat21, 0.0);
            u_xlati21 = int(u_xlat21);
            if((u_xlati21)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat10_21 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat16_8.xyz = u_xlat3.xyz * vec3(u_xlat23) + _LightPosDir.xyz;
    u_xlat16_4.x = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_4.xxx;
    u_xlat23 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat3.xyz = vec3(u_xlat23) * vs_TEXCOORD4.xyz;
    u_xlat16_4.x = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.x = dot(u_xlat16_4.xx, u_xlat10_0.yy);
    u_xlat16_11.x = (-u_xlat10_21) + 1.0;
    u_xlat16_18.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_11.xy = u_xlat16_11.xx * u_xlat16_18.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_11.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_4.x / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb7.xz = lessThan(u_xlat16_4.xxxx, u_xlat16_11.xxyy).xz;
    u_xlat16_5.xy = (-u_xlat16_11.xy) + u_xlat16_4.xx;
    u_xlat16_4.x = (-u_xlat16_11.x) + u_xlat16_11.y;
    u_xlat16_4.x = max(u_xlat16_4.x, 9.99999975e-05);
    u_xlat16_4.x = u_xlat16_5.x / u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.25;
    u_xlat16_11.x = (-u_xlat16_11.y) + 1.0;
    u_xlat16_11.x = max(u_xlat16_11.x, 9.99999975e-05);
    u_xlat16_11.x = u_xlat16_5.y / u_xlat16_11.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat16_11.x = u_xlat16_11.x * 0.25 + 0.75;
    u_xlat16_4.x = (u_xlatb7.z) ? u_xlat16_4.x : u_xlat16_11.x;
    u_xlat16_4.x = (u_xlatb7.x) ? u_xlat16_25 : u_xlat16_4.x;
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + 1.0;
    u_xlat16_4.y = u_xlat16_1.x * 0.0625;
    u_xlat10_6.xyz = texture(_DiffuseRampMuitiTex, u_xlat16_4.xy).xyz;
    u_xlat16_1.x = dot(u_xlat3.xyz, u_xlat16_8.xyz);
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * _SpecularShininess;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat16_8.x = dFdx(u_xlat16_1.x);
    u_xlat16_15 = dFdy(u_xlat16_1.x);
    u_xlat16_8.x = abs(u_xlat16_15) + abs(u_xlat16_8.x);
    u_xlat16_15 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_8.x) + u_xlat16_15;
    u_xlat16_1.y = u_xlat16_8.x + u_xlat16_15;
    u_xlat16_1.xy = (-vec2(u_xlat16_22)) + u_xlat16_1.xy;
    u_xlat16_8.x = float(1.0) / u_xlat16_1.y;
    u_xlat16_1.x = u_xlat16_8.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_0.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_6.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_4.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_4.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_4.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-unity_SHC.xyz);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_4.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = u_xlat16_0.xyz * _CharacterSHColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_MULTI_BLOOM_ON" "_MULTI_DIFFUSE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampMuitiTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
uvec2 u_xlatu2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_5;
lowp vec3 u_xlat10_6;
bvec3 u_xlatb7;
mediump vec3 u_xlat16_8;
mediump vec2 u_xlat16_11;
mediump float u_xlat16_15;
bvec2 u_xlatb16;
mediump vec2 u_xlat16_18;
float u_xlat21;
lowp float u_xlat10_21;
int u_xlati21;
bool u_xlatb21;
mediump float u_xlat16_22;
float u_xlat23;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_1.x = u_xlat10_0.w * 8.0;
    u_xlat16_1.x = roundEven(u_xlat16_1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(-0.5<u_xlat16_1.x);
#else
    u_xlatb21 = -0.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_1.x<0.5);
#else
    u_xlatb2.x = u_xlat16_1.x<0.5;
#endif
    u_xlatb21 = u_xlatb21 && u_xlatb2.x;
    if(u_xlatb21){
        SV_Target0.w = _BloomIntensity0;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(0.5<u_xlat16_1.x);
#else
        u_xlatb21 = 0.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb2.x = !!(u_xlat16_1.x<1.5);
#else
        u_xlatb2.x = u_xlat16_1.x<1.5;
#endif
        u_xlatb21 = u_xlatb21 && u_xlatb2.x;
        if(u_xlatb21){
            SV_Target0.w = _BloomIntensity1;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb21 = !!(1.5<u_xlat16_1.x);
#else
            u_xlatb21 = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb2.x = !!(u_xlat16_1.x<2.5);
#else
            u_xlatb2.x = u_xlat16_1.x<2.5;
#endif
            u_xlatb21 = u_xlatb21 && u_xlatb2.x;
            if(u_xlatb21){
                SV_Target0.w = _BloomIntensity2;
            } else {
                u_xlatb2 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
                u_xlatb3 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
                u_xlatb2.x = u_xlatb2.x && u_xlatb3.x;
                u_xlatb2.y = u_xlatb2.y && u_xlatb3.y;
                u_xlatb2.z = u_xlatb2.z && u_xlatb3.z;
                u_xlatb2.w = u_xlatb2.w && u_xlatb3.w;
                u_xlat16_8.x = (u_xlatb2.w) ? _BloomIntensity6 : _BloomIntensity7;
                u_xlat16_8.x = (u_xlatb2.z) ? _BloomIntensity5 : u_xlat16_8.x;
                u_xlat16_8.x = (u_xlatb2.y) ? _BloomIntensity4 : u_xlat16_8.x;
                SV_Target0.w = (u_xlatb2.x) ? _BloomIntensity3 : u_xlat16_8.x;
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb21){
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb21 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb21){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb16.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb16.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat21 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat21 = vs_TEXCOORD2.z * 17.0 + (-u_xlat21);
            u_xlat21 = u_xlat21 + 0.99000001;
            u_xlat21 = floor(u_xlat21);
            u_xlat21 = max(u_xlat21, 0.0);
            u_xlati21 = int(u_xlat21);
            if((u_xlati21)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat10_21 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat16_8.xyz = u_xlat3.xyz * vec3(u_xlat23) + _LightPosDir.xyz;
    u_xlat16_4.x = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_4.xxx;
    u_xlat23 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat3.xyz = vec3(u_xlat23) * vs_TEXCOORD4.xyz;
    u_xlat16_4.x = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.x = dot(u_xlat16_4.xx, u_xlat10_0.yy);
    u_xlat16_11.x = (-u_xlat10_21) + 1.0;
    u_xlat16_18.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_11.xy = u_xlat16_11.xx * u_xlat16_18.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_11.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_4.x / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb7.xz = lessThan(u_xlat16_4.xxxx, u_xlat16_11.xxyy).xz;
    u_xlat16_5.xy = (-u_xlat16_11.xy) + u_xlat16_4.xx;
    u_xlat16_4.x = (-u_xlat16_11.x) + u_xlat16_11.y;
    u_xlat16_4.x = max(u_xlat16_4.x, 9.99999975e-05);
    u_xlat16_4.x = u_xlat16_5.x / u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.25;
    u_xlat16_11.x = (-u_xlat16_11.y) + 1.0;
    u_xlat16_11.x = max(u_xlat16_11.x, 9.99999975e-05);
    u_xlat16_11.x = u_xlat16_5.y / u_xlat16_11.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat16_11.x = u_xlat16_11.x * 0.25 + 0.75;
    u_xlat16_4.x = (u_xlatb7.z) ? u_xlat16_4.x : u_xlat16_11.x;
    u_xlat16_4.x = (u_xlatb7.x) ? u_xlat16_25 : u_xlat16_4.x;
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + 1.0;
    u_xlat16_4.y = u_xlat16_1.x * 0.0625;
    u_xlat10_6.xyz = texture(_DiffuseRampMuitiTex, u_xlat16_4.xy).xyz;
    u_xlat16_1.x = dot(u_xlat3.xyz, u_xlat16_8.xyz);
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * _SpecularShininess;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat16_8.x = dFdx(u_xlat16_1.x);
    u_xlat16_15 = dFdy(u_xlat16_1.x);
    u_xlat16_8.x = abs(u_xlat16_15) + abs(u_xlat16_8.x);
    u_xlat16_15 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_8.x) + u_xlat16_15;
    u_xlat16_1.y = u_xlat16_8.x + u_xlat16_15;
    u_xlat16_1.xy = (-vec2(u_xlat16_22)) + u_xlat16_1.xy;
    u_xlat16_8.x = float(1.0) / u_xlat16_1.y;
    u_xlat16_1.x = u_xlat16_8.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_0.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_6.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_4.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_4.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_4.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-unity_SHC.xyz);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_4.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = u_xlat16_0.xyz * _CharacterSHColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_MULTI_BLOOM_ON" "_MULTI_DIFFUSE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampMuitiTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
uvec2 u_xlatu2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_5;
lowp vec3 u_xlat10_6;
bvec3 u_xlatb7;
mediump vec3 u_xlat16_8;
mediump vec2 u_xlat16_11;
mediump float u_xlat16_15;
bvec2 u_xlatb16;
mediump vec2 u_xlat16_18;
float u_xlat21;
lowp float u_xlat10_21;
int u_xlati21;
bool u_xlatb21;
mediump float u_xlat16_22;
float u_xlat23;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_1.x = u_xlat10_0.w * 8.0;
    u_xlat16_1.x = roundEven(u_xlat16_1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(-0.5<u_xlat16_1.x);
#else
    u_xlatb21 = -0.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_1.x<0.5);
#else
    u_xlatb2.x = u_xlat16_1.x<0.5;
#endif
    u_xlatb21 = u_xlatb21 && u_xlatb2.x;
    if(u_xlatb21){
        SV_Target0.w = _BloomIntensity0;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(0.5<u_xlat16_1.x);
#else
        u_xlatb21 = 0.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb2.x = !!(u_xlat16_1.x<1.5);
#else
        u_xlatb2.x = u_xlat16_1.x<1.5;
#endif
        u_xlatb21 = u_xlatb21 && u_xlatb2.x;
        if(u_xlatb21){
            SV_Target0.w = _BloomIntensity1;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb21 = !!(1.5<u_xlat16_1.x);
#else
            u_xlatb21 = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb2.x = !!(u_xlat16_1.x<2.5);
#else
            u_xlatb2.x = u_xlat16_1.x<2.5;
#endif
            u_xlatb21 = u_xlatb21 && u_xlatb2.x;
            if(u_xlatb21){
                SV_Target0.w = _BloomIntensity2;
            } else {
                u_xlatb2 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
                u_xlatb3 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
                u_xlatb2.x = u_xlatb2.x && u_xlatb3.x;
                u_xlatb2.y = u_xlatb2.y && u_xlatb3.y;
                u_xlatb2.z = u_xlatb2.z && u_xlatb3.z;
                u_xlatb2.w = u_xlatb2.w && u_xlatb3.w;
                u_xlat16_8.x = (u_xlatb2.w) ? _BloomIntensity6 : _BloomIntensity7;
                u_xlat16_8.x = (u_xlatb2.z) ? _BloomIntensity5 : u_xlat16_8.x;
                u_xlat16_8.x = (u_xlatb2.y) ? _BloomIntensity4 : u_xlat16_8.x;
                SV_Target0.w = (u_xlatb2.x) ? _BloomIntensity3 : u_xlat16_8.x;
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb21){
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb21 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb21){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb16.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb16.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat21 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat21 = vs_TEXCOORD2.z * 17.0 + (-u_xlat21);
            u_xlat21 = u_xlat21 + 0.99000001;
            u_xlat21 = floor(u_xlat21);
            u_xlat21 = max(u_xlat21, 0.0);
            u_xlati21 = int(u_xlat21);
            if((u_xlati21)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat10_21 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat16_8.xyz = u_xlat3.xyz * vec3(u_xlat23) + _LightPosDir.xyz;
    u_xlat16_4.x = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_4.xxx;
    u_xlat23 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat3.xyz = vec3(u_xlat23) * vs_TEXCOORD4.xyz;
    u_xlat16_4.x = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.x = dot(u_xlat16_4.xx, u_xlat10_0.yy);
    u_xlat16_11.x = (-u_xlat10_21) + 1.0;
    u_xlat16_18.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_11.xy = u_xlat16_11.xx * u_xlat16_18.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_11.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_4.x / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb7.xz = lessThan(u_xlat16_4.xxxx, u_xlat16_11.xxyy).xz;
    u_xlat16_5.xy = (-u_xlat16_11.xy) + u_xlat16_4.xx;
    u_xlat16_4.x = (-u_xlat16_11.x) + u_xlat16_11.y;
    u_xlat16_4.x = max(u_xlat16_4.x, 9.99999975e-05);
    u_xlat16_4.x = u_xlat16_5.x / u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.25;
    u_xlat16_11.x = (-u_xlat16_11.y) + 1.0;
    u_xlat16_11.x = max(u_xlat16_11.x, 9.99999975e-05);
    u_xlat16_11.x = u_xlat16_5.y / u_xlat16_11.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat16_11.x = u_xlat16_11.x * 0.25 + 0.75;
    u_xlat16_4.x = (u_xlatb7.z) ? u_xlat16_4.x : u_xlat16_11.x;
    u_xlat16_4.x = (u_xlatb7.x) ? u_xlat16_25 : u_xlat16_4.x;
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + 1.0;
    u_xlat16_4.y = u_xlat16_1.x * 0.0625;
    u_xlat10_6.xyz = texture(_DiffuseRampMuitiTex, u_xlat16_4.xy).xyz;
    u_xlat16_1.x = dot(u_xlat3.xyz, u_xlat16_8.xyz);
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * _SpecularShininess;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat16_8.x = dFdx(u_xlat16_1.x);
    u_xlat16_15 = dFdy(u_xlat16_1.x);
    u_xlat16_8.x = abs(u_xlat16_15) + abs(u_xlat16_8.x);
    u_xlat16_15 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_8.x) + u_xlat16_15;
    u_xlat16_1.y = u_xlat16_8.x + u_xlat16_15;
    u_xlat16_1.xy = (-vec2(u_xlat16_22)) + u_xlat16_1.xy;
    u_xlat16_8.x = float(1.0) / u_xlat16_1.y;
    u_xlat16_1.x = u_xlat16_8.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_0.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_6.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_4.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_4.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_4.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-unity_SHC.xyz);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_4.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = u_xlat16_0.xyz * _CharacterSHColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_MULTI_DIFFUSE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampMuitiTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
uvec2 u_xlatu2;
vec4 u_xlat3;
bvec4 u_xlatb3;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec2 u_xlat16_6;
float u_xlat7;
bvec3 u_xlatb7;
mediump float u_xlat16_8;
mediump float u_xlat16_15;
bvec2 u_xlatb16;
mediump vec2 u_xlat16_20;
float u_xlat21;
lowp float u_xlat10_21;
int u_xlati21;
bool u_xlatb21;
mediump float u_xlat16_22;
float u_xlat23;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_1.x = u_xlat10_0.w * 8.0;
    u_xlat16_1.x = roundEven(u_xlat16_1.x);
    u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb21 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb21){
        u_xlat10_21 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat2.yx).x;
        u_xlat16_8 = u_xlat10_21;
    } else {
        u_xlat16_8 = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(-0.5<u_xlat16_1.x);
#else
    u_xlatb21 = -0.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(u_xlat16_1.x<0.5);
#else
    u_xlatb16.x = u_xlat16_1.x<0.5;
#endif
    u_xlatb21 = u_xlatb21 && u_xlatb16.x;
    if(u_xlatb21){
        SV_Target0.w = _BloomIntensity0;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(0.5<u_xlat16_1.x);
#else
        u_xlatb21 = 0.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(u_xlat16_1.x<1.5);
#else
        u_xlatb16.x = u_xlat16_1.x<1.5;
#endif
        u_xlatb21 = u_xlatb21 && u_xlatb16.x;
        if(u_xlatb21){
            SV_Target0.w = _BloomIntensity1;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb21 = !!(1.5<u_xlat16_1.x);
#else
            u_xlatb21 = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb16.x = !!(u_xlat16_1.x<2.5);
#else
            u_xlatb16.x = u_xlat16_1.x<2.5;
#endif
            u_xlatb21 = u_xlatb21 && u_xlatb16.x;
            if(u_xlatb21){
                SV_Target0.w = _BloomIntensity2;
            } else {
                u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
                u_xlatb4 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
                u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
                u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
                u_xlatb3.z = u_xlatb3.z && u_xlatb4.z;
                u_xlatb3.w = u_xlatb3.w && u_xlatb4.w;
                u_xlat16_15 = (u_xlatb3.w) ? _BloomIntensity6 : _BloomIntensity7;
                u_xlat16_15 = (u_xlatb3.z) ? _BloomIntensity5 : u_xlat16_15;
                u_xlat16_15 = (u_xlatb3.y) ? _BloomIntensity4 : u_xlat16_15;
                SV_Target0.w = (u_xlatb3.x) ? _BloomIntensity3 : u_xlat16_15;
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb21){
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb21 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb21){
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb16.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb16.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat21 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat21 = vs_TEXCOORD2.z * 17.0 + (-u_xlat21);
            u_xlat21 = u_xlat21 + 0.99000001;
            u_xlat21 = floor(u_xlat21);
            u_xlat21 = max(u_xlat21, 0.0);
            u_xlati21 = int(u_xlat21);
            if((u_xlati21)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat10_21 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat23) + _LightPosDir.xyz;
    u_xlat16_15 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_15 = inversesqrt(u_xlat16_15);
    u_xlat16_5.xyz = vec3(u_xlat16_15) * u_xlat16_5.xyz;
    u_xlat23 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat3.xyz = vec3(u_xlat23) * vs_TEXCOORD4.xyz;
    u_xlat16_15 = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
    u_xlat16_15 = dot(vec2(u_xlat16_15), u_xlat10_0.yy);
    u_xlat16_22 = u_xlat16_8 * 0.099999994 + 0.400000006;
    u_xlat16_26 = u_xlat16_8 + -0.5;
    u_xlat16_26 = u_xlat16_26 + u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_26 * -2.0 + 3.0;
    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;
    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;
    u_xlat16_15 = (-u_xlat16_22) + u_xlat16_15;
    u_xlat16_15 = u_xlat16_26 * u_xlat16_15 + u_xlat16_22;
    u_xlat16_22 = (-u_xlat10_21) + 1.0;
    u_xlat16_6.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = vec2(u_xlat16_22) * u_xlat16_6.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_15 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb7.xz = lessThan(vec4(u_xlat16_15), u_xlat16_6.xxyy).xz;
    u_xlat16_20.xy = vec2(u_xlat16_15) + (-u_xlat16_6.xy);
    u_xlat16_15 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_15 = max(u_xlat16_15, 9.99999975e-05);
    u_xlat16_15 = u_xlat16_20.x / u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.25;
    u_xlat16_26 = (-u_xlat16_6.y) + 1.0;
    u_xlat16_26 = max(u_xlat16_26, 9.99999975e-05);
    u_xlat16_26 = u_xlat16_20.y / u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_26 * 0.25 + 0.75;
    u_xlat16_15 = (u_xlatb7.z) ? u_xlat16_15 : u_xlat16_26;
    u_xlat16_6.x = (u_xlatb7.x) ? u_xlat16_22 : u_xlat16_15;
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + 1.0;
    u_xlat16_6.y = u_xlat16_1.x * 0.0625;
    u_xlat10_4.xyz = texture(_DiffuseRampMuitiTex, u_xlat16_6.xy).xyz;
    u_xlat16_1.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * _SpecularShininess;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat7 = u_xlat16_1.x * u_xlat16_8;
    u_xlat16_15 = dFdx(u_xlat7);
    u_xlat16_22 = dFdy(u_xlat7);
    u_xlat16_15 = abs(u_xlat16_22) + abs(u_xlat16_15);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_5.x = (-u_xlat16_15) + u_xlat16_22;
    u_xlat16_15 = u_xlat16_15 + u_xlat16_22;
    u_xlat16_15 = (-u_xlat16_5.x) + u_xlat16_15;
    u_xlat16_1.x = u_xlat16_8 * u_xlat16_1.x + (-u_xlat16_5.x);
    u_xlat16_8 = float(1.0) / u_xlat16_15;
    u_xlat16_1.x = u_xlat16_8 * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8 = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_0.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_5.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_5.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_5.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-unity_SHC.xyz);
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_5.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_5.xyz = u_xlat16_0.xyz * _CharacterSHColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_MULTI_DIFFUSE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampMuitiTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
uvec2 u_xlatu2;
vec4 u_xlat3;
bvec4 u_xlatb3;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec2 u_xlat16_6;
float u_xlat7;
bvec3 u_xlatb7;
mediump float u_xlat16_8;
mediump float u_xlat16_15;
bvec2 u_xlatb16;
mediump vec2 u_xlat16_20;
float u_xlat21;
lowp float u_xlat10_21;
int u_xlati21;
bool u_xlatb21;
mediump float u_xlat16_22;
float u_xlat23;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_1.x = u_xlat10_0.w * 8.0;
    u_xlat16_1.x = roundEven(u_xlat16_1.x);
    u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb21 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb21){
        u_xlat10_21 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat2.yx).x;
        u_xlat16_8 = u_xlat10_21;
    } else {
        u_xlat16_8 = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(-0.5<u_xlat16_1.x);
#else
    u_xlatb21 = -0.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(u_xlat16_1.x<0.5);
#else
    u_xlatb16.x = u_xlat16_1.x<0.5;
#endif
    u_xlatb21 = u_xlatb21 && u_xlatb16.x;
    if(u_xlatb21){
        SV_Target0.w = _BloomIntensity0;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(0.5<u_xlat16_1.x);
#else
        u_xlatb21 = 0.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(u_xlat16_1.x<1.5);
#else
        u_xlatb16.x = u_xlat16_1.x<1.5;
#endif
        u_xlatb21 = u_xlatb21 && u_xlatb16.x;
        if(u_xlatb21){
            SV_Target0.w = _BloomIntensity1;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb21 = !!(1.5<u_xlat16_1.x);
#else
            u_xlatb21 = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb16.x = !!(u_xlat16_1.x<2.5);
#else
            u_xlatb16.x = u_xlat16_1.x<2.5;
#endif
            u_xlatb21 = u_xlatb21 && u_xlatb16.x;
            if(u_xlatb21){
                SV_Target0.w = _BloomIntensity2;
            } else {
                u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
                u_xlatb4 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
                u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
                u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
                u_xlatb3.z = u_xlatb3.z && u_xlatb4.z;
                u_xlatb3.w = u_xlatb3.w && u_xlatb4.w;
                u_xlat16_15 = (u_xlatb3.w) ? _BloomIntensity6 : _BloomIntensity7;
                u_xlat16_15 = (u_xlatb3.z) ? _BloomIntensity5 : u_xlat16_15;
                u_xlat16_15 = (u_xlatb3.y) ? _BloomIntensity4 : u_xlat16_15;
                SV_Target0.w = (u_xlatb3.x) ? _BloomIntensity3 : u_xlat16_15;
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb21){
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb21 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb21){
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb16.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb16.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat21 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat21 = vs_TEXCOORD2.z * 17.0 + (-u_xlat21);
            u_xlat21 = u_xlat21 + 0.99000001;
            u_xlat21 = floor(u_xlat21);
            u_xlat21 = max(u_xlat21, 0.0);
            u_xlati21 = int(u_xlat21);
            if((u_xlati21)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat10_21 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat23) + _LightPosDir.xyz;
    u_xlat16_15 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_15 = inversesqrt(u_xlat16_15);
    u_xlat16_5.xyz = vec3(u_xlat16_15) * u_xlat16_5.xyz;
    u_xlat23 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat3.xyz = vec3(u_xlat23) * vs_TEXCOORD4.xyz;
    u_xlat16_15 = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
    u_xlat16_15 = dot(vec2(u_xlat16_15), u_xlat10_0.yy);
    u_xlat16_22 = u_xlat16_8 * 0.099999994 + 0.400000006;
    u_xlat16_26 = u_xlat16_8 + -0.5;
    u_xlat16_26 = u_xlat16_26 + u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_26 * -2.0 + 3.0;
    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;
    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;
    u_xlat16_15 = (-u_xlat16_22) + u_xlat16_15;
    u_xlat16_15 = u_xlat16_26 * u_xlat16_15 + u_xlat16_22;
    u_xlat16_22 = (-u_xlat10_21) + 1.0;
    u_xlat16_6.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = vec2(u_xlat16_22) * u_xlat16_6.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_15 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb7.xz = lessThan(vec4(u_xlat16_15), u_xlat16_6.xxyy).xz;
    u_xlat16_20.xy = vec2(u_xlat16_15) + (-u_xlat16_6.xy);
    u_xlat16_15 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_15 = max(u_xlat16_15, 9.99999975e-05);
    u_xlat16_15 = u_xlat16_20.x / u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.25;
    u_xlat16_26 = (-u_xlat16_6.y) + 1.0;
    u_xlat16_26 = max(u_xlat16_26, 9.99999975e-05);
    u_xlat16_26 = u_xlat16_20.y / u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_26 * 0.25 + 0.75;
    u_xlat16_15 = (u_xlatb7.z) ? u_xlat16_15 : u_xlat16_26;
    u_xlat16_6.x = (u_xlatb7.x) ? u_xlat16_22 : u_xlat16_15;
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + 1.0;
    u_xlat16_6.y = u_xlat16_1.x * 0.0625;
    u_xlat10_4.xyz = texture(_DiffuseRampMuitiTex, u_xlat16_6.xy).xyz;
    u_xlat16_1.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * _SpecularShininess;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat7 = u_xlat16_1.x * u_xlat16_8;
    u_xlat16_15 = dFdx(u_xlat7);
    u_xlat16_22 = dFdy(u_xlat7);
    u_xlat16_15 = abs(u_xlat16_22) + abs(u_xlat16_15);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_5.x = (-u_xlat16_15) + u_xlat16_22;
    u_xlat16_15 = u_xlat16_15 + u_xlat16_22;
    u_xlat16_15 = (-u_xlat16_5.x) + u_xlat16_15;
    u_xlat16_1.x = u_xlat16_8 * u_xlat16_1.x + (-u_xlat16_5.x);
    u_xlat16_8 = float(1.0) / u_xlat16_15;
    u_xlat16_1.x = u_xlat16_8 * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8 = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_0.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_5.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_5.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_5.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-unity_SHC.xyz);
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_5.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_5.xyz = u_xlat16_0.xyz * _CharacterSHColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_MULTI_DIFFUSE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampMuitiTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
uvec2 u_xlatu2;
vec4 u_xlat3;
bvec4 u_xlatb3;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec2 u_xlat16_6;
float u_xlat7;
bvec3 u_xlatb7;
mediump float u_xlat16_8;
mediump float u_xlat16_15;
bvec2 u_xlatb16;
mediump vec2 u_xlat16_20;
float u_xlat21;
lowp float u_xlat10_21;
int u_xlati21;
bool u_xlatb21;
mediump float u_xlat16_22;
float u_xlat23;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_1.x = u_xlat10_0.w * 8.0;
    u_xlat16_1.x = roundEven(u_xlat16_1.x);
    u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb21 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb21){
        u_xlat10_21 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat2.yx).x;
        u_xlat16_8 = u_xlat10_21;
    } else {
        u_xlat16_8 = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(-0.5<u_xlat16_1.x);
#else
    u_xlatb21 = -0.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(u_xlat16_1.x<0.5);
#else
    u_xlatb16.x = u_xlat16_1.x<0.5;
#endif
    u_xlatb21 = u_xlatb21 && u_xlatb16.x;
    if(u_xlatb21){
        SV_Target0.w = _BloomIntensity0;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(0.5<u_xlat16_1.x);
#else
        u_xlatb21 = 0.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(u_xlat16_1.x<1.5);
#else
        u_xlatb16.x = u_xlat16_1.x<1.5;
#endif
        u_xlatb21 = u_xlatb21 && u_xlatb16.x;
        if(u_xlatb21){
            SV_Target0.w = _BloomIntensity1;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb21 = !!(1.5<u_xlat16_1.x);
#else
            u_xlatb21 = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb16.x = !!(u_xlat16_1.x<2.5);
#else
            u_xlatb16.x = u_xlat16_1.x<2.5;
#endif
            u_xlatb21 = u_xlatb21 && u_xlatb16.x;
            if(u_xlatb21){
                SV_Target0.w = _BloomIntensity2;
            } else {
                u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
                u_xlatb4 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
                u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
                u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
                u_xlatb3.z = u_xlatb3.z && u_xlatb4.z;
                u_xlatb3.w = u_xlatb3.w && u_xlatb4.w;
                u_xlat16_15 = (u_xlatb3.w) ? _BloomIntensity6 : _BloomIntensity7;
                u_xlat16_15 = (u_xlatb3.z) ? _BloomIntensity5 : u_xlat16_15;
                u_xlat16_15 = (u_xlatb3.y) ? _BloomIntensity4 : u_xlat16_15;
                SV_Target0.w = (u_xlatb3.x) ? _BloomIntensity3 : u_xlat16_15;
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb21){
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb21 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb21){
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb16.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb16.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat21 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat21 = vs_TEXCOORD2.z * 17.0 + (-u_xlat21);
            u_xlat21 = u_xlat21 + 0.99000001;
            u_xlat21 = floor(u_xlat21);
            u_xlat21 = max(u_xlat21, 0.0);
            u_xlati21 = int(u_xlat21);
            if((u_xlati21)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat10_21 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat23) + _LightPosDir.xyz;
    u_xlat16_15 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_15 = inversesqrt(u_xlat16_15);
    u_xlat16_5.xyz = vec3(u_xlat16_15) * u_xlat16_5.xyz;
    u_xlat23 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat3.xyz = vec3(u_xlat23) * vs_TEXCOORD4.xyz;
    u_xlat16_15 = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
    u_xlat16_15 = dot(vec2(u_xlat16_15), u_xlat10_0.yy);
    u_xlat16_22 = u_xlat16_8 * 0.099999994 + 0.400000006;
    u_xlat16_26 = u_xlat16_8 + -0.5;
    u_xlat16_26 = u_xlat16_26 + u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_26 * -2.0 + 3.0;
    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;
    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;
    u_xlat16_15 = (-u_xlat16_22) + u_xlat16_15;
    u_xlat16_15 = u_xlat16_26 * u_xlat16_15 + u_xlat16_22;
    u_xlat16_22 = (-u_xlat10_21) + 1.0;
    u_xlat16_6.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = vec2(u_xlat16_22) * u_xlat16_6.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_15 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb7.xz = lessThan(vec4(u_xlat16_15), u_xlat16_6.xxyy).xz;
    u_xlat16_20.xy = vec2(u_xlat16_15) + (-u_xlat16_6.xy);
    u_xlat16_15 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_15 = max(u_xlat16_15, 9.99999975e-05);
    u_xlat16_15 = u_xlat16_20.x / u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.25;
    u_xlat16_26 = (-u_xlat16_6.y) + 1.0;
    u_xlat16_26 = max(u_xlat16_26, 9.99999975e-05);
    u_xlat16_26 = u_xlat16_20.y / u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_26 * 0.25 + 0.75;
    u_xlat16_15 = (u_xlatb7.z) ? u_xlat16_15 : u_xlat16_26;
    u_xlat16_6.x = (u_xlatb7.x) ? u_xlat16_22 : u_xlat16_15;
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + 1.0;
    u_xlat16_6.y = u_xlat16_1.x * 0.0625;
    u_xlat10_4.xyz = texture(_DiffuseRampMuitiTex, u_xlat16_6.xy).xyz;
    u_xlat16_1.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * _SpecularShininess;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat7 = u_xlat16_1.x * u_xlat16_8;
    u_xlat16_15 = dFdx(u_xlat7);
    u_xlat16_22 = dFdy(u_xlat7);
    u_xlat16_15 = abs(u_xlat16_22) + abs(u_xlat16_15);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_5.x = (-u_xlat16_15) + u_xlat16_22;
    u_xlat16_15 = u_xlat16_15 + u_xlat16_22;
    u_xlat16_15 = (-u_xlat16_5.x) + u_xlat16_15;
    u_xlat16_1.x = u_xlat16_8 * u_xlat16_1.x + (-u_xlat16_5.x);
    u_xlat16_8 = float(1.0) / u_xlat16_15;
    u_xlat16_1.x = u_xlat16_8 * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8 = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_0.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_5.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_5.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_5.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-unity_SHC.xyz);
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_5.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_5.xyz = u_xlat16_0.xyz * _CharacterSHColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_MULTI_BLOOM_ON" "_MULTI_DIFFUSE_ON" "_MULTI_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor0;
uniform 	mediump vec4 _SpecularColor1;
uniform 	mediump vec4 _SpecularColor2;
uniform 	mediump vec4 _SpecularColor3;
uniform 	mediump vec4 _SpecularColor4;
uniform 	mediump vec4 _SpecularColor5;
uniform 	mediump vec4 _SpecularColor6;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampMuitiTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
uvec2 u_xlatu2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec2 u_xlat16_6;
mediump vec2 u_xlat16_7;
bvec3 u_xlatb8;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
bvec2 u_xlatb18;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
int u_xlati24;
bool u_xlatb24;
float u_xlat26;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_1.x = u_xlat10_0.w * 8.0;
    u_xlat16_1.x = roundEven(u_xlat16_1.x);
    u_xlatb2.xy = lessThan(vec4(0.5, -0.5, 0.0, 0.0), u_xlat16_1.xxxx).xy;
    u_xlatb18.xy = lessThan(u_xlat16_1.xxxx, vec4(1.5, 0.5, 1.5, 0.5)).xy;
    u_xlatb2.x = u_xlatb18.x && u_xlatb2.x;
    u_xlatb2.y = u_xlatb18.y && u_xlatb2.y;
    if(u_xlatb2.x){
        u_xlat16_9.xyz = _SpecularColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(1.5<u_xlat16_1.x);
#else
        u_xlatb24 = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(u_xlat16_1.x<2.5);
#else
        u_xlatb18.x = u_xlat16_1.x<2.5;
#endif
        u_xlatb24 = u_xlatb24 && u_xlatb18.x;
        if(u_xlatb24){
            u_xlat16_9.xyz = _SpecularColor2.xyz;
        } else {
            u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
            u_xlatb4 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
            u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
            u_xlatb3.z = u_xlatb3.z && u_xlatb4.z;
            u_xlatb3.w = u_xlatb3.w && u_xlatb4.w;
            u_xlat16_5.xyz = (u_xlatb3.w) ? _SpecularColor6.xyz : _SpecularColor0.xyz;
            u_xlat16_5.xyz = (u_xlatb3.z) ? _SpecularColor5.xyz : u_xlat16_5.xyz;
            u_xlat16_5.xyz = (u_xlatb3.y) ? _SpecularColor4.xyz : u_xlat16_5.xyz;
            u_xlat16_9.xyz = (u_xlatb3.x) ? _SpecularColor3.xyz : u_xlat16_5.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.y){
        SV_Target0.w = _BloomIntensity0;
    } else {
        if(u_xlatb2.x){
            SV_Target0.w = _BloomIntensity1;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb24 = !!(1.5<u_xlat16_1.x);
#else
            u_xlatb24 = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb2.x = !!(u_xlat16_1.x<2.5);
#else
            u_xlatb2.x = u_xlat16_1.x<2.5;
#endif
            u_xlatb24 = u_xlatb24 && u_xlatb2.x;
            if(u_xlatb24){
                SV_Target0.w = _BloomIntensity2;
            } else {
                u_xlatb2 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
                u_xlatb3 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
                u_xlatb2.x = u_xlatb2.x && u_xlatb3.x;
                u_xlatb2.y = u_xlatb2.y && u_xlatb3.y;
                u_xlatb2.z = u_xlatb2.z && u_xlatb3.z;
                u_xlatb2.w = u_xlatb2.w && u_xlatb3.w;
                u_xlat16_5.x = (u_xlatb2.w) ? _BloomIntensity6 : _BloomIntensity7;
                u_xlat16_5.x = (u_xlatb2.z) ? _BloomIntensity5 : u_xlat16_5.x;
                u_xlat16_5.x = (u_xlatb2.y) ? _BloomIntensity4 : u_xlat16_5.x;
                SV_Target0.w = (u_xlatb2.x) ? _BloomIntensity3 : u_xlat16_5.x;
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb24){
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb24 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb24){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb18.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb18.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat24 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat24 = vs_TEXCOORD2.z * 17.0 + (-u_xlat24);
            u_xlat24 = u_xlat24 + 0.99000001;
            u_xlat24 = floor(u_xlat24);
            u_xlat24 = max(u_xlat24, 0.0);
            u_xlati24 = int(u_xlat24);
            if((u_xlati24)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat10_24 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat26 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat26) + _LightPosDir.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat26 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat3.xyz = vec3(u_xlat26) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_0.yy);
    u_xlat16_6.x = (-u_xlat10_24) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb8.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb8.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb8.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + 1.0;
    u_xlat16_6.y = u_xlat16_1.x * 0.0625;
    u_xlat10_4.xyz = texture(_DiffuseRampMuitiTex, u_xlat16_6.xy).xyz;
    u_xlat16_1.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * _SpecularShininess;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat16_5.x = dFdx(u_xlat16_1.x);
    u_xlat16_13 = dFdy(u_xlat16_1.x);
    u_xlat16_5.x = abs(u_xlat16_13) + abs(u_xlat16_5.x);
    u_xlat16_13 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_21 = (-u_xlat16_5.x) + u_xlat16_13;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_13;
    u_xlat16_5.x = (-u_xlat16_21) + u_xlat16_5.x;
    u_xlat16_1.x = u_xlat16_1.x + (-u_xlat16_21);
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5.x;
    u_xlat16_1.xyz = u_xlat16_9.xyz * u_xlat16_1.xxx;
    u_xlat16_1.xyz = u_xlat10_0.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_5.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_5.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_5.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-unity_SHC.xyz);
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_5.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_5.xyz = u_xlat16_0.xyz * _CharacterSHColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_MULTI_BLOOM_ON" "_MULTI_DIFFUSE_ON" "_MULTI_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor0;
uniform 	mediump vec4 _SpecularColor1;
uniform 	mediump vec4 _SpecularColor2;
uniform 	mediump vec4 _SpecularColor3;
uniform 	mediump vec4 _SpecularColor4;
uniform 	mediump vec4 _SpecularColor5;
uniform 	mediump vec4 _SpecularColor6;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampMuitiTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
uvec2 u_xlatu2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec2 u_xlat16_6;
mediump vec2 u_xlat16_7;
bvec3 u_xlatb8;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
bvec2 u_xlatb18;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
int u_xlati24;
bool u_xlatb24;
float u_xlat26;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_1.x = u_xlat10_0.w * 8.0;
    u_xlat16_1.x = roundEven(u_xlat16_1.x);
    u_xlatb2.xy = lessThan(vec4(0.5, -0.5, 0.0, 0.0), u_xlat16_1.xxxx).xy;
    u_xlatb18.xy = lessThan(u_xlat16_1.xxxx, vec4(1.5, 0.5, 1.5, 0.5)).xy;
    u_xlatb2.x = u_xlatb18.x && u_xlatb2.x;
    u_xlatb2.y = u_xlatb18.y && u_xlatb2.y;
    if(u_xlatb2.x){
        u_xlat16_9.xyz = _SpecularColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(1.5<u_xlat16_1.x);
#else
        u_xlatb24 = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(u_xlat16_1.x<2.5);
#else
        u_xlatb18.x = u_xlat16_1.x<2.5;
#endif
        u_xlatb24 = u_xlatb24 && u_xlatb18.x;
        if(u_xlatb24){
            u_xlat16_9.xyz = _SpecularColor2.xyz;
        } else {
            u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
            u_xlatb4 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
            u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
            u_xlatb3.z = u_xlatb3.z && u_xlatb4.z;
            u_xlatb3.w = u_xlatb3.w && u_xlatb4.w;
            u_xlat16_5.xyz = (u_xlatb3.w) ? _SpecularColor6.xyz : _SpecularColor0.xyz;
            u_xlat16_5.xyz = (u_xlatb3.z) ? _SpecularColor5.xyz : u_xlat16_5.xyz;
            u_xlat16_5.xyz = (u_xlatb3.y) ? _SpecularColor4.xyz : u_xlat16_5.xyz;
            u_xlat16_9.xyz = (u_xlatb3.x) ? _SpecularColor3.xyz : u_xlat16_5.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.y){
        SV_Target0.w = _BloomIntensity0;
    } else {
        if(u_xlatb2.x){
            SV_Target0.w = _BloomIntensity1;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb24 = !!(1.5<u_xlat16_1.x);
#else
            u_xlatb24 = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb2.x = !!(u_xlat16_1.x<2.5);
#else
            u_xlatb2.x = u_xlat16_1.x<2.5;
#endif
            u_xlatb24 = u_xlatb24 && u_xlatb2.x;
            if(u_xlatb24){
                SV_Target0.w = _BloomIntensity2;
            } else {
                u_xlatb2 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
                u_xlatb3 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
                u_xlatb2.x = u_xlatb2.x && u_xlatb3.x;
                u_xlatb2.y = u_xlatb2.y && u_xlatb3.y;
                u_xlatb2.z = u_xlatb2.z && u_xlatb3.z;
                u_xlatb2.w = u_xlatb2.w && u_xlatb3.w;
                u_xlat16_5.x = (u_xlatb2.w) ? _BloomIntensity6 : _BloomIntensity7;
                u_xlat16_5.x = (u_xlatb2.z) ? _BloomIntensity5 : u_xlat16_5.x;
                u_xlat16_5.x = (u_xlatb2.y) ? _BloomIntensity4 : u_xlat16_5.x;
                SV_Target0.w = (u_xlatb2.x) ? _BloomIntensity3 : u_xlat16_5.x;
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb24){
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb24 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb24){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb18.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb18.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat24 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat24 = vs_TEXCOORD2.z * 17.0 + (-u_xlat24);
            u_xlat24 = u_xlat24 + 0.99000001;
            u_xlat24 = floor(u_xlat24);
            u_xlat24 = max(u_xlat24, 0.0);
            u_xlati24 = int(u_xlat24);
            if((u_xlati24)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat10_24 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat26 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat26) + _LightPosDir.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat26 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat3.xyz = vec3(u_xlat26) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_0.yy);
    u_xlat16_6.x = (-u_xlat10_24) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb8.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb8.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb8.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + 1.0;
    u_xlat16_6.y = u_xlat16_1.x * 0.0625;
    u_xlat10_4.xyz = texture(_DiffuseRampMuitiTex, u_xlat16_6.xy).xyz;
    u_xlat16_1.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * _SpecularShininess;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat16_5.x = dFdx(u_xlat16_1.x);
    u_xlat16_13 = dFdy(u_xlat16_1.x);
    u_xlat16_5.x = abs(u_xlat16_13) + abs(u_xlat16_5.x);
    u_xlat16_13 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_21 = (-u_xlat16_5.x) + u_xlat16_13;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_13;
    u_xlat16_5.x = (-u_xlat16_21) + u_xlat16_5.x;
    u_xlat16_1.x = u_xlat16_1.x + (-u_xlat16_21);
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5.x;
    u_xlat16_1.xyz = u_xlat16_9.xyz * u_xlat16_1.xxx;
    u_xlat16_1.xyz = u_xlat10_0.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_5.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_5.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_5.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-unity_SHC.xyz);
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_5.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_5.xyz = u_xlat16_0.xyz * _CharacterSHColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_MULTI_BLOOM_ON" "_MULTI_DIFFUSE_ON" "_MULTI_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor0;
uniform 	mediump vec4 _SpecularColor1;
uniform 	mediump vec4 _SpecularColor2;
uniform 	mediump vec4 _SpecularColor3;
uniform 	mediump vec4 _SpecularColor4;
uniform 	mediump vec4 _SpecularColor5;
uniform 	mediump vec4 _SpecularColor6;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampMuitiTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
uvec2 u_xlatu2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec2 u_xlat16_6;
mediump vec2 u_xlat16_7;
bvec3 u_xlatb8;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
bvec2 u_xlatb18;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
int u_xlati24;
bool u_xlatb24;
float u_xlat26;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_1.x = u_xlat10_0.w * 8.0;
    u_xlat16_1.x = roundEven(u_xlat16_1.x);
    u_xlatb2.xy = lessThan(vec4(0.5, -0.5, 0.0, 0.0), u_xlat16_1.xxxx).xy;
    u_xlatb18.xy = lessThan(u_xlat16_1.xxxx, vec4(1.5, 0.5, 1.5, 0.5)).xy;
    u_xlatb2.x = u_xlatb18.x && u_xlatb2.x;
    u_xlatb2.y = u_xlatb18.y && u_xlatb2.y;
    if(u_xlatb2.x){
        u_xlat16_9.xyz = _SpecularColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(1.5<u_xlat16_1.x);
#else
        u_xlatb24 = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(u_xlat16_1.x<2.5);
#else
        u_xlatb18.x = u_xlat16_1.x<2.5;
#endif
        u_xlatb24 = u_xlatb24 && u_xlatb18.x;
        if(u_xlatb24){
            u_xlat16_9.xyz = _SpecularColor2.xyz;
        } else {
            u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
            u_xlatb4 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
            u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
            u_xlatb3.z = u_xlatb3.z && u_xlatb4.z;
            u_xlatb3.w = u_xlatb3.w && u_xlatb4.w;
            u_xlat16_5.xyz = (u_xlatb3.w) ? _SpecularColor6.xyz : _SpecularColor0.xyz;
            u_xlat16_5.xyz = (u_xlatb3.z) ? _SpecularColor5.xyz : u_xlat16_5.xyz;
            u_xlat16_5.xyz = (u_xlatb3.y) ? _SpecularColor4.xyz : u_xlat16_5.xyz;
            u_xlat16_9.xyz = (u_xlatb3.x) ? _SpecularColor3.xyz : u_xlat16_5.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb2.y){
        SV_Target0.w = _BloomIntensity0;
    } else {
        if(u_xlatb2.x){
            SV_Target0.w = _BloomIntensity1;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb24 = !!(1.5<u_xlat16_1.x);
#else
            u_xlatb24 = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb2.x = !!(u_xlat16_1.x<2.5);
#else
            u_xlatb2.x = u_xlat16_1.x<2.5;
#endif
            u_xlatb24 = u_xlatb24 && u_xlatb2.x;
            if(u_xlatb24){
                SV_Target0.w = _BloomIntensity2;
            } else {
                u_xlatb2 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
                u_xlatb3 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
                u_xlatb2.x = u_xlatb2.x && u_xlatb3.x;
                u_xlatb2.y = u_xlatb2.y && u_xlatb3.y;
                u_xlatb2.z = u_xlatb2.z && u_xlatb3.z;
                u_xlatb2.w = u_xlatb2.w && u_xlatb3.w;
                u_xlat16_5.x = (u_xlatb2.w) ? _BloomIntensity6 : _BloomIntensity7;
                u_xlat16_5.x = (u_xlatb2.z) ? _BloomIntensity5 : u_xlat16_5.x;
                u_xlat16_5.x = (u_xlatb2.y) ? _BloomIntensity4 : u_xlat16_5.x;
                SV_Target0.w = (u_xlatb2.x) ? _BloomIntensity3 : u_xlat16_5.x;
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb24){
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb24 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb24){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb18.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb18.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat24 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat24 = vs_TEXCOORD2.z * 17.0 + (-u_xlat24);
            u_xlat24 = u_xlat24 + 0.99000001;
            u_xlat24 = floor(u_xlat24);
            u_xlat24 = max(u_xlat24, 0.0);
            u_xlati24 = int(u_xlat24);
            if((u_xlati24)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat10_24 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat26 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat26) + _LightPosDir.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat26 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat3.xyz = vec3(u_xlat26) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_0.yy);
    u_xlat16_6.x = (-u_xlat10_24) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb8.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb8.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb8.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + 1.0;
    u_xlat16_6.y = u_xlat16_1.x * 0.0625;
    u_xlat10_4.xyz = texture(_DiffuseRampMuitiTex, u_xlat16_6.xy).xyz;
    u_xlat16_1.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * _SpecularShininess;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat16_5.x = dFdx(u_xlat16_1.x);
    u_xlat16_13 = dFdy(u_xlat16_1.x);
    u_xlat16_5.x = abs(u_xlat16_13) + abs(u_xlat16_5.x);
    u_xlat16_13 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_21 = (-u_xlat16_5.x) + u_xlat16_13;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_13;
    u_xlat16_5.x = (-u_xlat16_21) + u_xlat16_5.x;
    u_xlat16_1.x = u_xlat16_1.x + (-u_xlat16_21);
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5.x;
    u_xlat16_1.xyz = u_xlat16_9.xyz * u_xlat16_1.xxx;
    u_xlat16_1.xyz = u_xlat10_0.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_4.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_5.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_5.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_5.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-unity_SHC.xyz);
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_5.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_5.xyz = u_xlat16_0.xyz * _CharacterSHColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_MULTI_DIFFUSE_ON" "_MULTI_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor0;
uniform 	mediump vec4 _SpecularColor1;
uniform 	mediump vec4 _SpecularColor2;
uniform 	mediump vec4 _SpecularColor3;
uniform 	mediump vec4 _SpecularColor4;
uniform 	mediump vec4 _SpecularColor5;
uniform 	mediump vec4 _SpecularColor6;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampMuitiTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
uvec2 u_xlatu2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
lowp vec3 u_xlat10_5;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
bvec3 u_xlatb8;
mediump float u_xlat16_9;
mediump float u_xlat16_17;
bvec2 u_xlatb18;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
int u_xlati24;
bool u_xlatb24;
mediump float u_xlat16_25;
float u_xlat26;
mediump float u_xlat16_28;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_1.x = u_xlat10_0.w * 8.0;
    u_xlat16_1.x = roundEven(u_xlat16_1.x);
    u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb24 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb24){
        u_xlat10_24 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat2.yx).x;
        u_xlat16_9 = u_xlat10_24;
    } else {
        u_xlat16_9 = 1.0;
    //ENDIF
    }
    u_xlatb18.xy = lessThan(vec4(0.5, -0.5, 0.5, -0.5), u_xlat16_1.xxxx).xy;
    u_xlatb3.xy = lessThan(u_xlat16_1.xxxx, vec4(1.5, 0.5, 0.0, 0.0)).xy;
    u_xlatb18.x = u_xlatb18.x && u_xlatb3.x;
    u_xlatb18.y = u_xlatb18.y && u_xlatb3.y;
    if(u_xlatb18.x){
        u_xlat16_4.xyz = _SpecularColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(1.5<u_xlat16_1.x);
#else
        u_xlatb24 = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(u_xlat16_1.x<2.5);
#else
        u_xlatb3.x = u_xlat16_1.x<2.5;
#endif
        u_xlatb24 = u_xlatb24 && u_xlatb3.x;
        if(u_xlatb24){
            u_xlat16_4.xyz = _SpecularColor2.xyz;
        } else {
            u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
            u_xlatb5 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb3.x = u_xlatb3.x && u_xlatb5.x;
            u_xlatb3.y = u_xlatb3.y && u_xlatb5.y;
            u_xlatb3.z = u_xlatb3.z && u_xlatb5.z;
            u_xlatb3.w = u_xlatb3.w && u_xlatb5.w;
            u_xlat16_6.xyz = (u_xlatb3.w) ? _SpecularColor6.xyz : _SpecularColor0.xyz;
            u_xlat16_6.xyz = (u_xlatb3.z) ? _SpecularColor5.xyz : u_xlat16_6.xyz;
            u_xlat16_6.xyz = (u_xlatb3.y) ? _SpecularColor4.xyz : u_xlat16_6.xyz;
            u_xlat16_4.xyz = (u_xlatb3.x) ? _SpecularColor3.xyz : u_xlat16_6.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb18.y){
        SV_Target0.w = _BloomIntensity0;
    } else {
        if(u_xlatb18.x){
            SV_Target0.w = _BloomIntensity1;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb24 = !!(1.5<u_xlat16_1.x);
#else
            u_xlatb24 = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb18.x = !!(u_xlat16_1.x<2.5);
#else
            u_xlatb18.x = u_xlat16_1.x<2.5;
#endif
            u_xlatb24 = u_xlatb24 && u_xlatb18.x;
            if(u_xlatb24){
                SV_Target0.w = _BloomIntensity2;
            } else {
                u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
                u_xlatb5 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
                u_xlatb3.x = u_xlatb3.x && u_xlatb5.x;
                u_xlatb3.y = u_xlatb3.y && u_xlatb5.y;
                u_xlatb3.z = u_xlatb3.z && u_xlatb5.z;
                u_xlatb3.w = u_xlatb3.w && u_xlatb5.w;
                u_xlat16_17 = (u_xlatb3.w) ? _BloomIntensity6 : _BloomIntensity7;
                u_xlat16_17 = (u_xlatb3.z) ? _BloomIntensity5 : u_xlat16_17;
                u_xlat16_17 = (u_xlatb3.y) ? _BloomIntensity4 : u_xlat16_17;
                SV_Target0.w = (u_xlatb3.x) ? _BloomIntensity3 : u_xlat16_17;
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb24){
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb24 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb24){
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb18.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb18.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat24 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat24 = vs_TEXCOORD2.z * 17.0 + (-u_xlat24);
            u_xlat24 = u_xlat24 + 0.99000001;
            u_xlat24 = floor(u_xlat24);
            u_xlat24 = max(u_xlat24, 0.0);
            u_xlati24 = int(u_xlat24);
            if((u_xlati24)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat10_24 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat26 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat26) + _LightPosDir.xyz;
    u_xlat16_17 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_17 = inversesqrt(u_xlat16_17);
    u_xlat16_6.xyz = vec3(u_xlat16_17) * u_xlat16_6.xyz;
    u_xlat26 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat3.xyz = vec3(u_xlat26) * vs_TEXCOORD4.xyz;
    u_xlat16_17 = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_17 = u_xlat16_17 * 0.5 + 0.5;
    u_xlat16_17 = dot(vec2(u_xlat16_17), u_xlat10_0.yy);
    u_xlat16_25 = u_xlat16_9 * 0.099999994 + 0.400000006;
    u_xlat16_28 = u_xlat16_9 + -0.5;
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_30;
    u_xlat16_17 = (-u_xlat16_25) + u_xlat16_17;
    u_xlat16_17 = u_xlat16_28 * u_xlat16_17 + u_xlat16_25;
    u_xlat16_25 = (-u_xlat10_24) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_25) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_17 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb8.xz = lessThan(vec4(u_xlat16_17), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_17) + (-u_xlat16_7.xy);
    u_xlat16_17 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_17 = max(u_xlat16_17, 9.99999975e-05);
    u_xlat16_17 = u_xlat16_23.x / u_xlat16_17;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_17 = min(max(u_xlat16_17, 0.0), 1.0);
#else
    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);
#endif
    u_xlat16_17 = u_xlat16_17 * 0.5 + 0.25;
    u_xlat16_28 = (-u_xlat16_7.y) + 1.0;
    u_xlat16_28 = max(u_xlat16_28, 9.99999975e-05);
    u_xlat16_28 = u_xlat16_23.y / u_xlat16_28;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = u_xlat16_28 * 0.25 + 0.75;
    u_xlat16_17 = (u_xlatb8.z) ? u_xlat16_17 : u_xlat16_28;
    u_xlat16_7.x = (u_xlatb8.x) ? u_xlat16_25 : u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + 1.0;
    u_xlat16_7.y = u_xlat16_1.x * 0.0625;
    u_xlat10_5.xyz = texture(_DiffuseRampMuitiTex, u_xlat16_7.xy).xyz;
    u_xlat16_1.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * _SpecularShininess;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat8 = u_xlat16_1.x * u_xlat16_9;
    u_xlat16_17 = dFdx(u_xlat8);
    u_xlat16_25 = dFdy(u_xlat8);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_28 = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_28) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9 * u_xlat16_1.x + (-u_xlat16_28);
    u_xlat16_9 = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9 * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9 = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9;
    u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_1.xxx;
    u_xlat16_1.xyz = u_xlat10_0.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_4.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_4.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_4.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-unity_SHC.xyz);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_4.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = u_xlat16_0.xyz * _CharacterSHColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_MULTI_DIFFUSE_ON" "_MULTI_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor0;
uniform 	mediump vec4 _SpecularColor1;
uniform 	mediump vec4 _SpecularColor2;
uniform 	mediump vec4 _SpecularColor3;
uniform 	mediump vec4 _SpecularColor4;
uniform 	mediump vec4 _SpecularColor5;
uniform 	mediump vec4 _SpecularColor6;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampMuitiTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
uvec2 u_xlatu2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
lowp vec3 u_xlat10_5;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
bvec3 u_xlatb8;
mediump float u_xlat16_9;
mediump float u_xlat16_17;
bvec2 u_xlatb18;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
int u_xlati24;
bool u_xlatb24;
mediump float u_xlat16_25;
float u_xlat26;
mediump float u_xlat16_28;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_1.x = u_xlat10_0.w * 8.0;
    u_xlat16_1.x = roundEven(u_xlat16_1.x);
    u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb24 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb24){
        u_xlat10_24 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat2.yx).x;
        u_xlat16_9 = u_xlat10_24;
    } else {
        u_xlat16_9 = 1.0;
    //ENDIF
    }
    u_xlatb18.xy = lessThan(vec4(0.5, -0.5, 0.5, -0.5), u_xlat16_1.xxxx).xy;
    u_xlatb3.xy = lessThan(u_xlat16_1.xxxx, vec4(1.5, 0.5, 0.0, 0.0)).xy;
    u_xlatb18.x = u_xlatb18.x && u_xlatb3.x;
    u_xlatb18.y = u_xlatb18.y && u_xlatb3.y;
    if(u_xlatb18.x){
        u_xlat16_4.xyz = _SpecularColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(1.5<u_xlat16_1.x);
#else
        u_xlatb24 = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(u_xlat16_1.x<2.5);
#else
        u_xlatb3.x = u_xlat16_1.x<2.5;
#endif
        u_xlatb24 = u_xlatb24 && u_xlatb3.x;
        if(u_xlatb24){
            u_xlat16_4.xyz = _SpecularColor2.xyz;
        } else {
            u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
            u_xlatb5 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb3.x = u_xlatb3.x && u_xlatb5.x;
            u_xlatb3.y = u_xlatb3.y && u_xlatb5.y;
            u_xlatb3.z = u_xlatb3.z && u_xlatb5.z;
            u_xlatb3.w = u_xlatb3.w && u_xlatb5.w;
            u_xlat16_6.xyz = (u_xlatb3.w) ? _SpecularColor6.xyz : _SpecularColor0.xyz;
            u_xlat16_6.xyz = (u_xlatb3.z) ? _SpecularColor5.xyz : u_xlat16_6.xyz;
            u_xlat16_6.xyz = (u_xlatb3.y) ? _SpecularColor4.xyz : u_xlat16_6.xyz;
            u_xlat16_4.xyz = (u_xlatb3.x) ? _SpecularColor3.xyz : u_xlat16_6.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb18.y){
        SV_Target0.w = _BloomIntensity0;
    } else {
        if(u_xlatb18.x){
            SV_Target0.w = _BloomIntensity1;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb24 = !!(1.5<u_xlat16_1.x);
#else
            u_xlatb24 = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb18.x = !!(u_xlat16_1.x<2.5);
#else
            u_xlatb18.x = u_xlat16_1.x<2.5;
#endif
            u_xlatb24 = u_xlatb24 && u_xlatb18.x;
            if(u_xlatb24){
                SV_Target0.w = _BloomIntensity2;
            } else {
                u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
                u_xlatb5 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
                u_xlatb3.x = u_xlatb3.x && u_xlatb5.x;
                u_xlatb3.y = u_xlatb3.y && u_xlatb5.y;
                u_xlatb3.z = u_xlatb3.z && u_xlatb5.z;
                u_xlatb3.w = u_xlatb3.w && u_xlatb5.w;
                u_xlat16_17 = (u_xlatb3.w) ? _BloomIntensity6 : _BloomIntensity7;
                u_xlat16_17 = (u_xlatb3.z) ? _BloomIntensity5 : u_xlat16_17;
                u_xlat16_17 = (u_xlatb3.y) ? _BloomIntensity4 : u_xlat16_17;
                SV_Target0.w = (u_xlatb3.x) ? _BloomIntensity3 : u_xlat16_17;
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb24){
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb24 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb24){
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb18.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb18.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat24 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat24 = vs_TEXCOORD2.z * 17.0 + (-u_xlat24);
            u_xlat24 = u_xlat24 + 0.99000001;
            u_xlat24 = floor(u_xlat24);
            u_xlat24 = max(u_xlat24, 0.0);
            u_xlati24 = int(u_xlat24);
            if((u_xlati24)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat10_24 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat26 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat26) + _LightPosDir.xyz;
    u_xlat16_17 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_17 = inversesqrt(u_xlat16_17);
    u_xlat16_6.xyz = vec3(u_xlat16_17) * u_xlat16_6.xyz;
    u_xlat26 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat3.xyz = vec3(u_xlat26) * vs_TEXCOORD4.xyz;
    u_xlat16_17 = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_17 = u_xlat16_17 * 0.5 + 0.5;
    u_xlat16_17 = dot(vec2(u_xlat16_17), u_xlat10_0.yy);
    u_xlat16_25 = u_xlat16_9 * 0.099999994 + 0.400000006;
    u_xlat16_28 = u_xlat16_9 + -0.5;
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_30;
    u_xlat16_17 = (-u_xlat16_25) + u_xlat16_17;
    u_xlat16_17 = u_xlat16_28 * u_xlat16_17 + u_xlat16_25;
    u_xlat16_25 = (-u_xlat10_24) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_25) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_17 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb8.xz = lessThan(vec4(u_xlat16_17), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_17) + (-u_xlat16_7.xy);
    u_xlat16_17 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_17 = max(u_xlat16_17, 9.99999975e-05);
    u_xlat16_17 = u_xlat16_23.x / u_xlat16_17;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_17 = min(max(u_xlat16_17, 0.0), 1.0);
#else
    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);
#endif
    u_xlat16_17 = u_xlat16_17 * 0.5 + 0.25;
    u_xlat16_28 = (-u_xlat16_7.y) + 1.0;
    u_xlat16_28 = max(u_xlat16_28, 9.99999975e-05);
    u_xlat16_28 = u_xlat16_23.y / u_xlat16_28;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = u_xlat16_28 * 0.25 + 0.75;
    u_xlat16_17 = (u_xlatb8.z) ? u_xlat16_17 : u_xlat16_28;
    u_xlat16_7.x = (u_xlatb8.x) ? u_xlat16_25 : u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + 1.0;
    u_xlat16_7.y = u_xlat16_1.x * 0.0625;
    u_xlat10_5.xyz = texture(_DiffuseRampMuitiTex, u_xlat16_7.xy).xyz;
    u_xlat16_1.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * _SpecularShininess;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat8 = u_xlat16_1.x * u_xlat16_9;
    u_xlat16_17 = dFdx(u_xlat8);
    u_xlat16_25 = dFdy(u_xlat8);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_28 = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_28) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9 * u_xlat16_1.x + (-u_xlat16_28);
    u_xlat16_9 = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9 * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9 = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9;
    u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_1.xxx;
    u_xlat16_1.xyz = u_xlat10_0.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_4.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_4.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_4.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-unity_SHC.xyz);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_4.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = u_xlat16_0.xyz * _CharacterSHColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_MULTI_DIFFUSE_ON" "_MULTI_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor0;
uniform 	mediump vec4 _SpecularColor1;
uniform 	mediump vec4 _SpecularColor2;
uniform 	mediump vec4 _SpecularColor3;
uniform 	mediump vec4 _SpecularColor4;
uniform 	mediump vec4 _SpecularColor5;
uniform 	mediump vec4 _SpecularColor6;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampMuitiTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
uvec2 u_xlatu2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
lowp vec3 u_xlat10_5;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
bvec3 u_xlatb8;
mediump float u_xlat16_9;
mediump float u_xlat16_17;
bvec2 u_xlatb18;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
int u_xlati24;
bool u_xlatb24;
mediump float u_xlat16_25;
float u_xlat26;
mediump float u_xlat16_28;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_1.x = u_xlat10_0.w * 8.0;
    u_xlat16_1.x = roundEven(u_xlat16_1.x);
    u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb24 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb24){
        u_xlat10_24 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat2.yx).x;
        u_xlat16_9 = u_xlat10_24;
    } else {
        u_xlat16_9 = 1.0;
    //ENDIF
    }
    u_xlatb18.xy = lessThan(vec4(0.5, -0.5, 0.5, -0.5), u_xlat16_1.xxxx).xy;
    u_xlatb3.xy = lessThan(u_xlat16_1.xxxx, vec4(1.5, 0.5, 0.0, 0.0)).xy;
    u_xlatb18.x = u_xlatb18.x && u_xlatb3.x;
    u_xlatb18.y = u_xlatb18.y && u_xlatb3.y;
    if(u_xlatb18.x){
        u_xlat16_4.xyz = _SpecularColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(1.5<u_xlat16_1.x);
#else
        u_xlatb24 = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(u_xlat16_1.x<2.5);
#else
        u_xlatb3.x = u_xlat16_1.x<2.5;
#endif
        u_xlatb24 = u_xlatb24 && u_xlatb3.x;
        if(u_xlatb24){
            u_xlat16_4.xyz = _SpecularColor2.xyz;
        } else {
            u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
            u_xlatb5 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb3.x = u_xlatb3.x && u_xlatb5.x;
            u_xlatb3.y = u_xlatb3.y && u_xlatb5.y;
            u_xlatb3.z = u_xlatb3.z && u_xlatb5.z;
            u_xlatb3.w = u_xlatb3.w && u_xlatb5.w;
            u_xlat16_6.xyz = (u_xlatb3.w) ? _SpecularColor6.xyz : _SpecularColor0.xyz;
            u_xlat16_6.xyz = (u_xlatb3.z) ? _SpecularColor5.xyz : u_xlat16_6.xyz;
            u_xlat16_6.xyz = (u_xlatb3.y) ? _SpecularColor4.xyz : u_xlat16_6.xyz;
            u_xlat16_4.xyz = (u_xlatb3.x) ? _SpecularColor3.xyz : u_xlat16_6.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb18.y){
        SV_Target0.w = _BloomIntensity0;
    } else {
        if(u_xlatb18.x){
            SV_Target0.w = _BloomIntensity1;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb24 = !!(1.5<u_xlat16_1.x);
#else
            u_xlatb24 = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb18.x = !!(u_xlat16_1.x<2.5);
#else
            u_xlatb18.x = u_xlat16_1.x<2.5;
#endif
            u_xlatb24 = u_xlatb24 && u_xlatb18.x;
            if(u_xlatb24){
                SV_Target0.w = _BloomIntensity2;
            } else {
                u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
                u_xlatb5 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
                u_xlatb3.x = u_xlatb3.x && u_xlatb5.x;
                u_xlatb3.y = u_xlatb3.y && u_xlatb5.y;
                u_xlatb3.z = u_xlatb3.z && u_xlatb5.z;
                u_xlatb3.w = u_xlatb3.w && u_xlatb5.w;
                u_xlat16_17 = (u_xlatb3.w) ? _BloomIntensity6 : _BloomIntensity7;
                u_xlat16_17 = (u_xlatb3.z) ? _BloomIntensity5 : u_xlat16_17;
                u_xlat16_17 = (u_xlatb3.y) ? _BloomIntensity4 : u_xlat16_17;
                SV_Target0.w = (u_xlatb3.x) ? _BloomIntensity3 : u_xlat16_17;
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb24){
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb24 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb24){
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb18.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb18.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat24 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat24 = vs_TEXCOORD2.z * 17.0 + (-u_xlat24);
            u_xlat24 = u_xlat24 + 0.99000001;
            u_xlat24 = floor(u_xlat24);
            u_xlat24 = max(u_xlat24, 0.0);
            u_xlati24 = int(u_xlat24);
            if((u_xlati24)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat10_24 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat26 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat26) + _LightPosDir.xyz;
    u_xlat16_17 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_17 = inversesqrt(u_xlat16_17);
    u_xlat16_6.xyz = vec3(u_xlat16_17) * u_xlat16_6.xyz;
    u_xlat26 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat3.xyz = vec3(u_xlat26) * vs_TEXCOORD4.xyz;
    u_xlat16_17 = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_17 = u_xlat16_17 * 0.5 + 0.5;
    u_xlat16_17 = dot(vec2(u_xlat16_17), u_xlat10_0.yy);
    u_xlat16_25 = u_xlat16_9 * 0.099999994 + 0.400000006;
    u_xlat16_28 = u_xlat16_9 + -0.5;
    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_30;
    u_xlat16_17 = (-u_xlat16_25) + u_xlat16_17;
    u_xlat16_17 = u_xlat16_28 * u_xlat16_17 + u_xlat16_25;
    u_xlat16_25 = (-u_xlat10_24) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_25) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_17 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb8.xz = lessThan(vec4(u_xlat16_17), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_17) + (-u_xlat16_7.xy);
    u_xlat16_17 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_17 = max(u_xlat16_17, 9.99999975e-05);
    u_xlat16_17 = u_xlat16_23.x / u_xlat16_17;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_17 = min(max(u_xlat16_17, 0.0), 1.0);
#else
    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);
#endif
    u_xlat16_17 = u_xlat16_17 * 0.5 + 0.25;
    u_xlat16_28 = (-u_xlat16_7.y) + 1.0;
    u_xlat16_28 = max(u_xlat16_28, 9.99999975e-05);
    u_xlat16_28 = u_xlat16_23.y / u_xlat16_28;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = u_xlat16_28 * 0.25 + 0.75;
    u_xlat16_17 = (u_xlatb8.z) ? u_xlat16_17 : u_xlat16_28;
    u_xlat16_7.x = (u_xlatb8.x) ? u_xlat16_25 : u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + 1.0;
    u_xlat16_7.y = u_xlat16_1.x * 0.0625;
    u_xlat10_5.xyz = texture(_DiffuseRampMuitiTex, u_xlat16_7.xy).xyz;
    u_xlat16_1.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlat16_1.x = log2(u_xlat16_1.x);
    u_xlat16_1.x = u_xlat16_1.x * _SpecularShininess;
    u_xlat16_1.x = exp2(u_xlat16_1.x);
    u_xlat8 = u_xlat16_1.x * u_xlat16_9;
    u_xlat16_17 = dFdx(u_xlat8);
    u_xlat16_25 = dFdy(u_xlat8);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_28 = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_28) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9 * u_xlat16_1.x + (-u_xlat16_28);
    u_xlat16_9 = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9 * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9 = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9;
    u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_1.xxx;
    u_xlat16_1.xyz = u_xlat10_0.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    u_xlat16_4.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_4.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_4.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-unity_SHC.xyz);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_4.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = u_xlat16_0.xyz * _CharacterSHColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
uvec2 u_xlatu2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec2 u_xlat16_6;
lowp vec3 u_xlat10_7;
bvec3 u_xlatb10;
mediump float u_xlat16_12;
mediump vec2 u_xlat16_13;
bvec2 u_xlatb18;
mediump float u_xlat16_20;
mediump float u_xlat16_21;
float u_xlat24;
lowp float u_xlat10_24;
int u_xlati24;
bool u_xlatb24;
float u_xlat26;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_0 = u_xlat16_0 * _EnvColor;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati24 = int(u_xlat16_1);
    if((u_xlati24)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb24){
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb24 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb24){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb18.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb18.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat24 = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat24 = vs_TEXCOORD2.z * 17.0 + (-u_xlat24);
            u_xlat24 = u_xlat24 + 0.99000001;
            u_xlat24 = floor(u_xlat24);
            u_xlat24 = max(u_xlat24, 0.0);
            u_xlati24 = int(u_xlat24);
            if((u_xlati24)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_24 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat26 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(u_xlat26) + _LightPosDir.xyz;
    u_xlat16_28 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_4.xyz;
    u_xlat26 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat3.xyz = vec3(u_xlat26) * vs_TEXCOORD4.xyz;
    u_xlat16_28 = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_28 = u_xlat16_28 * 0.5 + 0.5;
    u_xlat16_28 = dot(vec2(u_xlat16_28), u_xlat10_2.yy);
    u_xlat16_5.x = (-u_xlat10_24) + 1.0;
    u_xlat16_13.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_5.xy = u_xlat16_5.xx * u_xlat16_13.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_21 = max(u_xlat16_5.x, 9.99999975e-05);
    u_xlat16_21 = u_xlat16_28 / u_xlat16_21;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_21 * 0.25;
    u_xlatb10.xz = lessThan(vec4(u_xlat16_28), u_xlat16_5.xxyy).xz;
    u_xlat16_6.xy = vec2(u_xlat16_28) + (-u_xlat16_5.xy);
    u_xlat16_28 = (-u_xlat16_5.x) + u_xlat16_5.y;
    u_xlat16_28 = max(u_xlat16_28, 9.99999975e-05);
    u_xlat16_28 = u_xlat16_6.x / u_xlat16_28;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = u_xlat16_28 * 0.5 + 0.25;
    u_xlat16_5.x = (-u_xlat16_5.y) + 1.0;
    u_xlat16_5.x = max(u_xlat16_5.x, 9.99999975e-05);
    u_xlat16_5.x = u_xlat16_6.y / u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x * 0.25 + 0.75;
    u_xlat16_28 = (u_xlatb10.z) ? u_xlat16_28 : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb10.x) ? u_xlat16_21 : u_xlat16_28;
    u_xlat16_5.y = 0.5;
    u_xlat10_7.xyz = texture(_DiffuseRampTex, u_xlat16_5.xy).xyz;
    u_xlat16_4.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);
    u_xlat16_4.x = log2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_4.x * _SpecularShininess;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_12 = dFdx(u_xlat16_4.x);
    u_xlat16_20 = dFdy(u_xlat16_4.x);
    u_xlat16_12 = abs(u_xlat16_20) + abs(u_xlat16_12);
    u_xlat16_20 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_28 = (-u_xlat16_12) + u_xlat16_20;
    u_xlat16_4.y = u_xlat16_12 + u_xlat16_20;
    u_xlat16_4.xy = (-vec2(u_xlat16_28)) + u_xlat16_4.xy;
    u_xlat16_12 = float(1.0) / u_xlat16_4.y;
    u_xlat16_4.x = u_xlat16_12 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_12 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_12;
    u_xlat16_4.xyz = u_xlat16_4.xxx * _SpecularColor.xyz;
    u_xlat16_4.xyz = u_xlat10_2.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat10_7.xyz * u_xlat16_0.xyz + u_xlat16_4.xyz;
    u_xlat16_5.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_5.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_5.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-unity_SHC.xyz);
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_5.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_5.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_0.xyz + u_xlat16_4.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
uvec2 u_xlatu2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec2 u_xlat16_6;
lowp vec3 u_xlat10_7;
bvec3 u_xlatb10;
mediump float u_xlat16_12;
mediump vec2 u_xlat16_13;
bvec2 u_xlatb18;
mediump float u_xlat16_20;
mediump float u_xlat16_21;
float u_xlat24;
lowp float u_xlat10_24;
int u_xlati24;
bool u_xlatb24;
float u_xlat26;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_0 = u_xlat16_0 * _EnvColor;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati24 = int(u_xlat16_1);
    if((u_xlati24)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb24){
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb24 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb24){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb18.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb18.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat24 = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat24 = vs_TEXCOORD2.z * 17.0 + (-u_xlat24);
            u_xlat24 = u_xlat24 + 0.99000001;
            u_xlat24 = floor(u_xlat24);
            u_xlat24 = max(u_xlat24, 0.0);
            u_xlati24 = int(u_xlat24);
            if((u_xlati24)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_24 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat26 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(u_xlat26) + _LightPosDir.xyz;
    u_xlat16_28 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_4.xyz;
    u_xlat26 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat3.xyz = vec3(u_xlat26) * vs_TEXCOORD4.xyz;
    u_xlat16_28 = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_28 = u_xlat16_28 * 0.5 + 0.5;
    u_xlat16_28 = dot(vec2(u_xlat16_28), u_xlat10_2.yy);
    u_xlat16_5.x = (-u_xlat10_24) + 1.0;
    u_xlat16_13.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_5.xy = u_xlat16_5.xx * u_xlat16_13.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_21 = max(u_xlat16_5.x, 9.99999975e-05);
    u_xlat16_21 = u_xlat16_28 / u_xlat16_21;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_21 * 0.25;
    u_xlatb10.xz = lessThan(vec4(u_xlat16_28), u_xlat16_5.xxyy).xz;
    u_xlat16_6.xy = vec2(u_xlat16_28) + (-u_xlat16_5.xy);
    u_xlat16_28 = (-u_xlat16_5.x) + u_xlat16_5.y;
    u_xlat16_28 = max(u_xlat16_28, 9.99999975e-05);
    u_xlat16_28 = u_xlat16_6.x / u_xlat16_28;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = u_xlat16_28 * 0.5 + 0.25;
    u_xlat16_5.x = (-u_xlat16_5.y) + 1.0;
    u_xlat16_5.x = max(u_xlat16_5.x, 9.99999975e-05);
    u_xlat16_5.x = u_xlat16_6.y / u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x * 0.25 + 0.75;
    u_xlat16_28 = (u_xlatb10.z) ? u_xlat16_28 : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb10.x) ? u_xlat16_21 : u_xlat16_28;
    u_xlat16_5.y = 0.5;
    u_xlat10_7.xyz = texture(_DiffuseRampTex, u_xlat16_5.xy).xyz;
    u_xlat16_4.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);
    u_xlat16_4.x = log2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_4.x * _SpecularShininess;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_12 = dFdx(u_xlat16_4.x);
    u_xlat16_20 = dFdy(u_xlat16_4.x);
    u_xlat16_12 = abs(u_xlat16_20) + abs(u_xlat16_12);
    u_xlat16_20 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_28 = (-u_xlat16_12) + u_xlat16_20;
    u_xlat16_4.y = u_xlat16_12 + u_xlat16_20;
    u_xlat16_4.xy = (-vec2(u_xlat16_28)) + u_xlat16_4.xy;
    u_xlat16_12 = float(1.0) / u_xlat16_4.y;
    u_xlat16_4.x = u_xlat16_12 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_12 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_12;
    u_xlat16_4.xyz = u_xlat16_4.xxx * _SpecularColor.xyz;
    u_xlat16_4.xyz = u_xlat10_2.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat10_7.xyz * u_xlat16_0.xyz + u_xlat16_4.xyz;
    u_xlat16_5.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_5.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_5.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-unity_SHC.xyz);
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_5.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_5.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_0.xyz + u_xlat16_4.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
uvec2 u_xlatu2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec2 u_xlat16_6;
lowp vec3 u_xlat10_7;
bvec3 u_xlatb10;
mediump float u_xlat16_12;
mediump vec2 u_xlat16_13;
bvec2 u_xlatb18;
mediump float u_xlat16_20;
mediump float u_xlat16_21;
float u_xlat24;
lowp float u_xlat10_24;
int u_xlati24;
bool u_xlatb24;
float u_xlat26;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_0 = u_xlat16_0 * _EnvColor;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati24 = int(u_xlat16_1);
    if((u_xlati24)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb24){
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb24 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb24){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb18.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb18.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat24 = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat24 = vs_TEXCOORD2.z * 17.0 + (-u_xlat24);
            u_xlat24 = u_xlat24 + 0.99000001;
            u_xlat24 = floor(u_xlat24);
            u_xlat24 = max(u_xlat24, 0.0);
            u_xlati24 = int(u_xlat24);
            if((u_xlati24)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_24 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat26 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(u_xlat26) + _LightPosDir.xyz;
    u_xlat16_28 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_4.xyz;
    u_xlat26 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat3.xyz = vec3(u_xlat26) * vs_TEXCOORD4.xyz;
    u_xlat16_28 = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_28 = u_xlat16_28 * 0.5 + 0.5;
    u_xlat16_28 = dot(vec2(u_xlat16_28), u_xlat10_2.yy);
    u_xlat16_5.x = (-u_xlat10_24) + 1.0;
    u_xlat16_13.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_5.xy = u_xlat16_5.xx * u_xlat16_13.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_21 = max(u_xlat16_5.x, 9.99999975e-05);
    u_xlat16_21 = u_xlat16_28 / u_xlat16_21;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_21 * 0.25;
    u_xlatb10.xz = lessThan(vec4(u_xlat16_28), u_xlat16_5.xxyy).xz;
    u_xlat16_6.xy = vec2(u_xlat16_28) + (-u_xlat16_5.xy);
    u_xlat16_28 = (-u_xlat16_5.x) + u_xlat16_5.y;
    u_xlat16_28 = max(u_xlat16_28, 9.99999975e-05);
    u_xlat16_28 = u_xlat16_6.x / u_xlat16_28;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = u_xlat16_28 * 0.5 + 0.25;
    u_xlat16_5.x = (-u_xlat16_5.y) + 1.0;
    u_xlat16_5.x = max(u_xlat16_5.x, 9.99999975e-05);
    u_xlat16_5.x = u_xlat16_6.y / u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x * 0.25 + 0.75;
    u_xlat16_28 = (u_xlatb10.z) ? u_xlat16_28 : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb10.x) ? u_xlat16_21 : u_xlat16_28;
    u_xlat16_5.y = 0.5;
    u_xlat10_7.xyz = texture(_DiffuseRampTex, u_xlat16_5.xy).xyz;
    u_xlat16_4.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);
    u_xlat16_4.x = log2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_4.x * _SpecularShininess;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_12 = dFdx(u_xlat16_4.x);
    u_xlat16_20 = dFdy(u_xlat16_4.x);
    u_xlat16_12 = abs(u_xlat16_20) + abs(u_xlat16_12);
    u_xlat16_20 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_28 = (-u_xlat16_12) + u_xlat16_20;
    u_xlat16_4.y = u_xlat16_12 + u_xlat16_20;
    u_xlat16_4.xy = (-vec2(u_xlat16_28)) + u_xlat16_4.xy;
    u_xlat16_12 = float(1.0) / u_xlat16_4.y;
    u_xlat16_4.x = u_xlat16_12 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_12 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_12;
    u_xlat16_4.xyz = u_xlat16_4.xxx * _SpecularColor.xyz;
    u_xlat16_4.xyz = u_xlat10_2.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat10_7.xyz * u_xlat16_0.xyz + u_xlat16_4.xyz;
    u_xlat16_5.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_5.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_5.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-unity_SHC.xyz);
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_5.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_5.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_0.xyz + u_xlat16_4.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_8;
bvec3 u_xlatb9;
mediump vec2 u_xlat16_11;
mediump float u_xlat16_15;
bvec2 u_xlatb16;
mediump vec2 u_xlat16_18;
float u_xlat21;
lowp float u_xlat10_21;
int u_xlati21;
bool u_xlatb21;
mediump float u_xlat16_22;
float u_xlat23;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_0 = u_xlat16_0 * _EnvColor;
    u_xlat16_1.x = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x + (-_AlphaCutoff);
    u_xlat16_1.x = u_xlat16_1.x + 1.0;
    u_xlat16_1.x = floor(u_xlat16_1.x);
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlati21 = int(u_xlat16_1.x);
    if((u_xlati21)==0){discard;}
    u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb21 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb21){
        u_xlat10_21 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat2.yx).x;
        u_xlat16_1.x = u_xlat10_21;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb21){
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb21 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb21){
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb16.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb16.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat21 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat21 = vs_TEXCOORD2.z * 17.0 + (-u_xlat21);
            u_xlat21 = u_xlat21 + 0.99000001;
            u_xlat21 = floor(u_xlat21);
            u_xlat21 = max(u_xlat21, 0.0);
            u_xlati21 = int(u_xlat21);
            if((u_xlati21)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_21 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat16_8.xyz = u_xlat3.xyz * vec3(u_xlat23) + _LightPosDir.xyz;
    u_xlat16_4.x = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_4.xxx;
    u_xlat23 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat3.xyz = vec3(u_xlat23) * vs_TEXCOORD4.xyz;
    u_xlat16_4.x = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.x = dot(u_xlat16_4.xx, u_xlat10_2.yy);
    u_xlat16_11.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_18.x = u_xlat16_1.x + -0.5;
    u_xlat16_18.x = u_xlat16_18.x + u_xlat16_18.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18.x = min(max(u_xlat16_18.x, 0.0), 1.0);
#else
    u_xlat16_18.x = clamp(u_xlat16_18.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_18.x * -2.0 + 3.0;
    u_xlat16_18.x = u_xlat16_18.x * u_xlat16_18.x;
    u_xlat16_18.x = u_xlat16_18.x * u_xlat16_25;
    u_xlat16_4.x = (-u_xlat16_11.x) + u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_18.x * u_xlat16_4.x + u_xlat16_11.x;
    u_xlat16_11.x = (-u_xlat10_21) + 1.0;
    u_xlat16_18.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_11.xy = u_xlat16_11.xx * u_xlat16_18.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_11.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_4.x / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb9.xz = lessThan(u_xlat16_4.xxxx, u_xlat16_11.xxyy).xz;
    u_xlat16_5.xy = (-u_xlat16_11.xy) + u_xlat16_4.xx;
    u_xlat16_4.x = (-u_xlat16_11.x) + u_xlat16_11.y;
    u_xlat16_4.x = max(u_xlat16_4.x, 9.99999975e-05);
    u_xlat16_4.x = u_xlat16_5.x / u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.25;
    u_xlat16_11.x = (-u_xlat16_11.y) + 1.0;
    u_xlat16_11.x = max(u_xlat16_11.x, 9.99999975e-05);
    u_xlat16_11.x = u_xlat16_5.y / u_xlat16_11.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat16_11.x = u_xlat16_11.x * 0.25 + 0.75;
    u_xlat16_4.x = (u_xlatb9.z) ? u_xlat16_4.x : u_xlat16_11.x;
    u_xlat16_4.x = (u_xlatb9.x) ? u_xlat16_25 : u_xlat16_4.x;
    u_xlat16_4.y = 0.5;
    u_xlat10_6.xyz = texture(_DiffuseRampTex, u_xlat16_4.xy).xyz;
    u_xlat16_8.x = dot(u_xlat3.xyz, u_xlat16_8.xyz);
    u_xlat16_8.x = max(u_xlat16_8.x, 0.0);
    u_xlat16_8.x = log2(u_xlat16_8.x);
    u_xlat16_8.x = u_xlat16_8.x * _SpecularShininess;
    u_xlat16_8.x = exp2(u_xlat16_8.x);
    u_xlat21 = u_xlat16_8.x * u_xlat16_1.x;
    u_xlat16_15 = dFdx(u_xlat21);
    u_xlat16_22 = dFdy(u_xlat21);
    u_xlat16_15 = abs(u_xlat16_22) + abs(u_xlat16_15);
    u_xlat16_22 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_4.x = (-u_xlat16_15) + u_xlat16_22;
    u_xlat16_15 = u_xlat16_15 + u_xlat16_22;
    u_xlat16_15 = (-u_xlat16_4.x) + u_xlat16_15;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x + (-u_xlat16_4.x);
    u_xlat16_8.x = float(1.0) / u_xlat16_15;
    u_xlat16_1.x = u_xlat16_8.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_4.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_4.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_4.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-unity_SHC.xyz);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_4.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_8;
bvec3 u_xlatb9;
mediump vec2 u_xlat16_11;
mediump float u_xlat16_15;
bvec2 u_xlatb16;
mediump vec2 u_xlat16_18;
float u_xlat21;
lowp float u_xlat10_21;
int u_xlati21;
bool u_xlatb21;
mediump float u_xlat16_22;
float u_xlat23;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_0 = u_xlat16_0 * _EnvColor;
    u_xlat16_1.x = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x + (-_AlphaCutoff);
    u_xlat16_1.x = u_xlat16_1.x + 1.0;
    u_xlat16_1.x = floor(u_xlat16_1.x);
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlati21 = int(u_xlat16_1.x);
    if((u_xlati21)==0){discard;}
    u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb21 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb21){
        u_xlat10_21 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat2.yx).x;
        u_xlat16_1.x = u_xlat10_21;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb21){
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb21 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb21){
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb16.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb16.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat21 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat21 = vs_TEXCOORD2.z * 17.0 + (-u_xlat21);
            u_xlat21 = u_xlat21 + 0.99000001;
            u_xlat21 = floor(u_xlat21);
            u_xlat21 = max(u_xlat21, 0.0);
            u_xlati21 = int(u_xlat21);
            if((u_xlati21)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_21 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat16_8.xyz = u_xlat3.xyz * vec3(u_xlat23) + _LightPosDir.xyz;
    u_xlat16_4.x = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_4.xxx;
    u_xlat23 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat3.xyz = vec3(u_xlat23) * vs_TEXCOORD4.xyz;
    u_xlat16_4.x = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.x = dot(u_xlat16_4.xx, u_xlat10_2.yy);
    u_xlat16_11.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_18.x = u_xlat16_1.x + -0.5;
    u_xlat16_18.x = u_xlat16_18.x + u_xlat16_18.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18.x = min(max(u_xlat16_18.x, 0.0), 1.0);
#else
    u_xlat16_18.x = clamp(u_xlat16_18.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_18.x * -2.0 + 3.0;
    u_xlat16_18.x = u_xlat16_18.x * u_xlat16_18.x;
    u_xlat16_18.x = u_xlat16_18.x * u_xlat16_25;
    u_xlat16_4.x = (-u_xlat16_11.x) + u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_18.x * u_xlat16_4.x + u_xlat16_11.x;
    u_xlat16_11.x = (-u_xlat10_21) + 1.0;
    u_xlat16_18.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_11.xy = u_xlat16_11.xx * u_xlat16_18.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_11.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_4.x / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb9.xz = lessThan(u_xlat16_4.xxxx, u_xlat16_11.xxyy).xz;
    u_xlat16_5.xy = (-u_xlat16_11.xy) + u_xlat16_4.xx;
    u_xlat16_4.x = (-u_xlat16_11.x) + u_xlat16_11.y;
    u_xlat16_4.x = max(u_xlat16_4.x, 9.99999975e-05);
    u_xlat16_4.x = u_xlat16_5.x / u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.25;
    u_xlat16_11.x = (-u_xlat16_11.y) + 1.0;
    u_xlat16_11.x = max(u_xlat16_11.x, 9.99999975e-05);
    u_xlat16_11.x = u_xlat16_5.y / u_xlat16_11.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat16_11.x = u_xlat16_11.x * 0.25 + 0.75;
    u_xlat16_4.x = (u_xlatb9.z) ? u_xlat16_4.x : u_xlat16_11.x;
    u_xlat16_4.x = (u_xlatb9.x) ? u_xlat16_25 : u_xlat16_4.x;
    u_xlat16_4.y = 0.5;
    u_xlat10_6.xyz = texture(_DiffuseRampTex, u_xlat16_4.xy).xyz;
    u_xlat16_8.x = dot(u_xlat3.xyz, u_xlat16_8.xyz);
    u_xlat16_8.x = max(u_xlat16_8.x, 0.0);
    u_xlat16_8.x = log2(u_xlat16_8.x);
    u_xlat16_8.x = u_xlat16_8.x * _SpecularShininess;
    u_xlat16_8.x = exp2(u_xlat16_8.x);
    u_xlat21 = u_xlat16_8.x * u_xlat16_1.x;
    u_xlat16_15 = dFdx(u_xlat21);
    u_xlat16_22 = dFdy(u_xlat21);
    u_xlat16_15 = abs(u_xlat16_22) + abs(u_xlat16_15);
    u_xlat16_22 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_4.x = (-u_xlat16_15) + u_xlat16_22;
    u_xlat16_15 = u_xlat16_15 + u_xlat16_22;
    u_xlat16_15 = (-u_xlat16_4.x) + u_xlat16_15;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x + (-u_xlat16_4.x);
    u_xlat16_8.x = float(1.0) / u_xlat16_15;
    u_xlat16_1.x = u_xlat16_8.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_4.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_4.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_4.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-unity_SHC.xyz);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_4.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_8;
bvec3 u_xlatb9;
mediump vec2 u_xlat16_11;
mediump float u_xlat16_15;
bvec2 u_xlatb16;
mediump vec2 u_xlat16_18;
float u_xlat21;
lowp float u_xlat10_21;
int u_xlati21;
bool u_xlatb21;
mediump float u_xlat16_22;
float u_xlat23;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_0 = u_xlat16_0 * _EnvColor;
    u_xlat16_1.x = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x + (-_AlphaCutoff);
    u_xlat16_1.x = u_xlat16_1.x + 1.0;
    u_xlat16_1.x = floor(u_xlat16_1.x);
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlati21 = int(u_xlat16_1.x);
    if((u_xlati21)==0){discard;}
    u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb21 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb21){
        u_xlat10_21 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat2.yx).x;
        u_xlat16_1.x = u_xlat10_21;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb21){
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb21 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb21){
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb16.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb16.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat21 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat21 = vs_TEXCOORD2.z * 17.0 + (-u_xlat21);
            u_xlat21 = u_xlat21 + 0.99000001;
            u_xlat21 = floor(u_xlat21);
            u_xlat21 = max(u_xlat21, 0.0);
            u_xlati21 = int(u_xlat21);
            if((u_xlati21)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_21 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat16_8.xyz = u_xlat3.xyz * vec3(u_xlat23) + _LightPosDir.xyz;
    u_xlat16_4.x = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_4.xxx;
    u_xlat23 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat3.xyz = vec3(u_xlat23) * vs_TEXCOORD4.xyz;
    u_xlat16_4.x = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.x = dot(u_xlat16_4.xx, u_xlat10_2.yy);
    u_xlat16_11.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_18.x = u_xlat16_1.x + -0.5;
    u_xlat16_18.x = u_xlat16_18.x + u_xlat16_18.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18.x = min(max(u_xlat16_18.x, 0.0), 1.0);
#else
    u_xlat16_18.x = clamp(u_xlat16_18.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_18.x * -2.0 + 3.0;
    u_xlat16_18.x = u_xlat16_18.x * u_xlat16_18.x;
    u_xlat16_18.x = u_xlat16_18.x * u_xlat16_25;
    u_xlat16_4.x = (-u_xlat16_11.x) + u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_18.x * u_xlat16_4.x + u_xlat16_11.x;
    u_xlat16_11.x = (-u_xlat10_21) + 1.0;
    u_xlat16_18.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_11.xy = u_xlat16_11.xx * u_xlat16_18.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_11.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_4.x / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb9.xz = lessThan(u_xlat16_4.xxxx, u_xlat16_11.xxyy).xz;
    u_xlat16_5.xy = (-u_xlat16_11.xy) + u_xlat16_4.xx;
    u_xlat16_4.x = (-u_xlat16_11.x) + u_xlat16_11.y;
    u_xlat16_4.x = max(u_xlat16_4.x, 9.99999975e-05);
    u_xlat16_4.x = u_xlat16_5.x / u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.25;
    u_xlat16_11.x = (-u_xlat16_11.y) + 1.0;
    u_xlat16_11.x = max(u_xlat16_11.x, 9.99999975e-05);
    u_xlat16_11.x = u_xlat16_5.y / u_xlat16_11.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat16_11.x = u_xlat16_11.x * 0.25 + 0.75;
    u_xlat16_4.x = (u_xlatb9.z) ? u_xlat16_4.x : u_xlat16_11.x;
    u_xlat16_4.x = (u_xlatb9.x) ? u_xlat16_25 : u_xlat16_4.x;
    u_xlat16_4.y = 0.5;
    u_xlat10_6.xyz = texture(_DiffuseRampTex, u_xlat16_4.xy).xyz;
    u_xlat16_8.x = dot(u_xlat3.xyz, u_xlat16_8.xyz);
    u_xlat16_8.x = max(u_xlat16_8.x, 0.0);
    u_xlat16_8.x = log2(u_xlat16_8.x);
    u_xlat16_8.x = u_xlat16_8.x * _SpecularShininess;
    u_xlat16_8.x = exp2(u_xlat16_8.x);
    u_xlat21 = u_xlat16_8.x * u_xlat16_1.x;
    u_xlat16_15 = dFdx(u_xlat21);
    u_xlat16_22 = dFdy(u_xlat21);
    u_xlat16_15 = abs(u_xlat16_22) + abs(u_xlat16_15);
    u_xlat16_22 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_4.x = (-u_xlat16_15) + u_xlat16_22;
    u_xlat16_15 = u_xlat16_15 + u_xlat16_22;
    u_xlat16_15 = (-u_xlat16_4.x) + u_xlat16_15;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x + (-u_xlat16_4.x);
    u_xlat16_8.x = float(1.0) / u_xlat16_15;
    u_xlat16_1.x = u_xlat16_8.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_4.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_4.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_4.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-unity_SHC.xyz);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_4.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor0;
uniform 	mediump vec4 _SpecularColor1;
uniform 	mediump vec4 _SpecularColor2;
uniform 	mediump vec4 _SpecularColor3;
uniform 	mediump vec4 _SpecularColor4;
uniform 	mediump vec4 _SpecularColor5;
uniform 	mediump vec4 _SpecularColor6;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
uvec2 u_xlatu3;
bvec4 u_xlatb3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec2 u_xlat16_6;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_12;
bvec2 u_xlatb17;
mediump float u_xlat16_19;
mediump vec2 u_xlat16_20;
float u_xlat21;
lowp float u_xlat10_21;
int u_xlati21;
bool u_xlatb21;
float u_xlat24;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_0 = u_xlat16_0 * _EnvColor;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati21 = int(u_xlat16_1);
    if((u_xlati21)==0){discard;}
    u_xlat10_1 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_1.w * 8.0;
    u_xlat16_2.x = roundEven(u_xlat16_2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<u_xlat16_2.x);
#else
    u_xlatb21 = 0.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(u_xlat16_2.x<1.5);
#else
    u_xlatb3.x = u_xlat16_2.x<1.5;
#endif
    u_xlatb21 = u_xlatb21 && u_xlatb3.x;
    if(u_xlatb21){
        u_xlat16_9.xyz = _SpecularColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(1.5<u_xlat16_2.x);
#else
        u_xlatb21 = 1.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(u_xlat16_2.x<2.5);
#else
        u_xlatb3.x = u_xlat16_2.x<2.5;
#endif
        u_xlatb21 = u_xlatb21 && u_xlatb3.x;
        if(u_xlatb21){
            u_xlat16_9.xyz = _SpecularColor2.xyz;
        } else {
            u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_2.xxxx);
            u_xlatb4 = lessThan(u_xlat16_2.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
            u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
            u_xlatb3.z = u_xlatb3.z && u_xlatb4.z;
            u_xlatb3.w = u_xlatb3.w && u_xlatb4.w;
            u_xlat16_5.xyz = (u_xlatb3.w) ? _SpecularColor6.xyz : _SpecularColor0.xyz;
            u_xlat16_5.xyz = (u_xlatb3.z) ? _SpecularColor5.xyz : u_xlat16_5.xyz;
            u_xlat16_5.xyz = (u_xlatb3.y) ? _SpecularColor4.xyz : u_xlat16_5.xyz;
            u_xlat16_9.xyz = (u_xlatb3.x) ? _SpecularColor3.xyz : u_xlat16_5.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb21){
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb21 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb21){
            u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb17.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb17.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb17.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat21 = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat21 = vs_TEXCOORD2.z * 17.0 + (-u_xlat21);
            u_xlat21 = u_xlat21 + 0.99000001;
            u_xlat21 = floor(u_xlat21);
            u_xlat21 = max(u_xlat21, 0.0);
            u_xlati21 = int(u_xlat21);
            if((u_xlati21)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_21 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _LightPosDir.xyz;
    u_xlat16_2.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz;
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD4.xyz;
    u_xlat16_2.x = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + 0.5;
    u_xlat16_2.x = dot(u_xlat16_2.xx, u_xlat10_1.yy);
    u_xlat16_26 = (-u_xlat10_21) + 1.0;
    u_xlat16_6.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = vec2(u_xlat16_26) * u_xlat16_6.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_26 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_26 = u_xlat16_2.x / u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_26 * 0.25;
    u_xlatb4.xy = lessThan(u_xlat16_2.xxxx, u_xlat16_6.xyxx).xy;
    u_xlat16_20.xy = u_xlat16_2.xx + (-u_xlat16_6.xy);
    u_xlat16_2.x = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = u_xlat16_20.x / u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_20.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_2.x = (u_xlatb4.y) ? u_xlat16_2.x : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb4.x) ? u_xlat16_26 : u_xlat16_2.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_4.xyz = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _SpecularShininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_5.x = dFdx(u_xlat16_2.x);
    u_xlat16_12 = dFdy(u_xlat16_2.x);
    u_xlat16_5.x = abs(u_xlat16_12) + abs(u_xlat16_5.x);
    u_xlat16_12 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_19 = (-u_xlat16_5.x) + u_xlat16_12;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_12;
    u_xlat16_5.x = (-u_xlat16_19) + u_xlat16_5.x;
    u_xlat16_2.x = u_xlat16_2.x + (-u_xlat16_19);
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5.x;
    u_xlat16_2.xyz = u_xlat16_9.xyz * u_xlat16_2.xxx;
    u_xlat16_2.xyz = u_xlat10_1.xxx * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    u_xlat16_5.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_5.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_5.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-unity_SHC.xyz);
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_5.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_5.xyz = u_xlat16_3.xyz * _CharacterSHColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor0;
uniform 	mediump vec4 _SpecularColor1;
uniform 	mediump vec4 _SpecularColor2;
uniform 	mediump vec4 _SpecularColor3;
uniform 	mediump vec4 _SpecularColor4;
uniform 	mediump vec4 _SpecularColor5;
uniform 	mediump vec4 _SpecularColor6;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
uvec2 u_xlatu3;
bvec4 u_xlatb3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec2 u_xlat16_6;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_12;
bvec2 u_xlatb17;
mediump float u_xlat16_19;
mediump vec2 u_xlat16_20;
float u_xlat21;
lowp float u_xlat10_21;
int u_xlati21;
bool u_xlatb21;
float u_xlat24;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_0 = u_xlat16_0 * _EnvColor;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati21 = int(u_xlat16_1);
    if((u_xlati21)==0){discard;}
    u_xlat10_1 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_1.w * 8.0;
    u_xlat16_2.x = roundEven(u_xlat16_2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<u_xlat16_2.x);
#else
    u_xlatb21 = 0.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(u_xlat16_2.x<1.5);
#else
    u_xlatb3.x = u_xlat16_2.x<1.5;
#endif
    u_xlatb21 = u_xlatb21 && u_xlatb3.x;
    if(u_xlatb21){
        u_xlat16_9.xyz = _SpecularColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(1.5<u_xlat16_2.x);
#else
        u_xlatb21 = 1.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(u_xlat16_2.x<2.5);
#else
        u_xlatb3.x = u_xlat16_2.x<2.5;
#endif
        u_xlatb21 = u_xlatb21 && u_xlatb3.x;
        if(u_xlatb21){
            u_xlat16_9.xyz = _SpecularColor2.xyz;
        } else {
            u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_2.xxxx);
            u_xlatb4 = lessThan(u_xlat16_2.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
            u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
            u_xlatb3.z = u_xlatb3.z && u_xlatb4.z;
            u_xlatb3.w = u_xlatb3.w && u_xlatb4.w;
            u_xlat16_5.xyz = (u_xlatb3.w) ? _SpecularColor6.xyz : _SpecularColor0.xyz;
            u_xlat16_5.xyz = (u_xlatb3.z) ? _SpecularColor5.xyz : u_xlat16_5.xyz;
            u_xlat16_5.xyz = (u_xlatb3.y) ? _SpecularColor4.xyz : u_xlat16_5.xyz;
            u_xlat16_9.xyz = (u_xlatb3.x) ? _SpecularColor3.xyz : u_xlat16_5.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb21){
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb21 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb21){
            u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb17.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb17.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb17.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat21 = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat21 = vs_TEXCOORD2.z * 17.0 + (-u_xlat21);
            u_xlat21 = u_xlat21 + 0.99000001;
            u_xlat21 = floor(u_xlat21);
            u_xlat21 = max(u_xlat21, 0.0);
            u_xlati21 = int(u_xlat21);
            if((u_xlati21)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_21 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _LightPosDir.xyz;
    u_xlat16_2.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz;
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD4.xyz;
    u_xlat16_2.x = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + 0.5;
    u_xlat16_2.x = dot(u_xlat16_2.xx, u_xlat10_1.yy);
    u_xlat16_26 = (-u_xlat10_21) + 1.0;
    u_xlat16_6.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = vec2(u_xlat16_26) * u_xlat16_6.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_26 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_26 = u_xlat16_2.x / u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_26 * 0.25;
    u_xlatb4.xy = lessThan(u_xlat16_2.xxxx, u_xlat16_6.xyxx).xy;
    u_xlat16_20.xy = u_xlat16_2.xx + (-u_xlat16_6.xy);
    u_xlat16_2.x = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = u_xlat16_20.x / u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_20.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_2.x = (u_xlatb4.y) ? u_xlat16_2.x : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb4.x) ? u_xlat16_26 : u_xlat16_2.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_4.xyz = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _SpecularShininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_5.x = dFdx(u_xlat16_2.x);
    u_xlat16_12 = dFdy(u_xlat16_2.x);
    u_xlat16_5.x = abs(u_xlat16_12) + abs(u_xlat16_5.x);
    u_xlat16_12 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_19 = (-u_xlat16_5.x) + u_xlat16_12;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_12;
    u_xlat16_5.x = (-u_xlat16_19) + u_xlat16_5.x;
    u_xlat16_2.x = u_xlat16_2.x + (-u_xlat16_19);
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5.x;
    u_xlat16_2.xyz = u_xlat16_9.xyz * u_xlat16_2.xxx;
    u_xlat16_2.xyz = u_xlat10_1.xxx * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    u_xlat16_5.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_5.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_5.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-unity_SHC.xyz);
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_5.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_5.xyz = u_xlat16_3.xyz * _CharacterSHColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor0;
uniform 	mediump vec4 _SpecularColor1;
uniform 	mediump vec4 _SpecularColor2;
uniform 	mediump vec4 _SpecularColor3;
uniform 	mediump vec4 _SpecularColor4;
uniform 	mediump vec4 _SpecularColor5;
uniform 	mediump vec4 _SpecularColor6;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
uvec2 u_xlatu3;
bvec4 u_xlatb3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec2 u_xlat16_6;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_12;
bvec2 u_xlatb17;
mediump float u_xlat16_19;
mediump vec2 u_xlat16_20;
float u_xlat21;
lowp float u_xlat10_21;
int u_xlati21;
bool u_xlatb21;
float u_xlat24;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_0 = u_xlat16_0 * _EnvColor;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati21 = int(u_xlat16_1);
    if((u_xlati21)==0){discard;}
    u_xlat10_1 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_1.w * 8.0;
    u_xlat16_2.x = roundEven(u_xlat16_2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<u_xlat16_2.x);
#else
    u_xlatb21 = 0.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(u_xlat16_2.x<1.5);
#else
    u_xlatb3.x = u_xlat16_2.x<1.5;
#endif
    u_xlatb21 = u_xlatb21 && u_xlatb3.x;
    if(u_xlatb21){
        u_xlat16_9.xyz = _SpecularColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(1.5<u_xlat16_2.x);
#else
        u_xlatb21 = 1.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(u_xlat16_2.x<2.5);
#else
        u_xlatb3.x = u_xlat16_2.x<2.5;
#endif
        u_xlatb21 = u_xlatb21 && u_xlatb3.x;
        if(u_xlatb21){
            u_xlat16_9.xyz = _SpecularColor2.xyz;
        } else {
            u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_2.xxxx);
            u_xlatb4 = lessThan(u_xlat16_2.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
            u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
            u_xlatb3.z = u_xlatb3.z && u_xlatb4.z;
            u_xlatb3.w = u_xlatb3.w && u_xlatb4.w;
            u_xlat16_5.xyz = (u_xlatb3.w) ? _SpecularColor6.xyz : _SpecularColor0.xyz;
            u_xlat16_5.xyz = (u_xlatb3.z) ? _SpecularColor5.xyz : u_xlat16_5.xyz;
            u_xlat16_5.xyz = (u_xlatb3.y) ? _SpecularColor4.xyz : u_xlat16_5.xyz;
            u_xlat16_9.xyz = (u_xlatb3.x) ? _SpecularColor3.xyz : u_xlat16_5.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb21){
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb21 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb21){
            u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb17.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb17.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb17.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat21 = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat21 = vs_TEXCOORD2.z * 17.0 + (-u_xlat21);
            u_xlat21 = u_xlat21 + 0.99000001;
            u_xlat21 = floor(u_xlat21);
            u_xlat21 = max(u_xlat21, 0.0);
            u_xlati21 = int(u_xlat21);
            if((u_xlati21)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_21 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _LightPosDir.xyz;
    u_xlat16_2.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz;
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD4.xyz;
    u_xlat16_2.x = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + 0.5;
    u_xlat16_2.x = dot(u_xlat16_2.xx, u_xlat10_1.yy);
    u_xlat16_26 = (-u_xlat10_21) + 1.0;
    u_xlat16_6.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = vec2(u_xlat16_26) * u_xlat16_6.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_26 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_26 = u_xlat16_2.x / u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_26 * 0.25;
    u_xlatb4.xy = lessThan(u_xlat16_2.xxxx, u_xlat16_6.xyxx).xy;
    u_xlat16_20.xy = u_xlat16_2.xx + (-u_xlat16_6.xy);
    u_xlat16_2.x = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = u_xlat16_20.x / u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_20.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_2.x = (u_xlatb4.y) ? u_xlat16_2.x : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb4.x) ? u_xlat16_26 : u_xlat16_2.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_4.xyz = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _SpecularShininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_5.x = dFdx(u_xlat16_2.x);
    u_xlat16_12 = dFdy(u_xlat16_2.x);
    u_xlat16_5.x = abs(u_xlat16_12) + abs(u_xlat16_5.x);
    u_xlat16_12 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_19 = (-u_xlat16_5.x) + u_xlat16_12;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_12;
    u_xlat16_5.x = (-u_xlat16_19) + u_xlat16_5.x;
    u_xlat16_2.x = u_xlat16_2.x + (-u_xlat16_19);
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5.x;
    u_xlat16_2.xyz = u_xlat16_9.xyz * u_xlat16_2.xxx;
    u_xlat16_2.xyz = u_xlat10_1.xxx * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    u_xlat16_5.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_5.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_5.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-unity_SHC.xyz);
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_5.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_5.xyz = u_xlat16_3.xyz * _CharacterSHColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor0;
uniform 	mediump vec4 _SpecularColor1;
uniform 	mediump vec4 _SpecularColor2;
uniform 	mediump vec4 _SpecularColor3;
uniform 	mediump vec4 _SpecularColor4;
uniform 	mediump vec4 _SpecularColor5;
uniform 	mediump vec4 _SpecularColor6;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
uvec2 u_xlatu3;
mediump vec3 u_xlat16_4;
vec4 u_xlat5;
lowp vec3 u_xlat10_5;
bvec4 u_xlatb5;
bvec4 u_xlatb6;
mediump vec2 u_xlat16_7;
mediump vec2 u_xlat16_8;
mediump float u_xlat16_11;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_20;
bvec2 u_xlatb21;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
int u_xlati27;
bool u_xlatb27;
mediump float u_xlat16_29;
float u_xlat30;
mediump float u_xlat16_31;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_0 = u_xlat16_0 * _EnvColor;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati27 = int(u_xlat16_1);
    if((u_xlati27)==0){discard;}
    u_xlat10_1 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_1.w * 8.0;
    u_xlat16_2.x = roundEven(u_xlat16_2.x);
    u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb27 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb27){
        u_xlat10_27 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat3.yx).x;
        u_xlat16_11 = u_xlat10_27;
    } else {
        u_xlat16_11 = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<u_xlat16_2.x);
#else
    u_xlatb27 = 0.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb21.x = !!(u_xlat16_2.x<1.5);
#else
    u_xlatb21.x = u_xlat16_2.x<1.5;
#endif
    u_xlatb27 = u_xlatb27 && u_xlatb21.x;
    if(u_xlatb27){
        u_xlat16_4.xyz = _SpecularColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(1.5<u_xlat16_2.x);
#else
        u_xlatb27 = 1.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb21.x = !!(u_xlat16_2.x<2.5);
#else
        u_xlatb21.x = u_xlat16_2.x<2.5;
#endif
        u_xlatb27 = u_xlatb27 && u_xlatb21.x;
        if(u_xlatb27){
            u_xlat16_4.xyz = _SpecularColor2.xyz;
        } else {
            u_xlatb5 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_2.xxxx);
            u_xlatb6 = lessThan(u_xlat16_2.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb5.x = u_xlatb5.x && u_xlatb6.x;
            u_xlatb5.y = u_xlatb5.y && u_xlatb6.y;
            u_xlatb5.z = u_xlatb5.z && u_xlatb6.z;
            u_xlatb5.w = u_xlatb5.w && u_xlatb6.w;
            u_xlat16_2.xzw = (u_xlatb5.w) ? _SpecularColor6.xyz : _SpecularColor0.xyz;
            u_xlat16_2.xzw = (u_xlatb5.z) ? _SpecularColor5.xyz : u_xlat16_2.xzw;
            u_xlat16_2.xzw = (u_xlatb5.y) ? _SpecularColor4.xyz : u_xlat16_2.xzw;
            u_xlat16_4.xyz = (u_xlatb5.x) ? _SpecularColor3.xyz : u_xlat16_2.xzw;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb27){
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb27 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb27){
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb21.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb21.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb21.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat5.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat5.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat5.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat5.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat27 = dot(u_xlat5, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat27 = vs_TEXCOORD2.z * 17.0 + (-u_xlat27);
            u_xlat27 = u_xlat27 + 0.99000001;
            u_xlat27 = floor(u_xlat27);
            u_xlat27 = max(u_xlat27, 0.0);
            u_xlati27 = int(u_xlat27);
            if((u_xlati27)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_27 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_2.xzw = u_xlat3.xyz * vec3(u_xlat30) + _LightPosDir.xyz;
    u_xlat16_31 = dot(u_xlat16_2.xzw, u_xlat16_2.xzw);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_2.xzw = u_xlat16_2.xzw * vec3(u_xlat16_31);
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD4.xyz;
    u_xlat16_31 = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_31 = u_xlat16_31 * 0.5 + 0.5;
    u_xlat16_31 = dot(vec2(u_xlat16_31), u_xlat10_1.yy);
    u_xlat16_7.x = u_xlat16_11 * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_11 + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_31 = u_xlat16_31 + (-u_xlat16_7.x);
    u_xlat16_31 = u_xlat16_16.x * u_xlat16_31 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_27) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_31 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb5.xy = lessThan(vec4(u_xlat16_31), u_xlat16_7.xyxx).xy;
    u_xlat16_8.xy = vec2(u_xlat16_31) + (-u_xlat16_7.xy);
    u_xlat16_31 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_31 = max(u_xlat16_31, 9.99999975e-05);
    u_xlat16_31 = u_xlat16_8.x / u_xlat16_31;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_31 = u_xlat16_31 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_31 = (u_xlatb5.y) ? u_xlat16_31 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb5.x) ? u_xlat16_25 : u_xlat16_31;
    u_xlat16_7.y = 0.5;
    u_xlat10_5.xyz = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat16_2.xzw);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _SpecularShininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat27 = u_xlat16_2.x * u_xlat16_11;
    u_xlat16_20 = dFdx(u_xlat27);
    u_xlat16_29 = dFdy(u_xlat27);
    u_xlat16_20 = abs(u_xlat16_29) + abs(u_xlat16_20);
    u_xlat16_29 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_31 = (-u_xlat16_20) + u_xlat16_29;
    u_xlat16_20 = u_xlat16_20 + u_xlat16_29;
    u_xlat16_20 = (-u_xlat16_31) + u_xlat16_20;
    u_xlat16_2.x = u_xlat16_11 * u_xlat16_2.x + (-u_xlat16_31);
    u_xlat16_11 = float(1.0) / u_xlat16_20;
    u_xlat16_2.x = u_xlat16_11 * u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_11 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_11;
    u_xlat16_2.xyz = u_xlat16_4.xyz * u_xlat16_2.xxx;
    u_xlat16_2.xyz = u_xlat10_1.xxx * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_5.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    u_xlat16_4.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_4.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_4.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-unity_SHC.xyz);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_4.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = u_xlat16_3.xyz * _CharacterSHColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor0;
uniform 	mediump vec4 _SpecularColor1;
uniform 	mediump vec4 _SpecularColor2;
uniform 	mediump vec4 _SpecularColor3;
uniform 	mediump vec4 _SpecularColor4;
uniform 	mediump vec4 _SpecularColor5;
uniform 	mediump vec4 _SpecularColor6;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
uvec2 u_xlatu3;
mediump vec3 u_xlat16_4;
vec4 u_xlat5;
lowp vec3 u_xlat10_5;
bvec4 u_xlatb5;
bvec4 u_xlatb6;
mediump vec2 u_xlat16_7;
mediump vec2 u_xlat16_8;
mediump float u_xlat16_11;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_20;
bvec2 u_xlatb21;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
int u_xlati27;
bool u_xlatb27;
mediump float u_xlat16_29;
float u_xlat30;
mediump float u_xlat16_31;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_0 = u_xlat16_0 * _EnvColor;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati27 = int(u_xlat16_1);
    if((u_xlati27)==0){discard;}
    u_xlat10_1 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_1.w * 8.0;
    u_xlat16_2.x = roundEven(u_xlat16_2.x);
    u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb27 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb27){
        u_xlat10_27 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat3.yx).x;
        u_xlat16_11 = u_xlat10_27;
    } else {
        u_xlat16_11 = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<u_xlat16_2.x);
#else
    u_xlatb27 = 0.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb21.x = !!(u_xlat16_2.x<1.5);
#else
    u_xlatb21.x = u_xlat16_2.x<1.5;
#endif
    u_xlatb27 = u_xlatb27 && u_xlatb21.x;
    if(u_xlatb27){
        u_xlat16_4.xyz = _SpecularColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(1.5<u_xlat16_2.x);
#else
        u_xlatb27 = 1.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb21.x = !!(u_xlat16_2.x<2.5);
#else
        u_xlatb21.x = u_xlat16_2.x<2.5;
#endif
        u_xlatb27 = u_xlatb27 && u_xlatb21.x;
        if(u_xlatb27){
            u_xlat16_4.xyz = _SpecularColor2.xyz;
        } else {
            u_xlatb5 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_2.xxxx);
            u_xlatb6 = lessThan(u_xlat16_2.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb5.x = u_xlatb5.x && u_xlatb6.x;
            u_xlatb5.y = u_xlatb5.y && u_xlatb6.y;
            u_xlatb5.z = u_xlatb5.z && u_xlatb6.z;
            u_xlatb5.w = u_xlatb5.w && u_xlatb6.w;
            u_xlat16_2.xzw = (u_xlatb5.w) ? _SpecularColor6.xyz : _SpecularColor0.xyz;
            u_xlat16_2.xzw = (u_xlatb5.z) ? _SpecularColor5.xyz : u_xlat16_2.xzw;
            u_xlat16_2.xzw = (u_xlatb5.y) ? _SpecularColor4.xyz : u_xlat16_2.xzw;
            u_xlat16_4.xyz = (u_xlatb5.x) ? _SpecularColor3.xyz : u_xlat16_2.xzw;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb27){
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb27 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb27){
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb21.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb21.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb21.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat5.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat5.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat5.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat5.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat27 = dot(u_xlat5, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat27 = vs_TEXCOORD2.z * 17.0 + (-u_xlat27);
            u_xlat27 = u_xlat27 + 0.99000001;
            u_xlat27 = floor(u_xlat27);
            u_xlat27 = max(u_xlat27, 0.0);
            u_xlati27 = int(u_xlat27);
            if((u_xlati27)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_27 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_2.xzw = u_xlat3.xyz * vec3(u_xlat30) + _LightPosDir.xyz;
    u_xlat16_31 = dot(u_xlat16_2.xzw, u_xlat16_2.xzw);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_2.xzw = u_xlat16_2.xzw * vec3(u_xlat16_31);
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD4.xyz;
    u_xlat16_31 = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_31 = u_xlat16_31 * 0.5 + 0.5;
    u_xlat16_31 = dot(vec2(u_xlat16_31), u_xlat10_1.yy);
    u_xlat16_7.x = u_xlat16_11 * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_11 + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_31 = u_xlat16_31 + (-u_xlat16_7.x);
    u_xlat16_31 = u_xlat16_16.x * u_xlat16_31 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_27) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_31 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb5.xy = lessThan(vec4(u_xlat16_31), u_xlat16_7.xyxx).xy;
    u_xlat16_8.xy = vec2(u_xlat16_31) + (-u_xlat16_7.xy);
    u_xlat16_31 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_31 = max(u_xlat16_31, 9.99999975e-05);
    u_xlat16_31 = u_xlat16_8.x / u_xlat16_31;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_31 = u_xlat16_31 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_31 = (u_xlatb5.y) ? u_xlat16_31 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb5.x) ? u_xlat16_25 : u_xlat16_31;
    u_xlat16_7.y = 0.5;
    u_xlat10_5.xyz = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat16_2.xzw);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _SpecularShininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat27 = u_xlat16_2.x * u_xlat16_11;
    u_xlat16_20 = dFdx(u_xlat27);
    u_xlat16_29 = dFdy(u_xlat27);
    u_xlat16_20 = abs(u_xlat16_29) + abs(u_xlat16_20);
    u_xlat16_29 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_31 = (-u_xlat16_20) + u_xlat16_29;
    u_xlat16_20 = u_xlat16_20 + u_xlat16_29;
    u_xlat16_20 = (-u_xlat16_31) + u_xlat16_20;
    u_xlat16_2.x = u_xlat16_11 * u_xlat16_2.x + (-u_xlat16_31);
    u_xlat16_11 = float(1.0) / u_xlat16_20;
    u_xlat16_2.x = u_xlat16_11 * u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_11 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_11;
    u_xlat16_2.xyz = u_xlat16_4.xyz * u_xlat16_2.xxx;
    u_xlat16_2.xyz = u_xlat10_1.xxx * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_5.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    u_xlat16_4.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_4.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_4.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-unity_SHC.xyz);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_4.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = u_xlat16_3.xyz * _CharacterSHColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor0;
uniform 	mediump vec4 _SpecularColor1;
uniform 	mediump vec4 _SpecularColor2;
uniform 	mediump vec4 _SpecularColor3;
uniform 	mediump vec4 _SpecularColor4;
uniform 	mediump vec4 _SpecularColor5;
uniform 	mediump vec4 _SpecularColor6;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
uvec2 u_xlatu3;
mediump vec3 u_xlat16_4;
vec4 u_xlat5;
lowp vec3 u_xlat10_5;
bvec4 u_xlatb5;
bvec4 u_xlatb6;
mediump vec2 u_xlat16_7;
mediump vec2 u_xlat16_8;
mediump float u_xlat16_11;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_20;
bvec2 u_xlatb21;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
int u_xlati27;
bool u_xlatb27;
mediump float u_xlat16_29;
float u_xlat30;
mediump float u_xlat16_31;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_0 = u_xlat16_0 * _EnvColor;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati27 = int(u_xlat16_1);
    if((u_xlati27)==0){discard;}
    u_xlat10_1 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_1.w * 8.0;
    u_xlat16_2.x = roundEven(u_xlat16_2.x);
    u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb27 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb27){
        u_xlat10_27 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat3.yx).x;
        u_xlat16_11 = u_xlat10_27;
    } else {
        u_xlat16_11 = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<u_xlat16_2.x);
#else
    u_xlatb27 = 0.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb21.x = !!(u_xlat16_2.x<1.5);
#else
    u_xlatb21.x = u_xlat16_2.x<1.5;
#endif
    u_xlatb27 = u_xlatb27 && u_xlatb21.x;
    if(u_xlatb27){
        u_xlat16_4.xyz = _SpecularColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(1.5<u_xlat16_2.x);
#else
        u_xlatb27 = 1.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb21.x = !!(u_xlat16_2.x<2.5);
#else
        u_xlatb21.x = u_xlat16_2.x<2.5;
#endif
        u_xlatb27 = u_xlatb27 && u_xlatb21.x;
        if(u_xlatb27){
            u_xlat16_4.xyz = _SpecularColor2.xyz;
        } else {
            u_xlatb5 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_2.xxxx);
            u_xlatb6 = lessThan(u_xlat16_2.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb5.x = u_xlatb5.x && u_xlatb6.x;
            u_xlatb5.y = u_xlatb5.y && u_xlatb6.y;
            u_xlatb5.z = u_xlatb5.z && u_xlatb6.z;
            u_xlatb5.w = u_xlatb5.w && u_xlatb6.w;
            u_xlat16_2.xzw = (u_xlatb5.w) ? _SpecularColor6.xyz : _SpecularColor0.xyz;
            u_xlat16_2.xzw = (u_xlatb5.z) ? _SpecularColor5.xyz : u_xlat16_2.xzw;
            u_xlat16_2.xzw = (u_xlatb5.y) ? _SpecularColor4.xyz : u_xlat16_2.xzw;
            u_xlat16_4.xyz = (u_xlatb5.x) ? _SpecularColor3.xyz : u_xlat16_2.xzw;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb27){
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb27 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb27){
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb21.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb21.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb21.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat5.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat5.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat5.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat5.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat27 = dot(u_xlat5, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat27 = vs_TEXCOORD2.z * 17.0 + (-u_xlat27);
            u_xlat27 = u_xlat27 + 0.99000001;
            u_xlat27 = floor(u_xlat27);
            u_xlat27 = max(u_xlat27, 0.0);
            u_xlati27 = int(u_xlat27);
            if((u_xlati27)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_27 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_2.xzw = u_xlat3.xyz * vec3(u_xlat30) + _LightPosDir.xyz;
    u_xlat16_31 = dot(u_xlat16_2.xzw, u_xlat16_2.xzw);
    u_xlat16_31 = inversesqrt(u_xlat16_31);
    u_xlat16_2.xzw = u_xlat16_2.xzw * vec3(u_xlat16_31);
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD4.xyz;
    u_xlat16_31 = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_31 = u_xlat16_31 * 0.5 + 0.5;
    u_xlat16_31 = dot(vec2(u_xlat16_31), u_xlat10_1.yy);
    u_xlat16_7.x = u_xlat16_11 * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_11 + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_31 = u_xlat16_31 + (-u_xlat16_7.x);
    u_xlat16_31 = u_xlat16_16.x * u_xlat16_31 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_27) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_31 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb5.xy = lessThan(vec4(u_xlat16_31), u_xlat16_7.xyxx).xy;
    u_xlat16_8.xy = vec2(u_xlat16_31) + (-u_xlat16_7.xy);
    u_xlat16_31 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_31 = max(u_xlat16_31, 9.99999975e-05);
    u_xlat16_31 = u_xlat16_8.x / u_xlat16_31;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_31 = u_xlat16_31 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_31 = (u_xlatb5.y) ? u_xlat16_31 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb5.x) ? u_xlat16_25 : u_xlat16_31;
    u_xlat16_7.y = 0.5;
    u_xlat10_5.xyz = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat16_2.xzw);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _SpecularShininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat27 = u_xlat16_2.x * u_xlat16_11;
    u_xlat16_20 = dFdx(u_xlat27);
    u_xlat16_29 = dFdy(u_xlat27);
    u_xlat16_20 = abs(u_xlat16_29) + abs(u_xlat16_20);
    u_xlat16_29 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_31 = (-u_xlat16_20) + u_xlat16_29;
    u_xlat16_20 = u_xlat16_20 + u_xlat16_29;
    u_xlat16_20 = (-u_xlat16_31) + u_xlat16_20;
    u_xlat16_2.x = u_xlat16_11 * u_xlat16_2.x + (-u_xlat16_31);
    u_xlat16_11 = float(1.0) / u_xlat16_20;
    u_xlat16_2.x = u_xlat16_11 * u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_11 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_11;
    u_xlat16_2.xyz = u_xlat16_4.xyz * u_xlat16_2.xxx;
    u_xlat16_2.xyz = u_xlat10_1.xxx * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_5.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    u_xlat16_4.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_4.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_4.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-unity_SHC.xyz);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_4.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = u_xlat16_3.xyz * _CharacterSHColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_DIFFUSE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampMuitiTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
uvec2 u_xlatu2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
lowp vec3 u_xlat10_5;
bvec2 u_xlatb5;
mediump vec2 u_xlat16_6;
mediump vec3 u_xlat16_10;
mediump vec2 u_xlat16_11;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
mediump vec2 u_xlat16_18;
float u_xlat21;
lowp float u_xlat10_21;
int u_xlati21;
bool u_xlatb21;
float u_xlat23;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_0 = u_xlat16_0 * _EnvColor;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati21 = int(u_xlat16_1);
    if((u_xlati21)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb21){
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb21 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb21){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb16.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb16.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat21 = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat21 = vs_TEXCOORD2.z * 17.0 + (-u_xlat21);
            u_xlat21 = u_xlat21 + 0.99000001;
            u_xlat21 = floor(u_xlat21);
            u_xlat21 = max(u_xlat21, 0.0);
            u_xlati21 = int(u_xlat21);
            if((u_xlati21)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat10_21 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat16_3.x = u_xlat10_1.w * 8.0;
    u_xlat16_3.x = roundEven(u_xlat16_3.x);
    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat23 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat16_10.xyz = u_xlat2.xyz * vec3(u_xlat23) + _LightPosDir.xyz;
    u_xlat16_4.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_4.xxx;
    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
    u_xlat16_4.x = dot(u_xlat2.xyz, _LightPosDir.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.x = dot(u_xlat16_4.xx, u_xlat10_1.yy);
    u_xlat16_11.x = (-u_xlat10_21) + 1.0;
    u_xlat16_18.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_11.xy = u_xlat16_11.xx * u_xlat16_18.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_11.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_4.x / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb5.xy = lessThan(u_xlat16_4.xxxx, u_xlat16_11.xyxx).xy;
    u_xlat16_6.xy = (-u_xlat16_11.xy) + u_xlat16_4.xx;
    u_xlat16_4.x = (-u_xlat16_11.x) + u_xlat16_11.y;
    u_xlat16_4.x = max(u_xlat16_4.x, 9.99999975e-05);
    u_xlat16_4.x = u_xlat16_6.x / u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.25;
    u_xlat16_11.x = (-u_xlat16_11.y) + 1.0;
    u_xlat16_11.x = max(u_xlat16_11.x, 9.99999975e-05);
    u_xlat16_11.x = u_xlat16_6.y / u_xlat16_11.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat16_11.x = u_xlat16_11.x * 0.25 + 0.75;
    u_xlat16_4.x = (u_xlatb5.y) ? u_xlat16_4.x : u_xlat16_11.x;
    u_xlat16_4.x = (u_xlatb5.x) ? u_xlat16_25 : u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * 2.0 + 1.0;
    u_xlat16_4.y = u_xlat16_3.x * 0.0625;
    u_xlat10_5.xyz = texture(_DiffuseRampMuitiTex, u_xlat16_4.xy).xyz;
    u_xlat16_3.x = dot(u_xlat2.xyz, u_xlat16_10.xyz);
    u_xlat16_3.x = max(u_xlat16_3.x, 0.0);
    u_xlat16_3.x = log2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _SpecularShininess;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_10.x = dFdx(u_xlat16_3.x);
    u_xlat16_17 = dFdy(u_xlat16_3.x);
    u_xlat16_10.x = abs(u_xlat16_17) + abs(u_xlat16_10.x);
    u_xlat16_17 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_24 = (-u_xlat16_10.x) + u_xlat16_17;
    u_xlat16_3.y = u_xlat16_10.x + u_xlat16_17;
    u_xlat16_3.xy = (-vec2(u_xlat16_24)) + u_xlat16_3.xy;
    u_xlat16_10.x = float(1.0) / u_xlat16_3.y;
    u_xlat16_3.x = u_xlat16_10.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _SpecularColor.xyz;
    u_xlat16_3.xyz = u_xlat10_1.xxx * u_xlat16_3.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
    u_xlat16_3.xyz = u_xlat10_5.xyz * u_xlat16_0.xyz + u_xlat16_3.xyz;
    u_xlat16_4.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_4.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_4.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-unity_SHC.xyz);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_4.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_0.xyz + u_xlat16_3.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_DIFFUSE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampMuitiTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
uvec2 u_xlatu2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
lowp vec3 u_xlat10_5;
bvec2 u_xlatb5;
mediump vec2 u_xlat16_6;
mediump vec3 u_xlat16_10;
mediump vec2 u_xlat16_11;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
mediump vec2 u_xlat16_18;
float u_xlat21;
lowp float u_xlat10_21;
int u_xlati21;
bool u_xlatb21;
float u_xlat23;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_0 = u_xlat16_0 * _EnvColor;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati21 = int(u_xlat16_1);
    if((u_xlati21)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb21){
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb21 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb21){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb16.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb16.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat21 = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat21 = vs_TEXCOORD2.z * 17.0 + (-u_xlat21);
            u_xlat21 = u_xlat21 + 0.99000001;
            u_xlat21 = floor(u_xlat21);
            u_xlat21 = max(u_xlat21, 0.0);
            u_xlati21 = int(u_xlat21);
            if((u_xlati21)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat10_21 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat16_3.x = u_xlat10_1.w * 8.0;
    u_xlat16_3.x = roundEven(u_xlat16_3.x);
    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat23 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat16_10.xyz = u_xlat2.xyz * vec3(u_xlat23) + _LightPosDir.xyz;
    u_xlat16_4.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_4.xxx;
    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
    u_xlat16_4.x = dot(u_xlat2.xyz, _LightPosDir.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.x = dot(u_xlat16_4.xx, u_xlat10_1.yy);
    u_xlat16_11.x = (-u_xlat10_21) + 1.0;
    u_xlat16_18.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_11.xy = u_xlat16_11.xx * u_xlat16_18.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_11.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_4.x / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb5.xy = lessThan(u_xlat16_4.xxxx, u_xlat16_11.xyxx).xy;
    u_xlat16_6.xy = (-u_xlat16_11.xy) + u_xlat16_4.xx;
    u_xlat16_4.x = (-u_xlat16_11.x) + u_xlat16_11.y;
    u_xlat16_4.x = max(u_xlat16_4.x, 9.99999975e-05);
    u_xlat16_4.x = u_xlat16_6.x / u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.25;
    u_xlat16_11.x = (-u_xlat16_11.y) + 1.0;
    u_xlat16_11.x = max(u_xlat16_11.x, 9.99999975e-05);
    u_xlat16_11.x = u_xlat16_6.y / u_xlat16_11.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat16_11.x = u_xlat16_11.x * 0.25 + 0.75;
    u_xlat16_4.x = (u_xlatb5.y) ? u_xlat16_4.x : u_xlat16_11.x;
    u_xlat16_4.x = (u_xlatb5.x) ? u_xlat16_25 : u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * 2.0 + 1.0;
    u_xlat16_4.y = u_xlat16_3.x * 0.0625;
    u_xlat10_5.xyz = texture(_DiffuseRampMuitiTex, u_xlat16_4.xy).xyz;
    u_xlat16_3.x = dot(u_xlat2.xyz, u_xlat16_10.xyz);
    u_xlat16_3.x = max(u_xlat16_3.x, 0.0);
    u_xlat16_3.x = log2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _SpecularShininess;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_10.x = dFdx(u_xlat16_3.x);
    u_xlat16_17 = dFdy(u_xlat16_3.x);
    u_xlat16_10.x = abs(u_xlat16_17) + abs(u_xlat16_10.x);
    u_xlat16_17 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_24 = (-u_xlat16_10.x) + u_xlat16_17;
    u_xlat16_3.y = u_xlat16_10.x + u_xlat16_17;
    u_xlat16_3.xy = (-vec2(u_xlat16_24)) + u_xlat16_3.xy;
    u_xlat16_10.x = float(1.0) / u_xlat16_3.y;
    u_xlat16_3.x = u_xlat16_10.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _SpecularColor.xyz;
    u_xlat16_3.xyz = u_xlat10_1.xxx * u_xlat16_3.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
    u_xlat16_3.xyz = u_xlat10_5.xyz * u_xlat16_0.xyz + u_xlat16_3.xyz;
    u_xlat16_4.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_4.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_4.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-unity_SHC.xyz);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_4.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_0.xyz + u_xlat16_3.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_DIFFUSE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampMuitiTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
uvec2 u_xlatu2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
lowp vec3 u_xlat10_5;
bvec2 u_xlatb5;
mediump vec2 u_xlat16_6;
mediump vec3 u_xlat16_10;
mediump vec2 u_xlat16_11;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
mediump vec2 u_xlat16_18;
float u_xlat21;
lowp float u_xlat10_21;
int u_xlati21;
bool u_xlatb21;
float u_xlat23;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_0 = u_xlat16_0 * _EnvColor;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati21 = int(u_xlat16_1);
    if((u_xlati21)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb21){
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb21 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb21){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb16.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb16.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat21 = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat21 = vs_TEXCOORD2.z * 17.0 + (-u_xlat21);
            u_xlat21 = u_xlat21 + 0.99000001;
            u_xlat21 = floor(u_xlat21);
            u_xlat21 = max(u_xlat21, 0.0);
            u_xlati21 = int(u_xlat21);
            if((u_xlati21)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat10_21 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat16_3.x = u_xlat10_1.w * 8.0;
    u_xlat16_3.x = roundEven(u_xlat16_3.x);
    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat23 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat16_10.xyz = u_xlat2.xyz * vec3(u_xlat23) + _LightPosDir.xyz;
    u_xlat16_4.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_4.xxx;
    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;
    u_xlat16_4.x = dot(u_xlat2.xyz, _LightPosDir.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.x = dot(u_xlat16_4.xx, u_xlat10_1.yy);
    u_xlat16_11.x = (-u_xlat10_21) + 1.0;
    u_xlat16_18.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_11.xy = u_xlat16_11.xx * u_xlat16_18.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_11.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_4.x / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb5.xy = lessThan(u_xlat16_4.xxxx, u_xlat16_11.xyxx).xy;
    u_xlat16_6.xy = (-u_xlat16_11.xy) + u_xlat16_4.xx;
    u_xlat16_4.x = (-u_xlat16_11.x) + u_xlat16_11.y;
    u_xlat16_4.x = max(u_xlat16_4.x, 9.99999975e-05);
    u_xlat16_4.x = u_xlat16_6.x / u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.25;
    u_xlat16_11.x = (-u_xlat16_11.y) + 1.0;
    u_xlat16_11.x = max(u_xlat16_11.x, 9.99999975e-05);
    u_xlat16_11.x = u_xlat16_6.y / u_xlat16_11.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
#else
    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
#endif
    u_xlat16_11.x = u_xlat16_11.x * 0.25 + 0.75;
    u_xlat16_4.x = (u_xlatb5.y) ? u_xlat16_4.x : u_xlat16_11.x;
    u_xlat16_4.x = (u_xlatb5.x) ? u_xlat16_25 : u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * 2.0 + 1.0;
    u_xlat16_4.y = u_xlat16_3.x * 0.0625;
    u_xlat10_5.xyz = texture(_DiffuseRampMuitiTex, u_xlat16_4.xy).xyz;
    u_xlat16_3.x = dot(u_xlat2.xyz, u_xlat16_10.xyz);
    u_xlat16_3.x = max(u_xlat16_3.x, 0.0);
    u_xlat16_3.x = log2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat16_3.x * _SpecularShininess;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_10.x = dFdx(u_xlat16_3.x);
    u_xlat16_17 = dFdy(u_xlat16_3.x);
    u_xlat16_10.x = abs(u_xlat16_17) + abs(u_xlat16_10.x);
    u_xlat16_17 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_24 = (-u_xlat16_10.x) + u_xlat16_17;
    u_xlat16_3.y = u_xlat16_10.x + u_xlat16_17;
    u_xlat16_3.xy = (-vec2(u_xlat16_24)) + u_xlat16_3.xy;
    u_xlat16_10.x = float(1.0) / u_xlat16_3.y;
    u_xlat16_3.x = u_xlat16_10.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10.x;
    u_xlat16_3.xyz = u_xlat16_3.xxx * _SpecularColor.xyz;
    u_xlat16_3.xyz = u_xlat10_1.xxx * u_xlat16_3.xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
    u_xlat16_3.xyz = u_xlat10_5.xyz * u_xlat16_0.xyz + u_xlat16_3.xyz;
    u_xlat16_4.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_4.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_4.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-unity_SHC.xyz);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_4.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_0.xyz + u_xlat16_3.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_DIFFUSE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampMuitiTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_5;
lowp vec3 u_xlat10_6;
mediump float u_xlat16_8;
bvec3 u_xlatb9;
mediump float u_xlat16_15;
bvec2 u_xlatb16;
mediump vec2 u_xlat16_19;
float u_xlat21;
lowp float u_xlat10_21;
int u_xlati21;
bool u_xlatb21;
mediump float u_xlat16_22;
float u_xlat23;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_0 = u_xlat16_0 * _EnvColor;
    u_xlat16_1.x = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x + (-_AlphaCutoff);
    u_xlat16_1.x = u_xlat16_1.x + 1.0;
    u_xlat16_1.x = floor(u_xlat16_1.x);
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlati21 = int(u_xlat16_1.x);
    if((u_xlati21)==0){discard;}
    u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb21 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb21){
        u_xlat10_21 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat2.yx).x;
        u_xlat16_1.x = u_xlat10_21;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb21){
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb21 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb21){
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb16.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb16.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat21 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat21 = vs_TEXCOORD2.z * 17.0 + (-u_xlat21);
            u_xlat21 = u_xlat21 + 0.99000001;
            u_xlat21 = floor(u_xlat21);
            u_xlat21 = max(u_xlat21, 0.0);
            u_xlati21 = int(u_xlat21);
            if((u_xlati21)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_2 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat10_21 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat16_8 = u_xlat10_2.w * 8.0;
    u_xlat16_8 = roundEven(u_xlat16_8);
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(u_xlat23) + _LightPosDir.xyz;
    u_xlat16_15 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_15 = inversesqrt(u_xlat16_15);
    u_xlat16_4.xyz = vec3(u_xlat16_15) * u_xlat16_4.xyz;
    u_xlat23 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat3.xyz = vec3(u_xlat23) * vs_TEXCOORD4.xyz;
    u_xlat16_15 = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
    u_xlat16_15 = dot(vec2(u_xlat16_15), u_xlat10_2.yy);
    u_xlat16_22 = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_25 = u_xlat16_1.x + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_15 = (-u_xlat16_22) + u_xlat16_15;
    u_xlat16_15 = u_xlat16_25 * u_xlat16_15 + u_xlat16_22;
    u_xlat16_22 = (-u_xlat10_21) + 1.0;
    u_xlat16_5.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_5.xy = vec2(u_xlat16_22) * u_xlat16_5.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_5.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_15 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_15), u_xlat16_5.xxyy).xz;
    u_xlat16_19.xy = vec2(u_xlat16_15) + (-u_xlat16_5.xy);
    u_xlat16_15 = (-u_xlat16_5.x) + u_xlat16_5.y;
    u_xlat16_15 = max(u_xlat16_15, 9.99999975e-05);
    u_xlat16_15 = u_xlat16_19.x / u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.25;
    u_xlat16_25 = (-u_xlat16_5.y) + 1.0;
    u_xlat16_25 = max(u_xlat16_25, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_19.y / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25 + 0.75;
    u_xlat16_15 = (u_xlatb9.z) ? u_xlat16_15 : u_xlat16_25;
    u_xlat16_5.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_15;
    u_xlat16_8 = u_xlat16_8 * 2.0 + 1.0;
    u_xlat16_5.y = u_xlat16_8 * 0.0625;
    u_xlat10_6.xyz = texture(_DiffuseRampMuitiTex, u_xlat16_5.xy).xyz;
    u_xlat16_8 = dot(u_xlat3.xyz, u_xlat16_4.xyz);
    u_xlat16_8 = max(u_xlat16_8, 0.0);
    u_xlat16_8 = log2(u_xlat16_8);
    u_xlat16_8 = u_xlat16_8 * _SpecularShininess;
    u_xlat16_8 = exp2(u_xlat16_8);
    u_xlat21 = u_xlat16_8 * u_xlat16_1.x;
    u_xlat16_15 = dFdx(u_xlat21);
    u_xlat16_22 = dFdy(u_xlat21);
    u_xlat16_15 = abs(u_xlat16_22) + abs(u_xlat16_15);
    u_xlat16_22 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_4.x = (-u_xlat16_15) + u_xlat16_22;
    u_xlat16_15 = u_xlat16_15 + u_xlat16_22;
    u_xlat16_15 = (-u_xlat16_4.x) + u_xlat16_15;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + (-u_xlat16_4.x);
    u_xlat16_8 = float(1.0) / u_xlat16_15;
    u_xlat16_1.x = u_xlat16_8 * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8 = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_4.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_4.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_4.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-unity_SHC.xyz);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_4.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_DIFFUSE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampMuitiTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_5;
lowp vec3 u_xlat10_6;
mediump float u_xlat16_8;
bvec3 u_xlatb9;
mediump float u_xlat16_15;
bvec2 u_xlatb16;
mediump vec2 u_xlat16_19;
float u_xlat21;
lowp float u_xlat10_21;
int u_xlati21;
bool u_xlatb21;
mediump float u_xlat16_22;
float u_xlat23;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_0 = u_xlat16_0 * _EnvColor;
    u_xlat16_1.x = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x + (-_AlphaCutoff);
    u_xlat16_1.x = u_xlat16_1.x + 1.0;
    u_xlat16_1.x = floor(u_xlat16_1.x);
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlati21 = int(u_xlat16_1.x);
    if((u_xlati21)==0){discard;}
    u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb21 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb21){
        u_xlat10_21 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat2.yx).x;
        u_xlat16_1.x = u_xlat10_21;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb21){
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb21 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb21){
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb16.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb16.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat21 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat21 = vs_TEXCOORD2.z * 17.0 + (-u_xlat21);
            u_xlat21 = u_xlat21 + 0.99000001;
            u_xlat21 = floor(u_xlat21);
            u_xlat21 = max(u_xlat21, 0.0);
            u_xlati21 = int(u_xlat21);
            if((u_xlati21)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_2 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat10_21 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat16_8 = u_xlat10_2.w * 8.0;
    u_xlat16_8 = roundEven(u_xlat16_8);
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(u_xlat23) + _LightPosDir.xyz;
    u_xlat16_15 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_15 = inversesqrt(u_xlat16_15);
    u_xlat16_4.xyz = vec3(u_xlat16_15) * u_xlat16_4.xyz;
    u_xlat23 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat3.xyz = vec3(u_xlat23) * vs_TEXCOORD4.xyz;
    u_xlat16_15 = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
    u_xlat16_15 = dot(vec2(u_xlat16_15), u_xlat10_2.yy);
    u_xlat16_22 = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_25 = u_xlat16_1.x + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_15 = (-u_xlat16_22) + u_xlat16_15;
    u_xlat16_15 = u_xlat16_25 * u_xlat16_15 + u_xlat16_22;
    u_xlat16_22 = (-u_xlat10_21) + 1.0;
    u_xlat16_5.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_5.xy = vec2(u_xlat16_22) * u_xlat16_5.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_5.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_15 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_15), u_xlat16_5.xxyy).xz;
    u_xlat16_19.xy = vec2(u_xlat16_15) + (-u_xlat16_5.xy);
    u_xlat16_15 = (-u_xlat16_5.x) + u_xlat16_5.y;
    u_xlat16_15 = max(u_xlat16_15, 9.99999975e-05);
    u_xlat16_15 = u_xlat16_19.x / u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.25;
    u_xlat16_25 = (-u_xlat16_5.y) + 1.0;
    u_xlat16_25 = max(u_xlat16_25, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_19.y / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25 + 0.75;
    u_xlat16_15 = (u_xlatb9.z) ? u_xlat16_15 : u_xlat16_25;
    u_xlat16_5.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_15;
    u_xlat16_8 = u_xlat16_8 * 2.0 + 1.0;
    u_xlat16_5.y = u_xlat16_8 * 0.0625;
    u_xlat10_6.xyz = texture(_DiffuseRampMuitiTex, u_xlat16_5.xy).xyz;
    u_xlat16_8 = dot(u_xlat3.xyz, u_xlat16_4.xyz);
    u_xlat16_8 = max(u_xlat16_8, 0.0);
    u_xlat16_8 = log2(u_xlat16_8);
    u_xlat16_8 = u_xlat16_8 * _SpecularShininess;
    u_xlat16_8 = exp2(u_xlat16_8);
    u_xlat21 = u_xlat16_8 * u_xlat16_1.x;
    u_xlat16_15 = dFdx(u_xlat21);
    u_xlat16_22 = dFdy(u_xlat21);
    u_xlat16_15 = abs(u_xlat16_22) + abs(u_xlat16_15);
    u_xlat16_22 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_4.x = (-u_xlat16_15) + u_xlat16_22;
    u_xlat16_15 = u_xlat16_15 + u_xlat16_22;
    u_xlat16_15 = (-u_xlat16_4.x) + u_xlat16_15;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + (-u_xlat16_4.x);
    u_xlat16_8 = float(1.0) / u_xlat16_15;
    u_xlat16_1.x = u_xlat16_8 * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8 = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_4.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_4.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_4.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-unity_SHC.xyz);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_4.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_DIFFUSE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampMuitiTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_5;
lowp vec3 u_xlat10_6;
mediump float u_xlat16_8;
bvec3 u_xlatb9;
mediump float u_xlat16_15;
bvec2 u_xlatb16;
mediump vec2 u_xlat16_19;
float u_xlat21;
lowp float u_xlat10_21;
int u_xlati21;
bool u_xlatb21;
mediump float u_xlat16_22;
float u_xlat23;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_0 = u_xlat16_0 * _EnvColor;
    u_xlat16_1.x = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x + (-_AlphaCutoff);
    u_xlat16_1.x = u_xlat16_1.x + 1.0;
    u_xlat16_1.x = floor(u_xlat16_1.x);
    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
    u_xlati21 = int(u_xlat16_1.x);
    if((u_xlati21)==0){discard;}
    u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb21 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb21){
        u_xlat10_21 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat2.yx).x;
        u_xlat16_1.x = u_xlat10_21;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb21){
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb21 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb21){
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb16.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb16.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat21 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat21 = vs_TEXCOORD2.z * 17.0 + (-u_xlat21);
            u_xlat21 = u_xlat21 + 0.99000001;
            u_xlat21 = floor(u_xlat21);
            u_xlat21 = max(u_xlat21, 0.0);
            u_xlati21 = int(u_xlat21);
            if((u_xlati21)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_2 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat10_21 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat16_8 = u_xlat10_2.w * 8.0;
    u_xlat16_8 = roundEven(u_xlat16_8);
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(u_xlat23) + _LightPosDir.xyz;
    u_xlat16_15 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_15 = inversesqrt(u_xlat16_15);
    u_xlat16_4.xyz = vec3(u_xlat16_15) * u_xlat16_4.xyz;
    u_xlat23 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat3.xyz = vec3(u_xlat23) * vs_TEXCOORD4.xyz;
    u_xlat16_15 = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;
    u_xlat16_15 = dot(vec2(u_xlat16_15), u_xlat10_2.yy);
    u_xlat16_22 = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_25 = u_xlat16_1.x + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_15 = (-u_xlat16_22) + u_xlat16_15;
    u_xlat16_15 = u_xlat16_25 * u_xlat16_15 + u_xlat16_22;
    u_xlat16_22 = (-u_xlat10_21) + 1.0;
    u_xlat16_5.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_5.xy = vec2(u_xlat16_22) * u_xlat16_5.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_5.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_15 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_15), u_xlat16_5.xxyy).xz;
    u_xlat16_19.xy = vec2(u_xlat16_15) + (-u_xlat16_5.xy);
    u_xlat16_15 = (-u_xlat16_5.x) + u_xlat16_5.y;
    u_xlat16_15 = max(u_xlat16_15, 9.99999975e-05);
    u_xlat16_15 = u_xlat16_19.x / u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.25;
    u_xlat16_25 = (-u_xlat16_5.y) + 1.0;
    u_xlat16_25 = max(u_xlat16_25, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_19.y / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25 + 0.75;
    u_xlat16_15 = (u_xlatb9.z) ? u_xlat16_15 : u_xlat16_25;
    u_xlat16_5.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_15;
    u_xlat16_8 = u_xlat16_8 * 2.0 + 1.0;
    u_xlat16_5.y = u_xlat16_8 * 0.0625;
    u_xlat10_6.xyz = texture(_DiffuseRampMuitiTex, u_xlat16_5.xy).xyz;
    u_xlat16_8 = dot(u_xlat3.xyz, u_xlat16_4.xyz);
    u_xlat16_8 = max(u_xlat16_8, 0.0);
    u_xlat16_8 = log2(u_xlat16_8);
    u_xlat16_8 = u_xlat16_8 * _SpecularShininess;
    u_xlat16_8 = exp2(u_xlat16_8);
    u_xlat21 = u_xlat16_8 * u_xlat16_1.x;
    u_xlat16_15 = dFdx(u_xlat21);
    u_xlat16_22 = dFdy(u_xlat21);
    u_xlat16_15 = abs(u_xlat16_22) + abs(u_xlat16_15);
    u_xlat16_22 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_4.x = (-u_xlat16_15) + u_xlat16_22;
    u_xlat16_15 = u_xlat16_15 + u_xlat16_22;
    u_xlat16_15 = (-u_xlat16_4.x) + u_xlat16_15;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + (-u_xlat16_4.x);
    u_xlat16_8 = float(1.0) / u_xlat16_15;
    u_xlat16_1.x = u_xlat16_8 * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_8 = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat10_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_4.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_4.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_4.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-unity_SHC.xyz);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_4.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_DIFFUSE_ON" "_MULTI_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor0;
uniform 	mediump vec4 _SpecularColor1;
uniform 	mediump vec4 _SpecularColor2;
uniform 	mediump vec4 _SpecularColor3;
uniform 	mediump vec4 _SpecularColor4;
uniform 	mediump vec4 _SpecularColor5;
uniform 	mediump vec4 _SpecularColor6;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampMuitiTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
uvec2 u_xlatu3;
bvec4 u_xlatb3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec2 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
bvec2 u_xlatb19;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
int u_xlati24;
bool u_xlatb24;
float u_xlat27;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_0 = u_xlat16_0 * _EnvColor;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati24 = int(u_xlat16_1);
    if((u_xlati24)==0){discard;}
    u_xlat10_1 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_1.w * 8.0;
    u_xlat16_2.x = roundEven(u_xlat16_2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<u_xlat16_2.x);
#else
    u_xlatb24 = 0.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(u_xlat16_2.x<1.5);
#else
    u_xlatb3.x = u_xlat16_2.x<1.5;
#endif
    u_xlatb24 = u_xlatb24 && u_xlatb3.x;
    if(u_xlatb24){
        u_xlat16_10.xyz = _SpecularColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(1.5<u_xlat16_2.x);
#else
        u_xlatb24 = 1.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(u_xlat16_2.x<2.5);
#else
        u_xlatb3.x = u_xlat16_2.x<2.5;
#endif
        u_xlatb24 = u_xlatb24 && u_xlatb3.x;
        if(u_xlatb24){
            u_xlat16_10.xyz = _SpecularColor2.xyz;
        } else {
            u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_2.xxxx);
            u_xlatb4 = lessThan(u_xlat16_2.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
            u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
            u_xlatb3.z = u_xlatb3.z && u_xlatb4.z;
            u_xlatb3.w = u_xlatb3.w && u_xlatb4.w;
            u_xlat16_5.xyz = (u_xlatb3.w) ? _SpecularColor6.xyz : _SpecularColor0.xyz;
            u_xlat16_5.xyz = (u_xlatb3.z) ? _SpecularColor5.xyz : u_xlat16_5.xyz;
            u_xlat16_5.xyz = (u_xlatb3.y) ? _SpecularColor4.xyz : u_xlat16_5.xyz;
            u_xlat16_10.xyz = (u_xlatb3.x) ? _SpecularColor3.xyz : u_xlat16_5.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb24){
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb24 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb24){
            u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb19.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb19.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb19.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat24 = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat24 = vs_TEXCOORD2.z * 17.0 + (-u_xlat24);
            u_xlat24 = u_xlat24 + 0.99000001;
            u_xlat24 = floor(u_xlat24);
            u_xlat24 = max(u_xlat24, 0.0);
            u_xlati24 = int(u_xlat24);
            if((u_xlati24)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_24 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat27) + _LightPosDir.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_24) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb4.xy = lessThan(vec4(u_xlat16_29), u_xlat16_6.xyxx).xy;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb4.y) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb4.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_2.x = u_xlat16_2.x * 2.0 + 1.0;
    u_xlat16_6.y = u_xlat16_2.x * 0.0625;
    u_xlat10_4.xyz = texture(_DiffuseRampMuitiTex, u_xlat16_6.xy).xyz;
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _SpecularShininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_5.x = dFdx(u_xlat16_2.x);
    u_xlat16_13 = dFdy(u_xlat16_2.x);
    u_xlat16_5.x = abs(u_xlat16_13) + abs(u_xlat16_5.x);
    u_xlat16_13 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_21 = (-u_xlat16_5.x) + u_xlat16_13;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_13;
    u_xlat16_5.x = (-u_xlat16_21) + u_xlat16_5.x;
    u_xlat16_2.x = u_xlat16_2.x + (-u_xlat16_21);
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5.x;
    u_xlat16_2.xyz = u_xlat16_10.xyz * u_xlat16_2.xxx;
    u_xlat16_2.xyz = u_xlat10_1.xxx * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    u_xlat16_5.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_5.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_5.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-unity_SHC.xyz);
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_5.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_5.xyz = u_xlat16_3.xyz * _CharacterSHColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_DIFFUSE_ON" "_MULTI_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor0;
uniform 	mediump vec4 _SpecularColor1;
uniform 	mediump vec4 _SpecularColor2;
uniform 	mediump vec4 _SpecularColor3;
uniform 	mediump vec4 _SpecularColor4;
uniform 	mediump vec4 _SpecularColor5;
uniform 	mediump vec4 _SpecularColor6;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampMuitiTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
uvec2 u_xlatu3;
bvec4 u_xlatb3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec2 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
bvec2 u_xlatb19;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
int u_xlati24;
bool u_xlatb24;
float u_xlat27;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_0 = u_xlat16_0 * _EnvColor;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati24 = int(u_xlat16_1);
    if((u_xlati24)==0){discard;}
    u_xlat10_1 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_1.w * 8.0;
    u_xlat16_2.x = roundEven(u_xlat16_2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<u_xlat16_2.x);
#else
    u_xlatb24 = 0.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(u_xlat16_2.x<1.5);
#else
    u_xlatb3.x = u_xlat16_2.x<1.5;
#endif
    u_xlatb24 = u_xlatb24 && u_xlatb3.x;
    if(u_xlatb24){
        u_xlat16_10.xyz = _SpecularColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(1.5<u_xlat16_2.x);
#else
        u_xlatb24 = 1.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(u_xlat16_2.x<2.5);
#else
        u_xlatb3.x = u_xlat16_2.x<2.5;
#endif
        u_xlatb24 = u_xlatb24 && u_xlatb3.x;
        if(u_xlatb24){
            u_xlat16_10.xyz = _SpecularColor2.xyz;
        } else {
            u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_2.xxxx);
            u_xlatb4 = lessThan(u_xlat16_2.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
            u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
            u_xlatb3.z = u_xlatb3.z && u_xlatb4.z;
            u_xlatb3.w = u_xlatb3.w && u_xlatb4.w;
            u_xlat16_5.xyz = (u_xlatb3.w) ? _SpecularColor6.xyz : _SpecularColor0.xyz;
            u_xlat16_5.xyz = (u_xlatb3.z) ? _SpecularColor5.xyz : u_xlat16_5.xyz;
            u_xlat16_5.xyz = (u_xlatb3.y) ? _SpecularColor4.xyz : u_xlat16_5.xyz;
            u_xlat16_10.xyz = (u_xlatb3.x) ? _SpecularColor3.xyz : u_xlat16_5.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb24){
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb24 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb24){
            u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb19.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb19.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb19.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat24 = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat24 = vs_TEXCOORD2.z * 17.0 + (-u_xlat24);
            u_xlat24 = u_xlat24 + 0.99000001;
            u_xlat24 = floor(u_xlat24);
            u_xlat24 = max(u_xlat24, 0.0);
            u_xlati24 = int(u_xlat24);
            if((u_xlati24)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_24 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat27) + _LightPosDir.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_24) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb4.xy = lessThan(vec4(u_xlat16_29), u_xlat16_6.xyxx).xy;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb4.y) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb4.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_2.x = u_xlat16_2.x * 2.0 + 1.0;
    u_xlat16_6.y = u_xlat16_2.x * 0.0625;
    u_xlat10_4.xyz = texture(_DiffuseRampMuitiTex, u_xlat16_6.xy).xyz;
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _SpecularShininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_5.x = dFdx(u_xlat16_2.x);
    u_xlat16_13 = dFdy(u_xlat16_2.x);
    u_xlat16_5.x = abs(u_xlat16_13) + abs(u_xlat16_5.x);
    u_xlat16_13 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_21 = (-u_xlat16_5.x) + u_xlat16_13;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_13;
    u_xlat16_5.x = (-u_xlat16_21) + u_xlat16_5.x;
    u_xlat16_2.x = u_xlat16_2.x + (-u_xlat16_21);
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5.x;
    u_xlat16_2.xyz = u_xlat16_10.xyz * u_xlat16_2.xxx;
    u_xlat16_2.xyz = u_xlat10_1.xxx * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    u_xlat16_5.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_5.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_5.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-unity_SHC.xyz);
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_5.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_5.xyz = u_xlat16_3.xyz * _CharacterSHColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_DIFFUSE_ON" "_MULTI_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor0;
uniform 	mediump vec4 _SpecularColor1;
uniform 	mediump vec4 _SpecularColor2;
uniform 	mediump vec4 _SpecularColor3;
uniform 	mediump vec4 _SpecularColor4;
uniform 	mediump vec4 _SpecularColor5;
uniform 	mediump vec4 _SpecularColor6;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampMuitiTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
uvec2 u_xlatu3;
bvec4 u_xlatb3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec2 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
bvec2 u_xlatb19;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
int u_xlati24;
bool u_xlatb24;
float u_xlat27;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_0 = u_xlat16_0 * _EnvColor;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati24 = int(u_xlat16_1);
    if((u_xlati24)==0){discard;}
    u_xlat10_1 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_1.w * 8.0;
    u_xlat16_2.x = roundEven(u_xlat16_2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<u_xlat16_2.x);
#else
    u_xlatb24 = 0.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(u_xlat16_2.x<1.5);
#else
    u_xlatb3.x = u_xlat16_2.x<1.5;
#endif
    u_xlatb24 = u_xlatb24 && u_xlatb3.x;
    if(u_xlatb24){
        u_xlat16_10.xyz = _SpecularColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(1.5<u_xlat16_2.x);
#else
        u_xlatb24 = 1.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(u_xlat16_2.x<2.5);
#else
        u_xlatb3.x = u_xlat16_2.x<2.5;
#endif
        u_xlatb24 = u_xlatb24 && u_xlatb3.x;
        if(u_xlatb24){
            u_xlat16_10.xyz = _SpecularColor2.xyz;
        } else {
            u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_2.xxxx);
            u_xlatb4 = lessThan(u_xlat16_2.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
            u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
            u_xlatb3.z = u_xlatb3.z && u_xlatb4.z;
            u_xlatb3.w = u_xlatb3.w && u_xlatb4.w;
            u_xlat16_5.xyz = (u_xlatb3.w) ? _SpecularColor6.xyz : _SpecularColor0.xyz;
            u_xlat16_5.xyz = (u_xlatb3.z) ? _SpecularColor5.xyz : u_xlat16_5.xyz;
            u_xlat16_5.xyz = (u_xlatb3.y) ? _SpecularColor4.xyz : u_xlat16_5.xyz;
            u_xlat16_10.xyz = (u_xlatb3.x) ? _SpecularColor3.xyz : u_xlat16_5.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb24){
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb24 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb24){
            u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb19.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb19.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb19.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat24 = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat24 = vs_TEXCOORD2.z * 17.0 + (-u_xlat24);
            u_xlat24 = u_xlat24 + 0.99000001;
            u_xlat24 = floor(u_xlat24);
            u_xlat24 = max(u_xlat24, 0.0);
            u_xlati24 = int(u_xlat24);
            if((u_xlati24)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_24 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat27) + _LightPosDir.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_24) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb4.xy = lessThan(vec4(u_xlat16_29), u_xlat16_6.xyxx).xy;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb4.y) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb4.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_2.x = u_xlat16_2.x * 2.0 + 1.0;
    u_xlat16_6.y = u_xlat16_2.x * 0.0625;
    u_xlat10_4.xyz = texture(_DiffuseRampMuitiTex, u_xlat16_6.xy).xyz;
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _SpecularShininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_5.x = dFdx(u_xlat16_2.x);
    u_xlat16_13 = dFdy(u_xlat16_2.x);
    u_xlat16_5.x = abs(u_xlat16_13) + abs(u_xlat16_5.x);
    u_xlat16_13 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_21 = (-u_xlat16_5.x) + u_xlat16_13;
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_13;
    u_xlat16_5.x = (-u_xlat16_21) + u_xlat16_5.x;
    u_xlat16_2.x = u_xlat16_2.x + (-u_xlat16_21);
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5.x;
    u_xlat16_2.xyz = u_xlat16_10.xyz * u_xlat16_2.xxx;
    u_xlat16_2.xyz = u_xlat10_1.xxx * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    u_xlat16_5.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_5.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_5.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-unity_SHC.xyz);
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_5.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_5.xyz = u_xlat16_3.xyz * _CharacterSHColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_DIFFUSE_ON" "_MULTI_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor0;
uniform 	mediump vec4 _SpecularColor1;
uniform 	mediump vec4 _SpecularColor2;
uniform 	mediump vec4 _SpecularColor3;
uniform 	mediump vec4 _SpecularColor4;
uniform 	mediump vec4 _SpecularColor5;
uniform 	mediump vec4 _SpecularColor6;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampMuitiTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
uvec2 u_xlatu3;
mediump vec3 u_xlat16_4;
vec4 u_xlat5;
lowp vec3 u_xlat10_5;
bvec4 u_xlatb5;
bvec4 u_xlatb6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
mediump float u_xlat16_11;
mediump float u_xlat16_20;
bvec2 u_xlatb21;
mediump vec2 u_xlat16_26;
float u_xlat27;
lowp float u_xlat10_27;
int u_xlati27;
bool u_xlatb27;
mediump float u_xlat16_29;
float u_xlat30;
mediump float u_xlat16_31;
mediump float u_xlat16_34;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_0 = u_xlat16_0 * _EnvColor;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati27 = int(u_xlat16_1);
    if((u_xlati27)==0){discard;}
    u_xlat10_1 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_1.w * 8.0;
    u_xlat16_2.x = roundEven(u_xlat16_2.x);
    u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb27 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb27){
        u_xlat10_27 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat3.yx).x;
        u_xlat16_11 = u_xlat10_27;
    } else {
        u_xlat16_11 = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<u_xlat16_2.x);
#else
    u_xlatb27 = 0.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb21.x = !!(u_xlat16_2.x<1.5);
#else
    u_xlatb21.x = u_xlat16_2.x<1.5;
#endif
    u_xlatb27 = u_xlatb27 && u_xlatb21.x;
    if(u_xlatb27){
        u_xlat16_4.xyz = _SpecularColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(1.5<u_xlat16_2.x);
#else
        u_xlatb27 = 1.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb21.x = !!(u_xlat16_2.x<2.5);
#else
        u_xlatb21.x = u_xlat16_2.x<2.5;
#endif
        u_xlatb27 = u_xlatb27 && u_xlatb21.x;
        if(u_xlatb27){
            u_xlat16_4.xyz = _SpecularColor2.xyz;
        } else {
            u_xlatb5 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_2.xxxx);
            u_xlatb6 = lessThan(u_xlat16_2.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb5.x = u_xlatb5.x && u_xlatb6.x;
            u_xlatb5.y = u_xlatb5.y && u_xlatb6.y;
            u_xlatb5.z = u_xlatb5.z && u_xlatb6.z;
            u_xlatb5.w = u_xlatb5.w && u_xlatb6.w;
            u_xlat16_7.xyz = (u_xlatb5.w) ? _SpecularColor6.xyz : _SpecularColor0.xyz;
            u_xlat16_7.xyz = (u_xlatb5.z) ? _SpecularColor5.xyz : u_xlat16_7.xyz;
            u_xlat16_7.xyz = (u_xlatb5.y) ? _SpecularColor4.xyz : u_xlat16_7.xyz;
            u_xlat16_4.xyz = (u_xlatb5.x) ? _SpecularColor3.xyz : u_xlat16_7.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb27){
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb27 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb27){
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb21.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb21.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb21.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat5.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat5.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat5.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat5.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat27 = dot(u_xlat5, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat27 = vs_TEXCOORD2.z * 17.0 + (-u_xlat27);
            u_xlat27 = u_xlat27 + 0.99000001;
            u_xlat27 = floor(u_xlat27);
            u_xlat27 = max(u_xlat27, 0.0);
            u_xlati27 = int(u_xlat27);
            if((u_xlati27)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_27 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_7.xyz = u_xlat3.xyz * vec3(u_xlat30) + _LightPosDir.xyz;
    u_xlat16_20 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_7.xyz = vec3(u_xlat16_20) * u_xlat16_7.xyz;
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD4.xyz;
    u_xlat16_20 = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_20 = u_xlat16_20 * 0.5 + 0.5;
    u_xlat16_20 = dot(vec2(u_xlat16_20), u_xlat10_1.yy);
    u_xlat16_29 = u_xlat16_11 * 0.099999994 + 0.400000006;
    u_xlat16_31 = u_xlat16_11 + -0.5;
    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_34 = u_xlat16_31 * -2.0 + 3.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_34;
    u_xlat16_20 = (-u_xlat16_29) + u_xlat16_20;
    u_xlat16_20 = u_xlat16_31 * u_xlat16_20 + u_xlat16_29;
    u_xlat16_29 = (-u_xlat10_27) + 1.0;
    u_xlat16_8.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_8.xy = vec2(u_xlat16_29) * u_xlat16_8.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_29 = max(u_xlat16_8.x, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_20 / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.25;
    u_xlatb5.xy = lessThan(vec4(u_xlat16_20), u_xlat16_8.xyxx).xy;
    u_xlat16_26.xy = vec2(u_xlat16_20) + (-u_xlat16_8.xy);
    u_xlat16_20 = (-u_xlat16_8.x) + u_xlat16_8.y;
    u_xlat16_20 = max(u_xlat16_20, 9.99999975e-05);
    u_xlat16_20 = u_xlat16_26.x / u_xlat16_20;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_20 = min(max(u_xlat16_20, 0.0), 1.0);
#else
    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
#endif
    u_xlat16_20 = u_xlat16_20 * 0.5 + 0.25;
    u_xlat16_31 = (-u_xlat16_8.y) + 1.0;
    u_xlat16_31 = max(u_xlat16_31, 9.99999975e-05);
    u_xlat16_31 = u_xlat16_26.y / u_xlat16_31;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_31 = u_xlat16_31 * 0.25 + 0.75;
    u_xlat16_20 = (u_xlatb5.y) ? u_xlat16_20 : u_xlat16_31;
    u_xlat16_8.x = (u_xlatb5.x) ? u_xlat16_29 : u_xlat16_20;
    u_xlat16_2.x = u_xlat16_2.x * 2.0 + 1.0;
    u_xlat16_8.y = u_xlat16_2.x * 0.0625;
    u_xlat10_5.xyz = texture(_DiffuseRampMuitiTex, u_xlat16_8.xy).xyz;
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _SpecularShininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat27 = u_xlat16_2.x * u_xlat16_11;
    u_xlat16_20 = dFdx(u_xlat27);
    u_xlat16_29 = dFdy(u_xlat27);
    u_xlat16_20 = abs(u_xlat16_29) + abs(u_xlat16_20);
    u_xlat16_29 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_31 = (-u_xlat16_20) + u_xlat16_29;
    u_xlat16_20 = u_xlat16_20 + u_xlat16_29;
    u_xlat16_20 = (-u_xlat16_31) + u_xlat16_20;
    u_xlat16_2.x = u_xlat16_11 * u_xlat16_2.x + (-u_xlat16_31);
    u_xlat16_11 = float(1.0) / u_xlat16_20;
    u_xlat16_2.x = u_xlat16_11 * u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_11 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_11;
    u_xlat16_2.xyz = u_xlat16_4.xyz * u_xlat16_2.xxx;
    u_xlat16_2.xyz = u_xlat10_1.xxx * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_5.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    u_xlat16_4.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_4.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_4.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-unity_SHC.xyz);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_4.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = u_xlat16_3.xyz * _CharacterSHColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_DIFFUSE_ON" "_MULTI_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor0;
uniform 	mediump vec4 _SpecularColor1;
uniform 	mediump vec4 _SpecularColor2;
uniform 	mediump vec4 _SpecularColor3;
uniform 	mediump vec4 _SpecularColor4;
uniform 	mediump vec4 _SpecularColor5;
uniform 	mediump vec4 _SpecularColor6;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampMuitiTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
uvec2 u_xlatu3;
mediump vec3 u_xlat16_4;
vec4 u_xlat5;
lowp vec3 u_xlat10_5;
bvec4 u_xlatb5;
bvec4 u_xlatb6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
mediump float u_xlat16_11;
mediump float u_xlat16_20;
bvec2 u_xlatb21;
mediump vec2 u_xlat16_26;
float u_xlat27;
lowp float u_xlat10_27;
int u_xlati27;
bool u_xlatb27;
mediump float u_xlat16_29;
float u_xlat30;
mediump float u_xlat16_31;
mediump float u_xlat16_34;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_0 = u_xlat16_0 * _EnvColor;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati27 = int(u_xlat16_1);
    if((u_xlati27)==0){discard;}
    u_xlat10_1 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_1.w * 8.0;
    u_xlat16_2.x = roundEven(u_xlat16_2.x);
    u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb27 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb27){
        u_xlat10_27 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat3.yx).x;
        u_xlat16_11 = u_xlat10_27;
    } else {
        u_xlat16_11 = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<u_xlat16_2.x);
#else
    u_xlatb27 = 0.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb21.x = !!(u_xlat16_2.x<1.5);
#else
    u_xlatb21.x = u_xlat16_2.x<1.5;
#endif
    u_xlatb27 = u_xlatb27 && u_xlatb21.x;
    if(u_xlatb27){
        u_xlat16_4.xyz = _SpecularColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(1.5<u_xlat16_2.x);
#else
        u_xlatb27 = 1.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb21.x = !!(u_xlat16_2.x<2.5);
#else
        u_xlatb21.x = u_xlat16_2.x<2.5;
#endif
        u_xlatb27 = u_xlatb27 && u_xlatb21.x;
        if(u_xlatb27){
            u_xlat16_4.xyz = _SpecularColor2.xyz;
        } else {
            u_xlatb5 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_2.xxxx);
            u_xlatb6 = lessThan(u_xlat16_2.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb5.x = u_xlatb5.x && u_xlatb6.x;
            u_xlatb5.y = u_xlatb5.y && u_xlatb6.y;
            u_xlatb5.z = u_xlatb5.z && u_xlatb6.z;
            u_xlatb5.w = u_xlatb5.w && u_xlatb6.w;
            u_xlat16_7.xyz = (u_xlatb5.w) ? _SpecularColor6.xyz : _SpecularColor0.xyz;
            u_xlat16_7.xyz = (u_xlatb5.z) ? _SpecularColor5.xyz : u_xlat16_7.xyz;
            u_xlat16_7.xyz = (u_xlatb5.y) ? _SpecularColor4.xyz : u_xlat16_7.xyz;
            u_xlat16_4.xyz = (u_xlatb5.x) ? _SpecularColor3.xyz : u_xlat16_7.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb27){
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb27 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb27){
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb21.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb21.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb21.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat5.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat5.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat5.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat5.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat27 = dot(u_xlat5, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat27 = vs_TEXCOORD2.z * 17.0 + (-u_xlat27);
            u_xlat27 = u_xlat27 + 0.99000001;
            u_xlat27 = floor(u_xlat27);
            u_xlat27 = max(u_xlat27, 0.0);
            u_xlati27 = int(u_xlat27);
            if((u_xlati27)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_27 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_7.xyz = u_xlat3.xyz * vec3(u_xlat30) + _LightPosDir.xyz;
    u_xlat16_20 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_7.xyz = vec3(u_xlat16_20) * u_xlat16_7.xyz;
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD4.xyz;
    u_xlat16_20 = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_20 = u_xlat16_20 * 0.5 + 0.5;
    u_xlat16_20 = dot(vec2(u_xlat16_20), u_xlat10_1.yy);
    u_xlat16_29 = u_xlat16_11 * 0.099999994 + 0.400000006;
    u_xlat16_31 = u_xlat16_11 + -0.5;
    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_34 = u_xlat16_31 * -2.0 + 3.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_34;
    u_xlat16_20 = (-u_xlat16_29) + u_xlat16_20;
    u_xlat16_20 = u_xlat16_31 * u_xlat16_20 + u_xlat16_29;
    u_xlat16_29 = (-u_xlat10_27) + 1.0;
    u_xlat16_8.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_8.xy = vec2(u_xlat16_29) * u_xlat16_8.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_29 = max(u_xlat16_8.x, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_20 / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.25;
    u_xlatb5.xy = lessThan(vec4(u_xlat16_20), u_xlat16_8.xyxx).xy;
    u_xlat16_26.xy = vec2(u_xlat16_20) + (-u_xlat16_8.xy);
    u_xlat16_20 = (-u_xlat16_8.x) + u_xlat16_8.y;
    u_xlat16_20 = max(u_xlat16_20, 9.99999975e-05);
    u_xlat16_20 = u_xlat16_26.x / u_xlat16_20;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_20 = min(max(u_xlat16_20, 0.0), 1.0);
#else
    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
#endif
    u_xlat16_20 = u_xlat16_20 * 0.5 + 0.25;
    u_xlat16_31 = (-u_xlat16_8.y) + 1.0;
    u_xlat16_31 = max(u_xlat16_31, 9.99999975e-05);
    u_xlat16_31 = u_xlat16_26.y / u_xlat16_31;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_31 = u_xlat16_31 * 0.25 + 0.75;
    u_xlat16_20 = (u_xlatb5.y) ? u_xlat16_20 : u_xlat16_31;
    u_xlat16_8.x = (u_xlatb5.x) ? u_xlat16_29 : u_xlat16_20;
    u_xlat16_2.x = u_xlat16_2.x * 2.0 + 1.0;
    u_xlat16_8.y = u_xlat16_2.x * 0.0625;
    u_xlat10_5.xyz = texture(_DiffuseRampMuitiTex, u_xlat16_8.xy).xyz;
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _SpecularShininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat27 = u_xlat16_2.x * u_xlat16_11;
    u_xlat16_20 = dFdx(u_xlat27);
    u_xlat16_29 = dFdy(u_xlat27);
    u_xlat16_20 = abs(u_xlat16_29) + abs(u_xlat16_20);
    u_xlat16_29 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_31 = (-u_xlat16_20) + u_xlat16_29;
    u_xlat16_20 = u_xlat16_20 + u_xlat16_29;
    u_xlat16_20 = (-u_xlat16_31) + u_xlat16_20;
    u_xlat16_2.x = u_xlat16_11 * u_xlat16_2.x + (-u_xlat16_31);
    u_xlat16_11 = float(1.0) / u_xlat16_20;
    u_xlat16_2.x = u_xlat16_11 * u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_11 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_11;
    u_xlat16_2.xyz = u_xlat16_4.xyz * u_xlat16_2.xxx;
    u_xlat16_2.xyz = u_xlat10_1.xxx * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_5.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    u_xlat16_4.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_4.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_4.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-unity_SHC.xyz);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_4.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = u_xlat16_3.xyz * _CharacterSHColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_DIFFUSE_ON" "_MULTI_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor0;
uniform 	mediump vec4 _SpecularColor1;
uniform 	mediump vec4 _SpecularColor2;
uniform 	mediump vec4 _SpecularColor3;
uniform 	mediump vec4 _SpecularColor4;
uniform 	mediump vec4 _SpecularColor5;
uniform 	mediump vec4 _SpecularColor6;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampMuitiTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
uvec2 u_xlatu3;
mediump vec3 u_xlat16_4;
vec4 u_xlat5;
lowp vec3 u_xlat10_5;
bvec4 u_xlatb5;
bvec4 u_xlatb6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
mediump float u_xlat16_11;
mediump float u_xlat16_20;
bvec2 u_xlatb21;
mediump vec2 u_xlat16_26;
float u_xlat27;
lowp float u_xlat10_27;
int u_xlati27;
bool u_xlatb27;
mediump float u_xlat16_29;
float u_xlat30;
mediump float u_xlat16_31;
mediump float u_xlat16_34;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_0 = u_xlat16_0 * _EnvColor;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati27 = int(u_xlat16_1);
    if((u_xlati27)==0){discard;}
    u_xlat10_1 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_1.w * 8.0;
    u_xlat16_2.x = roundEven(u_xlat16_2.x);
    u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb27 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb27){
        u_xlat10_27 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat3.yx).x;
        u_xlat16_11 = u_xlat10_27;
    } else {
        u_xlat16_11 = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<u_xlat16_2.x);
#else
    u_xlatb27 = 0.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb21.x = !!(u_xlat16_2.x<1.5);
#else
    u_xlatb21.x = u_xlat16_2.x<1.5;
#endif
    u_xlatb27 = u_xlatb27 && u_xlatb21.x;
    if(u_xlatb27){
        u_xlat16_4.xyz = _SpecularColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(1.5<u_xlat16_2.x);
#else
        u_xlatb27 = 1.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb21.x = !!(u_xlat16_2.x<2.5);
#else
        u_xlatb21.x = u_xlat16_2.x<2.5;
#endif
        u_xlatb27 = u_xlatb27 && u_xlatb21.x;
        if(u_xlatb27){
            u_xlat16_4.xyz = _SpecularColor2.xyz;
        } else {
            u_xlatb5 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_2.xxxx);
            u_xlatb6 = lessThan(u_xlat16_2.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb5.x = u_xlatb5.x && u_xlatb6.x;
            u_xlatb5.y = u_xlatb5.y && u_xlatb6.y;
            u_xlatb5.z = u_xlatb5.z && u_xlatb6.z;
            u_xlatb5.w = u_xlatb5.w && u_xlatb6.w;
            u_xlat16_7.xyz = (u_xlatb5.w) ? _SpecularColor6.xyz : _SpecularColor0.xyz;
            u_xlat16_7.xyz = (u_xlatb5.z) ? _SpecularColor5.xyz : u_xlat16_7.xyz;
            u_xlat16_7.xyz = (u_xlatb5.y) ? _SpecularColor4.xyz : u_xlat16_7.xyz;
            u_xlat16_4.xyz = (u_xlatb5.x) ? _SpecularColor3.xyz : u_xlat16_7.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb27){
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb27 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb27){
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb21.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb21.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb21.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat5.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat5.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat5.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat5.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat27 = dot(u_xlat5, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat27 = vs_TEXCOORD2.z * 17.0 + (-u_xlat27);
            u_xlat27 = u_xlat27 + 0.99000001;
            u_xlat27 = floor(u_xlat27);
            u_xlat27 = max(u_xlat27, 0.0);
            u_xlati27 = int(u_xlat27);
            if((u_xlati27)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_27 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_7.xyz = u_xlat3.xyz * vec3(u_xlat30) + _LightPosDir.xyz;
    u_xlat16_20 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_7.xyz = vec3(u_xlat16_20) * u_xlat16_7.xyz;
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD4.xyz;
    u_xlat16_20 = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_20 = u_xlat16_20 * 0.5 + 0.5;
    u_xlat16_20 = dot(vec2(u_xlat16_20), u_xlat10_1.yy);
    u_xlat16_29 = u_xlat16_11 * 0.099999994 + 0.400000006;
    u_xlat16_31 = u_xlat16_11 + -0.5;
    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_34 = u_xlat16_31 * -2.0 + 3.0;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
    u_xlat16_31 = u_xlat16_31 * u_xlat16_34;
    u_xlat16_20 = (-u_xlat16_29) + u_xlat16_20;
    u_xlat16_20 = u_xlat16_31 * u_xlat16_20 + u_xlat16_29;
    u_xlat16_29 = (-u_xlat10_27) + 1.0;
    u_xlat16_8.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_8.xy = vec2(u_xlat16_29) * u_xlat16_8.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_29 = max(u_xlat16_8.x, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_20 / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.25;
    u_xlatb5.xy = lessThan(vec4(u_xlat16_20), u_xlat16_8.xyxx).xy;
    u_xlat16_26.xy = vec2(u_xlat16_20) + (-u_xlat16_8.xy);
    u_xlat16_20 = (-u_xlat16_8.x) + u_xlat16_8.y;
    u_xlat16_20 = max(u_xlat16_20, 9.99999975e-05);
    u_xlat16_20 = u_xlat16_26.x / u_xlat16_20;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_20 = min(max(u_xlat16_20, 0.0), 1.0);
#else
    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
#endif
    u_xlat16_20 = u_xlat16_20 * 0.5 + 0.25;
    u_xlat16_31 = (-u_xlat16_8.y) + 1.0;
    u_xlat16_31 = max(u_xlat16_31, 9.99999975e-05);
    u_xlat16_31 = u_xlat16_26.y / u_xlat16_31;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
#else
    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
#endif
    u_xlat16_31 = u_xlat16_31 * 0.25 + 0.75;
    u_xlat16_20 = (u_xlatb5.y) ? u_xlat16_20 : u_xlat16_31;
    u_xlat16_8.x = (u_xlatb5.x) ? u_xlat16_29 : u_xlat16_20;
    u_xlat16_2.x = u_xlat16_2.x * 2.0 + 1.0;
    u_xlat16_8.y = u_xlat16_2.x * 0.0625;
    u_xlat10_5.xyz = texture(_DiffuseRampMuitiTex, u_xlat16_8.xy).xyz;
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _SpecularShininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat27 = u_xlat16_2.x * u_xlat16_11;
    u_xlat16_20 = dFdx(u_xlat27);
    u_xlat16_29 = dFdy(u_xlat27);
    u_xlat16_20 = abs(u_xlat16_29) + abs(u_xlat16_20);
    u_xlat16_29 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_31 = (-u_xlat16_20) + u_xlat16_29;
    u_xlat16_20 = u_xlat16_20 + u_xlat16_29;
    u_xlat16_20 = (-u_xlat16_31) + u_xlat16_20;
    u_xlat16_2.x = u_xlat16_11 * u_xlat16_2.x + (-u_xlat16_31);
    u_xlat16_11 = float(1.0) / u_xlat16_20;
    u_xlat16_2.x = u_xlat16_11 * u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_11 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_11;
    u_xlat16_2.xyz = u_xlat16_4.xyz * u_xlat16_2.xxx;
    u_xlat16_2.xyz = u_xlat10_1.xxx * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_5.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    u_xlat16_4.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_4.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_4.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-unity_SHC.xyz);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_4.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = u_xlat16_3.xyz * _CharacterSHColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    SV_Target0.w = _BloomIntensity;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
uvec2 u_xlatu3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
lowp vec3 u_xlat10_6;
bvec2 u_xlatb6;
mediump vec2 u_xlat16_7;
mediump float u_xlat16_12;
mediump vec2 u_xlat16_13;
bvec2 u_xlatb19;
mediump float u_xlat16_20;
mediump float u_xlat16_21;
float u_xlat24;
lowp float u_xlat10_24;
int u_xlati24;
bool u_xlatb24;
float u_xlat27;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_0 = u_xlat16_0 * _EnvColor;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati24 = int(u_xlat16_1);
    if((u_xlati24)==0){discard;}
    u_xlat10_1 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_2 = u_xlat10_1.w * 8.0;
    u_xlat16_2 = roundEven(u_xlat16_2);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(-0.5<u_xlat16_2);
#else
    u_xlatb24 = -0.5<u_xlat16_2;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(u_xlat16_2<0.5);
#else
    u_xlatb3.x = u_xlat16_2<0.5;
#endif
    u_xlatb24 = u_xlatb24 && u_xlatb3.x;
    if(u_xlatb24){
        SV_Target0.w = _BloomIntensity0;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(0.5<u_xlat16_2);
#else
        u_xlatb24 = 0.5<u_xlat16_2;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(u_xlat16_2<1.5);
#else
        u_xlatb3.x = u_xlat16_2<1.5;
#endif
        u_xlatb24 = u_xlatb24 && u_xlatb3.x;
        if(u_xlatb24){
            SV_Target0.w = _BloomIntensity1;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb24 = !!(1.5<u_xlat16_2);
#else
            u_xlatb24 = 1.5<u_xlat16_2;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb3.x = !!(u_xlat16_2<2.5);
#else
            u_xlatb3.x = u_xlat16_2<2.5;
#endif
            u_xlatb24 = u_xlatb24 && u_xlatb3.x;
            if(u_xlatb24){
                SV_Target0.w = _BloomIntensity2;
            } else {
                u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_2));
                u_xlatb2 = lessThan(vec4(u_xlat16_2), vec4(3.5, 4.5, 5.5, 6.5));
                u_xlatb2.x = u_xlatb2.x && u_xlatb3.x;
                u_xlatb2.y = u_xlatb2.y && u_xlatb3.y;
                u_xlatb2.z = u_xlatb2.z && u_xlatb3.z;
                u_xlatb2.w = u_xlatb2.w && u_xlatb3.w;
                u_xlat16_4.x = (u_xlatb2.w) ? _BloomIntensity6 : _BloomIntensity7;
                u_xlat16_4.x = (u_xlatb2.z) ? _BloomIntensity5 : u_xlat16_4.x;
                u_xlat16_4.x = (u_xlatb2.y) ? _BloomIntensity4 : u_xlat16_4.x;
                SV_Target0.w = (u_xlatb2.x) ? _BloomIntensity3 : u_xlat16_4.x;
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb24){
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb24 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb24){
            u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb19.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb19.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb19.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat24 = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat24 = vs_TEXCOORD2.z * 17.0 + (-u_xlat24);
            u_xlat24 = u_xlat24 + 0.99000001;
            u_xlat24 = floor(u_xlat24);
            u_xlat24 = max(u_xlat24, 0.0);
            u_xlati24 = int(u_xlat24);
            if((u_xlati24)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_24 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(u_xlat27) + _LightPosDir.xyz;
    u_xlat16_28 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_4.xyz;
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD4.xyz;
    u_xlat16_28 = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_28 = u_xlat16_28 * 0.5 + 0.5;
    u_xlat16_28 = dot(vec2(u_xlat16_28), u_xlat10_1.yy);
    u_xlat16_5.x = (-u_xlat10_24) + 1.0;
    u_xlat16_13.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_5.xy = u_xlat16_5.xx * u_xlat16_13.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_21 = max(u_xlat16_5.x, 9.99999975e-05);
    u_xlat16_21 = u_xlat16_28 / u_xlat16_21;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_21 * 0.25;
    u_xlatb6.xy = lessThan(vec4(u_xlat16_28), u_xlat16_5.xyxx).xy;
    u_xlat16_7.xy = vec2(u_xlat16_28) + (-u_xlat16_5.xy);
    u_xlat16_28 = (-u_xlat16_5.x) + u_xlat16_5.y;
    u_xlat16_28 = max(u_xlat16_28, 9.99999975e-05);
    u_xlat16_28 = u_xlat16_7.x / u_xlat16_28;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = u_xlat16_28 * 0.5 + 0.25;
    u_xlat16_5.x = (-u_xlat16_5.y) + 1.0;
    u_xlat16_5.x = max(u_xlat16_5.x, 9.99999975e-05);
    u_xlat16_5.x = u_xlat16_7.y / u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x * 0.25 + 0.75;
    u_xlat16_28 = (u_xlatb6.y) ? u_xlat16_28 : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb6.x) ? u_xlat16_21 : u_xlat16_28;
    u_xlat16_5.y = 0.5;
    u_xlat10_6.xyz = texture(_DiffuseRampTex, u_xlat16_5.xy).xyz;
    u_xlat16_4.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);
    u_xlat16_4.x = log2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_4.x * _SpecularShininess;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_12 = dFdx(u_xlat16_4.x);
    u_xlat16_20 = dFdy(u_xlat16_4.x);
    u_xlat16_12 = abs(u_xlat16_20) + abs(u_xlat16_12);
    u_xlat16_20 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_28 = (-u_xlat16_12) + u_xlat16_20;
    u_xlat16_4.y = u_xlat16_12 + u_xlat16_20;
    u_xlat16_4.xy = (-vec2(u_xlat16_28)) + u_xlat16_4.xy;
    u_xlat16_12 = float(1.0) / u_xlat16_4.y;
    u_xlat16_4.x = u_xlat16_12 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_12 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_12;
    u_xlat16_4.xyz = u_xlat16_4.xxx * _SpecularColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat10_6.xyz * u_xlat16_0.xyz + u_xlat16_4.xyz;
    u_xlat16_5.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_5.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_5.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-unity_SHC.xyz);
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_5.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_5.xyz = u_xlat16_3.xyz * _CharacterSHColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_0.xyz + u_xlat16_4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
uvec2 u_xlatu3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
lowp vec3 u_xlat10_6;
bvec2 u_xlatb6;
mediump vec2 u_xlat16_7;
mediump float u_xlat16_12;
mediump vec2 u_xlat16_13;
bvec2 u_xlatb19;
mediump float u_xlat16_20;
mediump float u_xlat16_21;
float u_xlat24;
lowp float u_xlat10_24;
int u_xlati24;
bool u_xlatb24;
float u_xlat27;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_0 = u_xlat16_0 * _EnvColor;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati24 = int(u_xlat16_1);
    if((u_xlati24)==0){discard;}
    u_xlat10_1 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_2 = u_xlat10_1.w * 8.0;
    u_xlat16_2 = roundEven(u_xlat16_2);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(-0.5<u_xlat16_2);
#else
    u_xlatb24 = -0.5<u_xlat16_2;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(u_xlat16_2<0.5);
#else
    u_xlatb3.x = u_xlat16_2<0.5;
#endif
    u_xlatb24 = u_xlatb24 && u_xlatb3.x;
    if(u_xlatb24){
        SV_Target0.w = _BloomIntensity0;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(0.5<u_xlat16_2);
#else
        u_xlatb24 = 0.5<u_xlat16_2;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(u_xlat16_2<1.5);
#else
        u_xlatb3.x = u_xlat16_2<1.5;
#endif
        u_xlatb24 = u_xlatb24 && u_xlatb3.x;
        if(u_xlatb24){
            SV_Target0.w = _BloomIntensity1;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb24 = !!(1.5<u_xlat16_2);
#else
            u_xlatb24 = 1.5<u_xlat16_2;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb3.x = !!(u_xlat16_2<2.5);
#else
            u_xlatb3.x = u_xlat16_2<2.5;
#endif
            u_xlatb24 = u_xlatb24 && u_xlatb3.x;
            if(u_xlatb24){
                SV_Target0.w = _BloomIntensity2;
            } else {
                u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_2));
                u_xlatb2 = lessThan(vec4(u_xlat16_2), vec4(3.5, 4.5, 5.5, 6.5));
                u_xlatb2.x = u_xlatb2.x && u_xlatb3.x;
                u_xlatb2.y = u_xlatb2.y && u_xlatb3.y;
                u_xlatb2.z = u_xlatb2.z && u_xlatb3.z;
                u_xlatb2.w = u_xlatb2.w && u_xlatb3.w;
                u_xlat16_4.x = (u_xlatb2.w) ? _BloomIntensity6 : _BloomIntensity7;
                u_xlat16_4.x = (u_xlatb2.z) ? _BloomIntensity5 : u_xlat16_4.x;
                u_xlat16_4.x = (u_xlatb2.y) ? _BloomIntensity4 : u_xlat16_4.x;
                SV_Target0.w = (u_xlatb2.x) ? _BloomIntensity3 : u_xlat16_4.x;
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb24){
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb24 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb24){
            u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb19.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb19.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb19.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat24 = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat24 = vs_TEXCOORD2.z * 17.0 + (-u_xlat24);
            u_xlat24 = u_xlat24 + 0.99000001;
            u_xlat24 = floor(u_xlat24);
            u_xlat24 = max(u_xlat24, 0.0);
            u_xlati24 = int(u_xlat24);
            if((u_xlati24)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_24 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(u_xlat27) + _LightPosDir.xyz;
    u_xlat16_28 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_4.xyz;
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD4.xyz;
    u_xlat16_28 = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_28 = u_xlat16_28 * 0.5 + 0.5;
    u_xlat16_28 = dot(vec2(u_xlat16_28), u_xlat10_1.yy);
    u_xlat16_5.x = (-u_xlat10_24) + 1.0;
    u_xlat16_13.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_5.xy = u_xlat16_5.xx * u_xlat16_13.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_21 = max(u_xlat16_5.x, 9.99999975e-05);
    u_xlat16_21 = u_xlat16_28 / u_xlat16_21;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_21 * 0.25;
    u_xlatb6.xy = lessThan(vec4(u_xlat16_28), u_xlat16_5.xyxx).xy;
    u_xlat16_7.xy = vec2(u_xlat16_28) + (-u_xlat16_5.xy);
    u_xlat16_28 = (-u_xlat16_5.x) + u_xlat16_5.y;
    u_xlat16_28 = max(u_xlat16_28, 9.99999975e-05);
    u_xlat16_28 = u_xlat16_7.x / u_xlat16_28;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = u_xlat16_28 * 0.5 + 0.25;
    u_xlat16_5.x = (-u_xlat16_5.y) + 1.0;
    u_xlat16_5.x = max(u_xlat16_5.x, 9.99999975e-05);
    u_xlat16_5.x = u_xlat16_7.y / u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x * 0.25 + 0.75;
    u_xlat16_28 = (u_xlatb6.y) ? u_xlat16_28 : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb6.x) ? u_xlat16_21 : u_xlat16_28;
    u_xlat16_5.y = 0.5;
    u_xlat10_6.xyz = texture(_DiffuseRampTex, u_xlat16_5.xy).xyz;
    u_xlat16_4.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);
    u_xlat16_4.x = log2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_4.x * _SpecularShininess;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_12 = dFdx(u_xlat16_4.x);
    u_xlat16_20 = dFdy(u_xlat16_4.x);
    u_xlat16_12 = abs(u_xlat16_20) + abs(u_xlat16_12);
    u_xlat16_20 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_28 = (-u_xlat16_12) + u_xlat16_20;
    u_xlat16_4.y = u_xlat16_12 + u_xlat16_20;
    u_xlat16_4.xy = (-vec2(u_xlat16_28)) + u_xlat16_4.xy;
    u_xlat16_12 = float(1.0) / u_xlat16_4.y;
    u_xlat16_4.x = u_xlat16_12 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_12 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_12;
    u_xlat16_4.xyz = u_xlat16_4.xxx * _SpecularColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat10_6.xyz * u_xlat16_0.xyz + u_xlat16_4.xyz;
    u_xlat16_5.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_5.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_5.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-unity_SHC.xyz);
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_5.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_5.xyz = u_xlat16_3.xyz * _CharacterSHColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_0.xyz + u_xlat16_4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump float u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
uvec2 u_xlatu3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
lowp vec3 u_xlat10_6;
bvec2 u_xlatb6;
mediump vec2 u_xlat16_7;
mediump float u_xlat16_12;
mediump vec2 u_xlat16_13;
bvec2 u_xlatb19;
mediump float u_xlat16_20;
mediump float u_xlat16_21;
float u_xlat24;
lowp float u_xlat10_24;
int u_xlati24;
bool u_xlatb24;
float u_xlat27;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_0 = u_xlat16_0 * _EnvColor;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati24 = int(u_xlat16_1);
    if((u_xlati24)==0){discard;}
    u_xlat10_1 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_2 = u_xlat10_1.w * 8.0;
    u_xlat16_2 = roundEven(u_xlat16_2);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(-0.5<u_xlat16_2);
#else
    u_xlatb24 = -0.5<u_xlat16_2;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(u_xlat16_2<0.5);
#else
    u_xlatb3.x = u_xlat16_2<0.5;
#endif
    u_xlatb24 = u_xlatb24 && u_xlatb3.x;
    if(u_xlatb24){
        SV_Target0.w = _BloomIntensity0;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(0.5<u_xlat16_2);
#else
        u_xlatb24 = 0.5<u_xlat16_2;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(u_xlat16_2<1.5);
#else
        u_xlatb3.x = u_xlat16_2<1.5;
#endif
        u_xlatb24 = u_xlatb24 && u_xlatb3.x;
        if(u_xlatb24){
            SV_Target0.w = _BloomIntensity1;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb24 = !!(1.5<u_xlat16_2);
#else
            u_xlatb24 = 1.5<u_xlat16_2;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb3.x = !!(u_xlat16_2<2.5);
#else
            u_xlatb3.x = u_xlat16_2<2.5;
#endif
            u_xlatb24 = u_xlatb24 && u_xlatb3.x;
            if(u_xlatb24){
                SV_Target0.w = _BloomIntensity2;
            } else {
                u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_2));
                u_xlatb2 = lessThan(vec4(u_xlat16_2), vec4(3.5, 4.5, 5.5, 6.5));
                u_xlatb2.x = u_xlatb2.x && u_xlatb3.x;
                u_xlatb2.y = u_xlatb2.y && u_xlatb3.y;
                u_xlatb2.z = u_xlatb2.z && u_xlatb3.z;
                u_xlatb2.w = u_xlatb2.w && u_xlatb3.w;
                u_xlat16_4.x = (u_xlatb2.w) ? _BloomIntensity6 : _BloomIntensity7;
                u_xlat16_4.x = (u_xlatb2.z) ? _BloomIntensity5 : u_xlat16_4.x;
                u_xlat16_4.x = (u_xlatb2.y) ? _BloomIntensity4 : u_xlat16_4.x;
                SV_Target0.w = (u_xlatb2.x) ? _BloomIntensity3 : u_xlat16_4.x;
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb24){
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb24 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb24){
            u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb19.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb19.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb19.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat24 = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat24 = vs_TEXCOORD2.z * 17.0 + (-u_xlat24);
            u_xlat24 = u_xlat24 + 0.99000001;
            u_xlat24 = floor(u_xlat24);
            u_xlat24 = max(u_xlat24, 0.0);
            u_xlati24 = int(u_xlat24);
            if((u_xlati24)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_24 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat16_4.xyz = u_xlat3.xyz * vec3(u_xlat27) + _LightPosDir.xyz;
    u_xlat16_28 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_4.xyz;
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD4.xyz;
    u_xlat16_28 = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_28 = u_xlat16_28 * 0.5 + 0.5;
    u_xlat16_28 = dot(vec2(u_xlat16_28), u_xlat10_1.yy);
    u_xlat16_5.x = (-u_xlat10_24) + 1.0;
    u_xlat16_13.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_5.xy = u_xlat16_5.xx * u_xlat16_13.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_21 = max(u_xlat16_5.x, 9.99999975e-05);
    u_xlat16_21 = u_xlat16_28 / u_xlat16_21;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_21 * 0.25;
    u_xlatb6.xy = lessThan(vec4(u_xlat16_28), u_xlat16_5.xyxx).xy;
    u_xlat16_7.xy = vec2(u_xlat16_28) + (-u_xlat16_5.xy);
    u_xlat16_28 = (-u_xlat16_5.x) + u_xlat16_5.y;
    u_xlat16_28 = max(u_xlat16_28, 9.99999975e-05);
    u_xlat16_28 = u_xlat16_7.x / u_xlat16_28;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_28 = u_xlat16_28 * 0.5 + 0.25;
    u_xlat16_5.x = (-u_xlat16_5.y) + 1.0;
    u_xlat16_5.x = max(u_xlat16_5.x, 9.99999975e-05);
    u_xlat16_5.x = u_xlat16_7.y / u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x * 0.25 + 0.75;
    u_xlat16_28 = (u_xlatb6.y) ? u_xlat16_28 : u_xlat16_5.x;
    u_xlat16_5.x = (u_xlatb6.x) ? u_xlat16_21 : u_xlat16_28;
    u_xlat16_5.y = 0.5;
    u_xlat10_6.xyz = texture(_DiffuseRampTex, u_xlat16_5.xy).xyz;
    u_xlat16_4.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);
    u_xlat16_4.x = log2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat16_4.x * _SpecularShininess;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_12 = dFdx(u_xlat16_4.x);
    u_xlat16_20 = dFdy(u_xlat16_4.x);
    u_xlat16_12 = abs(u_xlat16_20) + abs(u_xlat16_12);
    u_xlat16_20 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_28 = (-u_xlat16_12) + u_xlat16_20;
    u_xlat16_4.y = u_xlat16_12 + u_xlat16_20;
    u_xlat16_4.xy = (-vec2(u_xlat16_28)) + u_xlat16_4.xy;
    u_xlat16_12 = float(1.0) / u_xlat16_4.y;
    u_xlat16_4.x = u_xlat16_12 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_12 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_12;
    u_xlat16_4.xyz = u_xlat16_4.xxx * _SpecularColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat10_6.xyz * u_xlat16_0.xyz + u_xlat16_4.xyz;
    u_xlat16_5.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_5.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_5.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-unity_SHC.xyz);
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_5.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_5.xyz = u_xlat16_3.xyz * _CharacterSHColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_0.xyz + u_xlat16_4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
uvec2 u_xlatu3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump float u_xlat16_10;
mediump vec2 u_xlat16_14;
mediump float u_xlat16_18;
bvec2 u_xlatb19;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
int u_xlati24;
bool u_xlatb24;
mediump float u_xlat16_26;
float u_xlat27;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_0 = u_xlat16_0 * _EnvColor;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati24 = int(u_xlat16_1);
    if((u_xlati24)==0){discard;}
    u_xlat10_1 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_1.w * 8.0;
    u_xlat16_2.x = roundEven(u_xlat16_2.x);
    u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb24 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb24){
        u_xlat10_24 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat3.yx).x;
        u_xlat16_10 = u_xlat10_24;
    } else {
        u_xlat16_10 = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(-0.5<u_xlat16_2.x);
#else
    u_xlatb24 = -0.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb19.x = !!(u_xlat16_2.x<0.5);
#else
    u_xlatb19.x = u_xlat16_2.x<0.5;
#endif
    u_xlatb24 = u_xlatb24 && u_xlatb19.x;
    if(u_xlatb24){
        SV_Target0.w = _BloomIntensity0;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(0.5<u_xlat16_2.x);
#else
        u_xlatb24 = 0.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb19.x = !!(u_xlat16_2.x<1.5);
#else
        u_xlatb19.x = u_xlat16_2.x<1.5;
#endif
        u_xlatb24 = u_xlatb24 && u_xlatb19.x;
        if(u_xlatb24){
            SV_Target0.w = _BloomIntensity1;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb24 = !!(1.5<u_xlat16_2.x);
#else
            u_xlatb24 = 1.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb19.x = !!(u_xlat16_2.x<2.5);
#else
            u_xlatb19.x = u_xlat16_2.x<2.5;
#endif
            u_xlatb24 = u_xlatb24 && u_xlatb19.x;
            if(u_xlatb24){
                SV_Target0.w = _BloomIntensity2;
            } else {
                u_xlatb4 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_2.xxxx);
                u_xlatb5 = lessThan(u_xlat16_2.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
                u_xlatb4.x = u_xlatb4.x && u_xlatb5.x;
                u_xlatb4.y = u_xlatb4.y && u_xlatb5.y;
                u_xlatb4.z = u_xlatb4.z && u_xlatb5.z;
                u_xlatb4.w = u_xlatb4.w && u_xlatb5.w;
                u_xlat16_2.x = (u_xlatb4.w) ? _BloomIntensity6 : _BloomIntensity7;
                u_xlat16_2.x = (u_xlatb4.z) ? _BloomIntensity5 : u_xlat16_2.x;
                u_xlat16_2.x = (u_xlatb4.y) ? _BloomIntensity4 : u_xlat16_2.x;
                SV_Target0.w = (u_xlatb4.x) ? _BloomIntensity3 : u_xlat16_2.x;
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb24){
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb24 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb24){
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb19.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb19.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb19.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat24 = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat24 = vs_TEXCOORD2.z * 17.0 + (-u_xlat24);
            u_xlat24 = u_xlat24 + 0.99000001;
            u_xlat24 = floor(u_xlat24);
            u_xlat24 = max(u_xlat24, 0.0);
            u_xlati24 = int(u_xlat24);
            if((u_xlati24)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_24 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat16_2.xzw = u_xlat3.xyz * vec3(u_xlat27) + _LightPosDir.xyz;
    u_xlat16_6.x = dot(u_xlat16_2.xzw, u_xlat16_2.xzw);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_2.xzw = u_xlat16_2.xzw * u_xlat16_6.xxx;
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_1.yy);
    u_xlat16_14.x = u_xlat16_10 * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_10 + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_24) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb4.xy = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xyxx).xy;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb4.y) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb4.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_4.xyz = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat16_2.xzw);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _SpecularShininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat24 = u_xlat16_2.x * u_xlat16_10;
    u_xlat16_18 = dFdx(u_xlat24);
    u_xlat16_26 = dFdy(u_xlat24);
    u_xlat16_18 = abs(u_xlat16_26) + abs(u_xlat16_18);
    u_xlat16_26 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_18) + u_xlat16_26;
    u_xlat16_18 = u_xlat16_18 + u_xlat16_26;
    u_xlat16_18 = (-u_xlat16_6.x) + u_xlat16_18;
    u_xlat16_2.x = u_xlat16_10 * u_xlat16_2.x + (-u_xlat16_6.x);
    u_xlat16_10 = float(1.0) / u_xlat16_18;
    u_xlat16_2.x = u_xlat16_10 * u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_10;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _SpecularColor.xyz;
    u_xlat16_2.xyz = u_xlat10_1.xxx * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_3.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
uvec2 u_xlatu3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump float u_xlat16_10;
mediump vec2 u_xlat16_14;
mediump float u_xlat16_18;
bvec2 u_xlatb19;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
int u_xlati24;
bool u_xlatb24;
mediump float u_xlat16_26;
float u_xlat27;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_0 = u_xlat16_0 * _EnvColor;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati24 = int(u_xlat16_1);
    if((u_xlati24)==0){discard;}
    u_xlat10_1 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_1.w * 8.0;
    u_xlat16_2.x = roundEven(u_xlat16_2.x);
    u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb24 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb24){
        u_xlat10_24 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat3.yx).x;
        u_xlat16_10 = u_xlat10_24;
    } else {
        u_xlat16_10 = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(-0.5<u_xlat16_2.x);
#else
    u_xlatb24 = -0.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb19.x = !!(u_xlat16_2.x<0.5);
#else
    u_xlatb19.x = u_xlat16_2.x<0.5;
#endif
    u_xlatb24 = u_xlatb24 && u_xlatb19.x;
    if(u_xlatb24){
        SV_Target0.w = _BloomIntensity0;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(0.5<u_xlat16_2.x);
#else
        u_xlatb24 = 0.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb19.x = !!(u_xlat16_2.x<1.5);
#else
        u_xlatb19.x = u_xlat16_2.x<1.5;
#endif
        u_xlatb24 = u_xlatb24 && u_xlatb19.x;
        if(u_xlatb24){
            SV_Target0.w = _BloomIntensity1;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb24 = !!(1.5<u_xlat16_2.x);
#else
            u_xlatb24 = 1.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb19.x = !!(u_xlat16_2.x<2.5);
#else
            u_xlatb19.x = u_xlat16_2.x<2.5;
#endif
            u_xlatb24 = u_xlatb24 && u_xlatb19.x;
            if(u_xlatb24){
                SV_Target0.w = _BloomIntensity2;
            } else {
                u_xlatb4 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_2.xxxx);
                u_xlatb5 = lessThan(u_xlat16_2.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
                u_xlatb4.x = u_xlatb4.x && u_xlatb5.x;
                u_xlatb4.y = u_xlatb4.y && u_xlatb5.y;
                u_xlatb4.z = u_xlatb4.z && u_xlatb5.z;
                u_xlatb4.w = u_xlatb4.w && u_xlatb5.w;
                u_xlat16_2.x = (u_xlatb4.w) ? _BloomIntensity6 : _BloomIntensity7;
                u_xlat16_2.x = (u_xlatb4.z) ? _BloomIntensity5 : u_xlat16_2.x;
                u_xlat16_2.x = (u_xlatb4.y) ? _BloomIntensity4 : u_xlat16_2.x;
                SV_Target0.w = (u_xlatb4.x) ? _BloomIntensity3 : u_xlat16_2.x;
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb24){
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb24 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb24){
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb19.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb19.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb19.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat24 = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat24 = vs_TEXCOORD2.z * 17.0 + (-u_xlat24);
            u_xlat24 = u_xlat24 + 0.99000001;
            u_xlat24 = floor(u_xlat24);
            u_xlat24 = max(u_xlat24, 0.0);
            u_xlati24 = int(u_xlat24);
            if((u_xlati24)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_24 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat16_2.xzw = u_xlat3.xyz * vec3(u_xlat27) + _LightPosDir.xyz;
    u_xlat16_6.x = dot(u_xlat16_2.xzw, u_xlat16_2.xzw);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_2.xzw = u_xlat16_2.xzw * u_xlat16_6.xxx;
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_1.yy);
    u_xlat16_14.x = u_xlat16_10 * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_10 + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_24) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb4.xy = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xyxx).xy;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb4.y) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb4.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_4.xyz = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat16_2.xzw);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _SpecularShininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat24 = u_xlat16_2.x * u_xlat16_10;
    u_xlat16_18 = dFdx(u_xlat24);
    u_xlat16_26 = dFdy(u_xlat24);
    u_xlat16_18 = abs(u_xlat16_26) + abs(u_xlat16_18);
    u_xlat16_26 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_18) + u_xlat16_26;
    u_xlat16_18 = u_xlat16_18 + u_xlat16_26;
    u_xlat16_18 = (-u_xlat16_6.x) + u_xlat16_18;
    u_xlat16_2.x = u_xlat16_10 * u_xlat16_2.x + (-u_xlat16_6.x);
    u_xlat16_10 = float(1.0) / u_xlat16_18;
    u_xlat16_2.x = u_xlat16_10 * u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_10;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _SpecularColor.xyz;
    u_xlat16_2.xyz = u_xlat10_1.xxx * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_3.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
uvec2 u_xlatu3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump float u_xlat16_10;
mediump vec2 u_xlat16_14;
mediump float u_xlat16_18;
bvec2 u_xlatb19;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
int u_xlati24;
bool u_xlatb24;
mediump float u_xlat16_26;
float u_xlat27;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_0 = u_xlat16_0 * _EnvColor;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati24 = int(u_xlat16_1);
    if((u_xlati24)==0){discard;}
    u_xlat10_1 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_1.w * 8.0;
    u_xlat16_2.x = roundEven(u_xlat16_2.x);
    u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb24 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb24){
        u_xlat10_24 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat3.yx).x;
        u_xlat16_10 = u_xlat10_24;
    } else {
        u_xlat16_10 = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(-0.5<u_xlat16_2.x);
#else
    u_xlatb24 = -0.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb19.x = !!(u_xlat16_2.x<0.5);
#else
    u_xlatb19.x = u_xlat16_2.x<0.5;
#endif
    u_xlatb24 = u_xlatb24 && u_xlatb19.x;
    if(u_xlatb24){
        SV_Target0.w = _BloomIntensity0;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(0.5<u_xlat16_2.x);
#else
        u_xlatb24 = 0.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb19.x = !!(u_xlat16_2.x<1.5);
#else
        u_xlatb19.x = u_xlat16_2.x<1.5;
#endif
        u_xlatb24 = u_xlatb24 && u_xlatb19.x;
        if(u_xlatb24){
            SV_Target0.w = _BloomIntensity1;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb24 = !!(1.5<u_xlat16_2.x);
#else
            u_xlatb24 = 1.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb19.x = !!(u_xlat16_2.x<2.5);
#else
            u_xlatb19.x = u_xlat16_2.x<2.5;
#endif
            u_xlatb24 = u_xlatb24 && u_xlatb19.x;
            if(u_xlatb24){
                SV_Target0.w = _BloomIntensity2;
            } else {
                u_xlatb4 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_2.xxxx);
                u_xlatb5 = lessThan(u_xlat16_2.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
                u_xlatb4.x = u_xlatb4.x && u_xlatb5.x;
                u_xlatb4.y = u_xlatb4.y && u_xlatb5.y;
                u_xlatb4.z = u_xlatb4.z && u_xlatb5.z;
                u_xlatb4.w = u_xlatb4.w && u_xlatb5.w;
                u_xlat16_2.x = (u_xlatb4.w) ? _BloomIntensity6 : _BloomIntensity7;
                u_xlat16_2.x = (u_xlatb4.z) ? _BloomIntensity5 : u_xlat16_2.x;
                u_xlat16_2.x = (u_xlatb4.y) ? _BloomIntensity4 : u_xlat16_2.x;
                SV_Target0.w = (u_xlatb4.x) ? _BloomIntensity3 : u_xlat16_2.x;
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb24){
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb24 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb24){
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb19.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb19.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb19.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat24 = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat24 = vs_TEXCOORD2.z * 17.0 + (-u_xlat24);
            u_xlat24 = u_xlat24 + 0.99000001;
            u_xlat24 = floor(u_xlat24);
            u_xlat24 = max(u_xlat24, 0.0);
            u_xlati24 = int(u_xlat24);
            if((u_xlati24)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_24 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat16_2.xzw = u_xlat3.xyz * vec3(u_xlat27) + _LightPosDir.xyz;
    u_xlat16_6.x = dot(u_xlat16_2.xzw, u_xlat16_2.xzw);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_2.xzw = u_xlat16_2.xzw * u_xlat16_6.xxx;
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_1.yy);
    u_xlat16_14.x = u_xlat16_10 * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_10 + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_24) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb4.xy = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xyxx).xy;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb4.y) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb4.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_4.xyz = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat16_2.xzw);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _SpecularShininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat24 = u_xlat16_2.x * u_xlat16_10;
    u_xlat16_18 = dFdx(u_xlat24);
    u_xlat16_26 = dFdy(u_xlat24);
    u_xlat16_18 = abs(u_xlat16_26) + abs(u_xlat16_18);
    u_xlat16_26 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_18) + u_xlat16_26;
    u_xlat16_18 = u_xlat16_18 + u_xlat16_26;
    u_xlat16_18 = (-u_xlat16_6.x) + u_xlat16_18;
    u_xlat16_2.x = u_xlat16_10 * u_xlat16_2.x + (-u_xlat16_6.x);
    u_xlat16_10 = float(1.0) / u_xlat16_18;
    u_xlat16_2.x = u_xlat16_10 * u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_10;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _SpecularColor.xyz;
    u_xlat16_2.xyz = u_xlat10_1.xxx * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_3.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_BLOOM_ON" "_MULTI_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor0;
uniform 	mediump vec4 _SpecularColor1;
uniform 	mediump vec4 _SpecularColor2;
uniform 	mediump vec4 _SpecularColor3;
uniform 	mediump vec4 _SpecularColor4;
uniform 	mediump vec4 _SpecularColor5;
uniform 	mediump vec4 _SpecularColor6;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
uvec2 u_xlatu3;
bvec4 u_xlatb3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_14;
bvec2 u_xlatb19;
mediump float u_xlat16_22;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
int u_xlati24;
bool u_xlatb24;
float u_xlat27;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_0 = u_xlat16_0 * _EnvColor;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati24 = int(u_xlat16_1);
    if((u_xlati24)==0){discard;}
    u_xlat10_1 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_1.w * 8.0;
    u_xlat16_2.x = roundEven(u_xlat16_2.x);
    u_xlatb3.xy = lessThan(vec4(0.5, -0.5, 0.0, 0.0), u_xlat16_2.xxxx).xy;
    u_xlatb19.xy = lessThan(u_xlat16_2.xxxx, vec4(1.5, 0.5, 1.5, 0.5)).xy;
    u_xlatb3.x = u_xlatb19.x && u_xlatb3.x;
    u_xlatb3.y = u_xlatb19.y && u_xlatb3.y;
    if(u_xlatb3.x){
        u_xlat16_10.xyz = _SpecularColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(1.5<u_xlat16_2.x);
#else
        u_xlatb24 = 1.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb19.x = !!(u_xlat16_2.x<2.5);
#else
        u_xlatb19.x = u_xlat16_2.x<2.5;
#endif
        u_xlatb24 = u_xlatb24 && u_xlatb19.x;
        if(u_xlatb24){
            u_xlat16_10.xyz = _SpecularColor2.xyz;
        } else {
            u_xlatb4 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_2.xxxx);
            u_xlatb5 = lessThan(u_xlat16_2.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb4.x = u_xlatb4.x && u_xlatb5.x;
            u_xlatb4.y = u_xlatb4.y && u_xlatb5.y;
            u_xlatb4.z = u_xlatb4.z && u_xlatb5.z;
            u_xlatb4.w = u_xlatb4.w && u_xlatb5.w;
            u_xlat16_6.xyz = (u_xlatb4.w) ? _SpecularColor6.xyz : _SpecularColor0.xyz;
            u_xlat16_6.xyz = (u_xlatb4.z) ? _SpecularColor5.xyz : u_xlat16_6.xyz;
            u_xlat16_6.xyz = (u_xlatb4.y) ? _SpecularColor4.xyz : u_xlat16_6.xyz;
            u_xlat16_10.xyz = (u_xlatb4.x) ? _SpecularColor3.xyz : u_xlat16_6.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.y){
        SV_Target0.w = _BloomIntensity0;
    } else {
        if(u_xlatb3.x){
            SV_Target0.w = _BloomIntensity1;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb24 = !!(1.5<u_xlat16_2.x);
#else
            u_xlatb24 = 1.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb3.x = !!(u_xlat16_2.x<2.5);
#else
            u_xlatb3.x = u_xlat16_2.x<2.5;
#endif
            u_xlatb24 = u_xlatb24 && u_xlatb3.x;
            if(u_xlatb24){
                SV_Target0.w = _BloomIntensity2;
            } else {
                u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_2.xxxx);
                u_xlatb4 = lessThan(u_xlat16_2.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
                u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
                u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
                u_xlatb3.z = u_xlatb3.z && u_xlatb4.z;
                u_xlatb3.w = u_xlatb3.w && u_xlatb4.w;
                u_xlat16_2.x = (u_xlatb3.w) ? _BloomIntensity6 : _BloomIntensity7;
                u_xlat16_2.x = (u_xlatb3.z) ? _BloomIntensity5 : u_xlat16_2.x;
                u_xlat16_2.x = (u_xlatb3.y) ? _BloomIntensity4 : u_xlat16_2.x;
                SV_Target0.w = (u_xlatb3.x) ? _BloomIntensity3 : u_xlat16_2.x;
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb24){
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb24 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb24){
            u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb19.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb19.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb19.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat24 = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat24 = vs_TEXCOORD2.z * 17.0 + (-u_xlat24);
            u_xlat24 = u_xlat24 + 0.99000001;
            u_xlat24 = floor(u_xlat24);
            u_xlat24 = max(u_xlat24, 0.0);
            u_xlati24 = int(u_xlat24);
            if((u_xlati24)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_24 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat27) + _LightPosDir.xyz;
    u_xlat16_2.x = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_6.xyz = u_xlat16_2.xxx * u_xlat16_6.xyz;
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD4.xyz;
    u_xlat16_2.x = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + 0.5;
    u_xlat16_2.x = dot(u_xlat16_2.xx, u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_24) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_2.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb4.xy = lessThan(u_xlat16_2.xxxx, u_xlat16_7.xyxx).xy;
    u_xlat16_23.xy = u_xlat16_2.xx + (-u_xlat16_7.xy);
    u_xlat16_2.x = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = u_xlat16_23.x / u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_2.x = (u_xlatb4.y) ? u_xlat16_2.x : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb4.x) ? u_xlat16_30 : u_xlat16_2.x;
    u_xlat16_7.y = 0.5;
    u_xlat10_4.xyz = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _SpecularShininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_6.x = dFdx(u_xlat16_2.x);
    u_xlat16_14 = dFdy(u_xlat16_2.x);
    u_xlat16_6.x = abs(u_xlat16_14) + abs(u_xlat16_6.x);
    u_xlat16_14 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_6.x) + u_xlat16_14;
    u_xlat16_6.x = u_xlat16_6.x + u_xlat16_14;
    u_xlat16_6.x = (-u_xlat16_22) + u_xlat16_6.x;
    u_xlat16_2.x = u_xlat16_2.x + (-u_xlat16_22);
    u_xlat16_6.x = float(1.0) / u_xlat16_6.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;
    u_xlat16_2.xyz = u_xlat16_10.xyz * u_xlat16_2.xxx;
    u_xlat16_2.xyz = u_xlat10_1.xxx * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_3.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_BLOOM_ON" "_MULTI_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor0;
uniform 	mediump vec4 _SpecularColor1;
uniform 	mediump vec4 _SpecularColor2;
uniform 	mediump vec4 _SpecularColor3;
uniform 	mediump vec4 _SpecularColor4;
uniform 	mediump vec4 _SpecularColor5;
uniform 	mediump vec4 _SpecularColor6;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
uvec2 u_xlatu3;
bvec4 u_xlatb3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_14;
bvec2 u_xlatb19;
mediump float u_xlat16_22;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
int u_xlati24;
bool u_xlatb24;
float u_xlat27;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_0 = u_xlat16_0 * _EnvColor;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati24 = int(u_xlat16_1);
    if((u_xlati24)==0){discard;}
    u_xlat10_1 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_1.w * 8.0;
    u_xlat16_2.x = roundEven(u_xlat16_2.x);
    u_xlatb3.xy = lessThan(vec4(0.5, -0.5, 0.0, 0.0), u_xlat16_2.xxxx).xy;
    u_xlatb19.xy = lessThan(u_xlat16_2.xxxx, vec4(1.5, 0.5, 1.5, 0.5)).xy;
    u_xlatb3.x = u_xlatb19.x && u_xlatb3.x;
    u_xlatb3.y = u_xlatb19.y && u_xlatb3.y;
    if(u_xlatb3.x){
        u_xlat16_10.xyz = _SpecularColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(1.5<u_xlat16_2.x);
#else
        u_xlatb24 = 1.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb19.x = !!(u_xlat16_2.x<2.5);
#else
        u_xlatb19.x = u_xlat16_2.x<2.5;
#endif
        u_xlatb24 = u_xlatb24 && u_xlatb19.x;
        if(u_xlatb24){
            u_xlat16_10.xyz = _SpecularColor2.xyz;
        } else {
            u_xlatb4 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_2.xxxx);
            u_xlatb5 = lessThan(u_xlat16_2.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb4.x = u_xlatb4.x && u_xlatb5.x;
            u_xlatb4.y = u_xlatb4.y && u_xlatb5.y;
            u_xlatb4.z = u_xlatb4.z && u_xlatb5.z;
            u_xlatb4.w = u_xlatb4.w && u_xlatb5.w;
            u_xlat16_6.xyz = (u_xlatb4.w) ? _SpecularColor6.xyz : _SpecularColor0.xyz;
            u_xlat16_6.xyz = (u_xlatb4.z) ? _SpecularColor5.xyz : u_xlat16_6.xyz;
            u_xlat16_6.xyz = (u_xlatb4.y) ? _SpecularColor4.xyz : u_xlat16_6.xyz;
            u_xlat16_10.xyz = (u_xlatb4.x) ? _SpecularColor3.xyz : u_xlat16_6.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.y){
        SV_Target0.w = _BloomIntensity0;
    } else {
        if(u_xlatb3.x){
            SV_Target0.w = _BloomIntensity1;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb24 = !!(1.5<u_xlat16_2.x);
#else
            u_xlatb24 = 1.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb3.x = !!(u_xlat16_2.x<2.5);
#else
            u_xlatb3.x = u_xlat16_2.x<2.5;
#endif
            u_xlatb24 = u_xlatb24 && u_xlatb3.x;
            if(u_xlatb24){
                SV_Target0.w = _BloomIntensity2;
            } else {
                u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_2.xxxx);
                u_xlatb4 = lessThan(u_xlat16_2.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
                u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
                u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
                u_xlatb3.z = u_xlatb3.z && u_xlatb4.z;
                u_xlatb3.w = u_xlatb3.w && u_xlatb4.w;
                u_xlat16_2.x = (u_xlatb3.w) ? _BloomIntensity6 : _BloomIntensity7;
                u_xlat16_2.x = (u_xlatb3.z) ? _BloomIntensity5 : u_xlat16_2.x;
                u_xlat16_2.x = (u_xlatb3.y) ? _BloomIntensity4 : u_xlat16_2.x;
                SV_Target0.w = (u_xlatb3.x) ? _BloomIntensity3 : u_xlat16_2.x;
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb24){
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb24 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb24){
            u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb19.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb19.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb19.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat24 = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat24 = vs_TEXCOORD2.z * 17.0 + (-u_xlat24);
            u_xlat24 = u_xlat24 + 0.99000001;
            u_xlat24 = floor(u_xlat24);
            u_xlat24 = max(u_xlat24, 0.0);
            u_xlati24 = int(u_xlat24);
            if((u_xlati24)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_24 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat27) + _LightPosDir.xyz;
    u_xlat16_2.x = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_6.xyz = u_xlat16_2.xxx * u_xlat16_6.xyz;
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD4.xyz;
    u_xlat16_2.x = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + 0.5;
    u_xlat16_2.x = dot(u_xlat16_2.xx, u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_24) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_2.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb4.xy = lessThan(u_xlat16_2.xxxx, u_xlat16_7.xyxx).xy;
    u_xlat16_23.xy = u_xlat16_2.xx + (-u_xlat16_7.xy);
    u_xlat16_2.x = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = u_xlat16_23.x / u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_2.x = (u_xlatb4.y) ? u_xlat16_2.x : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb4.x) ? u_xlat16_30 : u_xlat16_2.x;
    u_xlat16_7.y = 0.5;
    u_xlat10_4.xyz = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _SpecularShininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_6.x = dFdx(u_xlat16_2.x);
    u_xlat16_14 = dFdy(u_xlat16_2.x);
    u_xlat16_6.x = abs(u_xlat16_14) + abs(u_xlat16_6.x);
    u_xlat16_14 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_6.x) + u_xlat16_14;
    u_xlat16_6.x = u_xlat16_6.x + u_xlat16_14;
    u_xlat16_6.x = (-u_xlat16_22) + u_xlat16_6.x;
    u_xlat16_2.x = u_xlat16_2.x + (-u_xlat16_22);
    u_xlat16_6.x = float(1.0) / u_xlat16_6.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;
    u_xlat16_2.xyz = u_xlat16_10.xyz * u_xlat16_2.xxx;
    u_xlat16_2.xyz = u_xlat10_1.xxx * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_3.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_BLOOM_ON" "_MULTI_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor0;
uniform 	mediump vec4 _SpecularColor1;
uniform 	mediump vec4 _SpecularColor2;
uniform 	mediump vec4 _SpecularColor3;
uniform 	mediump vec4 _SpecularColor4;
uniform 	mediump vec4 _SpecularColor5;
uniform 	mediump vec4 _SpecularColor6;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
uvec2 u_xlatu3;
bvec4 u_xlatb3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_10;
mediump float u_xlat16_14;
bvec2 u_xlatb19;
mediump float u_xlat16_22;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
int u_xlati24;
bool u_xlatb24;
float u_xlat27;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_0 = u_xlat16_0 * _EnvColor;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati24 = int(u_xlat16_1);
    if((u_xlati24)==0){discard;}
    u_xlat10_1 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_1.w * 8.0;
    u_xlat16_2.x = roundEven(u_xlat16_2.x);
    u_xlatb3.xy = lessThan(vec4(0.5, -0.5, 0.0, 0.0), u_xlat16_2.xxxx).xy;
    u_xlatb19.xy = lessThan(u_xlat16_2.xxxx, vec4(1.5, 0.5, 1.5, 0.5)).xy;
    u_xlatb3.x = u_xlatb19.x && u_xlatb3.x;
    u_xlatb3.y = u_xlatb19.y && u_xlatb3.y;
    if(u_xlatb3.x){
        u_xlat16_10.xyz = _SpecularColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(1.5<u_xlat16_2.x);
#else
        u_xlatb24 = 1.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb19.x = !!(u_xlat16_2.x<2.5);
#else
        u_xlatb19.x = u_xlat16_2.x<2.5;
#endif
        u_xlatb24 = u_xlatb24 && u_xlatb19.x;
        if(u_xlatb24){
            u_xlat16_10.xyz = _SpecularColor2.xyz;
        } else {
            u_xlatb4 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_2.xxxx);
            u_xlatb5 = lessThan(u_xlat16_2.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb4.x = u_xlatb4.x && u_xlatb5.x;
            u_xlatb4.y = u_xlatb4.y && u_xlatb5.y;
            u_xlatb4.z = u_xlatb4.z && u_xlatb5.z;
            u_xlatb4.w = u_xlatb4.w && u_xlatb5.w;
            u_xlat16_6.xyz = (u_xlatb4.w) ? _SpecularColor6.xyz : _SpecularColor0.xyz;
            u_xlat16_6.xyz = (u_xlatb4.z) ? _SpecularColor5.xyz : u_xlat16_6.xyz;
            u_xlat16_6.xyz = (u_xlatb4.y) ? _SpecularColor4.xyz : u_xlat16_6.xyz;
            u_xlat16_10.xyz = (u_xlatb4.x) ? _SpecularColor3.xyz : u_xlat16_6.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.y){
        SV_Target0.w = _BloomIntensity0;
    } else {
        if(u_xlatb3.x){
            SV_Target0.w = _BloomIntensity1;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb24 = !!(1.5<u_xlat16_2.x);
#else
            u_xlatb24 = 1.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb3.x = !!(u_xlat16_2.x<2.5);
#else
            u_xlatb3.x = u_xlat16_2.x<2.5;
#endif
            u_xlatb24 = u_xlatb24 && u_xlatb3.x;
            if(u_xlatb24){
                SV_Target0.w = _BloomIntensity2;
            } else {
                u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_2.xxxx);
                u_xlatb4 = lessThan(u_xlat16_2.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
                u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
                u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
                u_xlatb3.z = u_xlatb3.z && u_xlatb4.z;
                u_xlatb3.w = u_xlatb3.w && u_xlatb4.w;
                u_xlat16_2.x = (u_xlatb3.w) ? _BloomIntensity6 : _BloomIntensity7;
                u_xlat16_2.x = (u_xlatb3.z) ? _BloomIntensity5 : u_xlat16_2.x;
                u_xlat16_2.x = (u_xlatb3.y) ? _BloomIntensity4 : u_xlat16_2.x;
                SV_Target0.w = (u_xlatb3.x) ? _BloomIntensity3 : u_xlat16_2.x;
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb24){
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb24 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb24){
            u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb19.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb19.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb19.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat24 = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat24 = vs_TEXCOORD2.z * 17.0 + (-u_xlat24);
            u_xlat24 = u_xlat24 + 0.99000001;
            u_xlat24 = floor(u_xlat24);
            u_xlat24 = max(u_xlat24, 0.0);
            u_xlati24 = int(u_xlat24);
            if((u_xlati24)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_24 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat27) + _LightPosDir.xyz;
    u_xlat16_2.x = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_6.xyz = u_xlat16_2.xxx * u_xlat16_6.xyz;
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD4.xyz;
    u_xlat16_2.x = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + 0.5;
    u_xlat16_2.x = dot(u_xlat16_2.xx, u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_24) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_2.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb4.xy = lessThan(u_xlat16_2.xxxx, u_xlat16_7.xyxx).xy;
    u_xlat16_23.xy = u_xlat16_2.xx + (-u_xlat16_7.xy);
    u_xlat16_2.x = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_2.x = max(u_xlat16_2.x, 9.99999975e-05);
    u_xlat16_2.x = u_xlat16_23.x / u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_2.x = (u_xlatb4.y) ? u_xlat16_2.x : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb4.x) ? u_xlat16_30 : u_xlat16_2.x;
    u_xlat16_7.y = 0.5;
    u_xlat10_4.xyz = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _SpecularShininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_6.x = dFdx(u_xlat16_2.x);
    u_xlat16_14 = dFdy(u_xlat16_2.x);
    u_xlat16_6.x = abs(u_xlat16_14) + abs(u_xlat16_6.x);
    u_xlat16_14 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_6.x) + u_xlat16_14;
    u_xlat16_6.x = u_xlat16_6.x + u_xlat16_14;
    u_xlat16_6.x = (-u_xlat16_22) + u_xlat16_6.x;
    u_xlat16_2.x = u_xlat16_2.x + (-u_xlat16_22);
    u_xlat16_6.x = float(1.0) / u_xlat16_6.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;
    u_xlat16_2.xyz = u_xlat16_10.xyz * u_xlat16_2.xxx;
    u_xlat16_2.xyz = u_xlat10_1.xxx * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_3.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_MULTI_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor0;
uniform 	mediump vec4 _SpecularColor1;
uniform 	mediump vec4 _SpecularColor2;
uniform 	mediump vec4 _SpecularColor3;
uniform 	mediump vec4 _SpecularColor4;
uniform 	mediump vec4 _SpecularColor5;
uniform 	mediump vec4 _SpecularColor6;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
uvec2 u_xlatu3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
bvec4 u_xlatb6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
mediump float u_xlat16_11;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_20;
bvec2 u_xlatb21;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
int u_xlati27;
bool u_xlatb27;
mediump float u_xlat16_29;
float u_xlat30;
mediump float u_xlat16_32;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_0 = u_xlat16_0 * _EnvColor;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati27 = int(u_xlat16_1);
    if((u_xlati27)==0){discard;}
    u_xlat10_1 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_1.w * 8.0;
    u_xlat16_2.x = roundEven(u_xlat16_2.x);
    u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb27 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb27){
        u_xlat10_27 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat3.yx).x;
        u_xlat16_11 = u_xlat10_27;
    } else {
        u_xlat16_11 = 1.0;
    //ENDIF
    }
    u_xlatb21.xy = lessThan(vec4(0.5, -0.5, 0.5, -0.5), u_xlat16_2.xxxx).xy;
    u_xlatb4.xy = lessThan(u_xlat16_2.xxxx, vec4(1.5, 0.5, 0.0, 0.0)).xy;
    u_xlatb21.x = u_xlatb21.x && u_xlatb4.x;
    u_xlatb21.y = u_xlatb21.y && u_xlatb4.y;
    if(u_xlatb21.x){
        u_xlat16_5.xyz = _SpecularColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(1.5<u_xlat16_2.x);
#else
        u_xlatb27 = 1.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb4.x = !!(u_xlat16_2.x<2.5);
#else
        u_xlatb4.x = u_xlat16_2.x<2.5;
#endif
        u_xlatb27 = u_xlatb27 && u_xlatb4.x;
        if(u_xlatb27){
            u_xlat16_5.xyz = _SpecularColor2.xyz;
        } else {
            u_xlatb4 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_2.xxxx);
            u_xlatb6 = lessThan(u_xlat16_2.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb4.x = u_xlatb4.x && u_xlatb6.x;
            u_xlatb4.y = u_xlatb4.y && u_xlatb6.y;
            u_xlatb4.z = u_xlatb4.z && u_xlatb6.z;
            u_xlatb4.w = u_xlatb4.w && u_xlatb6.w;
            u_xlat16_7.xyz = (u_xlatb4.w) ? _SpecularColor6.xyz : _SpecularColor0.xyz;
            u_xlat16_7.xyz = (u_xlatb4.z) ? _SpecularColor5.xyz : u_xlat16_7.xyz;
            u_xlat16_7.xyz = (u_xlatb4.y) ? _SpecularColor4.xyz : u_xlat16_7.xyz;
            u_xlat16_5.xyz = (u_xlatb4.x) ? _SpecularColor3.xyz : u_xlat16_7.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb21.y){
        SV_Target0.w = _BloomIntensity0;
    } else {
        if(u_xlatb21.x){
            SV_Target0.w = _BloomIntensity1;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb27 = !!(1.5<u_xlat16_2.x);
#else
            u_xlatb27 = 1.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb21.x = !!(u_xlat16_2.x<2.5);
#else
            u_xlatb21.x = u_xlat16_2.x<2.5;
#endif
            u_xlatb27 = u_xlatb27 && u_xlatb21.x;
            if(u_xlatb27){
                SV_Target0.w = _BloomIntensity2;
            } else {
                u_xlatb4 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_2.xxxx);
                u_xlatb6 = lessThan(u_xlat16_2.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
                u_xlatb4.x = u_xlatb4.x && u_xlatb6.x;
                u_xlatb4.y = u_xlatb4.y && u_xlatb6.y;
                u_xlatb4.z = u_xlatb4.z && u_xlatb6.z;
                u_xlatb4.w = u_xlatb4.w && u_xlatb6.w;
                u_xlat16_2.x = (u_xlatb4.w) ? _BloomIntensity6 : _BloomIntensity7;
                u_xlat16_2.x = (u_xlatb4.z) ? _BloomIntensity5 : u_xlat16_2.x;
                u_xlat16_2.x = (u_xlatb4.y) ? _BloomIntensity4 : u_xlat16_2.x;
                SV_Target0.w = (u_xlatb4.x) ? _BloomIntensity3 : u_xlat16_2.x;
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb27){
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb27 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb27){
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb21.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb21.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb21.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat27 = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat27 = vs_TEXCOORD2.z * 17.0 + (-u_xlat27);
            u_xlat27 = u_xlat27 + 0.99000001;
            u_xlat27 = floor(u_xlat27);
            u_xlat27 = max(u_xlat27, 0.0);
            u_xlati27 = int(u_xlat27);
            if((u_xlati27)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_27 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_2.xzw = u_xlat3.xyz * vec3(u_xlat30) + _LightPosDir.xyz;
    u_xlat16_32 = dot(u_xlat16_2.xzw, u_xlat16_2.xzw);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_2.xzw = u_xlat16_2.xzw * vec3(u_xlat16_32);
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD4.xyz;
    u_xlat16_32 = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_32 = u_xlat16_32 * 0.5 + 0.5;
    u_xlat16_32 = dot(vec2(u_xlat16_32), u_xlat10_1.yy);
    u_xlat16_7.x = u_xlat16_11 * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_11 + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_32 = u_xlat16_32 + (-u_xlat16_7.x);
    u_xlat16_32 = u_xlat16_16.x * u_xlat16_32 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_27) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_32 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb4.xy = lessThan(vec4(u_xlat16_32), u_xlat16_7.xyxx).xy;
    u_xlat16_8.xy = vec2(u_xlat16_32) + (-u_xlat16_7.xy);
    u_xlat16_32 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_32 = max(u_xlat16_32, 9.99999975e-05);
    u_xlat16_32 = u_xlat16_8.x / u_xlat16_32;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_32 = min(max(u_xlat16_32, 0.0), 1.0);
#else
    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
#endif
    u_xlat16_32 = u_xlat16_32 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_32 = (u_xlatb4.y) ? u_xlat16_32 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb4.x) ? u_xlat16_25 : u_xlat16_32;
    u_xlat16_7.y = 0.5;
    u_xlat10_4.xyz = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat16_2.xzw);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _SpecularShininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat27 = u_xlat16_2.x * u_xlat16_11;
    u_xlat16_20 = dFdx(u_xlat27);
    u_xlat16_29 = dFdy(u_xlat27);
    u_xlat16_20 = abs(u_xlat16_29) + abs(u_xlat16_20);
    u_xlat16_29 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_32 = (-u_xlat16_20) + u_xlat16_29;
    u_xlat16_20 = u_xlat16_20 + u_xlat16_29;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat16_2.x = u_xlat16_11 * u_xlat16_2.x + (-u_xlat16_32);
    u_xlat16_11 = float(1.0) / u_xlat16_20;
    u_xlat16_2.x = u_xlat16_11 * u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_11 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_11;
    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xxx;
    u_xlat16_2.xyz = u_xlat10_1.xxx * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    u_xlat16_5.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_5.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_5.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-unity_SHC.xyz);
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_5.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_5.xyz = u_xlat16_3.xyz * _CharacterSHColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_MULTI_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor0;
uniform 	mediump vec4 _SpecularColor1;
uniform 	mediump vec4 _SpecularColor2;
uniform 	mediump vec4 _SpecularColor3;
uniform 	mediump vec4 _SpecularColor4;
uniform 	mediump vec4 _SpecularColor5;
uniform 	mediump vec4 _SpecularColor6;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
uvec2 u_xlatu3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
bvec4 u_xlatb6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
mediump float u_xlat16_11;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_20;
bvec2 u_xlatb21;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
int u_xlati27;
bool u_xlatb27;
mediump float u_xlat16_29;
float u_xlat30;
mediump float u_xlat16_32;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_0 = u_xlat16_0 * _EnvColor;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati27 = int(u_xlat16_1);
    if((u_xlati27)==0){discard;}
    u_xlat10_1 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_1.w * 8.0;
    u_xlat16_2.x = roundEven(u_xlat16_2.x);
    u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb27 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb27){
        u_xlat10_27 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat3.yx).x;
        u_xlat16_11 = u_xlat10_27;
    } else {
        u_xlat16_11 = 1.0;
    //ENDIF
    }
    u_xlatb21.xy = lessThan(vec4(0.5, -0.5, 0.5, -0.5), u_xlat16_2.xxxx).xy;
    u_xlatb4.xy = lessThan(u_xlat16_2.xxxx, vec4(1.5, 0.5, 0.0, 0.0)).xy;
    u_xlatb21.x = u_xlatb21.x && u_xlatb4.x;
    u_xlatb21.y = u_xlatb21.y && u_xlatb4.y;
    if(u_xlatb21.x){
        u_xlat16_5.xyz = _SpecularColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(1.5<u_xlat16_2.x);
#else
        u_xlatb27 = 1.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb4.x = !!(u_xlat16_2.x<2.5);
#else
        u_xlatb4.x = u_xlat16_2.x<2.5;
#endif
        u_xlatb27 = u_xlatb27 && u_xlatb4.x;
        if(u_xlatb27){
            u_xlat16_5.xyz = _SpecularColor2.xyz;
        } else {
            u_xlatb4 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_2.xxxx);
            u_xlatb6 = lessThan(u_xlat16_2.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb4.x = u_xlatb4.x && u_xlatb6.x;
            u_xlatb4.y = u_xlatb4.y && u_xlatb6.y;
            u_xlatb4.z = u_xlatb4.z && u_xlatb6.z;
            u_xlatb4.w = u_xlatb4.w && u_xlatb6.w;
            u_xlat16_7.xyz = (u_xlatb4.w) ? _SpecularColor6.xyz : _SpecularColor0.xyz;
            u_xlat16_7.xyz = (u_xlatb4.z) ? _SpecularColor5.xyz : u_xlat16_7.xyz;
            u_xlat16_7.xyz = (u_xlatb4.y) ? _SpecularColor4.xyz : u_xlat16_7.xyz;
            u_xlat16_5.xyz = (u_xlatb4.x) ? _SpecularColor3.xyz : u_xlat16_7.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb21.y){
        SV_Target0.w = _BloomIntensity0;
    } else {
        if(u_xlatb21.x){
            SV_Target0.w = _BloomIntensity1;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb27 = !!(1.5<u_xlat16_2.x);
#else
            u_xlatb27 = 1.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb21.x = !!(u_xlat16_2.x<2.5);
#else
            u_xlatb21.x = u_xlat16_2.x<2.5;
#endif
            u_xlatb27 = u_xlatb27 && u_xlatb21.x;
            if(u_xlatb27){
                SV_Target0.w = _BloomIntensity2;
            } else {
                u_xlatb4 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_2.xxxx);
                u_xlatb6 = lessThan(u_xlat16_2.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
                u_xlatb4.x = u_xlatb4.x && u_xlatb6.x;
                u_xlatb4.y = u_xlatb4.y && u_xlatb6.y;
                u_xlatb4.z = u_xlatb4.z && u_xlatb6.z;
                u_xlatb4.w = u_xlatb4.w && u_xlatb6.w;
                u_xlat16_2.x = (u_xlatb4.w) ? _BloomIntensity6 : _BloomIntensity7;
                u_xlat16_2.x = (u_xlatb4.z) ? _BloomIntensity5 : u_xlat16_2.x;
                u_xlat16_2.x = (u_xlatb4.y) ? _BloomIntensity4 : u_xlat16_2.x;
                SV_Target0.w = (u_xlatb4.x) ? _BloomIntensity3 : u_xlat16_2.x;
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb27){
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb27 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb27){
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb21.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb21.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb21.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat27 = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat27 = vs_TEXCOORD2.z * 17.0 + (-u_xlat27);
            u_xlat27 = u_xlat27 + 0.99000001;
            u_xlat27 = floor(u_xlat27);
            u_xlat27 = max(u_xlat27, 0.0);
            u_xlati27 = int(u_xlat27);
            if((u_xlati27)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_27 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_2.xzw = u_xlat3.xyz * vec3(u_xlat30) + _LightPosDir.xyz;
    u_xlat16_32 = dot(u_xlat16_2.xzw, u_xlat16_2.xzw);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_2.xzw = u_xlat16_2.xzw * vec3(u_xlat16_32);
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD4.xyz;
    u_xlat16_32 = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_32 = u_xlat16_32 * 0.5 + 0.5;
    u_xlat16_32 = dot(vec2(u_xlat16_32), u_xlat10_1.yy);
    u_xlat16_7.x = u_xlat16_11 * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_11 + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_32 = u_xlat16_32 + (-u_xlat16_7.x);
    u_xlat16_32 = u_xlat16_16.x * u_xlat16_32 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_27) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_32 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb4.xy = lessThan(vec4(u_xlat16_32), u_xlat16_7.xyxx).xy;
    u_xlat16_8.xy = vec2(u_xlat16_32) + (-u_xlat16_7.xy);
    u_xlat16_32 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_32 = max(u_xlat16_32, 9.99999975e-05);
    u_xlat16_32 = u_xlat16_8.x / u_xlat16_32;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_32 = min(max(u_xlat16_32, 0.0), 1.0);
#else
    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
#endif
    u_xlat16_32 = u_xlat16_32 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_32 = (u_xlatb4.y) ? u_xlat16_32 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb4.x) ? u_xlat16_25 : u_xlat16_32;
    u_xlat16_7.y = 0.5;
    u_xlat10_4.xyz = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat16_2.xzw);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _SpecularShininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat27 = u_xlat16_2.x * u_xlat16_11;
    u_xlat16_20 = dFdx(u_xlat27);
    u_xlat16_29 = dFdy(u_xlat27);
    u_xlat16_20 = abs(u_xlat16_29) + abs(u_xlat16_20);
    u_xlat16_29 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_32 = (-u_xlat16_20) + u_xlat16_29;
    u_xlat16_20 = u_xlat16_20 + u_xlat16_29;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat16_2.x = u_xlat16_11 * u_xlat16_2.x + (-u_xlat16_32);
    u_xlat16_11 = float(1.0) / u_xlat16_20;
    u_xlat16_2.x = u_xlat16_11 * u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_11 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_11;
    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xxx;
    u_xlat16_2.xyz = u_xlat10_1.xxx * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    u_xlat16_5.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_5.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_5.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-unity_SHC.xyz);
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_5.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_5.xyz = u_xlat16_3.xyz * _CharacterSHColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_MULTI_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor0;
uniform 	mediump vec4 _SpecularColor1;
uniform 	mediump vec4 _SpecularColor2;
uniform 	mediump vec4 _SpecularColor3;
uniform 	mediump vec4 _SpecularColor4;
uniform 	mediump vec4 _SpecularColor5;
uniform 	mediump vec4 _SpecularColor6;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
uvec2 u_xlatu3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
bvec4 u_xlatb6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
mediump float u_xlat16_11;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_20;
bvec2 u_xlatb21;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
int u_xlati27;
bool u_xlatb27;
mediump float u_xlat16_29;
float u_xlat30;
mediump float u_xlat16_32;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_0 = u_xlat16_0 * _EnvColor;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati27 = int(u_xlat16_1);
    if((u_xlati27)==0){discard;}
    u_xlat10_1 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_1.w * 8.0;
    u_xlat16_2.x = roundEven(u_xlat16_2.x);
    u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb27 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb27){
        u_xlat10_27 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat3.yx).x;
        u_xlat16_11 = u_xlat10_27;
    } else {
        u_xlat16_11 = 1.0;
    //ENDIF
    }
    u_xlatb21.xy = lessThan(vec4(0.5, -0.5, 0.5, -0.5), u_xlat16_2.xxxx).xy;
    u_xlatb4.xy = lessThan(u_xlat16_2.xxxx, vec4(1.5, 0.5, 0.0, 0.0)).xy;
    u_xlatb21.x = u_xlatb21.x && u_xlatb4.x;
    u_xlatb21.y = u_xlatb21.y && u_xlatb4.y;
    if(u_xlatb21.x){
        u_xlat16_5.xyz = _SpecularColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(1.5<u_xlat16_2.x);
#else
        u_xlatb27 = 1.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb4.x = !!(u_xlat16_2.x<2.5);
#else
        u_xlatb4.x = u_xlat16_2.x<2.5;
#endif
        u_xlatb27 = u_xlatb27 && u_xlatb4.x;
        if(u_xlatb27){
            u_xlat16_5.xyz = _SpecularColor2.xyz;
        } else {
            u_xlatb4 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_2.xxxx);
            u_xlatb6 = lessThan(u_xlat16_2.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb4.x = u_xlatb4.x && u_xlatb6.x;
            u_xlatb4.y = u_xlatb4.y && u_xlatb6.y;
            u_xlatb4.z = u_xlatb4.z && u_xlatb6.z;
            u_xlatb4.w = u_xlatb4.w && u_xlatb6.w;
            u_xlat16_7.xyz = (u_xlatb4.w) ? _SpecularColor6.xyz : _SpecularColor0.xyz;
            u_xlat16_7.xyz = (u_xlatb4.z) ? _SpecularColor5.xyz : u_xlat16_7.xyz;
            u_xlat16_7.xyz = (u_xlatb4.y) ? _SpecularColor4.xyz : u_xlat16_7.xyz;
            u_xlat16_5.xyz = (u_xlatb4.x) ? _SpecularColor3.xyz : u_xlat16_7.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb21.y){
        SV_Target0.w = _BloomIntensity0;
    } else {
        if(u_xlatb21.x){
            SV_Target0.w = _BloomIntensity1;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb27 = !!(1.5<u_xlat16_2.x);
#else
            u_xlatb27 = 1.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb21.x = !!(u_xlat16_2.x<2.5);
#else
            u_xlatb21.x = u_xlat16_2.x<2.5;
#endif
            u_xlatb27 = u_xlatb27 && u_xlatb21.x;
            if(u_xlatb27){
                SV_Target0.w = _BloomIntensity2;
            } else {
                u_xlatb4 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_2.xxxx);
                u_xlatb6 = lessThan(u_xlat16_2.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
                u_xlatb4.x = u_xlatb4.x && u_xlatb6.x;
                u_xlatb4.y = u_xlatb4.y && u_xlatb6.y;
                u_xlatb4.z = u_xlatb4.z && u_xlatb6.z;
                u_xlatb4.w = u_xlatb4.w && u_xlatb6.w;
                u_xlat16_2.x = (u_xlatb4.w) ? _BloomIntensity6 : _BloomIntensity7;
                u_xlat16_2.x = (u_xlatb4.z) ? _BloomIntensity5 : u_xlat16_2.x;
                u_xlat16_2.x = (u_xlatb4.y) ? _BloomIntensity4 : u_xlat16_2.x;
                SV_Target0.w = (u_xlatb4.x) ? _BloomIntensity3 : u_xlat16_2.x;
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb27){
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb27 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb27){
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb21.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb21.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb21.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat27 = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat27 = vs_TEXCOORD2.z * 17.0 + (-u_xlat27);
            u_xlat27 = u_xlat27 + 0.99000001;
            u_xlat27 = floor(u_xlat27);
            u_xlat27 = max(u_xlat27, 0.0);
            u_xlati27 = int(u_xlat27);
            if((u_xlati27)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_27 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_2.xzw = u_xlat3.xyz * vec3(u_xlat30) + _LightPosDir.xyz;
    u_xlat16_32 = dot(u_xlat16_2.xzw, u_xlat16_2.xzw);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_2.xzw = u_xlat16_2.xzw * vec3(u_xlat16_32);
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD4.xyz;
    u_xlat16_32 = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_32 = u_xlat16_32 * 0.5 + 0.5;
    u_xlat16_32 = dot(vec2(u_xlat16_32), u_xlat10_1.yy);
    u_xlat16_7.x = u_xlat16_11 * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_11 + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_32 = u_xlat16_32 + (-u_xlat16_7.x);
    u_xlat16_32 = u_xlat16_16.x * u_xlat16_32 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_27) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_32 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb4.xy = lessThan(vec4(u_xlat16_32), u_xlat16_7.xyxx).xy;
    u_xlat16_8.xy = vec2(u_xlat16_32) + (-u_xlat16_7.xy);
    u_xlat16_32 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_32 = max(u_xlat16_32, 9.99999975e-05);
    u_xlat16_32 = u_xlat16_8.x / u_xlat16_32;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_32 = min(max(u_xlat16_32, 0.0), 1.0);
#else
    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
#endif
    u_xlat16_32 = u_xlat16_32 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_32 = (u_xlatb4.y) ? u_xlat16_32 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb4.x) ? u_xlat16_25 : u_xlat16_32;
    u_xlat16_7.y = 0.5;
    u_xlat10_4.xyz = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat16_2.xzw);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _SpecularShininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat27 = u_xlat16_2.x * u_xlat16_11;
    u_xlat16_20 = dFdx(u_xlat27);
    u_xlat16_29 = dFdy(u_xlat27);
    u_xlat16_20 = abs(u_xlat16_29) + abs(u_xlat16_20);
    u_xlat16_29 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_32 = (-u_xlat16_20) + u_xlat16_29;
    u_xlat16_20 = u_xlat16_20 + u_xlat16_29;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat16_2.x = u_xlat16_11 * u_xlat16_2.x + (-u_xlat16_32);
    u_xlat16_11 = float(1.0) / u_xlat16_20;
    u_xlat16_2.x = u_xlat16_11 * u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_11 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_11;
    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xxx;
    u_xlat16_2.xyz = u_xlat10_1.xxx * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    u_xlat16_5.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_5.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_5.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-unity_SHC.xyz);
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_5.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_5.xyz = u_xlat16_3.xyz * _CharacterSHColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_BLOOM_ON" "_MULTI_DIFFUSE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampMuitiTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
uvec2 u_xlatu3;
bvec4 u_xlatb3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec2 u_xlat16_6;
mediump vec3 u_xlat16_9;
mediump vec2 u_xlat16_12;
mediump float u_xlat16_16;
bvec2 u_xlatb17;
mediump vec2 u_xlat16_19;
float u_xlat21;
lowp float u_xlat10_21;
int u_xlati21;
bool u_xlatb21;
mediump float u_xlat16_23;
float u_xlat24;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_0 = u_xlat16_0 * _EnvColor;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati21 = int(u_xlat16_1);
    if((u_xlati21)==0){discard;}
    u_xlat10_1 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_1.w * 8.0;
    u_xlat16_2.x = roundEven(u_xlat16_2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(-0.5<u_xlat16_2.x);
#else
    u_xlatb21 = -0.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(u_xlat16_2.x<0.5);
#else
    u_xlatb3.x = u_xlat16_2.x<0.5;
#endif
    u_xlatb21 = u_xlatb21 && u_xlatb3.x;
    if(u_xlatb21){
        SV_Target0.w = _BloomIntensity0;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(0.5<u_xlat16_2.x);
#else
        u_xlatb21 = 0.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(u_xlat16_2.x<1.5);
#else
        u_xlatb3.x = u_xlat16_2.x<1.5;
#endif
        u_xlatb21 = u_xlatb21 && u_xlatb3.x;
        if(u_xlatb21){
            SV_Target0.w = _BloomIntensity1;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb21 = !!(1.5<u_xlat16_2.x);
#else
            u_xlatb21 = 1.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb3.x = !!(u_xlat16_2.x<2.5);
#else
            u_xlatb3.x = u_xlat16_2.x<2.5;
#endif
            u_xlatb21 = u_xlatb21 && u_xlatb3.x;
            if(u_xlatb21){
                SV_Target0.w = _BloomIntensity2;
            } else {
                u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_2.xxxx);
                u_xlatb4 = lessThan(u_xlat16_2.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
                u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
                u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
                u_xlatb3.z = u_xlatb3.z && u_xlatb4.z;
                u_xlatb3.w = u_xlatb3.w && u_xlatb4.w;
                u_xlat16_9.x = (u_xlatb3.w) ? _BloomIntensity6 : _BloomIntensity7;
                u_xlat16_9.x = (u_xlatb3.z) ? _BloomIntensity5 : u_xlat16_9.x;
                u_xlat16_9.x = (u_xlatb3.y) ? _BloomIntensity4 : u_xlat16_9.x;
                SV_Target0.w = (u_xlatb3.x) ? _BloomIntensity3 : u_xlat16_9.x;
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb21){
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb21 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb21){
            u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb17.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb17.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb17.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat21 = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat21 = vs_TEXCOORD2.z * 17.0 + (-u_xlat21);
            u_xlat21 = u_xlat21 + 0.99000001;
            u_xlat21 = floor(u_xlat21);
            u_xlat21 = max(u_xlat21, 0.0);
            u_xlati21 = int(u_xlat21);
            if((u_xlati21)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_21 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_9.xyz = u_xlat3.xyz * vec3(u_xlat24) + _LightPosDir.xyz;
    u_xlat16_5.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_5.x = inversesqrt(u_xlat16_5.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_5.xxx;
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD4.xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + 0.5;
    u_xlat16_5.x = dot(u_xlat16_5.xx, u_xlat10_1.yy);
    u_xlat16_12.x = (-u_xlat10_21) + 1.0;
    u_xlat16_19.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_12.xy = u_xlat16_12.xx * u_xlat16_19.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_26 = max(u_xlat16_12.x, 9.99999975e-05);
    u_xlat16_26 = u_xlat16_5.x / u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_26 * 0.25;
    u_xlatb4.xy = lessThan(u_xlat16_5.xxxx, u_xlat16_12.xyxx).xy;
    u_xlat16_6.xy = (-u_xlat16_12.xy) + u_xlat16_5.xx;
    u_xlat16_5.x = (-u_xlat16_12.x) + u_xlat16_12.y;
    u_xlat16_5.x = max(u_xlat16_5.x, 9.99999975e-05);
    u_xlat16_5.x = u_xlat16_6.x / u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + 0.25;
    u_xlat16_12.x = (-u_xlat16_12.y) + 1.0;
    u_xlat16_12.x = max(u_xlat16_12.x, 9.99999975e-05);
    u_xlat16_12.x = u_xlat16_6.y / u_xlat16_12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_12.x = min(max(u_xlat16_12.x, 0.0), 1.0);
#else
    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);
#endif
    u_xlat16_12.x = u_xlat16_12.x * 0.25 + 0.75;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat16_5.x : u_xlat16_12.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat16_26 : u_xlat16_5.x;
    u_xlat16_2.x = u_xlat16_2.x * 2.0 + 1.0;
    u_xlat16_5.y = u_xlat16_2.x * 0.0625;
    u_xlat10_4.xyz = texture(_DiffuseRampMuitiTex, u_xlat16_5.xy).xyz;
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat16_9.xyz);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _SpecularShininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_9.x = dFdx(u_xlat16_2.x);
    u_xlat16_16 = dFdy(u_xlat16_2.x);
    u_xlat16_9.x = abs(u_xlat16_16) + abs(u_xlat16_9.x);
    u_xlat16_16 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_23 = (-u_xlat16_9.x) + u_xlat16_16;
    u_xlat16_2.y = u_xlat16_9.x + u_xlat16_16;
    u_xlat16_2.xy = (-vec2(u_xlat16_23)) + u_xlat16_2.xy;
    u_xlat16_9.x = float(1.0) / u_xlat16_2.y;
    u_xlat16_2.x = u_xlat16_9.x * u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _SpecularColor.xyz;
    u_xlat16_2.xyz = u_xlat10_1.xxx * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    u_xlat16_5.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_5.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_5.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-unity_SHC.xyz);
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_5.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_5.xyz = u_xlat16_3.xyz * _CharacterSHColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_BLOOM_ON" "_MULTI_DIFFUSE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampMuitiTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
uvec2 u_xlatu3;
bvec4 u_xlatb3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec2 u_xlat16_6;
mediump vec3 u_xlat16_9;
mediump vec2 u_xlat16_12;
mediump float u_xlat16_16;
bvec2 u_xlatb17;
mediump vec2 u_xlat16_19;
float u_xlat21;
lowp float u_xlat10_21;
int u_xlati21;
bool u_xlatb21;
mediump float u_xlat16_23;
float u_xlat24;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_0 = u_xlat16_0 * _EnvColor;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati21 = int(u_xlat16_1);
    if((u_xlati21)==0){discard;}
    u_xlat10_1 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_1.w * 8.0;
    u_xlat16_2.x = roundEven(u_xlat16_2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(-0.5<u_xlat16_2.x);
#else
    u_xlatb21 = -0.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(u_xlat16_2.x<0.5);
#else
    u_xlatb3.x = u_xlat16_2.x<0.5;
#endif
    u_xlatb21 = u_xlatb21 && u_xlatb3.x;
    if(u_xlatb21){
        SV_Target0.w = _BloomIntensity0;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(0.5<u_xlat16_2.x);
#else
        u_xlatb21 = 0.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(u_xlat16_2.x<1.5);
#else
        u_xlatb3.x = u_xlat16_2.x<1.5;
#endif
        u_xlatb21 = u_xlatb21 && u_xlatb3.x;
        if(u_xlatb21){
            SV_Target0.w = _BloomIntensity1;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb21 = !!(1.5<u_xlat16_2.x);
#else
            u_xlatb21 = 1.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb3.x = !!(u_xlat16_2.x<2.5);
#else
            u_xlatb3.x = u_xlat16_2.x<2.5;
#endif
            u_xlatb21 = u_xlatb21 && u_xlatb3.x;
            if(u_xlatb21){
                SV_Target0.w = _BloomIntensity2;
            } else {
                u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_2.xxxx);
                u_xlatb4 = lessThan(u_xlat16_2.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
                u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
                u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
                u_xlatb3.z = u_xlatb3.z && u_xlatb4.z;
                u_xlatb3.w = u_xlatb3.w && u_xlatb4.w;
                u_xlat16_9.x = (u_xlatb3.w) ? _BloomIntensity6 : _BloomIntensity7;
                u_xlat16_9.x = (u_xlatb3.z) ? _BloomIntensity5 : u_xlat16_9.x;
                u_xlat16_9.x = (u_xlatb3.y) ? _BloomIntensity4 : u_xlat16_9.x;
                SV_Target0.w = (u_xlatb3.x) ? _BloomIntensity3 : u_xlat16_9.x;
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb21){
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb21 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb21){
            u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb17.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb17.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb17.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat21 = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat21 = vs_TEXCOORD2.z * 17.0 + (-u_xlat21);
            u_xlat21 = u_xlat21 + 0.99000001;
            u_xlat21 = floor(u_xlat21);
            u_xlat21 = max(u_xlat21, 0.0);
            u_xlati21 = int(u_xlat21);
            if((u_xlati21)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_21 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_9.xyz = u_xlat3.xyz * vec3(u_xlat24) + _LightPosDir.xyz;
    u_xlat16_5.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_5.x = inversesqrt(u_xlat16_5.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_5.xxx;
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD4.xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + 0.5;
    u_xlat16_5.x = dot(u_xlat16_5.xx, u_xlat10_1.yy);
    u_xlat16_12.x = (-u_xlat10_21) + 1.0;
    u_xlat16_19.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_12.xy = u_xlat16_12.xx * u_xlat16_19.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_26 = max(u_xlat16_12.x, 9.99999975e-05);
    u_xlat16_26 = u_xlat16_5.x / u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_26 * 0.25;
    u_xlatb4.xy = lessThan(u_xlat16_5.xxxx, u_xlat16_12.xyxx).xy;
    u_xlat16_6.xy = (-u_xlat16_12.xy) + u_xlat16_5.xx;
    u_xlat16_5.x = (-u_xlat16_12.x) + u_xlat16_12.y;
    u_xlat16_5.x = max(u_xlat16_5.x, 9.99999975e-05);
    u_xlat16_5.x = u_xlat16_6.x / u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + 0.25;
    u_xlat16_12.x = (-u_xlat16_12.y) + 1.0;
    u_xlat16_12.x = max(u_xlat16_12.x, 9.99999975e-05);
    u_xlat16_12.x = u_xlat16_6.y / u_xlat16_12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_12.x = min(max(u_xlat16_12.x, 0.0), 1.0);
#else
    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);
#endif
    u_xlat16_12.x = u_xlat16_12.x * 0.25 + 0.75;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat16_5.x : u_xlat16_12.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat16_26 : u_xlat16_5.x;
    u_xlat16_2.x = u_xlat16_2.x * 2.0 + 1.0;
    u_xlat16_5.y = u_xlat16_2.x * 0.0625;
    u_xlat10_4.xyz = texture(_DiffuseRampMuitiTex, u_xlat16_5.xy).xyz;
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat16_9.xyz);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _SpecularShininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_9.x = dFdx(u_xlat16_2.x);
    u_xlat16_16 = dFdy(u_xlat16_2.x);
    u_xlat16_9.x = abs(u_xlat16_16) + abs(u_xlat16_9.x);
    u_xlat16_16 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_23 = (-u_xlat16_9.x) + u_xlat16_16;
    u_xlat16_2.y = u_xlat16_9.x + u_xlat16_16;
    u_xlat16_2.xy = (-vec2(u_xlat16_23)) + u_xlat16_2.xy;
    u_xlat16_9.x = float(1.0) / u_xlat16_2.y;
    u_xlat16_2.x = u_xlat16_9.x * u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _SpecularColor.xyz;
    u_xlat16_2.xyz = u_xlat10_1.xxx * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    u_xlat16_5.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_5.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_5.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-unity_SHC.xyz);
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_5.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_5.xyz = u_xlat16_3.xyz * _CharacterSHColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_BLOOM_ON" "_MULTI_DIFFUSE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampMuitiTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
uvec2 u_xlatu3;
bvec4 u_xlatb3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec2 u_xlat16_6;
mediump vec3 u_xlat16_9;
mediump vec2 u_xlat16_12;
mediump float u_xlat16_16;
bvec2 u_xlatb17;
mediump vec2 u_xlat16_19;
float u_xlat21;
lowp float u_xlat10_21;
int u_xlati21;
bool u_xlatb21;
mediump float u_xlat16_23;
float u_xlat24;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_0 = u_xlat16_0 * _EnvColor;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati21 = int(u_xlat16_1);
    if((u_xlati21)==0){discard;}
    u_xlat10_1 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_1.w * 8.0;
    u_xlat16_2.x = roundEven(u_xlat16_2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(-0.5<u_xlat16_2.x);
#else
    u_xlatb21 = -0.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(u_xlat16_2.x<0.5);
#else
    u_xlatb3.x = u_xlat16_2.x<0.5;
#endif
    u_xlatb21 = u_xlatb21 && u_xlatb3.x;
    if(u_xlatb21){
        SV_Target0.w = _BloomIntensity0;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(0.5<u_xlat16_2.x);
#else
        u_xlatb21 = 0.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(u_xlat16_2.x<1.5);
#else
        u_xlatb3.x = u_xlat16_2.x<1.5;
#endif
        u_xlatb21 = u_xlatb21 && u_xlatb3.x;
        if(u_xlatb21){
            SV_Target0.w = _BloomIntensity1;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb21 = !!(1.5<u_xlat16_2.x);
#else
            u_xlatb21 = 1.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb3.x = !!(u_xlat16_2.x<2.5);
#else
            u_xlatb3.x = u_xlat16_2.x<2.5;
#endif
            u_xlatb21 = u_xlatb21 && u_xlatb3.x;
            if(u_xlatb21){
                SV_Target0.w = _BloomIntensity2;
            } else {
                u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_2.xxxx);
                u_xlatb4 = lessThan(u_xlat16_2.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
                u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
                u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
                u_xlatb3.z = u_xlatb3.z && u_xlatb4.z;
                u_xlatb3.w = u_xlatb3.w && u_xlatb4.w;
                u_xlat16_9.x = (u_xlatb3.w) ? _BloomIntensity6 : _BloomIntensity7;
                u_xlat16_9.x = (u_xlatb3.z) ? _BloomIntensity5 : u_xlat16_9.x;
                u_xlat16_9.x = (u_xlatb3.y) ? _BloomIntensity4 : u_xlat16_9.x;
                SV_Target0.w = (u_xlatb3.x) ? _BloomIntensity3 : u_xlat16_9.x;
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb21){
#ifdef UNITY_ADRENO_ES3
        u_xlatb21 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb21 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb21){
            u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb17.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb17.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb17.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat21 = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat21 = vs_TEXCOORD2.z * 17.0 + (-u_xlat21);
            u_xlat21 = u_xlat21 + 0.99000001;
            u_xlat21 = floor(u_xlat21);
            u_xlat21 = max(u_xlat21, 0.0);
            u_xlati21 = int(u_xlat21);
            if((u_xlati21)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_21 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_9.xyz = u_xlat3.xyz * vec3(u_xlat24) + _LightPosDir.xyz;
    u_xlat16_5.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_5.x = inversesqrt(u_xlat16_5.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_5.xxx;
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD4.xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + 0.5;
    u_xlat16_5.x = dot(u_xlat16_5.xx, u_xlat10_1.yy);
    u_xlat16_12.x = (-u_xlat10_21) + 1.0;
    u_xlat16_19.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_12.xy = u_xlat16_12.xx * u_xlat16_19.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_26 = max(u_xlat16_12.x, 9.99999975e-05);
    u_xlat16_26 = u_xlat16_5.x / u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_26 * 0.25;
    u_xlatb4.xy = lessThan(u_xlat16_5.xxxx, u_xlat16_12.xyxx).xy;
    u_xlat16_6.xy = (-u_xlat16_12.xy) + u_xlat16_5.xx;
    u_xlat16_5.x = (-u_xlat16_12.x) + u_xlat16_12.y;
    u_xlat16_5.x = max(u_xlat16_5.x, 9.99999975e-05);
    u_xlat16_5.x = u_xlat16_6.x / u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + 0.25;
    u_xlat16_12.x = (-u_xlat16_12.y) + 1.0;
    u_xlat16_12.x = max(u_xlat16_12.x, 9.99999975e-05);
    u_xlat16_12.x = u_xlat16_6.y / u_xlat16_12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_12.x = min(max(u_xlat16_12.x, 0.0), 1.0);
#else
    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);
#endif
    u_xlat16_12.x = u_xlat16_12.x * 0.25 + 0.75;
    u_xlat16_5.x = (u_xlatb4.y) ? u_xlat16_5.x : u_xlat16_12.x;
    u_xlat16_5.x = (u_xlatb4.x) ? u_xlat16_26 : u_xlat16_5.x;
    u_xlat16_2.x = u_xlat16_2.x * 2.0 + 1.0;
    u_xlat16_5.y = u_xlat16_2.x * 0.0625;
    u_xlat10_4.xyz = texture(_DiffuseRampMuitiTex, u_xlat16_5.xy).xyz;
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat16_9.xyz);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _SpecularShininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_9.x = dFdx(u_xlat16_2.x);
    u_xlat16_16 = dFdy(u_xlat16_2.x);
    u_xlat16_9.x = abs(u_xlat16_16) + abs(u_xlat16_9.x);
    u_xlat16_16 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_23 = (-u_xlat16_9.x) + u_xlat16_16;
    u_xlat16_2.y = u_xlat16_9.x + u_xlat16_16;
    u_xlat16_2.xy = (-vec2(u_xlat16_23)) + u_xlat16_2.xy;
    u_xlat16_9.x = float(1.0) / u_xlat16_2.y;
    u_xlat16_2.x = u_xlat16_9.x * u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _SpecularColor.xyz;
    u_xlat16_2.xyz = u_xlat10_1.xxx * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    u_xlat16_5.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_5.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_5.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-unity_SHC.xyz);
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_5.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_5.xyz = u_xlat16_3.xyz * _CharacterSHColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_MULTI_DIFFUSE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampMuitiTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
uvec2 u_xlatu3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump float u_xlat16_10;
mediump float u_xlat16_18;
bvec2 u_xlatb19;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
int u_xlati24;
bool u_xlatb24;
mediump float u_xlat16_26;
float u_xlat27;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_0 = u_xlat16_0 * _EnvColor;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati24 = int(u_xlat16_1);
    if((u_xlati24)==0){discard;}
    u_xlat10_1 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_1.w * 8.0;
    u_xlat16_2.x = roundEven(u_xlat16_2.x);
    u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb24 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb24){
        u_xlat10_24 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat3.yx).x;
        u_xlat16_10 = u_xlat10_24;
    } else {
        u_xlat16_10 = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(-0.5<u_xlat16_2.x);
#else
    u_xlatb24 = -0.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb19.x = !!(u_xlat16_2.x<0.5);
#else
    u_xlatb19.x = u_xlat16_2.x<0.5;
#endif
    u_xlatb24 = u_xlatb24 && u_xlatb19.x;
    if(u_xlatb24){
        SV_Target0.w = _BloomIntensity0;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(0.5<u_xlat16_2.x);
#else
        u_xlatb24 = 0.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb19.x = !!(u_xlat16_2.x<1.5);
#else
        u_xlatb19.x = u_xlat16_2.x<1.5;
#endif
        u_xlatb24 = u_xlatb24 && u_xlatb19.x;
        if(u_xlatb24){
            SV_Target0.w = _BloomIntensity1;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb24 = !!(1.5<u_xlat16_2.x);
#else
            u_xlatb24 = 1.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb19.x = !!(u_xlat16_2.x<2.5);
#else
            u_xlatb19.x = u_xlat16_2.x<2.5;
#endif
            u_xlatb24 = u_xlatb24 && u_xlatb19.x;
            if(u_xlatb24){
                SV_Target0.w = _BloomIntensity2;
            } else {
                u_xlatb4 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_2.xxxx);
                u_xlatb5 = lessThan(u_xlat16_2.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
                u_xlatb4.x = u_xlatb4.x && u_xlatb5.x;
                u_xlatb4.y = u_xlatb4.y && u_xlatb5.y;
                u_xlatb4.z = u_xlatb4.z && u_xlatb5.z;
                u_xlatb4.w = u_xlatb4.w && u_xlatb5.w;
                u_xlat16_18 = (u_xlatb4.w) ? _BloomIntensity6 : _BloomIntensity7;
                u_xlat16_18 = (u_xlatb4.z) ? _BloomIntensity5 : u_xlat16_18;
                u_xlat16_18 = (u_xlatb4.y) ? _BloomIntensity4 : u_xlat16_18;
                SV_Target0.w = (u_xlatb4.x) ? _BloomIntensity3 : u_xlat16_18;
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb24){
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb24 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb24){
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb19.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb19.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb19.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat24 = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat24 = vs_TEXCOORD2.z * 17.0 + (-u_xlat24);
            u_xlat24 = u_xlat24 + 0.99000001;
            u_xlat24 = floor(u_xlat24);
            u_xlat24 = max(u_xlat24, 0.0);
            u_xlati24 = int(u_xlat24);
            if((u_xlati24)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_24 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat27) + _LightPosDir.xyz;
    u_xlat16_18 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_18 = inversesqrt(u_xlat16_18);
    u_xlat16_6.xyz = vec3(u_xlat16_18) * u_xlat16_6.xyz;
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD4.xyz;
    u_xlat16_18 = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_18 = u_xlat16_18 * 0.5 + 0.5;
    u_xlat16_18 = dot(vec2(u_xlat16_18), u_xlat10_1.yy);
    u_xlat16_26 = u_xlat16_10 * 0.099999994 + 0.400000006;
    u_xlat16_30 = u_xlat16_10 + -0.5;
    u_xlat16_30 = u_xlat16_30 + u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
    u_xlat16_30 = u_xlat16_30 * u_xlat16_7.x;
    u_xlat16_18 = (-u_xlat16_26) + u_xlat16_18;
    u_xlat16_18 = u_xlat16_30 * u_xlat16_18 + u_xlat16_26;
    u_xlat16_26 = (-u_xlat10_24) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_26) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_26 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_26 = u_xlat16_18 / u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_26 * 0.25;
    u_xlatb4.xy = lessThan(vec4(u_xlat16_18), u_xlat16_7.xyxx).xy;
    u_xlat16_23.xy = vec2(u_xlat16_18) + (-u_xlat16_7.xy);
    u_xlat16_18 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = u_xlat16_23.x / u_xlat16_18;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_18 = u_xlat16_18 * 0.5 + 0.25;
    u_xlat16_30 = (-u_xlat16_7.y) + 1.0;
    u_xlat16_30 = max(u_xlat16_30, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_23.y / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25 + 0.75;
    u_xlat16_18 = (u_xlatb4.y) ? u_xlat16_18 : u_xlat16_30;
    u_xlat16_7.x = (u_xlatb4.x) ? u_xlat16_26 : u_xlat16_18;
    u_xlat16_2.x = u_xlat16_2.x * 2.0 + 1.0;
    u_xlat16_7.y = u_xlat16_2.x * 0.0625;
    u_xlat10_4.xyz = texture(_DiffuseRampMuitiTex, u_xlat16_7.xy).xyz;
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _SpecularShininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat24 = u_xlat16_2.x * u_xlat16_10;
    u_xlat16_18 = dFdx(u_xlat24);
    u_xlat16_26 = dFdy(u_xlat24);
    u_xlat16_18 = abs(u_xlat16_26) + abs(u_xlat16_18);
    u_xlat16_26 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_18) + u_xlat16_26;
    u_xlat16_18 = u_xlat16_18 + u_xlat16_26;
    u_xlat16_18 = (-u_xlat16_6.x) + u_xlat16_18;
    u_xlat16_2.x = u_xlat16_10 * u_xlat16_2.x + (-u_xlat16_6.x);
    u_xlat16_10 = float(1.0) / u_xlat16_18;
    u_xlat16_2.x = u_xlat16_10 * u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_10;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _SpecularColor.xyz;
    u_xlat16_2.xyz = u_xlat10_1.xxx * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_3.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_MULTI_DIFFUSE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampMuitiTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
uvec2 u_xlatu3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump float u_xlat16_10;
mediump float u_xlat16_18;
bvec2 u_xlatb19;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
int u_xlati24;
bool u_xlatb24;
mediump float u_xlat16_26;
float u_xlat27;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_0 = u_xlat16_0 * _EnvColor;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati24 = int(u_xlat16_1);
    if((u_xlati24)==0){discard;}
    u_xlat10_1 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_1.w * 8.0;
    u_xlat16_2.x = roundEven(u_xlat16_2.x);
    u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb24 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb24){
        u_xlat10_24 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat3.yx).x;
        u_xlat16_10 = u_xlat10_24;
    } else {
        u_xlat16_10 = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(-0.5<u_xlat16_2.x);
#else
    u_xlatb24 = -0.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb19.x = !!(u_xlat16_2.x<0.5);
#else
    u_xlatb19.x = u_xlat16_2.x<0.5;
#endif
    u_xlatb24 = u_xlatb24 && u_xlatb19.x;
    if(u_xlatb24){
        SV_Target0.w = _BloomIntensity0;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(0.5<u_xlat16_2.x);
#else
        u_xlatb24 = 0.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb19.x = !!(u_xlat16_2.x<1.5);
#else
        u_xlatb19.x = u_xlat16_2.x<1.5;
#endif
        u_xlatb24 = u_xlatb24 && u_xlatb19.x;
        if(u_xlatb24){
            SV_Target0.w = _BloomIntensity1;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb24 = !!(1.5<u_xlat16_2.x);
#else
            u_xlatb24 = 1.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb19.x = !!(u_xlat16_2.x<2.5);
#else
            u_xlatb19.x = u_xlat16_2.x<2.5;
#endif
            u_xlatb24 = u_xlatb24 && u_xlatb19.x;
            if(u_xlatb24){
                SV_Target0.w = _BloomIntensity2;
            } else {
                u_xlatb4 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_2.xxxx);
                u_xlatb5 = lessThan(u_xlat16_2.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
                u_xlatb4.x = u_xlatb4.x && u_xlatb5.x;
                u_xlatb4.y = u_xlatb4.y && u_xlatb5.y;
                u_xlatb4.z = u_xlatb4.z && u_xlatb5.z;
                u_xlatb4.w = u_xlatb4.w && u_xlatb5.w;
                u_xlat16_18 = (u_xlatb4.w) ? _BloomIntensity6 : _BloomIntensity7;
                u_xlat16_18 = (u_xlatb4.z) ? _BloomIntensity5 : u_xlat16_18;
                u_xlat16_18 = (u_xlatb4.y) ? _BloomIntensity4 : u_xlat16_18;
                SV_Target0.w = (u_xlatb4.x) ? _BloomIntensity3 : u_xlat16_18;
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb24){
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb24 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb24){
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb19.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb19.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb19.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat24 = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat24 = vs_TEXCOORD2.z * 17.0 + (-u_xlat24);
            u_xlat24 = u_xlat24 + 0.99000001;
            u_xlat24 = floor(u_xlat24);
            u_xlat24 = max(u_xlat24, 0.0);
            u_xlati24 = int(u_xlat24);
            if((u_xlati24)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_24 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat27) + _LightPosDir.xyz;
    u_xlat16_18 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_18 = inversesqrt(u_xlat16_18);
    u_xlat16_6.xyz = vec3(u_xlat16_18) * u_xlat16_6.xyz;
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD4.xyz;
    u_xlat16_18 = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_18 = u_xlat16_18 * 0.5 + 0.5;
    u_xlat16_18 = dot(vec2(u_xlat16_18), u_xlat10_1.yy);
    u_xlat16_26 = u_xlat16_10 * 0.099999994 + 0.400000006;
    u_xlat16_30 = u_xlat16_10 + -0.5;
    u_xlat16_30 = u_xlat16_30 + u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
    u_xlat16_30 = u_xlat16_30 * u_xlat16_7.x;
    u_xlat16_18 = (-u_xlat16_26) + u_xlat16_18;
    u_xlat16_18 = u_xlat16_30 * u_xlat16_18 + u_xlat16_26;
    u_xlat16_26 = (-u_xlat10_24) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_26) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_26 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_26 = u_xlat16_18 / u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_26 * 0.25;
    u_xlatb4.xy = lessThan(vec4(u_xlat16_18), u_xlat16_7.xyxx).xy;
    u_xlat16_23.xy = vec2(u_xlat16_18) + (-u_xlat16_7.xy);
    u_xlat16_18 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = u_xlat16_23.x / u_xlat16_18;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_18 = u_xlat16_18 * 0.5 + 0.25;
    u_xlat16_30 = (-u_xlat16_7.y) + 1.0;
    u_xlat16_30 = max(u_xlat16_30, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_23.y / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25 + 0.75;
    u_xlat16_18 = (u_xlatb4.y) ? u_xlat16_18 : u_xlat16_30;
    u_xlat16_7.x = (u_xlatb4.x) ? u_xlat16_26 : u_xlat16_18;
    u_xlat16_2.x = u_xlat16_2.x * 2.0 + 1.0;
    u_xlat16_7.y = u_xlat16_2.x * 0.0625;
    u_xlat10_4.xyz = texture(_DiffuseRampMuitiTex, u_xlat16_7.xy).xyz;
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _SpecularShininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat24 = u_xlat16_2.x * u_xlat16_10;
    u_xlat16_18 = dFdx(u_xlat24);
    u_xlat16_26 = dFdy(u_xlat24);
    u_xlat16_18 = abs(u_xlat16_26) + abs(u_xlat16_18);
    u_xlat16_26 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_18) + u_xlat16_26;
    u_xlat16_18 = u_xlat16_18 + u_xlat16_26;
    u_xlat16_18 = (-u_xlat16_6.x) + u_xlat16_18;
    u_xlat16_2.x = u_xlat16_10 * u_xlat16_2.x + (-u_xlat16_6.x);
    u_xlat16_10 = float(1.0) / u_xlat16_18;
    u_xlat16_2.x = u_xlat16_10 * u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_10;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _SpecularColor.xyz;
    u_xlat16_2.xyz = u_xlat10_1.xxx * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_3.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_MULTI_DIFFUSE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampMuitiTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
uvec2 u_xlatu3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump float u_xlat16_10;
mediump float u_xlat16_18;
bvec2 u_xlatb19;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
int u_xlati24;
bool u_xlatb24;
mediump float u_xlat16_26;
float u_xlat27;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_0 = u_xlat16_0 * _EnvColor;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati24 = int(u_xlat16_1);
    if((u_xlati24)==0){discard;}
    u_xlat10_1 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_1.w * 8.0;
    u_xlat16_2.x = roundEven(u_xlat16_2.x);
    u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb24 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb24){
        u_xlat10_24 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat3.yx).x;
        u_xlat16_10 = u_xlat10_24;
    } else {
        u_xlat16_10 = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(-0.5<u_xlat16_2.x);
#else
    u_xlatb24 = -0.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb19.x = !!(u_xlat16_2.x<0.5);
#else
    u_xlatb19.x = u_xlat16_2.x<0.5;
#endif
    u_xlatb24 = u_xlatb24 && u_xlatb19.x;
    if(u_xlatb24){
        SV_Target0.w = _BloomIntensity0;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(0.5<u_xlat16_2.x);
#else
        u_xlatb24 = 0.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb19.x = !!(u_xlat16_2.x<1.5);
#else
        u_xlatb19.x = u_xlat16_2.x<1.5;
#endif
        u_xlatb24 = u_xlatb24 && u_xlatb19.x;
        if(u_xlatb24){
            SV_Target0.w = _BloomIntensity1;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb24 = !!(1.5<u_xlat16_2.x);
#else
            u_xlatb24 = 1.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb19.x = !!(u_xlat16_2.x<2.5);
#else
            u_xlatb19.x = u_xlat16_2.x<2.5;
#endif
            u_xlatb24 = u_xlatb24 && u_xlatb19.x;
            if(u_xlatb24){
                SV_Target0.w = _BloomIntensity2;
            } else {
                u_xlatb4 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_2.xxxx);
                u_xlatb5 = lessThan(u_xlat16_2.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
                u_xlatb4.x = u_xlatb4.x && u_xlatb5.x;
                u_xlatb4.y = u_xlatb4.y && u_xlatb5.y;
                u_xlatb4.z = u_xlatb4.z && u_xlatb5.z;
                u_xlatb4.w = u_xlatb4.w && u_xlatb5.w;
                u_xlat16_18 = (u_xlatb4.w) ? _BloomIntensity6 : _BloomIntensity7;
                u_xlat16_18 = (u_xlatb4.z) ? _BloomIntensity5 : u_xlat16_18;
                u_xlat16_18 = (u_xlatb4.y) ? _BloomIntensity4 : u_xlat16_18;
                SV_Target0.w = (u_xlatb4.x) ? _BloomIntensity3 : u_xlat16_18;
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb24){
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb24 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb24){
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb19.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb19.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb19.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat24 = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat24 = vs_TEXCOORD2.z * 17.0 + (-u_xlat24);
            u_xlat24 = u_xlat24 + 0.99000001;
            u_xlat24 = floor(u_xlat24);
            u_xlat24 = max(u_xlat24, 0.0);
            u_xlati24 = int(u_xlat24);
            if((u_xlati24)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_24 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat27) + _LightPosDir.xyz;
    u_xlat16_18 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_18 = inversesqrt(u_xlat16_18);
    u_xlat16_6.xyz = vec3(u_xlat16_18) * u_xlat16_6.xyz;
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD4.xyz;
    u_xlat16_18 = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_18 = u_xlat16_18 * 0.5 + 0.5;
    u_xlat16_18 = dot(vec2(u_xlat16_18), u_xlat10_1.yy);
    u_xlat16_26 = u_xlat16_10 * 0.099999994 + 0.400000006;
    u_xlat16_30 = u_xlat16_10 + -0.5;
    u_xlat16_30 = u_xlat16_30 + u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
    u_xlat16_30 = u_xlat16_30 * u_xlat16_7.x;
    u_xlat16_18 = (-u_xlat16_26) + u_xlat16_18;
    u_xlat16_18 = u_xlat16_30 * u_xlat16_18 + u_xlat16_26;
    u_xlat16_26 = (-u_xlat10_24) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_26) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_26 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_26 = u_xlat16_18 / u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_26 * 0.25;
    u_xlatb4.xy = lessThan(vec4(u_xlat16_18), u_xlat16_7.xyxx).xy;
    u_xlat16_23.xy = vec2(u_xlat16_18) + (-u_xlat16_7.xy);
    u_xlat16_18 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_18 = max(u_xlat16_18, 9.99999975e-05);
    u_xlat16_18 = u_xlat16_23.x / u_xlat16_18;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_18 = u_xlat16_18 * 0.5 + 0.25;
    u_xlat16_30 = (-u_xlat16_7.y) + 1.0;
    u_xlat16_30 = max(u_xlat16_30, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_23.y / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25 + 0.75;
    u_xlat16_18 = (u_xlatb4.y) ? u_xlat16_18 : u_xlat16_30;
    u_xlat16_7.x = (u_xlatb4.x) ? u_xlat16_26 : u_xlat16_18;
    u_xlat16_2.x = u_xlat16_2.x * 2.0 + 1.0;
    u_xlat16_7.y = u_xlat16_2.x * 0.0625;
    u_xlat10_4.xyz = texture(_DiffuseRampMuitiTex, u_xlat16_7.xy).xyz;
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _SpecularShininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat24 = u_xlat16_2.x * u_xlat16_10;
    u_xlat16_18 = dFdx(u_xlat24);
    u_xlat16_26 = dFdy(u_xlat24);
    u_xlat16_18 = abs(u_xlat16_26) + abs(u_xlat16_18);
    u_xlat16_26 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_18) + u_xlat16_26;
    u_xlat16_18 = u_xlat16_18 + u_xlat16_26;
    u_xlat16_18 = (-u_xlat16_6.x) + u_xlat16_18;
    u_xlat16_2.x = u_xlat16_10 * u_xlat16_2.x + (-u_xlat16_6.x);
    u_xlat16_10 = float(1.0) / u_xlat16_18;
    u_xlat16_2.x = u_xlat16_10 * u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_10 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_10;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _SpecularColor.xyz;
    u_xlat16_2.xyz = u_xlat10_1.xxx * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_3.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_BLOOM_ON" "_MULTI_DIFFUSE_ON" "_MULTI_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor0;
uniform 	mediump vec4 _SpecularColor1;
uniform 	mediump vec4 _SpecularColor2;
uniform 	mediump vec4 _SpecularColor3;
uniform 	mediump vec4 _SpecularColor4;
uniform 	mediump vec4 _SpecularColor5;
uniform 	mediump vec4 _SpecularColor6;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampMuitiTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
uvec2 u_xlatu3;
bvec4 u_xlatb3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec2 u_xlat16_8;
mediump vec3 u_xlat16_11;
mediump float u_xlat16_15;
mediump vec2 u_xlat16_16;
bvec2 u_xlatb21;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
int u_xlati27;
bool u_xlatb27;
float u_xlat30;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_0 = u_xlat16_0 * _EnvColor;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati27 = int(u_xlat16_1);
    if((u_xlati27)==0){discard;}
    u_xlat10_1 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_1.w * 8.0;
    u_xlat16_2.x = roundEven(u_xlat16_2.x);
    u_xlatb3.xy = lessThan(vec4(0.5, -0.5, 0.0, 0.0), u_xlat16_2.xxxx).xy;
    u_xlatb21.xy = lessThan(u_xlat16_2.xxxx, vec4(1.5, 0.5, 1.5, 0.5)).xy;
    u_xlatb3.x = u_xlatb21.x && u_xlatb3.x;
    u_xlatb3.y = u_xlatb21.y && u_xlatb3.y;
    if(u_xlatb3.x){
        u_xlat16_11.xyz = _SpecularColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(1.5<u_xlat16_2.x);
#else
        u_xlatb27 = 1.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb21.x = !!(u_xlat16_2.x<2.5);
#else
        u_xlatb21.x = u_xlat16_2.x<2.5;
#endif
        u_xlatb27 = u_xlatb27 && u_xlatb21.x;
        if(u_xlatb27){
            u_xlat16_11.xyz = _SpecularColor2.xyz;
        } else {
            u_xlatb4 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_2.xxxx);
            u_xlatb5 = lessThan(u_xlat16_2.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb4.x = u_xlatb4.x && u_xlatb5.x;
            u_xlatb4.y = u_xlatb4.y && u_xlatb5.y;
            u_xlatb4.z = u_xlatb4.z && u_xlatb5.z;
            u_xlatb4.w = u_xlatb4.w && u_xlatb5.w;
            u_xlat16_6.xyz = (u_xlatb4.w) ? _SpecularColor6.xyz : _SpecularColor0.xyz;
            u_xlat16_6.xyz = (u_xlatb4.z) ? _SpecularColor5.xyz : u_xlat16_6.xyz;
            u_xlat16_6.xyz = (u_xlatb4.y) ? _SpecularColor4.xyz : u_xlat16_6.xyz;
            u_xlat16_11.xyz = (u_xlatb4.x) ? _SpecularColor3.xyz : u_xlat16_6.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.y){
        SV_Target0.w = _BloomIntensity0;
    } else {
        if(u_xlatb3.x){
            SV_Target0.w = _BloomIntensity1;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb27 = !!(1.5<u_xlat16_2.x);
#else
            u_xlatb27 = 1.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb3.x = !!(u_xlat16_2.x<2.5);
#else
            u_xlatb3.x = u_xlat16_2.x<2.5;
#endif
            u_xlatb27 = u_xlatb27 && u_xlatb3.x;
            if(u_xlatb27){
                SV_Target0.w = _BloomIntensity2;
            } else {
                u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_2.xxxx);
                u_xlatb4 = lessThan(u_xlat16_2.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
                u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
                u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
                u_xlatb3.z = u_xlatb3.z && u_xlatb4.z;
                u_xlatb3.w = u_xlatb3.w && u_xlatb4.w;
                u_xlat16_6.x = (u_xlatb3.w) ? _BloomIntensity6 : _BloomIntensity7;
                u_xlat16_6.x = (u_xlatb3.z) ? _BloomIntensity5 : u_xlat16_6.x;
                u_xlat16_6.x = (u_xlatb3.y) ? _BloomIntensity4 : u_xlat16_6.x;
                SV_Target0.w = (u_xlatb3.x) ? _BloomIntensity3 : u_xlat16_6.x;
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb27){
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb27 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb27){
            u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb21.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb21.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb21.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat27 = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat27 = vs_TEXCOORD2.z * 17.0 + (-u_xlat27);
            u_xlat27 = u_xlat27 + 0.99000001;
            u_xlat27 = floor(u_xlat27);
            u_xlat27 = max(u_xlat27, 0.0);
            u_xlati27 = int(u_xlat27);
            if((u_xlati27)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_27 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat30) + _LightPosDir.xyz;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz;
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_1.yy);
    u_xlat16_7.x = (-u_xlat10_27) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb4.xy = lessThan(vec4(u_xlat16_33), u_xlat16_7.xyxx).xy;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb4.y) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb4.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_2.x = u_xlat16_2.x * 2.0 + 1.0;
    u_xlat16_7.y = u_xlat16_2.x * 0.0625;
    u_xlat10_4.xyz = texture(_DiffuseRampMuitiTex, u_xlat16_7.xy).xyz;
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _SpecularShininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_6.x = dFdx(u_xlat16_2.x);
    u_xlat16_15 = dFdy(u_xlat16_2.x);
    u_xlat16_6.x = abs(u_xlat16_15) + abs(u_xlat16_6.x);
    u_xlat16_15 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_24 = (-u_xlat16_6.x) + u_xlat16_15;
    u_xlat16_6.x = u_xlat16_6.x + u_xlat16_15;
    u_xlat16_6.x = (-u_xlat16_24) + u_xlat16_6.x;
    u_xlat16_2.x = u_xlat16_2.x + (-u_xlat16_24);
    u_xlat16_6.x = float(1.0) / u_xlat16_6.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;
    u_xlat16_2.xyz = u_xlat16_11.xyz * u_xlat16_2.xxx;
    u_xlat16_2.xyz = u_xlat10_1.xxx * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_3.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_BLOOM_ON" "_MULTI_DIFFUSE_ON" "_MULTI_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor0;
uniform 	mediump vec4 _SpecularColor1;
uniform 	mediump vec4 _SpecularColor2;
uniform 	mediump vec4 _SpecularColor3;
uniform 	mediump vec4 _SpecularColor4;
uniform 	mediump vec4 _SpecularColor5;
uniform 	mediump vec4 _SpecularColor6;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampMuitiTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
uvec2 u_xlatu3;
bvec4 u_xlatb3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec2 u_xlat16_8;
mediump vec3 u_xlat16_11;
mediump float u_xlat16_15;
mediump vec2 u_xlat16_16;
bvec2 u_xlatb21;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
int u_xlati27;
bool u_xlatb27;
float u_xlat30;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_0 = u_xlat16_0 * _EnvColor;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati27 = int(u_xlat16_1);
    if((u_xlati27)==0){discard;}
    u_xlat10_1 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_1.w * 8.0;
    u_xlat16_2.x = roundEven(u_xlat16_2.x);
    u_xlatb3.xy = lessThan(vec4(0.5, -0.5, 0.0, 0.0), u_xlat16_2.xxxx).xy;
    u_xlatb21.xy = lessThan(u_xlat16_2.xxxx, vec4(1.5, 0.5, 1.5, 0.5)).xy;
    u_xlatb3.x = u_xlatb21.x && u_xlatb3.x;
    u_xlatb3.y = u_xlatb21.y && u_xlatb3.y;
    if(u_xlatb3.x){
        u_xlat16_11.xyz = _SpecularColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(1.5<u_xlat16_2.x);
#else
        u_xlatb27 = 1.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb21.x = !!(u_xlat16_2.x<2.5);
#else
        u_xlatb21.x = u_xlat16_2.x<2.5;
#endif
        u_xlatb27 = u_xlatb27 && u_xlatb21.x;
        if(u_xlatb27){
            u_xlat16_11.xyz = _SpecularColor2.xyz;
        } else {
            u_xlatb4 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_2.xxxx);
            u_xlatb5 = lessThan(u_xlat16_2.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb4.x = u_xlatb4.x && u_xlatb5.x;
            u_xlatb4.y = u_xlatb4.y && u_xlatb5.y;
            u_xlatb4.z = u_xlatb4.z && u_xlatb5.z;
            u_xlatb4.w = u_xlatb4.w && u_xlatb5.w;
            u_xlat16_6.xyz = (u_xlatb4.w) ? _SpecularColor6.xyz : _SpecularColor0.xyz;
            u_xlat16_6.xyz = (u_xlatb4.z) ? _SpecularColor5.xyz : u_xlat16_6.xyz;
            u_xlat16_6.xyz = (u_xlatb4.y) ? _SpecularColor4.xyz : u_xlat16_6.xyz;
            u_xlat16_11.xyz = (u_xlatb4.x) ? _SpecularColor3.xyz : u_xlat16_6.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.y){
        SV_Target0.w = _BloomIntensity0;
    } else {
        if(u_xlatb3.x){
            SV_Target0.w = _BloomIntensity1;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb27 = !!(1.5<u_xlat16_2.x);
#else
            u_xlatb27 = 1.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb3.x = !!(u_xlat16_2.x<2.5);
#else
            u_xlatb3.x = u_xlat16_2.x<2.5;
#endif
            u_xlatb27 = u_xlatb27 && u_xlatb3.x;
            if(u_xlatb27){
                SV_Target0.w = _BloomIntensity2;
            } else {
                u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_2.xxxx);
                u_xlatb4 = lessThan(u_xlat16_2.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
                u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
                u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
                u_xlatb3.z = u_xlatb3.z && u_xlatb4.z;
                u_xlatb3.w = u_xlatb3.w && u_xlatb4.w;
                u_xlat16_6.x = (u_xlatb3.w) ? _BloomIntensity6 : _BloomIntensity7;
                u_xlat16_6.x = (u_xlatb3.z) ? _BloomIntensity5 : u_xlat16_6.x;
                u_xlat16_6.x = (u_xlatb3.y) ? _BloomIntensity4 : u_xlat16_6.x;
                SV_Target0.w = (u_xlatb3.x) ? _BloomIntensity3 : u_xlat16_6.x;
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb27){
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb27 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb27){
            u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb21.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb21.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb21.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat27 = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat27 = vs_TEXCOORD2.z * 17.0 + (-u_xlat27);
            u_xlat27 = u_xlat27 + 0.99000001;
            u_xlat27 = floor(u_xlat27);
            u_xlat27 = max(u_xlat27, 0.0);
            u_xlati27 = int(u_xlat27);
            if((u_xlati27)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_27 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat30) + _LightPosDir.xyz;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz;
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_1.yy);
    u_xlat16_7.x = (-u_xlat10_27) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb4.xy = lessThan(vec4(u_xlat16_33), u_xlat16_7.xyxx).xy;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb4.y) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb4.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_2.x = u_xlat16_2.x * 2.0 + 1.0;
    u_xlat16_7.y = u_xlat16_2.x * 0.0625;
    u_xlat10_4.xyz = texture(_DiffuseRampMuitiTex, u_xlat16_7.xy).xyz;
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _SpecularShininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_6.x = dFdx(u_xlat16_2.x);
    u_xlat16_15 = dFdy(u_xlat16_2.x);
    u_xlat16_6.x = abs(u_xlat16_15) + abs(u_xlat16_6.x);
    u_xlat16_15 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_24 = (-u_xlat16_6.x) + u_xlat16_15;
    u_xlat16_6.x = u_xlat16_6.x + u_xlat16_15;
    u_xlat16_6.x = (-u_xlat16_24) + u_xlat16_6.x;
    u_xlat16_2.x = u_xlat16_2.x + (-u_xlat16_24);
    u_xlat16_6.x = float(1.0) / u_xlat16_6.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;
    u_xlat16_2.xyz = u_xlat16_11.xyz * u_xlat16_2.xxx;
    u_xlat16_2.xyz = u_xlat10_1.xxx * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_3.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_BLOOM_ON" "_MULTI_DIFFUSE_ON" "_MULTI_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor0;
uniform 	mediump vec4 _SpecularColor1;
uniform 	mediump vec4 _SpecularColor2;
uniform 	mediump vec4 _SpecularColor3;
uniform 	mediump vec4 _SpecularColor4;
uniform 	mediump vec4 _SpecularColor5;
uniform 	mediump vec4 _SpecularColor6;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampMuitiTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
uvec2 u_xlatu3;
bvec4 u_xlatb3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec2 u_xlat16_8;
mediump vec3 u_xlat16_11;
mediump float u_xlat16_15;
mediump vec2 u_xlat16_16;
bvec2 u_xlatb21;
mediump float u_xlat16_24;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
int u_xlati27;
bool u_xlatb27;
float u_xlat30;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_0 = u_xlat16_0 * _EnvColor;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati27 = int(u_xlat16_1);
    if((u_xlati27)==0){discard;}
    u_xlat10_1 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_1.w * 8.0;
    u_xlat16_2.x = roundEven(u_xlat16_2.x);
    u_xlatb3.xy = lessThan(vec4(0.5, -0.5, 0.0, 0.0), u_xlat16_2.xxxx).xy;
    u_xlatb21.xy = lessThan(u_xlat16_2.xxxx, vec4(1.5, 0.5, 1.5, 0.5)).xy;
    u_xlatb3.x = u_xlatb21.x && u_xlatb3.x;
    u_xlatb3.y = u_xlatb21.y && u_xlatb3.y;
    if(u_xlatb3.x){
        u_xlat16_11.xyz = _SpecularColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(1.5<u_xlat16_2.x);
#else
        u_xlatb27 = 1.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb21.x = !!(u_xlat16_2.x<2.5);
#else
        u_xlatb21.x = u_xlat16_2.x<2.5;
#endif
        u_xlatb27 = u_xlatb27 && u_xlatb21.x;
        if(u_xlatb27){
            u_xlat16_11.xyz = _SpecularColor2.xyz;
        } else {
            u_xlatb4 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_2.xxxx);
            u_xlatb5 = lessThan(u_xlat16_2.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb4.x = u_xlatb4.x && u_xlatb5.x;
            u_xlatb4.y = u_xlatb4.y && u_xlatb5.y;
            u_xlatb4.z = u_xlatb4.z && u_xlatb5.z;
            u_xlatb4.w = u_xlatb4.w && u_xlatb5.w;
            u_xlat16_6.xyz = (u_xlatb4.w) ? _SpecularColor6.xyz : _SpecularColor0.xyz;
            u_xlat16_6.xyz = (u_xlatb4.z) ? _SpecularColor5.xyz : u_xlat16_6.xyz;
            u_xlat16_6.xyz = (u_xlatb4.y) ? _SpecularColor4.xyz : u_xlat16_6.xyz;
            u_xlat16_11.xyz = (u_xlatb4.x) ? _SpecularColor3.xyz : u_xlat16_6.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb3.y){
        SV_Target0.w = _BloomIntensity0;
    } else {
        if(u_xlatb3.x){
            SV_Target0.w = _BloomIntensity1;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb27 = !!(1.5<u_xlat16_2.x);
#else
            u_xlatb27 = 1.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb3.x = !!(u_xlat16_2.x<2.5);
#else
            u_xlatb3.x = u_xlat16_2.x<2.5;
#endif
            u_xlatb27 = u_xlatb27 && u_xlatb3.x;
            if(u_xlatb27){
                SV_Target0.w = _BloomIntensity2;
            } else {
                u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_2.xxxx);
                u_xlatb4 = lessThan(u_xlat16_2.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
                u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
                u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
                u_xlatb3.z = u_xlatb3.z && u_xlatb4.z;
                u_xlatb3.w = u_xlatb3.w && u_xlatb4.w;
                u_xlat16_6.x = (u_xlatb3.w) ? _BloomIntensity6 : _BloomIntensity7;
                u_xlat16_6.x = (u_xlatb3.z) ? _BloomIntensity5 : u_xlat16_6.x;
                u_xlat16_6.x = (u_xlatb3.y) ? _BloomIntensity4 : u_xlat16_6.x;
                SV_Target0.w = (u_xlatb3.x) ? _BloomIntensity3 : u_xlat16_6.x;
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb27){
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb27 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb27){
            u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb21.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb21.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb21.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat27 = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat27 = vs_TEXCOORD2.z * 17.0 + (-u_xlat27);
            u_xlat27 = u_xlat27 + 0.99000001;
            u_xlat27 = floor(u_xlat27);
            u_xlat27 = max(u_xlat27, 0.0);
            u_xlati27 = int(u_xlat27);
            if((u_xlati27)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_27 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat30) + _LightPosDir.xyz;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz;
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_1.yy);
    u_xlat16_7.x = (-u_xlat10_27) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb4.xy = lessThan(vec4(u_xlat16_33), u_xlat16_7.xyxx).xy;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb4.y) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb4.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_2.x = u_xlat16_2.x * 2.0 + 1.0;
    u_xlat16_7.y = u_xlat16_2.x * 0.0625;
    u_xlat10_4.xyz = texture(_DiffuseRampMuitiTex, u_xlat16_7.xy).xyz;
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _SpecularShininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat16_6.x = dFdx(u_xlat16_2.x);
    u_xlat16_15 = dFdy(u_xlat16_2.x);
    u_xlat16_6.x = abs(u_xlat16_15) + abs(u_xlat16_6.x);
    u_xlat16_15 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_24 = (-u_xlat16_6.x) + u_xlat16_15;
    u_xlat16_6.x = u_xlat16_6.x + u_xlat16_15;
    u_xlat16_6.x = (-u_xlat16_24) + u_xlat16_6.x;
    u_xlat16_2.x = u_xlat16_2.x + (-u_xlat16_24);
    u_xlat16_6.x = float(1.0) / u_xlat16_6.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;
    u_xlat16_2.xyz = u_xlat16_11.xyz * u_xlat16_2.xxx;
    u_xlat16_2.xyz = u_xlat10_1.xxx * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_3.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_MULTI_DIFFUSE_ON" "_MULTI_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor0;
uniform 	mediump vec4 _SpecularColor1;
uniform 	mediump vec4 _SpecularColor2;
uniform 	mediump vec4 _SpecularColor3;
uniform 	mediump vec4 _SpecularColor4;
uniform 	mediump vec4 _SpecularColor5;
uniform 	mediump vec4 _SpecularColor6;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampMuitiTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
uvec2 u_xlatu3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
bvec4 u_xlatb6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
mediump float u_xlat16_11;
mediump float u_xlat16_20;
bvec2 u_xlatb21;
mediump vec2 u_xlat16_26;
float u_xlat27;
lowp float u_xlat10_27;
int u_xlati27;
bool u_xlatb27;
mediump float u_xlat16_29;
float u_xlat30;
mediump float u_xlat16_32;
mediump float u_xlat16_34;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_0 = u_xlat16_0 * _EnvColor;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati27 = int(u_xlat16_1);
    if((u_xlati27)==0){discard;}
    u_xlat10_1 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_1.w * 8.0;
    u_xlat16_2.x = roundEven(u_xlat16_2.x);
    u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb27 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb27){
        u_xlat10_27 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat3.yx).x;
        u_xlat16_11 = u_xlat10_27;
    } else {
        u_xlat16_11 = 1.0;
    //ENDIF
    }
    u_xlatb21.xy = lessThan(vec4(0.5, -0.5, 0.5, -0.5), u_xlat16_2.xxxx).xy;
    u_xlatb4.xy = lessThan(u_xlat16_2.xxxx, vec4(1.5, 0.5, 0.0, 0.0)).xy;
    u_xlatb21.x = u_xlatb21.x && u_xlatb4.x;
    u_xlatb21.y = u_xlatb21.y && u_xlatb4.y;
    if(u_xlatb21.x){
        u_xlat16_5.xyz = _SpecularColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(1.5<u_xlat16_2.x);
#else
        u_xlatb27 = 1.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb4.x = !!(u_xlat16_2.x<2.5);
#else
        u_xlatb4.x = u_xlat16_2.x<2.5;
#endif
        u_xlatb27 = u_xlatb27 && u_xlatb4.x;
        if(u_xlatb27){
            u_xlat16_5.xyz = _SpecularColor2.xyz;
        } else {
            u_xlatb4 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_2.xxxx);
            u_xlatb6 = lessThan(u_xlat16_2.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb4.x = u_xlatb4.x && u_xlatb6.x;
            u_xlatb4.y = u_xlatb4.y && u_xlatb6.y;
            u_xlatb4.z = u_xlatb4.z && u_xlatb6.z;
            u_xlatb4.w = u_xlatb4.w && u_xlatb6.w;
            u_xlat16_7.xyz = (u_xlatb4.w) ? _SpecularColor6.xyz : _SpecularColor0.xyz;
            u_xlat16_7.xyz = (u_xlatb4.z) ? _SpecularColor5.xyz : u_xlat16_7.xyz;
            u_xlat16_7.xyz = (u_xlatb4.y) ? _SpecularColor4.xyz : u_xlat16_7.xyz;
            u_xlat16_5.xyz = (u_xlatb4.x) ? _SpecularColor3.xyz : u_xlat16_7.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb21.y){
        SV_Target0.w = _BloomIntensity0;
    } else {
        if(u_xlatb21.x){
            SV_Target0.w = _BloomIntensity1;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb27 = !!(1.5<u_xlat16_2.x);
#else
            u_xlatb27 = 1.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb21.x = !!(u_xlat16_2.x<2.5);
#else
            u_xlatb21.x = u_xlat16_2.x<2.5;
#endif
            u_xlatb27 = u_xlatb27 && u_xlatb21.x;
            if(u_xlatb27){
                SV_Target0.w = _BloomIntensity2;
            } else {
                u_xlatb4 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_2.xxxx);
                u_xlatb6 = lessThan(u_xlat16_2.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
                u_xlatb4.x = u_xlatb4.x && u_xlatb6.x;
                u_xlatb4.y = u_xlatb4.y && u_xlatb6.y;
                u_xlatb4.z = u_xlatb4.z && u_xlatb6.z;
                u_xlatb4.w = u_xlatb4.w && u_xlatb6.w;
                u_xlat16_20 = (u_xlatb4.w) ? _BloomIntensity6 : _BloomIntensity7;
                u_xlat16_20 = (u_xlatb4.z) ? _BloomIntensity5 : u_xlat16_20;
                u_xlat16_20 = (u_xlatb4.y) ? _BloomIntensity4 : u_xlat16_20;
                SV_Target0.w = (u_xlatb4.x) ? _BloomIntensity3 : u_xlat16_20;
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb27){
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb27 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb27){
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb21.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb21.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb21.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat27 = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat27 = vs_TEXCOORD2.z * 17.0 + (-u_xlat27);
            u_xlat27 = u_xlat27 + 0.99000001;
            u_xlat27 = floor(u_xlat27);
            u_xlat27 = max(u_xlat27, 0.0);
            u_xlati27 = int(u_xlat27);
            if((u_xlati27)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_27 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_7.xyz = u_xlat3.xyz * vec3(u_xlat30) + _LightPosDir.xyz;
    u_xlat16_20 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_7.xyz = vec3(u_xlat16_20) * u_xlat16_7.xyz;
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD4.xyz;
    u_xlat16_20 = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_20 = u_xlat16_20 * 0.5 + 0.5;
    u_xlat16_20 = dot(vec2(u_xlat16_20), u_xlat10_1.yy);
    u_xlat16_29 = u_xlat16_11 * 0.099999994 + 0.400000006;
    u_xlat16_32 = u_xlat16_11 + -0.5;
    u_xlat16_32 = u_xlat16_32 + u_xlat16_32;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_32 = min(max(u_xlat16_32, 0.0), 1.0);
#else
    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
#endif
    u_xlat16_34 = u_xlat16_32 * -2.0 + 3.0;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_34;
    u_xlat16_20 = (-u_xlat16_29) + u_xlat16_20;
    u_xlat16_20 = u_xlat16_32 * u_xlat16_20 + u_xlat16_29;
    u_xlat16_29 = (-u_xlat10_27) + 1.0;
    u_xlat16_8.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_8.xy = vec2(u_xlat16_29) * u_xlat16_8.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_29 = max(u_xlat16_8.x, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_20 / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.25;
    u_xlatb4.xy = lessThan(vec4(u_xlat16_20), u_xlat16_8.xyxx).xy;
    u_xlat16_26.xy = vec2(u_xlat16_20) + (-u_xlat16_8.xy);
    u_xlat16_20 = (-u_xlat16_8.x) + u_xlat16_8.y;
    u_xlat16_20 = max(u_xlat16_20, 9.99999975e-05);
    u_xlat16_20 = u_xlat16_26.x / u_xlat16_20;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_20 = min(max(u_xlat16_20, 0.0), 1.0);
#else
    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
#endif
    u_xlat16_20 = u_xlat16_20 * 0.5 + 0.25;
    u_xlat16_32 = (-u_xlat16_8.y) + 1.0;
    u_xlat16_32 = max(u_xlat16_32, 9.99999975e-05);
    u_xlat16_32 = u_xlat16_26.y / u_xlat16_32;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_32 = min(max(u_xlat16_32, 0.0), 1.0);
#else
    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
#endif
    u_xlat16_32 = u_xlat16_32 * 0.25 + 0.75;
    u_xlat16_20 = (u_xlatb4.y) ? u_xlat16_20 : u_xlat16_32;
    u_xlat16_8.x = (u_xlatb4.x) ? u_xlat16_29 : u_xlat16_20;
    u_xlat16_2.x = u_xlat16_2.x * 2.0 + 1.0;
    u_xlat16_8.y = u_xlat16_2.x * 0.0625;
    u_xlat10_4.xyz = texture(_DiffuseRampMuitiTex, u_xlat16_8.xy).xyz;
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _SpecularShininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat27 = u_xlat16_2.x * u_xlat16_11;
    u_xlat16_20 = dFdx(u_xlat27);
    u_xlat16_29 = dFdy(u_xlat27);
    u_xlat16_20 = abs(u_xlat16_29) + abs(u_xlat16_20);
    u_xlat16_29 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_32 = (-u_xlat16_20) + u_xlat16_29;
    u_xlat16_20 = u_xlat16_20 + u_xlat16_29;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat16_2.x = u_xlat16_11 * u_xlat16_2.x + (-u_xlat16_32);
    u_xlat16_11 = float(1.0) / u_xlat16_20;
    u_xlat16_2.x = u_xlat16_11 * u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_11 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_11;
    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xxx;
    u_xlat16_2.xyz = u_xlat10_1.xxx * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    u_xlat16_5.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_5.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_5.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-unity_SHC.xyz);
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_5.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_5.xyz = u_xlat16_3.xyz * _CharacterSHColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_MULTI_DIFFUSE_ON" "_MULTI_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor0;
uniform 	mediump vec4 _SpecularColor1;
uniform 	mediump vec4 _SpecularColor2;
uniform 	mediump vec4 _SpecularColor3;
uniform 	mediump vec4 _SpecularColor4;
uniform 	mediump vec4 _SpecularColor5;
uniform 	mediump vec4 _SpecularColor6;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampMuitiTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
uvec2 u_xlatu3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
bvec4 u_xlatb6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
mediump float u_xlat16_11;
mediump float u_xlat16_20;
bvec2 u_xlatb21;
mediump vec2 u_xlat16_26;
float u_xlat27;
lowp float u_xlat10_27;
int u_xlati27;
bool u_xlatb27;
mediump float u_xlat16_29;
float u_xlat30;
mediump float u_xlat16_32;
mediump float u_xlat16_34;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_0 = u_xlat16_0 * _EnvColor;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati27 = int(u_xlat16_1);
    if((u_xlati27)==0){discard;}
    u_xlat10_1 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_1.w * 8.0;
    u_xlat16_2.x = roundEven(u_xlat16_2.x);
    u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb27 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb27){
        u_xlat10_27 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat3.yx).x;
        u_xlat16_11 = u_xlat10_27;
    } else {
        u_xlat16_11 = 1.0;
    //ENDIF
    }
    u_xlatb21.xy = lessThan(vec4(0.5, -0.5, 0.5, -0.5), u_xlat16_2.xxxx).xy;
    u_xlatb4.xy = lessThan(u_xlat16_2.xxxx, vec4(1.5, 0.5, 0.0, 0.0)).xy;
    u_xlatb21.x = u_xlatb21.x && u_xlatb4.x;
    u_xlatb21.y = u_xlatb21.y && u_xlatb4.y;
    if(u_xlatb21.x){
        u_xlat16_5.xyz = _SpecularColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(1.5<u_xlat16_2.x);
#else
        u_xlatb27 = 1.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb4.x = !!(u_xlat16_2.x<2.5);
#else
        u_xlatb4.x = u_xlat16_2.x<2.5;
#endif
        u_xlatb27 = u_xlatb27 && u_xlatb4.x;
        if(u_xlatb27){
            u_xlat16_5.xyz = _SpecularColor2.xyz;
        } else {
            u_xlatb4 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_2.xxxx);
            u_xlatb6 = lessThan(u_xlat16_2.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb4.x = u_xlatb4.x && u_xlatb6.x;
            u_xlatb4.y = u_xlatb4.y && u_xlatb6.y;
            u_xlatb4.z = u_xlatb4.z && u_xlatb6.z;
            u_xlatb4.w = u_xlatb4.w && u_xlatb6.w;
            u_xlat16_7.xyz = (u_xlatb4.w) ? _SpecularColor6.xyz : _SpecularColor0.xyz;
            u_xlat16_7.xyz = (u_xlatb4.z) ? _SpecularColor5.xyz : u_xlat16_7.xyz;
            u_xlat16_7.xyz = (u_xlatb4.y) ? _SpecularColor4.xyz : u_xlat16_7.xyz;
            u_xlat16_5.xyz = (u_xlatb4.x) ? _SpecularColor3.xyz : u_xlat16_7.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb21.y){
        SV_Target0.w = _BloomIntensity0;
    } else {
        if(u_xlatb21.x){
            SV_Target0.w = _BloomIntensity1;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb27 = !!(1.5<u_xlat16_2.x);
#else
            u_xlatb27 = 1.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb21.x = !!(u_xlat16_2.x<2.5);
#else
            u_xlatb21.x = u_xlat16_2.x<2.5;
#endif
            u_xlatb27 = u_xlatb27 && u_xlatb21.x;
            if(u_xlatb27){
                SV_Target0.w = _BloomIntensity2;
            } else {
                u_xlatb4 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_2.xxxx);
                u_xlatb6 = lessThan(u_xlat16_2.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
                u_xlatb4.x = u_xlatb4.x && u_xlatb6.x;
                u_xlatb4.y = u_xlatb4.y && u_xlatb6.y;
                u_xlatb4.z = u_xlatb4.z && u_xlatb6.z;
                u_xlatb4.w = u_xlatb4.w && u_xlatb6.w;
                u_xlat16_20 = (u_xlatb4.w) ? _BloomIntensity6 : _BloomIntensity7;
                u_xlat16_20 = (u_xlatb4.z) ? _BloomIntensity5 : u_xlat16_20;
                u_xlat16_20 = (u_xlatb4.y) ? _BloomIntensity4 : u_xlat16_20;
                SV_Target0.w = (u_xlatb4.x) ? _BloomIntensity3 : u_xlat16_20;
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb27){
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb27 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb27){
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb21.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb21.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb21.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat27 = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat27 = vs_TEXCOORD2.z * 17.0 + (-u_xlat27);
            u_xlat27 = u_xlat27 + 0.99000001;
            u_xlat27 = floor(u_xlat27);
            u_xlat27 = max(u_xlat27, 0.0);
            u_xlati27 = int(u_xlat27);
            if((u_xlati27)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_27 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_7.xyz = u_xlat3.xyz * vec3(u_xlat30) + _LightPosDir.xyz;
    u_xlat16_20 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_7.xyz = vec3(u_xlat16_20) * u_xlat16_7.xyz;
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD4.xyz;
    u_xlat16_20 = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_20 = u_xlat16_20 * 0.5 + 0.5;
    u_xlat16_20 = dot(vec2(u_xlat16_20), u_xlat10_1.yy);
    u_xlat16_29 = u_xlat16_11 * 0.099999994 + 0.400000006;
    u_xlat16_32 = u_xlat16_11 + -0.5;
    u_xlat16_32 = u_xlat16_32 + u_xlat16_32;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_32 = min(max(u_xlat16_32, 0.0), 1.0);
#else
    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
#endif
    u_xlat16_34 = u_xlat16_32 * -2.0 + 3.0;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_34;
    u_xlat16_20 = (-u_xlat16_29) + u_xlat16_20;
    u_xlat16_20 = u_xlat16_32 * u_xlat16_20 + u_xlat16_29;
    u_xlat16_29 = (-u_xlat10_27) + 1.0;
    u_xlat16_8.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_8.xy = vec2(u_xlat16_29) * u_xlat16_8.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_29 = max(u_xlat16_8.x, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_20 / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.25;
    u_xlatb4.xy = lessThan(vec4(u_xlat16_20), u_xlat16_8.xyxx).xy;
    u_xlat16_26.xy = vec2(u_xlat16_20) + (-u_xlat16_8.xy);
    u_xlat16_20 = (-u_xlat16_8.x) + u_xlat16_8.y;
    u_xlat16_20 = max(u_xlat16_20, 9.99999975e-05);
    u_xlat16_20 = u_xlat16_26.x / u_xlat16_20;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_20 = min(max(u_xlat16_20, 0.0), 1.0);
#else
    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
#endif
    u_xlat16_20 = u_xlat16_20 * 0.5 + 0.25;
    u_xlat16_32 = (-u_xlat16_8.y) + 1.0;
    u_xlat16_32 = max(u_xlat16_32, 9.99999975e-05);
    u_xlat16_32 = u_xlat16_26.y / u_xlat16_32;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_32 = min(max(u_xlat16_32, 0.0), 1.0);
#else
    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
#endif
    u_xlat16_32 = u_xlat16_32 * 0.25 + 0.75;
    u_xlat16_20 = (u_xlatb4.y) ? u_xlat16_20 : u_xlat16_32;
    u_xlat16_8.x = (u_xlatb4.x) ? u_xlat16_29 : u_xlat16_20;
    u_xlat16_2.x = u_xlat16_2.x * 2.0 + 1.0;
    u_xlat16_8.y = u_xlat16_2.x * 0.0625;
    u_xlat10_4.xyz = texture(_DiffuseRampMuitiTex, u_xlat16_8.xy).xyz;
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _SpecularShininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat27 = u_xlat16_2.x * u_xlat16_11;
    u_xlat16_20 = dFdx(u_xlat27);
    u_xlat16_29 = dFdy(u_xlat27);
    u_xlat16_20 = abs(u_xlat16_29) + abs(u_xlat16_20);
    u_xlat16_29 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_32 = (-u_xlat16_20) + u_xlat16_29;
    u_xlat16_20 = u_xlat16_20 + u_xlat16_29;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat16_2.x = u_xlat16_11 * u_xlat16_2.x + (-u_xlat16_32);
    u_xlat16_11 = float(1.0) / u_xlat16_20;
    u_xlat16_2.x = u_xlat16_11 * u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_11 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_11;
    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xxx;
    u_xlat16_2.xyz = u_xlat10_1.xxx * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    u_xlat16_5.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_5.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_5.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-unity_SHC.xyz);
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_5.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_5.xyz = u_xlat16_3.xyz * _CharacterSHColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_MULTI_DIFFUSE_ON" "_MULTI_SPECULAR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor0;
uniform 	mediump vec4 _SpecularColor1;
uniform 	mediump vec4 _SpecularColor2;
uniform 	mediump vec4 _SpecularColor3;
uniform 	mediump vec4 _SpecularColor4;
uniform 	mediump vec4 _SpecularColor5;
uniform 	mediump vec4 _SpecularColor6;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump vec4 _LightPosDir;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampMuitiTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
uvec2 u_xlatu3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
bvec4 u_xlatb6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
mediump float u_xlat16_11;
mediump float u_xlat16_20;
bvec2 u_xlatb21;
mediump vec2 u_xlat16_26;
float u_xlat27;
lowp float u_xlat10_27;
int u_xlati27;
bool u_xlatb27;
mediump float u_xlat16_29;
float u_xlat30;
mediump float u_xlat16_32;
mediump float u_xlat16_34;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_0 = u_xlat16_0 * _EnvColor;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati27 = int(u_xlat16_1);
    if((u_xlati27)==0){discard;}
    u_xlat10_1 = texture(_LightMap, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_1.w * 8.0;
    u_xlat16_2.x = roundEven(u_xlat16_2.x);
    u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb27 = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb27){
        u_xlat10_27 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat3.yx).x;
        u_xlat16_11 = u_xlat10_27;
    } else {
        u_xlat16_11 = 1.0;
    //ENDIF
    }
    u_xlatb21.xy = lessThan(vec4(0.5, -0.5, 0.5, -0.5), u_xlat16_2.xxxx).xy;
    u_xlatb4.xy = lessThan(u_xlat16_2.xxxx, vec4(1.5, 0.5, 0.0, 0.0)).xy;
    u_xlatb21.x = u_xlatb21.x && u_xlatb4.x;
    u_xlatb21.y = u_xlatb21.y && u_xlatb4.y;
    if(u_xlatb21.x){
        u_xlat16_5.xyz = _SpecularColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(1.5<u_xlat16_2.x);
#else
        u_xlatb27 = 1.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb4.x = !!(u_xlat16_2.x<2.5);
#else
        u_xlatb4.x = u_xlat16_2.x<2.5;
#endif
        u_xlatb27 = u_xlatb27 && u_xlatb4.x;
        if(u_xlatb27){
            u_xlat16_5.xyz = _SpecularColor2.xyz;
        } else {
            u_xlatb4 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_2.xxxx);
            u_xlatb6 = lessThan(u_xlat16_2.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb4.x = u_xlatb4.x && u_xlatb6.x;
            u_xlatb4.y = u_xlatb4.y && u_xlatb6.y;
            u_xlatb4.z = u_xlatb4.z && u_xlatb6.z;
            u_xlatb4.w = u_xlatb4.w && u_xlatb6.w;
            u_xlat16_7.xyz = (u_xlatb4.w) ? _SpecularColor6.xyz : _SpecularColor0.xyz;
            u_xlat16_7.xyz = (u_xlatb4.z) ? _SpecularColor5.xyz : u_xlat16_7.xyz;
            u_xlat16_7.xyz = (u_xlatb4.y) ? _SpecularColor4.xyz : u_xlat16_7.xyz;
            u_xlat16_5.xyz = (u_xlatb4.x) ? _SpecularColor3.xyz : u_xlat16_7.xyz;
        //ENDIF
        }
    //ENDIF
    }
    if(u_xlatb21.y){
        SV_Target0.w = _BloomIntensity0;
    } else {
        if(u_xlatb21.x){
            SV_Target0.w = _BloomIntensity1;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb27 = !!(1.5<u_xlat16_2.x);
#else
            u_xlatb27 = 1.5<u_xlat16_2.x;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb21.x = !!(u_xlat16_2.x<2.5);
#else
            u_xlatb21.x = u_xlat16_2.x<2.5;
#endif
            u_xlatb27 = u_xlatb27 && u_xlatb21.x;
            if(u_xlatb27){
                SV_Target0.w = _BloomIntensity2;
            } else {
                u_xlatb4 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_2.xxxx);
                u_xlatb6 = lessThan(u_xlat16_2.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
                u_xlatb4.x = u_xlatb4.x && u_xlatb6.x;
                u_xlatb4.y = u_xlatb4.y && u_xlatb6.y;
                u_xlatb4.z = u_xlatb4.z && u_xlatb6.z;
                u_xlatb4.w = u_xlatb4.w && u_xlatb6.w;
                u_xlat16_20 = (u_xlatb4.w) ? _BloomIntensity6 : _BloomIntensity7;
                u_xlat16_20 = (u_xlatb4.z) ? _BloomIntensity5 : u_xlat16_20;
                u_xlat16_20 = (u_xlatb4.y) ? _BloomIntensity4 : u_xlat16_20;
                SV_Target0.w = (u_xlatb4.x) ? _BloomIntensity3 : u_xlat16_20;
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb27){
#ifdef UNITY_ADRENO_ES3
        u_xlatb27 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb27 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb27){
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb21.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb21.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb21.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat27 = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat27 = vs_TEXCOORD2.z * 17.0 + (-u_xlat27);
            u_xlat27 = u_xlat27 + 0.99000001;
            u_xlat27 = floor(u_xlat27);
            u_xlat27 = max(u_xlat27, 0.0);
            u_xlati27 = int(u_xlat27);
            if((u_xlati27)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_27 = texture(_MaskMap, vs_TEXCOORD0.xy).x;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_7.xyz = u_xlat3.xyz * vec3(u_xlat30) + _LightPosDir.xyz;
    u_xlat16_20 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_7.xyz = vec3(u_xlat16_20) * u_xlat16_7.xyz;
    u_xlat3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD4.xyz;
    u_xlat16_20 = dot(u_xlat3.xyz, _LightPosDir.xyz);
    u_xlat16_20 = u_xlat16_20 * 0.5 + 0.5;
    u_xlat16_20 = dot(vec2(u_xlat16_20), u_xlat10_1.yy);
    u_xlat16_29 = u_xlat16_11 * 0.099999994 + 0.400000006;
    u_xlat16_32 = u_xlat16_11 + -0.5;
    u_xlat16_32 = u_xlat16_32 + u_xlat16_32;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_32 = min(max(u_xlat16_32, 0.0), 1.0);
#else
    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
#endif
    u_xlat16_34 = u_xlat16_32 * -2.0 + 3.0;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_34;
    u_xlat16_20 = (-u_xlat16_29) + u_xlat16_20;
    u_xlat16_20 = u_xlat16_32 * u_xlat16_20 + u_xlat16_29;
    u_xlat16_29 = (-u_xlat10_27) + 1.0;
    u_xlat16_8.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_8.xy = vec2(u_xlat16_29) * u_xlat16_8.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_29 = max(u_xlat16_8.x, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_20 / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.25;
    u_xlatb4.xy = lessThan(vec4(u_xlat16_20), u_xlat16_8.xyxx).xy;
    u_xlat16_26.xy = vec2(u_xlat16_20) + (-u_xlat16_8.xy);
    u_xlat16_20 = (-u_xlat16_8.x) + u_xlat16_8.y;
    u_xlat16_20 = max(u_xlat16_20, 9.99999975e-05);
    u_xlat16_20 = u_xlat16_26.x / u_xlat16_20;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_20 = min(max(u_xlat16_20, 0.0), 1.0);
#else
    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
#endif
    u_xlat16_20 = u_xlat16_20 * 0.5 + 0.25;
    u_xlat16_32 = (-u_xlat16_8.y) + 1.0;
    u_xlat16_32 = max(u_xlat16_32, 9.99999975e-05);
    u_xlat16_32 = u_xlat16_26.y / u_xlat16_32;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_32 = min(max(u_xlat16_32, 0.0), 1.0);
#else
    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
#endif
    u_xlat16_32 = u_xlat16_32 * 0.25 + 0.75;
    u_xlat16_20 = (u_xlatb4.y) ? u_xlat16_20 : u_xlat16_32;
    u_xlat16_8.x = (u_xlatb4.x) ? u_xlat16_29 : u_xlat16_20;
    u_xlat16_2.x = u_xlat16_2.x * 2.0 + 1.0;
    u_xlat16_8.y = u_xlat16_2.x * 0.0625;
    u_xlat10_4.xyz = texture(_DiffuseRampMuitiTex, u_xlat16_8.xy).xyz;
    u_xlat16_2.x = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlat16_2.x = log2(u_xlat16_2.x);
    u_xlat16_2.x = u_xlat16_2.x * _SpecularShininess;
    u_xlat16_2.x = exp2(u_xlat16_2.x);
    u_xlat27 = u_xlat16_2.x * u_xlat16_11;
    u_xlat16_20 = dFdx(u_xlat27);
    u_xlat16_29 = dFdy(u_xlat27);
    u_xlat16_20 = abs(u_xlat16_29) + abs(u_xlat16_20);
    u_xlat16_29 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_32 = (-u_xlat16_20) + u_xlat16_29;
    u_xlat16_20 = u_xlat16_20 + u_xlat16_29;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat16_2.x = u_xlat16_11 * u_xlat16_2.x + (-u_xlat16_32);
    u_xlat16_11 = float(1.0) / u_xlat16_20;
    u_xlat16_2.x = u_xlat16_11 * u_xlat16_2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_11 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_11;
    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xxx;
    u_xlat16_2.xyz = u_xlat10_1.xxx * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = u_xlat10_4.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    u_xlat16_5.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_5.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_5.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-unity_SHC.xyz);
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_5.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_5.xyz = u_xlat16_3.xyz * _CharacterSHColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _CharacterSHColor.www;
    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 hw_tier00 " {
""
}
SubProgram "gles3 hw_tier01 " {
""
}
SubProgram "gles3 hw_tier02 " {
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_MULTI_SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_MULTI_SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_MULTI_SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_MULTI_DIFFUSE_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_MULTI_DIFFUSE_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_MULTI_DIFFUSE_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_DIFFUSE_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_DIFFUSE_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_DIFFUSE_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_MULTI_DIFFUSE_ON" "_MULTI_SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_MULTI_DIFFUSE_ON" "_MULTI_SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_MULTI_DIFFUSE_ON" "_MULTI_SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_DIFFUSE_ON" "_MULTI_SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_DIFFUSE_ON" "_MULTI_SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_DIFFUSE_ON" "_MULTI_SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_MULTI_BLOOM_ON" "_MULTI_SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_MULTI_BLOOM_ON" "_MULTI_SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_MULTI_BLOOM_ON" "_MULTI_SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_MULTI_SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_MULTI_SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_MULTI_SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_MULTI_BLOOM_ON" "_MULTI_DIFFUSE_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_MULTI_BLOOM_ON" "_MULTI_DIFFUSE_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_MULTI_BLOOM_ON" "_MULTI_DIFFUSE_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_MULTI_DIFFUSE_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_MULTI_DIFFUSE_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_MULTI_DIFFUSE_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_MULTI_BLOOM_ON" "_MULTI_DIFFUSE_ON" "_MULTI_SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_MULTI_BLOOM_ON" "_MULTI_DIFFUSE_ON" "_MULTI_SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_MULTI_BLOOM_ON" "_MULTI_DIFFUSE_ON" "_MULTI_SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_MULTI_DIFFUSE_ON" "_MULTI_SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_MULTI_DIFFUSE_ON" "_MULTI_SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_MULTI_DIFFUSE_ON" "_MULTI_SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_DIFFUSE_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_DIFFUSE_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_DIFFUSE_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_DIFFUSE_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_DIFFUSE_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_DIFFUSE_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_DIFFUSE_ON" "_MULTI_SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_DIFFUSE_ON" "_MULTI_SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_DIFFUSE_ON" "_MULTI_SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_DIFFUSE_ON" "_MULTI_SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_DIFFUSE_ON" "_MULTI_SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_DIFFUSE_ON" "_MULTI_SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_BLOOM_ON" "_MULTI_SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_BLOOM_ON" "_MULTI_SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_BLOOM_ON" "_MULTI_SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_MULTI_SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_MULTI_SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_MULTI_SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_BLOOM_ON" "_MULTI_DIFFUSE_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_BLOOM_ON" "_MULTI_DIFFUSE_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_BLOOM_ON" "_MULTI_DIFFUSE_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_MULTI_DIFFUSE_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_MULTI_DIFFUSE_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_MULTI_DIFFUSE_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_BLOOM_ON" "_MULTI_DIFFUSE_ON" "_MULTI_SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_BLOOM_ON" "_MULTI_DIFFUSE_ON" "_MULTI_SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_BLOOM_ON" "_MULTI_DIFFUSE_ON" "_MULTI_SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_MULTI_DIFFUSE_ON" "_MULTI_SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_MULTI_DIFFUSE_ON" "_MULTI_SPECULAR_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_MULTI_DIFFUSE_ON" "_MULTI_SPECULAR_ON" }
""
}
}
}
 UsePass "Hidden/miHoYo/DLC/Character/Shared/OPAQUEOUTLINE"
 UsePass "Hidden/miHoYo/DLC/Common/Shared/PREDEPTH"
}
CustomEditor "MoleMoleEditor.CharacterAvatarShaderGUI"
}