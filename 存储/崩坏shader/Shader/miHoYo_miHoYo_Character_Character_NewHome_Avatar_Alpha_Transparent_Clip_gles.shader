//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "miHoYo/miHoYo_Character/Character_NewHome/Avatar_Alpha_Transparent_Clip" {
Properties {
_Color ("Main Color", Color) = (1,1,1,1)
_EnvColor ("Env Color", Color) = (1,1,1,1)
_Scale ("Scale Compared to Maya", Float) = 0.01
_BloomFactor ("Bloom Factor", Float) = 1
_MainTex ("Main Tex (RGB)", 2D) = "white" { }
_LightMapTex ("Light Map Tex (RGB)", 2D) = "gray" { }
_LightSpecColor ("Light Specular Color", Color) = (1,1,1,1)
_LightArea ("Light Area Threshold", Range(0, 1)) = 0.51
_SecondShadow ("Second Shadow Threshold", Range(0, 1)) = 0.51
_FirstShadowMultColor ("First Shadow Multiply Color", Color) = (0.9,0.7,0.75,1)
_SecondShadowMultColor ("Second Shadow Multiply Color", Color) = (0.75,0.6,0.65,1)
_Shininess ("Specular Shininess", Range(0.1, 100)) = 10
_SpecMulti ("Specular Multiply Factor", Range(0, 1)) = 0.1
_DiffuseThreshold ("Diffuse Threshold", Range(0, 1)) = 0
_SpecularThreshold ("Specular Threshold", Range(0, 1)) = 0
_OutlineWidth ("Outline Width", Range(0, 100)) = 0.2
_OutlineColor ("Outline Color", Color) = (0,0,0,1)
_MaxOutlineZOffset ("Max Outline Z Offset", Range(0, 100)) = 1
_OutlineCamStart ("Outline Camera Adjustment Start Distance", Range(0, 10000)) = 1000
_FadeDistance ("Fade Start Distance", Range(0.1, 10)) = 0.5
_FadeOffset ("Fade Start Offset", Range(0, 10)) = 1
_FadeDistanceScale ("Fade Distance Scale(turn this up to stop fading)", Range(0, 1)) = 1
_AlphaClipThreshold ("Alpha Clip Threshold", Float) = 0
[Toggle(LOOKUP_COLOR)] _LookupColor ("Lookup Color", Float) = 0
[Toggle(LOOKUP_COLOR_BILINEAR)] _LookupColorBilinear ("Lookup Color Bilinear", Float) = 0
_factorTex ("Factor Tex", 2D) = "white" { }
_indexTex ("Index Tex", 2D) = "white" { }
_tableTex ("Lookup Tex", 2D) = "white" { }
[Toggle(SPECIAL_STATE)] _SpecialState ("Special State", Float) = 0
_SPTex ("SP Tex", 2D) = "white" { }
_SPNoiseTex ("SP Noise Tex", 2D) = "white" { }
_SPNoiseScaler ("SP Noise Scaler", Range(0, 10)) = 1
_SPIntensity ("SP Intensity", Range(0, 1)) = 0.5
_SPTransition ("SP Transition", Range(0, 1)) = 0
_SPTransitionColor ("SP Transition Color", Color) = (1,1,1,1)
_SPOpaqueness ("SP Opaqueness", Range(0, 1)) = 1
_SPOutlineColor ("SP Outline Color", Color) = (1,1,1,1)
_SPTransitionEmissionScaler ("SP Transition Emission Scaler", Range(1, 100)) = 1
_SPTransitionBloomFactor ("SP Transition Bloom Factor", Float) = 1
_SPCubeMap ("SP CubeMap", Cube) = "white" { }
_SPCubeMapColor ("SP CubeMap Color", Color) = (1,1,1,0)
_SPCubeMapOffset ("SP CubeMap Offset", Vector) = (0,0,0,0)
_SPCubeMapIntensity ("SP CubeMap Intensity", Range(0, 1)) = 0
_SPCubeMapNoiseIntensity ("SP CubeMap Noise Intensity", Range(0, 5)) = 0
_SPCubeMapBrightness ("SP CubeMap Brightness", Float) = 1.26
_SPOldColor ("SP Old Color", Color) = (1,1,1,0)
[Toggle(RIM_GLOW)] _RimGlow ("Rim Glow", Float) = 0
_RGColor ("Rim Glow Color", Color) = (1,1,1,1)
_RGShininess ("Rim Glow Shininess", Float) = 1
_RGScale ("Rim Glow Scale", Float) = 1
_RGBias ("Rim Glow Bias", Float) = 0
_RGRatio ("Rim Glow Ratio", Range(0, 1)) = 0.5
_RGBloomFactor ("Rim Glow Bloom Factor", Float) = 1
[Toggle(DISTORTION)] _Distortion ("Distortion", Float) = 0
_DTTex ("Distortion Tex", 2D) = "gray" { }
_DTIntensity ("Distortion Intensity", Range(1, 9)) = 5
_DTPlaySpeed ("Distortion Play Speed", Float) = 0
_DTNormalDisplacment ("Distortion Normal Displacment", Float) = 0
_DTUVScaleInX ("Distortion UV Scale in X", Float) = 1
_DTUVScaleInY ("Distortion UV Scale in Y", Float) = 1
_DTFresnel ("Distortion Fresnel Params", Vector) = (1,1,0,0)
_Opaqueness ("Opaqueness", Range(0, 1)) = 1
_VertexAlphaFactor ("Alpha From Vertex Factor (0: not use)", Range(0, 1)) = 0
[Toggle(USINGDITHERALPAH)] _UsingDitherAlpha ("UsingDitherAlpha", Float) = 0
_DitherAlpha ("Dither Alpha Value", Range(0, 1)) = 1
}
SubShader {
 LOD 200
 Tags { "Distortion" = "None" "IGNOREPROJECTOR" = "true" "OutlineType" = "Complex" "QUEUE" = "Transparent" "Reflected" = "Reflected" "RenderType" = "Transparent" }
 Pass {
  Name "COMPLEX_TRANS"
  LOD 200
  Tags { "Distortion" = "None" "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "OutlineType" = "Complex" "QUEUE" = "Transparent" "Reflected" = "Reflected" "RenderType" = "Transparent" }
  GpuProgramID 18712
Program "vp" {
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_18;
    scrpos_18 = xlv_TEXCOORD3;
    mediump float a_19;
    a_19 = xlv_TEXCOORD3.z;
    if ((a_19 < 0.95)) {
      scrpos_18.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_19 = (a_19 * 17.0);
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_18.y / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_18.x / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float x_26;
      x_26 = ((a_19 - _DITHERMATRIX[
        int(tmpvar_22)
      ][
        int(tmpvar_25)
      ]) - 0.01);
      if ((x_26 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_18;
    scrpos_18 = xlv_TEXCOORD3;
    mediump float a_19;
    a_19 = xlv_TEXCOORD3.z;
    if ((a_19 < 0.95)) {
      scrpos_18.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_19 = (a_19 * 17.0);
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_18.y / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_18.x / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float x_26;
      x_26 = ((a_19 - _DITHERMATRIX[
        int(tmpvar_22)
      ][
        int(tmpvar_25)
      ]) - 0.01);
      if ((x_26 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_18;
    scrpos_18 = xlv_TEXCOORD3;
    mediump float a_19;
    a_19 = xlv_TEXCOORD3.z;
    if ((a_19 < 0.95)) {
      scrpos_18.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_19 = (a_19 * 17.0);
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_18.y / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_18.x / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float x_26;
      x_26 = ((a_19 - _DITHERMATRIX[
        int(tmpvar_22)
      ][
        int(tmpvar_25)
      ]) - 0.01);
      if ((x_26 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_18;
    scrpos_18 = xlv_TEXCOORD3;
    mediump float a_19;
    a_19 = xlv_TEXCOORD3.z;
    if ((a_19 < 0.95)) {
      scrpos_18.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_19 = (a_19 * 17.0);
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_18.y / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_18.x / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float x_26;
      x_26 = ((a_19 - _DITHERMATRIX[
        int(tmpvar_22)
      ][
        int(tmpvar_25)
      ]) - 0.01);
      if ((x_26 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_18;
    scrpos_18 = xlv_TEXCOORD3;
    mediump float a_19;
    a_19 = xlv_TEXCOORD3.z;
    if ((a_19 < 0.95)) {
      scrpos_18.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_19 = (a_19 * 17.0);
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_18.y / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_18.x / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float x_26;
      x_26 = ((a_19 - _DITHERMATRIX[
        int(tmpvar_22)
      ][
        int(tmpvar_25)
      ]) - 0.01);
      if ((x_26 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_18;
    scrpos_18 = xlv_TEXCOORD3;
    mediump float a_19;
    a_19 = xlv_TEXCOORD3.z;
    if ((a_19 < 0.95)) {
      scrpos_18.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_19 = (a_19 * 17.0);
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_18.y / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_18.x / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float x_26;
      x_26 = ((a_19 - _DITHERMATRIX[
        int(tmpvar_22)
      ][
        int(tmpvar_25)
      ]) - 0.01);
      if ((x_26 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_18;
    scrpos_18 = xlv_TEXCOORD3;
    mediump float a_19;
    a_19 = xlv_TEXCOORD3.z;
    if ((a_19 < 0.95)) {
      scrpos_18.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_19 = (a_19 * 17.0);
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_18.y / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_18.x / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float x_26;
      x_26 = ((a_19 - _DITHERMATRIX[
        int(tmpvar_22)
      ][
        int(tmpvar_25)
      ]) - 0.01);
      if ((x_26 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_18;
    scrpos_18 = xlv_TEXCOORD3;
    mediump float a_19;
    a_19 = xlv_TEXCOORD3.z;
    if ((a_19 < 0.95)) {
      scrpos_18.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_19 = (a_19 * 17.0);
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_18.y / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_18.x / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float x_26;
      x_26 = ((a_19 - _DITHERMATRIX[
        int(tmpvar_22)
      ][
        int(tmpvar_25)
      ]) - 0.01);
      if ((x_26 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_18;
    scrpos_18 = xlv_TEXCOORD3;
    mediump float a_19;
    a_19 = xlv_TEXCOORD3.z;
    if ((a_19 < 0.95)) {
      scrpos_18.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_19 = (a_19 * 17.0);
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_18.y / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_18.x / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float x_26;
      x_26 = ((a_19 - _DITHERMATRIX[
        int(tmpvar_22)
      ][
        int(tmpvar_25)
      ]) - 0.01);
      if ((x_26 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_18;
    scrpos_18 = xlv_TEXCOORD3;
    mediump float a_19;
    a_19 = xlv_TEXCOORD3.z;
    if ((a_19 < 0.95)) {
      scrpos_18.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_19 = (a_19 * 17.0);
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_18.y / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_18.x / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float x_26;
      x_26 = ((a_19 - _DITHERMATRIX[
        int(tmpvar_22)
      ][
        int(tmpvar_25)
      ]) - 0.01);
      if ((x_26 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_18;
    scrpos_18 = xlv_TEXCOORD3;
    mediump float a_19;
    a_19 = xlv_TEXCOORD3.z;
    if ((a_19 < 0.95)) {
      scrpos_18.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_19 = (a_19 * 17.0);
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_18.y / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_18.x / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float x_26;
      x_26 = ((a_19 - _DITHERMATRIX[
        int(tmpvar_22)
      ][
        int(tmpvar_25)
      ]) - 0.01);
      if ((x_26 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_18;
    scrpos_18 = xlv_TEXCOORD3;
    mediump float a_19;
    a_19 = xlv_TEXCOORD3.z;
    if ((a_19 < 0.95)) {
      scrpos_18.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_19 = (a_19 * 17.0);
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_18.y / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_18.x / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float x_26;
      x_26 = ((a_19 - _DITHERMATRIX[
        int(tmpvar_22)
      ][
        int(tmpvar_25)
      ]) - 0.01);
      if ((x_26 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_18;
    scrpos_18 = xlv_TEXCOORD3;
    mediump float a_19;
    a_19 = xlv_TEXCOORD3.z;
    if ((a_19 < 0.95)) {
      scrpos_18.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_19 = (a_19 * 17.0);
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_18.y / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_18.x / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float x_26;
      x_26 = ((a_19 - _DITHERMATRIX[
        int(tmpvar_22)
      ][
        int(tmpvar_25)
      ]) - 0.01);
      if ((x_26 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_18;
    scrpos_18 = xlv_TEXCOORD3;
    mediump float a_19;
    a_19 = xlv_TEXCOORD3.z;
    if ((a_19 < 0.95)) {
      scrpos_18.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_19 = (a_19 * 17.0);
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_18.y / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_18.x / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float x_26;
      x_26 = ((a_19 - _DITHERMATRIX[
        int(tmpvar_22)
      ][
        int(tmpvar_25)
      ]) - 0.01);
      if ((x_26 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_18;
    scrpos_18 = xlv_TEXCOORD3;
    mediump float a_19;
    a_19 = xlv_TEXCOORD3.z;
    if ((a_19 < 0.95)) {
      scrpos_18.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_19 = (a_19 * 17.0);
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_18.y / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_18.x / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float x_26;
      x_26 = ((a_19 - _DITHERMATRIX[
        int(tmpvar_22)
      ][
        int(tmpvar_25)
      ]) - 0.01);
      if ((x_26 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_18;
    scrpos_18 = xlv_TEXCOORD3;
    mediump float a_19;
    a_19 = xlv_TEXCOORD3.z;
    if ((a_19 < 0.95)) {
      scrpos_18.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_19 = (a_19 * 17.0);
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_18.y / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_18.x / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float x_26;
      x_26 = ((a_19 - _DITHERMATRIX[
        int(tmpvar_22)
      ][
        int(tmpvar_25)
      ]) - 0.01);
      if ((x_26 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_18;
    scrpos_18 = xlv_TEXCOORD3;
    mediump float a_19;
    a_19 = xlv_TEXCOORD3.z;
    if ((a_19 < 0.95)) {
      scrpos_18.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_19 = (a_19 * 17.0);
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_18.y / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_18.x / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float x_26;
      x_26 = ((a_19 - _DITHERMATRIX[
        int(tmpvar_22)
      ][
        int(tmpvar_25)
      ]) - 0.01);
      if ((x_26 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_18;
    scrpos_18 = xlv_TEXCOORD3;
    mediump float a_19;
    a_19 = xlv_TEXCOORD3.z;
    if ((a_19 < 0.95)) {
      scrpos_18.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_19 = (a_19 * 17.0);
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_18.y / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_18.x / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float x_26;
      x_26 = ((a_19 - _DITHERMATRIX[
        int(tmpvar_22)
      ][
        int(tmpvar_25)
      ]) - 0.01);
      if ((x_26 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_18;
    scrpos_18 = xlv_TEXCOORD3;
    mediump float a_19;
    a_19 = xlv_TEXCOORD3.z;
    if ((a_19 < 0.95)) {
      scrpos_18.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_19 = (a_19 * 17.0);
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_18.y / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_18.x / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float x_26;
      x_26 = ((a_19 - _DITHERMATRIX[
        int(tmpvar_22)
      ][
        int(tmpvar_25)
      ]) - 0.01);
      if ((x_26 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_18;
    scrpos_18 = xlv_TEXCOORD3;
    mediump float a_19;
    a_19 = xlv_TEXCOORD3.z;
    if ((a_19 < 0.95)) {
      scrpos_18.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_19 = (a_19 * 17.0);
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_18.y / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_18.x / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float x_26;
      x_26 = ((a_19 - _DITHERMATRIX[
        int(tmpvar_22)
      ][
        int(tmpvar_25)
      ]) - 0.01);
      if ((x_26 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_18;
    scrpos_18 = xlv_TEXCOORD3;
    mediump float a_19;
    a_19 = xlv_TEXCOORD3.z;
    if ((a_19 < 0.95)) {
      scrpos_18.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_19 = (a_19 * 17.0);
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_18.y / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_18.x / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float x_26;
      x_26 = ((a_19 - _DITHERMATRIX[
        int(tmpvar_22)
      ][
        int(tmpvar_25)
      ]) - 0.01);
      if ((x_26 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_18;
    scrpos_18 = xlv_TEXCOORD3;
    mediump float a_19;
    a_19 = xlv_TEXCOORD3.z;
    if ((a_19 < 0.95)) {
      scrpos_18.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_19 = (a_19 * 17.0);
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_18.y / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_18.x / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float x_26;
      x_26 = ((a_19 - _DITHERMATRIX[
        int(tmpvar_22)
      ][
        int(tmpvar_25)
      ]) - 0.01);
      if ((x_26 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_18;
    scrpos_18 = xlv_TEXCOORD3;
    mediump float a_19;
    a_19 = xlv_TEXCOORD3.z;
    if ((a_19 < 0.95)) {
      scrpos_18.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_19 = (a_19 * 17.0);
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_18.y / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_18.x / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float x_26;
      x_26 = ((a_19 - _DITHERMATRIX[
        int(tmpvar_22)
      ][
        int(tmpvar_25)
      ]) - 0.01);
      if ((x_26 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_18;
    scrpos_18 = xlv_TEXCOORD3;
    mediump float a_19;
    a_19 = xlv_TEXCOORD3.z;
    if ((a_19 < 0.95)) {
      scrpos_18.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_19 = (a_19 * 17.0);
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_18.y / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_18.x / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float x_26;
      x_26 = ((a_19 - _DITHERMATRIX[
        int(tmpvar_22)
      ][
        int(tmpvar_25)
      ]) - 0.01);
      if ((x_26 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = tmpvar_5;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_8;
  tmpvar_8 = tmpvar_7.w;
  mediump vec2 tmpvar_9;
  tmpvar_9.y = 0.0;
  tmpvar_9.x = tmpvar_8;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_tableTex, tmpvar_9).xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 1.0;
  tmpvar_12.x = tmpvar_8;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = mix (tmpvar_11, tmpvar_14, tmpvar_6.xxx);
  tmpvar_15.w = tmpvar_6.y;
  mediump float x_16;
  x_16 = (tmpvar_6.y - _AlphaClipThreshold);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_15.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_15.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_18 * _Color.xyz) * _EnvColor.xyz) + color_22);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.y);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_27;
    scrpos_27 = xlv_TEXCOORD3;
    mediump float a_28;
    a_28 = xlv_TEXCOORD3.z;
    if ((a_28 < 0.95)) {
      scrpos_27.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_28 = (a_28 * 17.0);
      highp float tmpvar_29;
      tmpvar_29 = (scrpos_27.y / 4.0);
      highp float tmpvar_30;
      tmpvar_30 = (fract(abs(tmpvar_29)) * 4.0);
      highp float tmpvar_31;
      if ((tmpvar_29 >= 0.0)) {
        tmpvar_31 = tmpvar_30;
      } else {
        tmpvar_31 = -(tmpvar_30);
      };
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_27.x / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float x_35;
      x_35 = ((a_28 - _DITHERMATRIX[
        int(tmpvar_31)
      ][
        int(tmpvar_34)
      ]) - 0.01);
      if ((x_35 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = tmpvar_5;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_8;
  tmpvar_8 = tmpvar_7.w;
  mediump vec2 tmpvar_9;
  tmpvar_9.y = 0.0;
  tmpvar_9.x = tmpvar_8;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_tableTex, tmpvar_9).xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 1.0;
  tmpvar_12.x = tmpvar_8;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = mix (tmpvar_11, tmpvar_14, tmpvar_6.xxx);
  tmpvar_15.w = tmpvar_6.y;
  mediump float x_16;
  x_16 = (tmpvar_6.y - _AlphaClipThreshold);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_15.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_15.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_18 * _Color.xyz) * _EnvColor.xyz) + color_22);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.y);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_27;
    scrpos_27 = xlv_TEXCOORD3;
    mediump float a_28;
    a_28 = xlv_TEXCOORD3.z;
    if ((a_28 < 0.95)) {
      scrpos_27.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_28 = (a_28 * 17.0);
      highp float tmpvar_29;
      tmpvar_29 = (scrpos_27.y / 4.0);
      highp float tmpvar_30;
      tmpvar_30 = (fract(abs(tmpvar_29)) * 4.0);
      highp float tmpvar_31;
      if ((tmpvar_29 >= 0.0)) {
        tmpvar_31 = tmpvar_30;
      } else {
        tmpvar_31 = -(tmpvar_30);
      };
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_27.x / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float x_35;
      x_35 = ((a_28 - _DITHERMATRIX[
        int(tmpvar_31)
      ][
        int(tmpvar_34)
      ]) - 0.01);
      if ((x_35 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = tmpvar_5;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_8;
  tmpvar_8 = tmpvar_7.w;
  mediump vec2 tmpvar_9;
  tmpvar_9.y = 0.0;
  tmpvar_9.x = tmpvar_8;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_tableTex, tmpvar_9).xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 1.0;
  tmpvar_12.x = tmpvar_8;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = mix (tmpvar_11, tmpvar_14, tmpvar_6.xxx);
  tmpvar_15.w = tmpvar_6.y;
  mediump float x_16;
  x_16 = (tmpvar_6.y - _AlphaClipThreshold);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_15.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_15.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_18 * _Color.xyz) * _EnvColor.xyz) + color_22);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.y);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_27;
    scrpos_27 = xlv_TEXCOORD3;
    mediump float a_28;
    a_28 = xlv_TEXCOORD3.z;
    if ((a_28 < 0.95)) {
      scrpos_27.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_28 = (a_28 * 17.0);
      highp float tmpvar_29;
      tmpvar_29 = (scrpos_27.y / 4.0);
      highp float tmpvar_30;
      tmpvar_30 = (fract(abs(tmpvar_29)) * 4.0);
      highp float tmpvar_31;
      if ((tmpvar_29 >= 0.0)) {
        tmpvar_31 = tmpvar_30;
      } else {
        tmpvar_31 = -(tmpvar_30);
      };
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_27.x / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float x_35;
      x_35 = ((a_28 - _DITHERMATRIX[
        int(tmpvar_31)
      ][
        int(tmpvar_34)
      ]) - 0.01);
      if ((x_35 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = tmpvar_5;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_8;
  tmpvar_8 = tmpvar_7.w;
  mediump vec2 tmpvar_9;
  tmpvar_9.y = 0.0;
  tmpvar_9.x = tmpvar_8;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_tableTex, tmpvar_9).xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 1.0;
  tmpvar_12.x = tmpvar_8;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = mix (tmpvar_11, tmpvar_14, tmpvar_6.xxx);
  tmpvar_15.w = tmpvar_6.y;
  mediump float x_16;
  x_16 = (tmpvar_6.y - _AlphaClipThreshold);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_15.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_15.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_18 * _Color.xyz) * _EnvColor.xyz) + color_22);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.y);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_27;
    scrpos_27 = xlv_TEXCOORD3;
    mediump float a_28;
    a_28 = xlv_TEXCOORD3.z;
    if ((a_28 < 0.95)) {
      scrpos_27.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_28 = (a_28 * 17.0);
      highp float tmpvar_29;
      tmpvar_29 = (scrpos_27.y / 4.0);
      highp float tmpvar_30;
      tmpvar_30 = (fract(abs(tmpvar_29)) * 4.0);
      highp float tmpvar_31;
      if ((tmpvar_29 >= 0.0)) {
        tmpvar_31 = tmpvar_30;
      } else {
        tmpvar_31 = -(tmpvar_30);
      };
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_27.x / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float x_35;
      x_35 = ((a_28 - _DITHERMATRIX[
        int(tmpvar_31)
      ][
        int(tmpvar_34)
      ]) - 0.01);
      if ((x_35 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = tmpvar_5;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_8;
  tmpvar_8 = tmpvar_7.w;
  mediump vec2 tmpvar_9;
  tmpvar_9.y = 0.0;
  tmpvar_9.x = tmpvar_8;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_tableTex, tmpvar_9).xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 1.0;
  tmpvar_12.x = tmpvar_8;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = mix (tmpvar_11, tmpvar_14, tmpvar_6.xxx);
  tmpvar_15.w = tmpvar_6.y;
  mediump float x_16;
  x_16 = (tmpvar_6.y - _AlphaClipThreshold);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_15.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_15.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_18 * _Color.xyz) * _EnvColor.xyz) + color_22);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.y);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_27;
    scrpos_27 = xlv_TEXCOORD3;
    mediump float a_28;
    a_28 = xlv_TEXCOORD3.z;
    if ((a_28 < 0.95)) {
      scrpos_27.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_28 = (a_28 * 17.0);
      highp float tmpvar_29;
      tmpvar_29 = (scrpos_27.y / 4.0);
      highp float tmpvar_30;
      tmpvar_30 = (fract(abs(tmpvar_29)) * 4.0);
      highp float tmpvar_31;
      if ((tmpvar_29 >= 0.0)) {
        tmpvar_31 = tmpvar_30;
      } else {
        tmpvar_31 = -(tmpvar_30);
      };
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_27.x / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float x_35;
      x_35 = ((a_28 - _DITHERMATRIX[
        int(tmpvar_31)
      ][
        int(tmpvar_34)
      ]) - 0.01);
      if ((x_35 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = tmpvar_5;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_8;
  tmpvar_8 = tmpvar_7.w;
  mediump vec2 tmpvar_9;
  tmpvar_9.y = 0.0;
  tmpvar_9.x = tmpvar_8;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_tableTex, tmpvar_9).xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 1.0;
  tmpvar_12.x = tmpvar_8;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = mix (tmpvar_11, tmpvar_14, tmpvar_6.xxx);
  tmpvar_15.w = tmpvar_6.y;
  mediump float x_16;
  x_16 = (tmpvar_6.y - _AlphaClipThreshold);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_15.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_15.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_18 * _Color.xyz) * _EnvColor.xyz) + color_22);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.y);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_27;
    scrpos_27 = xlv_TEXCOORD3;
    mediump float a_28;
    a_28 = xlv_TEXCOORD3.z;
    if ((a_28 < 0.95)) {
      scrpos_27.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_28 = (a_28 * 17.0);
      highp float tmpvar_29;
      tmpvar_29 = (scrpos_27.y / 4.0);
      highp float tmpvar_30;
      tmpvar_30 = (fract(abs(tmpvar_29)) * 4.0);
      highp float tmpvar_31;
      if ((tmpvar_29 >= 0.0)) {
        tmpvar_31 = tmpvar_30;
      } else {
        tmpvar_31 = -(tmpvar_30);
      };
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_27.x / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float x_35;
      x_35 = ((a_28 - _DITHERMATRIX[
        int(tmpvar_31)
      ][
        int(tmpvar_34)
      ]) - 0.01);
      if ((x_35 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = tmpvar_5;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_8;
  tmpvar_8 = tmpvar_7.w;
  mediump vec2 tmpvar_9;
  tmpvar_9.y = 0.0;
  tmpvar_9.x = tmpvar_8;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_tableTex, tmpvar_9).xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 1.0;
  tmpvar_12.x = tmpvar_8;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = mix (tmpvar_11, tmpvar_14, tmpvar_6.xxx);
  tmpvar_15.w = tmpvar_6.y;
  mediump float x_16;
  x_16 = (tmpvar_6.y - _AlphaClipThreshold);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_15.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_15.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_18 * _Color.xyz) * _EnvColor.xyz) + color_22);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.y);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_27;
    scrpos_27 = xlv_TEXCOORD3;
    mediump float a_28;
    a_28 = xlv_TEXCOORD3.z;
    if ((a_28 < 0.95)) {
      scrpos_27.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_28 = (a_28 * 17.0);
      highp float tmpvar_29;
      tmpvar_29 = (scrpos_27.y / 4.0);
      highp float tmpvar_30;
      tmpvar_30 = (fract(abs(tmpvar_29)) * 4.0);
      highp float tmpvar_31;
      if ((tmpvar_29 >= 0.0)) {
        tmpvar_31 = tmpvar_30;
      } else {
        tmpvar_31 = -(tmpvar_30);
      };
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_27.x / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float x_35;
      x_35 = ((a_28 - _DITHERMATRIX[
        int(tmpvar_31)
      ][
        int(tmpvar_34)
      ]) - 0.01);
      if ((x_35 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = tmpvar_5;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_8;
  tmpvar_8 = tmpvar_7.w;
  mediump vec2 tmpvar_9;
  tmpvar_9.y = 0.0;
  tmpvar_9.x = tmpvar_8;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_tableTex, tmpvar_9).xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 1.0;
  tmpvar_12.x = tmpvar_8;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = mix (tmpvar_11, tmpvar_14, tmpvar_6.xxx);
  tmpvar_15.w = tmpvar_6.y;
  mediump float x_16;
  x_16 = (tmpvar_6.y - _AlphaClipThreshold);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_15.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_15.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_18 * _Color.xyz) * _EnvColor.xyz) + color_22);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.y);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_27;
    scrpos_27 = xlv_TEXCOORD3;
    mediump float a_28;
    a_28 = xlv_TEXCOORD3.z;
    if ((a_28 < 0.95)) {
      scrpos_27.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_28 = (a_28 * 17.0);
      highp float tmpvar_29;
      tmpvar_29 = (scrpos_27.y / 4.0);
      highp float tmpvar_30;
      tmpvar_30 = (fract(abs(tmpvar_29)) * 4.0);
      highp float tmpvar_31;
      if ((tmpvar_29 >= 0.0)) {
        tmpvar_31 = tmpvar_30;
      } else {
        tmpvar_31 = -(tmpvar_30);
      };
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_27.x / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float x_35;
      x_35 = ((a_28 - _DITHERMATRIX[
        int(tmpvar_31)
      ][
        int(tmpvar_34)
      ]) - 0.01);
      if ((x_35 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = tmpvar_5;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_8;
  tmpvar_8 = tmpvar_7.w;
  mediump vec2 tmpvar_9;
  tmpvar_9.y = 0.0;
  tmpvar_9.x = tmpvar_8;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_tableTex, tmpvar_9).xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 1.0;
  tmpvar_12.x = tmpvar_8;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = mix (tmpvar_11, tmpvar_14, tmpvar_6.xxx);
  tmpvar_15.w = tmpvar_6.y;
  mediump float x_16;
  x_16 = (tmpvar_6.y - _AlphaClipThreshold);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_15.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_15.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_18 * _Color.xyz) * _EnvColor.xyz) + color_22);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.y);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_27;
    scrpos_27 = xlv_TEXCOORD3;
    mediump float a_28;
    a_28 = xlv_TEXCOORD3.z;
    if ((a_28 < 0.95)) {
      scrpos_27.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_28 = (a_28 * 17.0);
      highp float tmpvar_29;
      tmpvar_29 = (scrpos_27.y / 4.0);
      highp float tmpvar_30;
      tmpvar_30 = (fract(abs(tmpvar_29)) * 4.0);
      highp float tmpvar_31;
      if ((tmpvar_29 >= 0.0)) {
        tmpvar_31 = tmpvar_30;
      } else {
        tmpvar_31 = -(tmpvar_30);
      };
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_27.x / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float x_35;
      x_35 = ((a_28 - _DITHERMATRIX[
        int(tmpvar_31)
      ][
        int(tmpvar_34)
      ]) - 0.01);
      if ((x_35 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = tmpvar_5;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_8;
  tmpvar_8 = tmpvar_7.w;
  mediump vec2 tmpvar_9;
  tmpvar_9.y = 0.0;
  tmpvar_9.x = tmpvar_8;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_tableTex, tmpvar_9).xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 1.0;
  tmpvar_12.x = tmpvar_8;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = mix (tmpvar_11, tmpvar_14, tmpvar_6.xxx);
  tmpvar_15.w = tmpvar_6.y;
  mediump float x_16;
  x_16 = (tmpvar_6.y - _AlphaClipThreshold);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_15.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_15.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_18 * _Color.xyz) * _EnvColor.xyz) + color_22);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.y);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_27;
    scrpos_27 = xlv_TEXCOORD3;
    mediump float a_28;
    a_28 = xlv_TEXCOORD3.z;
    if ((a_28 < 0.95)) {
      scrpos_27.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_28 = (a_28 * 17.0);
      highp float tmpvar_29;
      tmpvar_29 = (scrpos_27.y / 4.0);
      highp float tmpvar_30;
      tmpvar_30 = (fract(abs(tmpvar_29)) * 4.0);
      highp float tmpvar_31;
      if ((tmpvar_29 >= 0.0)) {
        tmpvar_31 = tmpvar_30;
      } else {
        tmpvar_31 = -(tmpvar_30);
      };
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_27.x / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float x_35;
      x_35 = ((a_28 - _DITHERMATRIX[
        int(tmpvar_31)
      ][
        int(tmpvar_34)
      ]) - 0.01);
      if ((x_35 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = tmpvar_5;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_8;
  tmpvar_8 = tmpvar_7.w;
  mediump vec2 tmpvar_9;
  tmpvar_9.y = 0.0;
  tmpvar_9.x = tmpvar_8;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_tableTex, tmpvar_9).xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 1.0;
  tmpvar_12.x = tmpvar_8;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = mix (tmpvar_11, tmpvar_14, tmpvar_6.xxx);
  tmpvar_15.w = tmpvar_6.y;
  mediump float x_16;
  x_16 = (tmpvar_6.y - _AlphaClipThreshold);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_15.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_15.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_18 * _Color.xyz) * _EnvColor.xyz) + color_22);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.y);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_27;
    scrpos_27 = xlv_TEXCOORD3;
    mediump float a_28;
    a_28 = xlv_TEXCOORD3.z;
    if ((a_28 < 0.95)) {
      scrpos_27.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_28 = (a_28 * 17.0);
      highp float tmpvar_29;
      tmpvar_29 = (scrpos_27.y / 4.0);
      highp float tmpvar_30;
      tmpvar_30 = (fract(abs(tmpvar_29)) * 4.0);
      highp float tmpvar_31;
      if ((tmpvar_29 >= 0.0)) {
        tmpvar_31 = tmpvar_30;
      } else {
        tmpvar_31 = -(tmpvar_30);
      };
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_27.x / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float x_35;
      x_35 = ((a_28 - _DITHERMATRIX[
        int(tmpvar_31)
      ][
        int(tmpvar_34)
      ]) - 0.01);
      if ((x_35 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = tmpvar_5;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_8;
  tmpvar_8 = tmpvar_7.w;
  mediump vec2 tmpvar_9;
  tmpvar_9.y = 0.0;
  tmpvar_9.x = tmpvar_8;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_tableTex, tmpvar_9).xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 1.0;
  tmpvar_12.x = tmpvar_8;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = mix (tmpvar_11, tmpvar_14, tmpvar_6.xxx);
  tmpvar_15.w = tmpvar_6.y;
  mediump float x_16;
  x_16 = (tmpvar_6.y - _AlphaClipThreshold);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_15.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_15.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_18 * _Color.xyz) * _EnvColor.xyz) + color_22);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.y);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_27;
    scrpos_27 = xlv_TEXCOORD3;
    mediump float a_28;
    a_28 = xlv_TEXCOORD3.z;
    if ((a_28 < 0.95)) {
      scrpos_27.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_28 = (a_28 * 17.0);
      highp float tmpvar_29;
      tmpvar_29 = (scrpos_27.y / 4.0);
      highp float tmpvar_30;
      tmpvar_30 = (fract(abs(tmpvar_29)) * 4.0);
      highp float tmpvar_31;
      if ((tmpvar_29 >= 0.0)) {
        tmpvar_31 = tmpvar_30;
      } else {
        tmpvar_31 = -(tmpvar_30);
      };
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_27.x / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float x_35;
      x_35 = ((a_28 - _DITHERMATRIX[
        int(tmpvar_31)
      ][
        int(tmpvar_34)
      ]) - 0.01);
      if ((x_35 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_5;
  highp vec2 pixelSize_6;
  pixelSize_6 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8 = floor(tmpvar_7);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract(tmpvar_7);
  highp vec2 uv_10;
  uv_10 = ((tmpvar_8 + vec2(0.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_factorTex, uv_10);
  mediump vec4 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_indexTex, uv_10);
  mediump float tmpvar_14;
  tmpvar_14 = tmpvar_13.w;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 1.0;
  tmpvar_18.x = tmpvar_14;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = mix (tmpvar_17, tmpvar_20, tmpvar_12.xxx);
  tmpvar_21.w = tmpvar_12.y;
  highp vec2 uv_22;
  uv_22 = ((tmpvar_8 + vec2(1.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_factorTex, uv_22);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_indexTex, uv_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25.w;
  mediump vec2 tmpvar_27;
  tmpvar_27.y = 0.0;
  tmpvar_27.x = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_tableTex, tmpvar_27).xyz;
  mediump vec3 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 1.0;
  tmpvar_30.x = tmpvar_26;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = mix (tmpvar_29, tmpvar_32, tmpvar_24.xxx);
  tmpvar_33.w = tmpvar_24.y;
  highp vec2 uv_34;
  uv_34 = ((tmpvar_8 + vec2(0.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_factorTex, uv_34);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_indexTex, uv_34);
  mediump float tmpvar_38;
  tmpvar_38 = tmpvar_37.w;
  mediump vec2 tmpvar_39;
  tmpvar_39.y = 0.0;
  tmpvar_39.x = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_tableTex, tmpvar_39).xyz;
  mediump vec3 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 1.0;
  tmpvar_42.x = tmpvar_38;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = mix (tmpvar_41, tmpvar_44, tmpvar_36.xxx);
  tmpvar_45.w = tmpvar_36.y;
  highp vec2 uv_46;
  uv_46 = ((tmpvar_8 + vec2(1.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_factorTex, uv_46);
  mediump vec4 tmpvar_48;
  tmpvar_48 = tmpvar_47;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_indexTex, uv_46);
  mediump float tmpvar_50;
  tmpvar_50 = tmpvar_49.w;
  mediump vec2 tmpvar_51;
  tmpvar_51.y = 0.0;
  tmpvar_51.x = tmpvar_50;
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_tableTex, tmpvar_51).xyz;
  mediump vec3 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 1.0;
  tmpvar_54.x = tmpvar_50;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = mix (tmpvar_53, tmpvar_56, tmpvar_48.xxx);
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58 = mix (mix (tmpvar_21, tmpvar_33, tmpvar_9.xxxx), mix (tmpvar_45, tmpvar_57, tmpvar_9.xxxx), tmpvar_9.yyyy);
  tmpvar_5 = tmpvar_58;
  mediump float x_59;
  x_59 = (tmpvar_5.w - _AlphaClipThreshold);
  if ((x_59 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_5.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_5.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_61 * _Color.xyz) * _EnvColor.xyz) + color_65);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_5.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_70;
    scrpos_70 = xlv_TEXCOORD3;
    mediump float a_71;
    a_71 = xlv_TEXCOORD3.z;
    if ((a_71 < 0.95)) {
      scrpos_70.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_71 = (a_71 * 17.0);
      highp float tmpvar_72;
      tmpvar_72 = (scrpos_70.y / 4.0);
      highp float tmpvar_73;
      tmpvar_73 = (fract(abs(tmpvar_72)) * 4.0);
      highp float tmpvar_74;
      if ((tmpvar_72 >= 0.0)) {
        tmpvar_74 = tmpvar_73;
      } else {
        tmpvar_74 = -(tmpvar_73);
      };
      highp float tmpvar_75;
      tmpvar_75 = (scrpos_70.x / 4.0);
      highp float tmpvar_76;
      tmpvar_76 = (fract(abs(tmpvar_75)) * 4.0);
      highp float tmpvar_77;
      if ((tmpvar_75 >= 0.0)) {
        tmpvar_77 = tmpvar_76;
      } else {
        tmpvar_77 = -(tmpvar_76);
      };
      highp float x_78;
      x_78 = ((a_71 - _DITHERMATRIX[
        int(tmpvar_74)
      ][
        int(tmpvar_77)
      ]) - 0.01);
      if ((x_78 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_5;
  highp vec2 pixelSize_6;
  pixelSize_6 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8 = floor(tmpvar_7);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract(tmpvar_7);
  highp vec2 uv_10;
  uv_10 = ((tmpvar_8 + vec2(0.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_factorTex, uv_10);
  mediump vec4 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_indexTex, uv_10);
  mediump float tmpvar_14;
  tmpvar_14 = tmpvar_13.w;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 1.0;
  tmpvar_18.x = tmpvar_14;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = mix (tmpvar_17, tmpvar_20, tmpvar_12.xxx);
  tmpvar_21.w = tmpvar_12.y;
  highp vec2 uv_22;
  uv_22 = ((tmpvar_8 + vec2(1.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_factorTex, uv_22);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_indexTex, uv_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25.w;
  mediump vec2 tmpvar_27;
  tmpvar_27.y = 0.0;
  tmpvar_27.x = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_tableTex, tmpvar_27).xyz;
  mediump vec3 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 1.0;
  tmpvar_30.x = tmpvar_26;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = mix (tmpvar_29, tmpvar_32, tmpvar_24.xxx);
  tmpvar_33.w = tmpvar_24.y;
  highp vec2 uv_34;
  uv_34 = ((tmpvar_8 + vec2(0.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_factorTex, uv_34);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_indexTex, uv_34);
  mediump float tmpvar_38;
  tmpvar_38 = tmpvar_37.w;
  mediump vec2 tmpvar_39;
  tmpvar_39.y = 0.0;
  tmpvar_39.x = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_tableTex, tmpvar_39).xyz;
  mediump vec3 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 1.0;
  tmpvar_42.x = tmpvar_38;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = mix (tmpvar_41, tmpvar_44, tmpvar_36.xxx);
  tmpvar_45.w = tmpvar_36.y;
  highp vec2 uv_46;
  uv_46 = ((tmpvar_8 + vec2(1.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_factorTex, uv_46);
  mediump vec4 tmpvar_48;
  tmpvar_48 = tmpvar_47;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_indexTex, uv_46);
  mediump float tmpvar_50;
  tmpvar_50 = tmpvar_49.w;
  mediump vec2 tmpvar_51;
  tmpvar_51.y = 0.0;
  tmpvar_51.x = tmpvar_50;
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_tableTex, tmpvar_51).xyz;
  mediump vec3 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 1.0;
  tmpvar_54.x = tmpvar_50;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = mix (tmpvar_53, tmpvar_56, tmpvar_48.xxx);
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58 = mix (mix (tmpvar_21, tmpvar_33, tmpvar_9.xxxx), mix (tmpvar_45, tmpvar_57, tmpvar_9.xxxx), tmpvar_9.yyyy);
  tmpvar_5 = tmpvar_58;
  mediump float x_59;
  x_59 = (tmpvar_5.w - _AlphaClipThreshold);
  if ((x_59 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_5.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_5.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_61 * _Color.xyz) * _EnvColor.xyz) + color_65);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_5.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_70;
    scrpos_70 = xlv_TEXCOORD3;
    mediump float a_71;
    a_71 = xlv_TEXCOORD3.z;
    if ((a_71 < 0.95)) {
      scrpos_70.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_71 = (a_71 * 17.0);
      highp float tmpvar_72;
      tmpvar_72 = (scrpos_70.y / 4.0);
      highp float tmpvar_73;
      tmpvar_73 = (fract(abs(tmpvar_72)) * 4.0);
      highp float tmpvar_74;
      if ((tmpvar_72 >= 0.0)) {
        tmpvar_74 = tmpvar_73;
      } else {
        tmpvar_74 = -(tmpvar_73);
      };
      highp float tmpvar_75;
      tmpvar_75 = (scrpos_70.x / 4.0);
      highp float tmpvar_76;
      tmpvar_76 = (fract(abs(tmpvar_75)) * 4.0);
      highp float tmpvar_77;
      if ((tmpvar_75 >= 0.0)) {
        tmpvar_77 = tmpvar_76;
      } else {
        tmpvar_77 = -(tmpvar_76);
      };
      highp float x_78;
      x_78 = ((a_71 - _DITHERMATRIX[
        int(tmpvar_74)
      ][
        int(tmpvar_77)
      ]) - 0.01);
      if ((x_78 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_5;
  highp vec2 pixelSize_6;
  pixelSize_6 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8 = floor(tmpvar_7);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract(tmpvar_7);
  highp vec2 uv_10;
  uv_10 = ((tmpvar_8 + vec2(0.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_factorTex, uv_10);
  mediump vec4 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_indexTex, uv_10);
  mediump float tmpvar_14;
  tmpvar_14 = tmpvar_13.w;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 1.0;
  tmpvar_18.x = tmpvar_14;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = mix (tmpvar_17, tmpvar_20, tmpvar_12.xxx);
  tmpvar_21.w = tmpvar_12.y;
  highp vec2 uv_22;
  uv_22 = ((tmpvar_8 + vec2(1.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_factorTex, uv_22);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_indexTex, uv_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25.w;
  mediump vec2 tmpvar_27;
  tmpvar_27.y = 0.0;
  tmpvar_27.x = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_tableTex, tmpvar_27).xyz;
  mediump vec3 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 1.0;
  tmpvar_30.x = tmpvar_26;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = mix (tmpvar_29, tmpvar_32, tmpvar_24.xxx);
  tmpvar_33.w = tmpvar_24.y;
  highp vec2 uv_34;
  uv_34 = ((tmpvar_8 + vec2(0.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_factorTex, uv_34);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_indexTex, uv_34);
  mediump float tmpvar_38;
  tmpvar_38 = tmpvar_37.w;
  mediump vec2 tmpvar_39;
  tmpvar_39.y = 0.0;
  tmpvar_39.x = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_tableTex, tmpvar_39).xyz;
  mediump vec3 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 1.0;
  tmpvar_42.x = tmpvar_38;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = mix (tmpvar_41, tmpvar_44, tmpvar_36.xxx);
  tmpvar_45.w = tmpvar_36.y;
  highp vec2 uv_46;
  uv_46 = ((tmpvar_8 + vec2(1.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_factorTex, uv_46);
  mediump vec4 tmpvar_48;
  tmpvar_48 = tmpvar_47;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_indexTex, uv_46);
  mediump float tmpvar_50;
  tmpvar_50 = tmpvar_49.w;
  mediump vec2 tmpvar_51;
  tmpvar_51.y = 0.0;
  tmpvar_51.x = tmpvar_50;
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_tableTex, tmpvar_51).xyz;
  mediump vec3 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 1.0;
  tmpvar_54.x = tmpvar_50;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = mix (tmpvar_53, tmpvar_56, tmpvar_48.xxx);
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58 = mix (mix (tmpvar_21, tmpvar_33, tmpvar_9.xxxx), mix (tmpvar_45, tmpvar_57, tmpvar_9.xxxx), tmpvar_9.yyyy);
  tmpvar_5 = tmpvar_58;
  mediump float x_59;
  x_59 = (tmpvar_5.w - _AlphaClipThreshold);
  if ((x_59 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_5.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_5.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_61 * _Color.xyz) * _EnvColor.xyz) + color_65);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_5.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_70;
    scrpos_70 = xlv_TEXCOORD3;
    mediump float a_71;
    a_71 = xlv_TEXCOORD3.z;
    if ((a_71 < 0.95)) {
      scrpos_70.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_71 = (a_71 * 17.0);
      highp float tmpvar_72;
      tmpvar_72 = (scrpos_70.y / 4.0);
      highp float tmpvar_73;
      tmpvar_73 = (fract(abs(tmpvar_72)) * 4.0);
      highp float tmpvar_74;
      if ((tmpvar_72 >= 0.0)) {
        tmpvar_74 = tmpvar_73;
      } else {
        tmpvar_74 = -(tmpvar_73);
      };
      highp float tmpvar_75;
      tmpvar_75 = (scrpos_70.x / 4.0);
      highp float tmpvar_76;
      tmpvar_76 = (fract(abs(tmpvar_75)) * 4.0);
      highp float tmpvar_77;
      if ((tmpvar_75 >= 0.0)) {
        tmpvar_77 = tmpvar_76;
      } else {
        tmpvar_77 = -(tmpvar_76);
      };
      highp float x_78;
      x_78 = ((a_71 - _DITHERMATRIX[
        int(tmpvar_74)
      ][
        int(tmpvar_77)
      ]) - 0.01);
      if ((x_78 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_5;
  highp vec2 pixelSize_6;
  pixelSize_6 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8 = floor(tmpvar_7);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract(tmpvar_7);
  highp vec2 uv_10;
  uv_10 = ((tmpvar_8 + vec2(0.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_factorTex, uv_10);
  mediump vec4 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_indexTex, uv_10);
  mediump float tmpvar_14;
  tmpvar_14 = tmpvar_13.w;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 1.0;
  tmpvar_18.x = tmpvar_14;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = mix (tmpvar_17, tmpvar_20, tmpvar_12.xxx);
  tmpvar_21.w = tmpvar_12.y;
  highp vec2 uv_22;
  uv_22 = ((tmpvar_8 + vec2(1.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_factorTex, uv_22);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_indexTex, uv_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25.w;
  mediump vec2 tmpvar_27;
  tmpvar_27.y = 0.0;
  tmpvar_27.x = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_tableTex, tmpvar_27).xyz;
  mediump vec3 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 1.0;
  tmpvar_30.x = tmpvar_26;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = mix (tmpvar_29, tmpvar_32, tmpvar_24.xxx);
  tmpvar_33.w = tmpvar_24.y;
  highp vec2 uv_34;
  uv_34 = ((tmpvar_8 + vec2(0.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_factorTex, uv_34);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_indexTex, uv_34);
  mediump float tmpvar_38;
  tmpvar_38 = tmpvar_37.w;
  mediump vec2 tmpvar_39;
  tmpvar_39.y = 0.0;
  tmpvar_39.x = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_tableTex, tmpvar_39).xyz;
  mediump vec3 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 1.0;
  tmpvar_42.x = tmpvar_38;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = mix (tmpvar_41, tmpvar_44, tmpvar_36.xxx);
  tmpvar_45.w = tmpvar_36.y;
  highp vec2 uv_46;
  uv_46 = ((tmpvar_8 + vec2(1.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_factorTex, uv_46);
  mediump vec4 tmpvar_48;
  tmpvar_48 = tmpvar_47;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_indexTex, uv_46);
  mediump float tmpvar_50;
  tmpvar_50 = tmpvar_49.w;
  mediump vec2 tmpvar_51;
  tmpvar_51.y = 0.0;
  tmpvar_51.x = tmpvar_50;
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_tableTex, tmpvar_51).xyz;
  mediump vec3 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 1.0;
  tmpvar_54.x = tmpvar_50;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = mix (tmpvar_53, tmpvar_56, tmpvar_48.xxx);
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58 = mix (mix (tmpvar_21, tmpvar_33, tmpvar_9.xxxx), mix (tmpvar_45, tmpvar_57, tmpvar_9.xxxx), tmpvar_9.yyyy);
  tmpvar_5 = tmpvar_58;
  mediump float x_59;
  x_59 = (tmpvar_5.w - _AlphaClipThreshold);
  if ((x_59 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_5.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_5.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_61 * _Color.xyz) * _EnvColor.xyz) + color_65);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_5.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_70;
    scrpos_70 = xlv_TEXCOORD3;
    mediump float a_71;
    a_71 = xlv_TEXCOORD3.z;
    if ((a_71 < 0.95)) {
      scrpos_70.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_71 = (a_71 * 17.0);
      highp float tmpvar_72;
      tmpvar_72 = (scrpos_70.y / 4.0);
      highp float tmpvar_73;
      tmpvar_73 = (fract(abs(tmpvar_72)) * 4.0);
      highp float tmpvar_74;
      if ((tmpvar_72 >= 0.0)) {
        tmpvar_74 = tmpvar_73;
      } else {
        tmpvar_74 = -(tmpvar_73);
      };
      highp float tmpvar_75;
      tmpvar_75 = (scrpos_70.x / 4.0);
      highp float tmpvar_76;
      tmpvar_76 = (fract(abs(tmpvar_75)) * 4.0);
      highp float tmpvar_77;
      if ((tmpvar_75 >= 0.0)) {
        tmpvar_77 = tmpvar_76;
      } else {
        tmpvar_77 = -(tmpvar_76);
      };
      highp float x_78;
      x_78 = ((a_71 - _DITHERMATRIX[
        int(tmpvar_74)
      ][
        int(tmpvar_77)
      ]) - 0.01);
      if ((x_78 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_5;
  highp vec2 pixelSize_6;
  pixelSize_6 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8 = floor(tmpvar_7);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract(tmpvar_7);
  highp vec2 uv_10;
  uv_10 = ((tmpvar_8 + vec2(0.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_factorTex, uv_10);
  mediump vec4 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_indexTex, uv_10);
  mediump float tmpvar_14;
  tmpvar_14 = tmpvar_13.w;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 1.0;
  tmpvar_18.x = tmpvar_14;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = mix (tmpvar_17, tmpvar_20, tmpvar_12.xxx);
  tmpvar_21.w = tmpvar_12.y;
  highp vec2 uv_22;
  uv_22 = ((tmpvar_8 + vec2(1.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_factorTex, uv_22);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_indexTex, uv_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25.w;
  mediump vec2 tmpvar_27;
  tmpvar_27.y = 0.0;
  tmpvar_27.x = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_tableTex, tmpvar_27).xyz;
  mediump vec3 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 1.0;
  tmpvar_30.x = tmpvar_26;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = mix (tmpvar_29, tmpvar_32, tmpvar_24.xxx);
  tmpvar_33.w = tmpvar_24.y;
  highp vec2 uv_34;
  uv_34 = ((tmpvar_8 + vec2(0.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_factorTex, uv_34);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_indexTex, uv_34);
  mediump float tmpvar_38;
  tmpvar_38 = tmpvar_37.w;
  mediump vec2 tmpvar_39;
  tmpvar_39.y = 0.0;
  tmpvar_39.x = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_tableTex, tmpvar_39).xyz;
  mediump vec3 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 1.0;
  tmpvar_42.x = tmpvar_38;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = mix (tmpvar_41, tmpvar_44, tmpvar_36.xxx);
  tmpvar_45.w = tmpvar_36.y;
  highp vec2 uv_46;
  uv_46 = ((tmpvar_8 + vec2(1.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_factorTex, uv_46);
  mediump vec4 tmpvar_48;
  tmpvar_48 = tmpvar_47;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_indexTex, uv_46);
  mediump float tmpvar_50;
  tmpvar_50 = tmpvar_49.w;
  mediump vec2 tmpvar_51;
  tmpvar_51.y = 0.0;
  tmpvar_51.x = tmpvar_50;
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_tableTex, tmpvar_51).xyz;
  mediump vec3 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 1.0;
  tmpvar_54.x = tmpvar_50;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = mix (tmpvar_53, tmpvar_56, tmpvar_48.xxx);
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58 = mix (mix (tmpvar_21, tmpvar_33, tmpvar_9.xxxx), mix (tmpvar_45, tmpvar_57, tmpvar_9.xxxx), tmpvar_9.yyyy);
  tmpvar_5 = tmpvar_58;
  mediump float x_59;
  x_59 = (tmpvar_5.w - _AlphaClipThreshold);
  if ((x_59 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_5.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_5.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_61 * _Color.xyz) * _EnvColor.xyz) + color_65);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_5.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_70;
    scrpos_70 = xlv_TEXCOORD3;
    mediump float a_71;
    a_71 = xlv_TEXCOORD3.z;
    if ((a_71 < 0.95)) {
      scrpos_70.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_71 = (a_71 * 17.0);
      highp float tmpvar_72;
      tmpvar_72 = (scrpos_70.y / 4.0);
      highp float tmpvar_73;
      tmpvar_73 = (fract(abs(tmpvar_72)) * 4.0);
      highp float tmpvar_74;
      if ((tmpvar_72 >= 0.0)) {
        tmpvar_74 = tmpvar_73;
      } else {
        tmpvar_74 = -(tmpvar_73);
      };
      highp float tmpvar_75;
      tmpvar_75 = (scrpos_70.x / 4.0);
      highp float tmpvar_76;
      tmpvar_76 = (fract(abs(tmpvar_75)) * 4.0);
      highp float tmpvar_77;
      if ((tmpvar_75 >= 0.0)) {
        tmpvar_77 = tmpvar_76;
      } else {
        tmpvar_77 = -(tmpvar_76);
      };
      highp float x_78;
      x_78 = ((a_71 - _DITHERMATRIX[
        int(tmpvar_74)
      ][
        int(tmpvar_77)
      ]) - 0.01);
      if ((x_78 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_5;
  highp vec2 pixelSize_6;
  pixelSize_6 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8 = floor(tmpvar_7);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract(tmpvar_7);
  highp vec2 uv_10;
  uv_10 = ((tmpvar_8 + vec2(0.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_factorTex, uv_10);
  mediump vec4 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_indexTex, uv_10);
  mediump float tmpvar_14;
  tmpvar_14 = tmpvar_13.w;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 1.0;
  tmpvar_18.x = tmpvar_14;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = mix (tmpvar_17, tmpvar_20, tmpvar_12.xxx);
  tmpvar_21.w = tmpvar_12.y;
  highp vec2 uv_22;
  uv_22 = ((tmpvar_8 + vec2(1.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_factorTex, uv_22);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_indexTex, uv_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25.w;
  mediump vec2 tmpvar_27;
  tmpvar_27.y = 0.0;
  tmpvar_27.x = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_tableTex, tmpvar_27).xyz;
  mediump vec3 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 1.0;
  tmpvar_30.x = tmpvar_26;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = mix (tmpvar_29, tmpvar_32, tmpvar_24.xxx);
  tmpvar_33.w = tmpvar_24.y;
  highp vec2 uv_34;
  uv_34 = ((tmpvar_8 + vec2(0.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_factorTex, uv_34);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_indexTex, uv_34);
  mediump float tmpvar_38;
  tmpvar_38 = tmpvar_37.w;
  mediump vec2 tmpvar_39;
  tmpvar_39.y = 0.0;
  tmpvar_39.x = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_tableTex, tmpvar_39).xyz;
  mediump vec3 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 1.0;
  tmpvar_42.x = tmpvar_38;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = mix (tmpvar_41, tmpvar_44, tmpvar_36.xxx);
  tmpvar_45.w = tmpvar_36.y;
  highp vec2 uv_46;
  uv_46 = ((tmpvar_8 + vec2(1.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_factorTex, uv_46);
  mediump vec4 tmpvar_48;
  tmpvar_48 = tmpvar_47;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_indexTex, uv_46);
  mediump float tmpvar_50;
  tmpvar_50 = tmpvar_49.w;
  mediump vec2 tmpvar_51;
  tmpvar_51.y = 0.0;
  tmpvar_51.x = tmpvar_50;
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_tableTex, tmpvar_51).xyz;
  mediump vec3 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 1.0;
  tmpvar_54.x = tmpvar_50;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = mix (tmpvar_53, tmpvar_56, tmpvar_48.xxx);
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58 = mix (mix (tmpvar_21, tmpvar_33, tmpvar_9.xxxx), mix (tmpvar_45, tmpvar_57, tmpvar_9.xxxx), tmpvar_9.yyyy);
  tmpvar_5 = tmpvar_58;
  mediump float x_59;
  x_59 = (tmpvar_5.w - _AlphaClipThreshold);
  if ((x_59 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_5.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_5.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_61 * _Color.xyz) * _EnvColor.xyz) + color_65);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_5.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_70;
    scrpos_70 = xlv_TEXCOORD3;
    mediump float a_71;
    a_71 = xlv_TEXCOORD3.z;
    if ((a_71 < 0.95)) {
      scrpos_70.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_71 = (a_71 * 17.0);
      highp float tmpvar_72;
      tmpvar_72 = (scrpos_70.y / 4.0);
      highp float tmpvar_73;
      tmpvar_73 = (fract(abs(tmpvar_72)) * 4.0);
      highp float tmpvar_74;
      if ((tmpvar_72 >= 0.0)) {
        tmpvar_74 = tmpvar_73;
      } else {
        tmpvar_74 = -(tmpvar_73);
      };
      highp float tmpvar_75;
      tmpvar_75 = (scrpos_70.x / 4.0);
      highp float tmpvar_76;
      tmpvar_76 = (fract(abs(tmpvar_75)) * 4.0);
      highp float tmpvar_77;
      if ((tmpvar_75 >= 0.0)) {
        tmpvar_77 = tmpvar_76;
      } else {
        tmpvar_77 = -(tmpvar_76);
      };
      highp float x_78;
      x_78 = ((a_71 - _DITHERMATRIX[
        int(tmpvar_74)
      ][
        int(tmpvar_77)
      ]) - 0.01);
      if ((x_78 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_5;
  highp vec2 pixelSize_6;
  pixelSize_6 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8 = floor(tmpvar_7);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract(tmpvar_7);
  highp vec2 uv_10;
  uv_10 = ((tmpvar_8 + vec2(0.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_factorTex, uv_10);
  mediump vec4 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_indexTex, uv_10);
  mediump float tmpvar_14;
  tmpvar_14 = tmpvar_13.w;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 1.0;
  tmpvar_18.x = tmpvar_14;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = mix (tmpvar_17, tmpvar_20, tmpvar_12.xxx);
  tmpvar_21.w = tmpvar_12.y;
  highp vec2 uv_22;
  uv_22 = ((tmpvar_8 + vec2(1.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_factorTex, uv_22);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_indexTex, uv_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25.w;
  mediump vec2 tmpvar_27;
  tmpvar_27.y = 0.0;
  tmpvar_27.x = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_tableTex, tmpvar_27).xyz;
  mediump vec3 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 1.0;
  tmpvar_30.x = tmpvar_26;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = mix (tmpvar_29, tmpvar_32, tmpvar_24.xxx);
  tmpvar_33.w = tmpvar_24.y;
  highp vec2 uv_34;
  uv_34 = ((tmpvar_8 + vec2(0.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_factorTex, uv_34);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_indexTex, uv_34);
  mediump float tmpvar_38;
  tmpvar_38 = tmpvar_37.w;
  mediump vec2 tmpvar_39;
  tmpvar_39.y = 0.0;
  tmpvar_39.x = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_tableTex, tmpvar_39).xyz;
  mediump vec3 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 1.0;
  tmpvar_42.x = tmpvar_38;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = mix (tmpvar_41, tmpvar_44, tmpvar_36.xxx);
  tmpvar_45.w = tmpvar_36.y;
  highp vec2 uv_46;
  uv_46 = ((tmpvar_8 + vec2(1.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_factorTex, uv_46);
  mediump vec4 tmpvar_48;
  tmpvar_48 = tmpvar_47;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_indexTex, uv_46);
  mediump float tmpvar_50;
  tmpvar_50 = tmpvar_49.w;
  mediump vec2 tmpvar_51;
  tmpvar_51.y = 0.0;
  tmpvar_51.x = tmpvar_50;
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_tableTex, tmpvar_51).xyz;
  mediump vec3 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 1.0;
  tmpvar_54.x = tmpvar_50;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = mix (tmpvar_53, tmpvar_56, tmpvar_48.xxx);
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58 = mix (mix (tmpvar_21, tmpvar_33, tmpvar_9.xxxx), mix (tmpvar_45, tmpvar_57, tmpvar_9.xxxx), tmpvar_9.yyyy);
  tmpvar_5 = tmpvar_58;
  mediump float x_59;
  x_59 = (tmpvar_5.w - _AlphaClipThreshold);
  if ((x_59 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_5.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_5.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_61 * _Color.xyz) * _EnvColor.xyz) + color_65);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_5.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_70;
    scrpos_70 = xlv_TEXCOORD3;
    mediump float a_71;
    a_71 = xlv_TEXCOORD3.z;
    if ((a_71 < 0.95)) {
      scrpos_70.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_71 = (a_71 * 17.0);
      highp float tmpvar_72;
      tmpvar_72 = (scrpos_70.y / 4.0);
      highp float tmpvar_73;
      tmpvar_73 = (fract(abs(tmpvar_72)) * 4.0);
      highp float tmpvar_74;
      if ((tmpvar_72 >= 0.0)) {
        tmpvar_74 = tmpvar_73;
      } else {
        tmpvar_74 = -(tmpvar_73);
      };
      highp float tmpvar_75;
      tmpvar_75 = (scrpos_70.x / 4.0);
      highp float tmpvar_76;
      tmpvar_76 = (fract(abs(tmpvar_75)) * 4.0);
      highp float tmpvar_77;
      if ((tmpvar_75 >= 0.0)) {
        tmpvar_77 = tmpvar_76;
      } else {
        tmpvar_77 = -(tmpvar_76);
      };
      highp float x_78;
      x_78 = ((a_71 - _DITHERMATRIX[
        int(tmpvar_74)
      ][
        int(tmpvar_77)
      ]) - 0.01);
      if ((x_78 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_5;
  highp vec2 pixelSize_6;
  pixelSize_6 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8 = floor(tmpvar_7);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract(tmpvar_7);
  highp vec2 uv_10;
  uv_10 = ((tmpvar_8 + vec2(0.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_factorTex, uv_10);
  mediump vec4 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_indexTex, uv_10);
  mediump float tmpvar_14;
  tmpvar_14 = tmpvar_13.w;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 1.0;
  tmpvar_18.x = tmpvar_14;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = mix (tmpvar_17, tmpvar_20, tmpvar_12.xxx);
  tmpvar_21.w = tmpvar_12.y;
  highp vec2 uv_22;
  uv_22 = ((tmpvar_8 + vec2(1.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_factorTex, uv_22);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_indexTex, uv_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25.w;
  mediump vec2 tmpvar_27;
  tmpvar_27.y = 0.0;
  tmpvar_27.x = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_tableTex, tmpvar_27).xyz;
  mediump vec3 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 1.0;
  tmpvar_30.x = tmpvar_26;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = mix (tmpvar_29, tmpvar_32, tmpvar_24.xxx);
  tmpvar_33.w = tmpvar_24.y;
  highp vec2 uv_34;
  uv_34 = ((tmpvar_8 + vec2(0.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_factorTex, uv_34);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_indexTex, uv_34);
  mediump float tmpvar_38;
  tmpvar_38 = tmpvar_37.w;
  mediump vec2 tmpvar_39;
  tmpvar_39.y = 0.0;
  tmpvar_39.x = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_tableTex, tmpvar_39).xyz;
  mediump vec3 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 1.0;
  tmpvar_42.x = tmpvar_38;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = mix (tmpvar_41, tmpvar_44, tmpvar_36.xxx);
  tmpvar_45.w = tmpvar_36.y;
  highp vec2 uv_46;
  uv_46 = ((tmpvar_8 + vec2(1.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_factorTex, uv_46);
  mediump vec4 tmpvar_48;
  tmpvar_48 = tmpvar_47;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_indexTex, uv_46);
  mediump float tmpvar_50;
  tmpvar_50 = tmpvar_49.w;
  mediump vec2 tmpvar_51;
  tmpvar_51.y = 0.0;
  tmpvar_51.x = tmpvar_50;
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_tableTex, tmpvar_51).xyz;
  mediump vec3 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 1.0;
  tmpvar_54.x = tmpvar_50;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = mix (tmpvar_53, tmpvar_56, tmpvar_48.xxx);
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58 = mix (mix (tmpvar_21, tmpvar_33, tmpvar_9.xxxx), mix (tmpvar_45, tmpvar_57, tmpvar_9.xxxx), tmpvar_9.yyyy);
  tmpvar_5 = tmpvar_58;
  mediump float x_59;
  x_59 = (tmpvar_5.w - _AlphaClipThreshold);
  if ((x_59 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_5.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_5.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_61 * _Color.xyz) * _EnvColor.xyz) + color_65);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_5.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_70;
    scrpos_70 = xlv_TEXCOORD3;
    mediump float a_71;
    a_71 = xlv_TEXCOORD3.z;
    if ((a_71 < 0.95)) {
      scrpos_70.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_71 = (a_71 * 17.0);
      highp float tmpvar_72;
      tmpvar_72 = (scrpos_70.y / 4.0);
      highp float tmpvar_73;
      tmpvar_73 = (fract(abs(tmpvar_72)) * 4.0);
      highp float tmpvar_74;
      if ((tmpvar_72 >= 0.0)) {
        tmpvar_74 = tmpvar_73;
      } else {
        tmpvar_74 = -(tmpvar_73);
      };
      highp float tmpvar_75;
      tmpvar_75 = (scrpos_70.x / 4.0);
      highp float tmpvar_76;
      tmpvar_76 = (fract(abs(tmpvar_75)) * 4.0);
      highp float tmpvar_77;
      if ((tmpvar_75 >= 0.0)) {
        tmpvar_77 = tmpvar_76;
      } else {
        tmpvar_77 = -(tmpvar_76);
      };
      highp float x_78;
      x_78 = ((a_71 - _DITHERMATRIX[
        int(tmpvar_74)
      ][
        int(tmpvar_77)
      ]) - 0.01);
      if ((x_78 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_5;
  highp vec2 pixelSize_6;
  pixelSize_6 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8 = floor(tmpvar_7);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract(tmpvar_7);
  highp vec2 uv_10;
  uv_10 = ((tmpvar_8 + vec2(0.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_factorTex, uv_10);
  mediump vec4 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_indexTex, uv_10);
  mediump float tmpvar_14;
  tmpvar_14 = tmpvar_13.w;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 1.0;
  tmpvar_18.x = tmpvar_14;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = mix (tmpvar_17, tmpvar_20, tmpvar_12.xxx);
  tmpvar_21.w = tmpvar_12.y;
  highp vec2 uv_22;
  uv_22 = ((tmpvar_8 + vec2(1.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_factorTex, uv_22);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_indexTex, uv_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25.w;
  mediump vec2 tmpvar_27;
  tmpvar_27.y = 0.0;
  tmpvar_27.x = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_tableTex, tmpvar_27).xyz;
  mediump vec3 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 1.0;
  tmpvar_30.x = tmpvar_26;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = mix (tmpvar_29, tmpvar_32, tmpvar_24.xxx);
  tmpvar_33.w = tmpvar_24.y;
  highp vec2 uv_34;
  uv_34 = ((tmpvar_8 + vec2(0.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_factorTex, uv_34);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_indexTex, uv_34);
  mediump float tmpvar_38;
  tmpvar_38 = tmpvar_37.w;
  mediump vec2 tmpvar_39;
  tmpvar_39.y = 0.0;
  tmpvar_39.x = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_tableTex, tmpvar_39).xyz;
  mediump vec3 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 1.0;
  tmpvar_42.x = tmpvar_38;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = mix (tmpvar_41, tmpvar_44, tmpvar_36.xxx);
  tmpvar_45.w = tmpvar_36.y;
  highp vec2 uv_46;
  uv_46 = ((tmpvar_8 + vec2(1.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_factorTex, uv_46);
  mediump vec4 tmpvar_48;
  tmpvar_48 = tmpvar_47;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_indexTex, uv_46);
  mediump float tmpvar_50;
  tmpvar_50 = tmpvar_49.w;
  mediump vec2 tmpvar_51;
  tmpvar_51.y = 0.0;
  tmpvar_51.x = tmpvar_50;
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_tableTex, tmpvar_51).xyz;
  mediump vec3 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 1.0;
  tmpvar_54.x = tmpvar_50;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = mix (tmpvar_53, tmpvar_56, tmpvar_48.xxx);
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58 = mix (mix (tmpvar_21, tmpvar_33, tmpvar_9.xxxx), mix (tmpvar_45, tmpvar_57, tmpvar_9.xxxx), tmpvar_9.yyyy);
  tmpvar_5 = tmpvar_58;
  mediump float x_59;
  x_59 = (tmpvar_5.w - _AlphaClipThreshold);
  if ((x_59 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_5.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_5.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_61 * _Color.xyz) * _EnvColor.xyz) + color_65);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_5.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_70;
    scrpos_70 = xlv_TEXCOORD3;
    mediump float a_71;
    a_71 = xlv_TEXCOORD3.z;
    if ((a_71 < 0.95)) {
      scrpos_70.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_71 = (a_71 * 17.0);
      highp float tmpvar_72;
      tmpvar_72 = (scrpos_70.y / 4.0);
      highp float tmpvar_73;
      tmpvar_73 = (fract(abs(tmpvar_72)) * 4.0);
      highp float tmpvar_74;
      if ((tmpvar_72 >= 0.0)) {
        tmpvar_74 = tmpvar_73;
      } else {
        tmpvar_74 = -(tmpvar_73);
      };
      highp float tmpvar_75;
      tmpvar_75 = (scrpos_70.x / 4.0);
      highp float tmpvar_76;
      tmpvar_76 = (fract(abs(tmpvar_75)) * 4.0);
      highp float tmpvar_77;
      if ((tmpvar_75 >= 0.0)) {
        tmpvar_77 = tmpvar_76;
      } else {
        tmpvar_77 = -(tmpvar_76);
      };
      highp float x_78;
      x_78 = ((a_71 - _DITHERMATRIX[
        int(tmpvar_74)
      ][
        int(tmpvar_77)
      ]) - 0.01);
      if ((x_78 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_5;
  highp vec2 pixelSize_6;
  pixelSize_6 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8 = floor(tmpvar_7);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract(tmpvar_7);
  highp vec2 uv_10;
  uv_10 = ((tmpvar_8 + vec2(0.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_factorTex, uv_10);
  mediump vec4 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_indexTex, uv_10);
  mediump float tmpvar_14;
  tmpvar_14 = tmpvar_13.w;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 1.0;
  tmpvar_18.x = tmpvar_14;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = mix (tmpvar_17, tmpvar_20, tmpvar_12.xxx);
  tmpvar_21.w = tmpvar_12.y;
  highp vec2 uv_22;
  uv_22 = ((tmpvar_8 + vec2(1.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_factorTex, uv_22);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_indexTex, uv_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25.w;
  mediump vec2 tmpvar_27;
  tmpvar_27.y = 0.0;
  tmpvar_27.x = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_tableTex, tmpvar_27).xyz;
  mediump vec3 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 1.0;
  tmpvar_30.x = tmpvar_26;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = mix (tmpvar_29, tmpvar_32, tmpvar_24.xxx);
  tmpvar_33.w = tmpvar_24.y;
  highp vec2 uv_34;
  uv_34 = ((tmpvar_8 + vec2(0.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_factorTex, uv_34);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_indexTex, uv_34);
  mediump float tmpvar_38;
  tmpvar_38 = tmpvar_37.w;
  mediump vec2 tmpvar_39;
  tmpvar_39.y = 0.0;
  tmpvar_39.x = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_tableTex, tmpvar_39).xyz;
  mediump vec3 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 1.0;
  tmpvar_42.x = tmpvar_38;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = mix (tmpvar_41, tmpvar_44, tmpvar_36.xxx);
  tmpvar_45.w = tmpvar_36.y;
  highp vec2 uv_46;
  uv_46 = ((tmpvar_8 + vec2(1.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_factorTex, uv_46);
  mediump vec4 tmpvar_48;
  tmpvar_48 = tmpvar_47;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_indexTex, uv_46);
  mediump float tmpvar_50;
  tmpvar_50 = tmpvar_49.w;
  mediump vec2 tmpvar_51;
  tmpvar_51.y = 0.0;
  tmpvar_51.x = tmpvar_50;
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_tableTex, tmpvar_51).xyz;
  mediump vec3 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 1.0;
  tmpvar_54.x = tmpvar_50;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = mix (tmpvar_53, tmpvar_56, tmpvar_48.xxx);
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58 = mix (mix (tmpvar_21, tmpvar_33, tmpvar_9.xxxx), mix (tmpvar_45, tmpvar_57, tmpvar_9.xxxx), tmpvar_9.yyyy);
  tmpvar_5 = tmpvar_58;
  mediump float x_59;
  x_59 = (tmpvar_5.w - _AlphaClipThreshold);
  if ((x_59 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_5.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_5.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_61 * _Color.xyz) * _EnvColor.xyz) + color_65);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_5.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_70;
    scrpos_70 = xlv_TEXCOORD3;
    mediump float a_71;
    a_71 = xlv_TEXCOORD3.z;
    if ((a_71 < 0.95)) {
      scrpos_70.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_71 = (a_71 * 17.0);
      highp float tmpvar_72;
      tmpvar_72 = (scrpos_70.y / 4.0);
      highp float tmpvar_73;
      tmpvar_73 = (fract(abs(tmpvar_72)) * 4.0);
      highp float tmpvar_74;
      if ((tmpvar_72 >= 0.0)) {
        tmpvar_74 = tmpvar_73;
      } else {
        tmpvar_74 = -(tmpvar_73);
      };
      highp float tmpvar_75;
      tmpvar_75 = (scrpos_70.x / 4.0);
      highp float tmpvar_76;
      tmpvar_76 = (fract(abs(tmpvar_75)) * 4.0);
      highp float tmpvar_77;
      if ((tmpvar_75 >= 0.0)) {
        tmpvar_77 = tmpvar_76;
      } else {
        tmpvar_77 = -(tmpvar_76);
      };
      highp float x_78;
      x_78 = ((a_71 - _DITHERMATRIX[
        int(tmpvar_74)
      ][
        int(tmpvar_77)
      ]) - 0.01);
      if ((x_78 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_5;
  highp vec2 pixelSize_6;
  pixelSize_6 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8 = floor(tmpvar_7);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract(tmpvar_7);
  highp vec2 uv_10;
  uv_10 = ((tmpvar_8 + vec2(0.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_factorTex, uv_10);
  mediump vec4 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_indexTex, uv_10);
  mediump float tmpvar_14;
  tmpvar_14 = tmpvar_13.w;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 1.0;
  tmpvar_18.x = tmpvar_14;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = mix (tmpvar_17, tmpvar_20, tmpvar_12.xxx);
  tmpvar_21.w = tmpvar_12.y;
  highp vec2 uv_22;
  uv_22 = ((tmpvar_8 + vec2(1.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_factorTex, uv_22);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_indexTex, uv_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25.w;
  mediump vec2 tmpvar_27;
  tmpvar_27.y = 0.0;
  tmpvar_27.x = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_tableTex, tmpvar_27).xyz;
  mediump vec3 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 1.0;
  tmpvar_30.x = tmpvar_26;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = mix (tmpvar_29, tmpvar_32, tmpvar_24.xxx);
  tmpvar_33.w = tmpvar_24.y;
  highp vec2 uv_34;
  uv_34 = ((tmpvar_8 + vec2(0.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_factorTex, uv_34);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_indexTex, uv_34);
  mediump float tmpvar_38;
  tmpvar_38 = tmpvar_37.w;
  mediump vec2 tmpvar_39;
  tmpvar_39.y = 0.0;
  tmpvar_39.x = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_tableTex, tmpvar_39).xyz;
  mediump vec3 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 1.0;
  tmpvar_42.x = tmpvar_38;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = mix (tmpvar_41, tmpvar_44, tmpvar_36.xxx);
  tmpvar_45.w = tmpvar_36.y;
  highp vec2 uv_46;
  uv_46 = ((tmpvar_8 + vec2(1.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_factorTex, uv_46);
  mediump vec4 tmpvar_48;
  tmpvar_48 = tmpvar_47;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_indexTex, uv_46);
  mediump float tmpvar_50;
  tmpvar_50 = tmpvar_49.w;
  mediump vec2 tmpvar_51;
  tmpvar_51.y = 0.0;
  tmpvar_51.x = tmpvar_50;
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_tableTex, tmpvar_51).xyz;
  mediump vec3 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 1.0;
  tmpvar_54.x = tmpvar_50;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = mix (tmpvar_53, tmpvar_56, tmpvar_48.xxx);
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58 = mix (mix (tmpvar_21, tmpvar_33, tmpvar_9.xxxx), mix (tmpvar_45, tmpvar_57, tmpvar_9.xxxx), tmpvar_9.yyyy);
  tmpvar_5 = tmpvar_58;
  mediump float x_59;
  x_59 = (tmpvar_5.w - _AlphaClipThreshold);
  if ((x_59 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_5.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_5.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_61 * _Color.xyz) * _EnvColor.xyz) + color_65);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_5.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_70;
    scrpos_70 = xlv_TEXCOORD3;
    mediump float a_71;
    a_71 = xlv_TEXCOORD3.z;
    if ((a_71 < 0.95)) {
      scrpos_70.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_71 = (a_71 * 17.0);
      highp float tmpvar_72;
      tmpvar_72 = (scrpos_70.y / 4.0);
      highp float tmpvar_73;
      tmpvar_73 = (fract(abs(tmpvar_72)) * 4.0);
      highp float tmpvar_74;
      if ((tmpvar_72 >= 0.0)) {
        tmpvar_74 = tmpvar_73;
      } else {
        tmpvar_74 = -(tmpvar_73);
      };
      highp float tmpvar_75;
      tmpvar_75 = (scrpos_70.x / 4.0);
      highp float tmpvar_76;
      tmpvar_76 = (fract(abs(tmpvar_75)) * 4.0);
      highp float tmpvar_77;
      if ((tmpvar_75 >= 0.0)) {
        tmpvar_77 = tmpvar_76;
      } else {
        tmpvar_77 = -(tmpvar_76);
      };
      highp float x_78;
      x_78 = ((a_71 - _DITHERMATRIX[
        int(tmpvar_74)
      ][
        int(tmpvar_77)
      ]) - 0.01);
      if ((x_78 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_5;
  highp vec2 pixelSize_6;
  pixelSize_6 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8 = floor(tmpvar_7);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract(tmpvar_7);
  highp vec2 uv_10;
  uv_10 = ((tmpvar_8 + vec2(0.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_factorTex, uv_10);
  mediump vec4 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_indexTex, uv_10);
  mediump float tmpvar_14;
  tmpvar_14 = tmpvar_13.w;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 1.0;
  tmpvar_18.x = tmpvar_14;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = mix (tmpvar_17, tmpvar_20, tmpvar_12.xxx);
  tmpvar_21.w = tmpvar_12.y;
  highp vec2 uv_22;
  uv_22 = ((tmpvar_8 + vec2(1.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_factorTex, uv_22);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_indexTex, uv_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25.w;
  mediump vec2 tmpvar_27;
  tmpvar_27.y = 0.0;
  tmpvar_27.x = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_tableTex, tmpvar_27).xyz;
  mediump vec3 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 1.0;
  tmpvar_30.x = tmpvar_26;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = mix (tmpvar_29, tmpvar_32, tmpvar_24.xxx);
  tmpvar_33.w = tmpvar_24.y;
  highp vec2 uv_34;
  uv_34 = ((tmpvar_8 + vec2(0.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_factorTex, uv_34);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_indexTex, uv_34);
  mediump float tmpvar_38;
  tmpvar_38 = tmpvar_37.w;
  mediump vec2 tmpvar_39;
  tmpvar_39.y = 0.0;
  tmpvar_39.x = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_tableTex, tmpvar_39).xyz;
  mediump vec3 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 1.0;
  tmpvar_42.x = tmpvar_38;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = mix (tmpvar_41, tmpvar_44, tmpvar_36.xxx);
  tmpvar_45.w = tmpvar_36.y;
  highp vec2 uv_46;
  uv_46 = ((tmpvar_8 + vec2(1.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_factorTex, uv_46);
  mediump vec4 tmpvar_48;
  tmpvar_48 = tmpvar_47;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_indexTex, uv_46);
  mediump float tmpvar_50;
  tmpvar_50 = tmpvar_49.w;
  mediump vec2 tmpvar_51;
  tmpvar_51.y = 0.0;
  tmpvar_51.x = tmpvar_50;
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_tableTex, tmpvar_51).xyz;
  mediump vec3 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 1.0;
  tmpvar_54.x = tmpvar_50;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = mix (tmpvar_53, tmpvar_56, tmpvar_48.xxx);
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58 = mix (mix (tmpvar_21, tmpvar_33, tmpvar_9.xxxx), mix (tmpvar_45, tmpvar_57, tmpvar_9.xxxx), tmpvar_9.yyyy);
  tmpvar_5 = tmpvar_58;
  mediump float x_59;
  x_59 = (tmpvar_5.w - _AlphaClipThreshold);
  if ((x_59 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_5.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_5.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_61 * _Color.xyz) * _EnvColor.xyz) + color_65);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_5.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_70;
    scrpos_70 = xlv_TEXCOORD3;
    mediump float a_71;
    a_71 = xlv_TEXCOORD3.z;
    if ((a_71 < 0.95)) {
      scrpos_70.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_71 = (a_71 * 17.0);
      highp float tmpvar_72;
      tmpvar_72 = (scrpos_70.y / 4.0);
      highp float tmpvar_73;
      tmpvar_73 = (fract(abs(tmpvar_72)) * 4.0);
      highp float tmpvar_74;
      if ((tmpvar_72 >= 0.0)) {
        tmpvar_74 = tmpvar_73;
      } else {
        tmpvar_74 = -(tmpvar_73);
      };
      highp float tmpvar_75;
      tmpvar_75 = (scrpos_70.x / 4.0);
      highp float tmpvar_76;
      tmpvar_76 = (fract(abs(tmpvar_75)) * 4.0);
      highp float tmpvar_77;
      if ((tmpvar_75 >= 0.0)) {
        tmpvar_77 = tmpvar_76;
      } else {
        tmpvar_77 = -(tmpvar_76);
      };
      highp float x_78;
      x_78 = ((a_71 - _DITHERMATRIX[
        int(tmpvar_74)
      ][
        int(tmpvar_77)
      ]) - 0.01);
      if ((x_78 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 tmpvar_18;
  highp vec3 N_19;
  N_19 = N_3;
  highp vec3 V_20;
  V_20 = V_2;
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = pow (clamp ((1.001 - 
    dot (V_20, N_19)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_21 = (_RGBias + (tmpvar_22 * _RGScale));
  mediump vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_21 * _RGColor).xyz;
  mediump float tmpvar_24;
  tmpvar_24 = clamp (tmpvar_21, 0.0, 1.0);
  highp vec3 tmpvar_25;
  tmpvar_25 = mix (outColor_5.xyz, tmpvar_23, vec3((tmpvar_24 * _RGRatio)));
  tmpvar_18 = tmpvar_25;
  outColor_5.xyz = tmpvar_18;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_26;
    scrpos_26 = xlv_TEXCOORD3;
    mediump float a_27;
    a_27 = xlv_TEXCOORD3.z;
    if ((a_27 < 0.95)) {
      scrpos_26.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_27 = (a_27 * 17.0);
      highp float tmpvar_28;
      tmpvar_28 = (scrpos_26.y / 4.0);
      highp float tmpvar_29;
      tmpvar_29 = (fract(abs(tmpvar_28)) * 4.0);
      highp float tmpvar_30;
      if ((tmpvar_28 >= 0.0)) {
        tmpvar_30 = tmpvar_29;
      } else {
        tmpvar_30 = -(tmpvar_29);
      };
      highp float tmpvar_31;
      tmpvar_31 = (scrpos_26.x / 4.0);
      highp float tmpvar_32;
      tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
      highp float tmpvar_33;
      if ((tmpvar_31 >= 0.0)) {
        tmpvar_33 = tmpvar_32;
      } else {
        tmpvar_33 = -(tmpvar_32);
      };
      highp float x_34;
      x_34 = ((a_27 - _DITHERMATRIX[
        int(tmpvar_30)
      ][
        int(tmpvar_33)
      ]) - 0.01);
      if ((x_34 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 tmpvar_18;
  highp vec3 N_19;
  N_19 = N_3;
  highp vec3 V_20;
  V_20 = V_2;
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = pow (clamp ((1.001 - 
    dot (V_20, N_19)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_21 = (_RGBias + (tmpvar_22 * _RGScale));
  mediump vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_21 * _RGColor).xyz;
  mediump float tmpvar_24;
  tmpvar_24 = clamp (tmpvar_21, 0.0, 1.0);
  highp vec3 tmpvar_25;
  tmpvar_25 = mix (outColor_5.xyz, tmpvar_23, vec3((tmpvar_24 * _RGRatio)));
  tmpvar_18 = tmpvar_25;
  outColor_5.xyz = tmpvar_18;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_26;
    scrpos_26 = xlv_TEXCOORD3;
    mediump float a_27;
    a_27 = xlv_TEXCOORD3.z;
    if ((a_27 < 0.95)) {
      scrpos_26.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_27 = (a_27 * 17.0);
      highp float tmpvar_28;
      tmpvar_28 = (scrpos_26.y / 4.0);
      highp float tmpvar_29;
      tmpvar_29 = (fract(abs(tmpvar_28)) * 4.0);
      highp float tmpvar_30;
      if ((tmpvar_28 >= 0.0)) {
        tmpvar_30 = tmpvar_29;
      } else {
        tmpvar_30 = -(tmpvar_29);
      };
      highp float tmpvar_31;
      tmpvar_31 = (scrpos_26.x / 4.0);
      highp float tmpvar_32;
      tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
      highp float tmpvar_33;
      if ((tmpvar_31 >= 0.0)) {
        tmpvar_33 = tmpvar_32;
      } else {
        tmpvar_33 = -(tmpvar_32);
      };
      highp float x_34;
      x_34 = ((a_27 - _DITHERMATRIX[
        int(tmpvar_30)
      ][
        int(tmpvar_33)
      ]) - 0.01);
      if ((x_34 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 tmpvar_18;
  highp vec3 N_19;
  N_19 = N_3;
  highp vec3 V_20;
  V_20 = V_2;
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = pow (clamp ((1.001 - 
    dot (V_20, N_19)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_21 = (_RGBias + (tmpvar_22 * _RGScale));
  mediump vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_21 * _RGColor).xyz;
  mediump float tmpvar_24;
  tmpvar_24 = clamp (tmpvar_21, 0.0, 1.0);
  highp vec3 tmpvar_25;
  tmpvar_25 = mix (outColor_5.xyz, tmpvar_23, vec3((tmpvar_24 * _RGRatio)));
  tmpvar_18 = tmpvar_25;
  outColor_5.xyz = tmpvar_18;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_26;
    scrpos_26 = xlv_TEXCOORD3;
    mediump float a_27;
    a_27 = xlv_TEXCOORD3.z;
    if ((a_27 < 0.95)) {
      scrpos_26.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_27 = (a_27 * 17.0);
      highp float tmpvar_28;
      tmpvar_28 = (scrpos_26.y / 4.0);
      highp float tmpvar_29;
      tmpvar_29 = (fract(abs(tmpvar_28)) * 4.0);
      highp float tmpvar_30;
      if ((tmpvar_28 >= 0.0)) {
        tmpvar_30 = tmpvar_29;
      } else {
        tmpvar_30 = -(tmpvar_29);
      };
      highp float tmpvar_31;
      tmpvar_31 = (scrpos_26.x / 4.0);
      highp float tmpvar_32;
      tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
      highp float tmpvar_33;
      if ((tmpvar_31 >= 0.0)) {
        tmpvar_33 = tmpvar_32;
      } else {
        tmpvar_33 = -(tmpvar_32);
      };
      highp float x_34;
      x_34 = ((a_27 - _DITHERMATRIX[
        int(tmpvar_30)
      ][
        int(tmpvar_33)
      ]) - 0.01);
      if ((x_34 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 tmpvar_18;
  highp vec3 N_19;
  N_19 = N_3;
  highp vec3 V_20;
  V_20 = V_2;
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = pow (clamp ((1.001 - 
    dot (V_20, N_19)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_21 = (_RGBias + (tmpvar_22 * _RGScale));
  mediump vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_21 * _RGColor).xyz;
  mediump float tmpvar_24;
  tmpvar_24 = clamp (tmpvar_21, 0.0, 1.0);
  highp vec3 tmpvar_25;
  tmpvar_25 = mix (outColor_5.xyz, tmpvar_23, vec3((tmpvar_24 * _RGRatio)));
  tmpvar_18 = tmpvar_25;
  outColor_5.xyz = tmpvar_18;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_26;
    scrpos_26 = xlv_TEXCOORD3;
    mediump float a_27;
    a_27 = xlv_TEXCOORD3.z;
    if ((a_27 < 0.95)) {
      scrpos_26.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_27 = (a_27 * 17.0);
      highp float tmpvar_28;
      tmpvar_28 = (scrpos_26.y / 4.0);
      highp float tmpvar_29;
      tmpvar_29 = (fract(abs(tmpvar_28)) * 4.0);
      highp float tmpvar_30;
      if ((tmpvar_28 >= 0.0)) {
        tmpvar_30 = tmpvar_29;
      } else {
        tmpvar_30 = -(tmpvar_29);
      };
      highp float tmpvar_31;
      tmpvar_31 = (scrpos_26.x / 4.0);
      highp float tmpvar_32;
      tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
      highp float tmpvar_33;
      if ((tmpvar_31 >= 0.0)) {
        tmpvar_33 = tmpvar_32;
      } else {
        tmpvar_33 = -(tmpvar_32);
      };
      highp float x_34;
      x_34 = ((a_27 - _DITHERMATRIX[
        int(tmpvar_30)
      ][
        int(tmpvar_33)
      ]) - 0.01);
      if ((x_34 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 tmpvar_18;
  highp vec3 N_19;
  N_19 = N_3;
  highp vec3 V_20;
  V_20 = V_2;
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = pow (clamp ((1.001 - 
    dot (V_20, N_19)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_21 = (_RGBias + (tmpvar_22 * _RGScale));
  mediump vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_21 * _RGColor).xyz;
  mediump float tmpvar_24;
  tmpvar_24 = clamp (tmpvar_21, 0.0, 1.0);
  highp vec3 tmpvar_25;
  tmpvar_25 = mix (outColor_5.xyz, tmpvar_23, vec3((tmpvar_24 * _RGRatio)));
  tmpvar_18 = tmpvar_25;
  outColor_5.xyz = tmpvar_18;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_26;
    scrpos_26 = xlv_TEXCOORD3;
    mediump float a_27;
    a_27 = xlv_TEXCOORD3.z;
    if ((a_27 < 0.95)) {
      scrpos_26.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_27 = (a_27 * 17.0);
      highp float tmpvar_28;
      tmpvar_28 = (scrpos_26.y / 4.0);
      highp float tmpvar_29;
      tmpvar_29 = (fract(abs(tmpvar_28)) * 4.0);
      highp float tmpvar_30;
      if ((tmpvar_28 >= 0.0)) {
        tmpvar_30 = tmpvar_29;
      } else {
        tmpvar_30 = -(tmpvar_29);
      };
      highp float tmpvar_31;
      tmpvar_31 = (scrpos_26.x / 4.0);
      highp float tmpvar_32;
      tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
      highp float tmpvar_33;
      if ((tmpvar_31 >= 0.0)) {
        tmpvar_33 = tmpvar_32;
      } else {
        tmpvar_33 = -(tmpvar_32);
      };
      highp float x_34;
      x_34 = ((a_27 - _DITHERMATRIX[
        int(tmpvar_30)
      ][
        int(tmpvar_33)
      ]) - 0.01);
      if ((x_34 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 tmpvar_18;
  highp vec3 N_19;
  N_19 = N_3;
  highp vec3 V_20;
  V_20 = V_2;
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = pow (clamp ((1.001 - 
    dot (V_20, N_19)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_21 = (_RGBias + (tmpvar_22 * _RGScale));
  mediump vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_21 * _RGColor).xyz;
  mediump float tmpvar_24;
  tmpvar_24 = clamp (tmpvar_21, 0.0, 1.0);
  highp vec3 tmpvar_25;
  tmpvar_25 = mix (outColor_5.xyz, tmpvar_23, vec3((tmpvar_24 * _RGRatio)));
  tmpvar_18 = tmpvar_25;
  outColor_5.xyz = tmpvar_18;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_26;
    scrpos_26 = xlv_TEXCOORD3;
    mediump float a_27;
    a_27 = xlv_TEXCOORD3.z;
    if ((a_27 < 0.95)) {
      scrpos_26.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_27 = (a_27 * 17.0);
      highp float tmpvar_28;
      tmpvar_28 = (scrpos_26.y / 4.0);
      highp float tmpvar_29;
      tmpvar_29 = (fract(abs(tmpvar_28)) * 4.0);
      highp float tmpvar_30;
      if ((tmpvar_28 >= 0.0)) {
        tmpvar_30 = tmpvar_29;
      } else {
        tmpvar_30 = -(tmpvar_29);
      };
      highp float tmpvar_31;
      tmpvar_31 = (scrpos_26.x / 4.0);
      highp float tmpvar_32;
      tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
      highp float tmpvar_33;
      if ((tmpvar_31 >= 0.0)) {
        tmpvar_33 = tmpvar_32;
      } else {
        tmpvar_33 = -(tmpvar_32);
      };
      highp float x_34;
      x_34 = ((a_27 - _DITHERMATRIX[
        int(tmpvar_30)
      ][
        int(tmpvar_33)
      ]) - 0.01);
      if ((x_34 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 tmpvar_18;
  highp vec3 N_19;
  N_19 = N_3;
  highp vec3 V_20;
  V_20 = V_2;
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = pow (clamp ((1.001 - 
    dot (V_20, N_19)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_21 = (_RGBias + (tmpvar_22 * _RGScale));
  mediump vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_21 * _RGColor).xyz;
  mediump float tmpvar_24;
  tmpvar_24 = clamp (tmpvar_21, 0.0, 1.0);
  highp vec3 tmpvar_25;
  tmpvar_25 = mix (outColor_5.xyz, tmpvar_23, vec3((tmpvar_24 * _RGRatio)));
  tmpvar_18 = tmpvar_25;
  outColor_5.xyz = tmpvar_18;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_26;
    scrpos_26 = xlv_TEXCOORD3;
    mediump float a_27;
    a_27 = xlv_TEXCOORD3.z;
    if ((a_27 < 0.95)) {
      scrpos_26.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_27 = (a_27 * 17.0);
      highp float tmpvar_28;
      tmpvar_28 = (scrpos_26.y / 4.0);
      highp float tmpvar_29;
      tmpvar_29 = (fract(abs(tmpvar_28)) * 4.0);
      highp float tmpvar_30;
      if ((tmpvar_28 >= 0.0)) {
        tmpvar_30 = tmpvar_29;
      } else {
        tmpvar_30 = -(tmpvar_29);
      };
      highp float tmpvar_31;
      tmpvar_31 = (scrpos_26.x / 4.0);
      highp float tmpvar_32;
      tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
      highp float tmpvar_33;
      if ((tmpvar_31 >= 0.0)) {
        tmpvar_33 = tmpvar_32;
      } else {
        tmpvar_33 = -(tmpvar_32);
      };
      highp float x_34;
      x_34 = ((a_27 - _DITHERMATRIX[
        int(tmpvar_30)
      ][
        int(tmpvar_33)
      ]) - 0.01);
      if ((x_34 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 tmpvar_18;
  highp vec3 N_19;
  N_19 = N_3;
  highp vec3 V_20;
  V_20 = V_2;
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = pow (clamp ((1.001 - 
    dot (V_20, N_19)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_21 = (_RGBias + (tmpvar_22 * _RGScale));
  mediump vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_21 * _RGColor).xyz;
  mediump float tmpvar_24;
  tmpvar_24 = clamp (tmpvar_21, 0.0, 1.0);
  highp vec3 tmpvar_25;
  tmpvar_25 = mix (outColor_5.xyz, tmpvar_23, vec3((tmpvar_24 * _RGRatio)));
  tmpvar_18 = tmpvar_25;
  outColor_5.xyz = tmpvar_18;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_26;
    scrpos_26 = xlv_TEXCOORD3;
    mediump float a_27;
    a_27 = xlv_TEXCOORD3.z;
    if ((a_27 < 0.95)) {
      scrpos_26.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_27 = (a_27 * 17.0);
      highp float tmpvar_28;
      tmpvar_28 = (scrpos_26.y / 4.0);
      highp float tmpvar_29;
      tmpvar_29 = (fract(abs(tmpvar_28)) * 4.0);
      highp float tmpvar_30;
      if ((tmpvar_28 >= 0.0)) {
        tmpvar_30 = tmpvar_29;
      } else {
        tmpvar_30 = -(tmpvar_29);
      };
      highp float tmpvar_31;
      tmpvar_31 = (scrpos_26.x / 4.0);
      highp float tmpvar_32;
      tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
      highp float tmpvar_33;
      if ((tmpvar_31 >= 0.0)) {
        tmpvar_33 = tmpvar_32;
      } else {
        tmpvar_33 = -(tmpvar_32);
      };
      highp float x_34;
      x_34 = ((a_27 - _DITHERMATRIX[
        int(tmpvar_30)
      ][
        int(tmpvar_33)
      ]) - 0.01);
      if ((x_34 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 tmpvar_18;
  highp vec3 N_19;
  N_19 = N_3;
  highp vec3 V_20;
  V_20 = V_2;
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = pow (clamp ((1.001 - 
    dot (V_20, N_19)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_21 = (_RGBias + (tmpvar_22 * _RGScale));
  mediump vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_21 * _RGColor).xyz;
  mediump float tmpvar_24;
  tmpvar_24 = clamp (tmpvar_21, 0.0, 1.0);
  highp vec3 tmpvar_25;
  tmpvar_25 = mix (outColor_5.xyz, tmpvar_23, vec3((tmpvar_24 * _RGRatio)));
  tmpvar_18 = tmpvar_25;
  outColor_5.xyz = tmpvar_18;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_26;
    scrpos_26 = xlv_TEXCOORD3;
    mediump float a_27;
    a_27 = xlv_TEXCOORD3.z;
    if ((a_27 < 0.95)) {
      scrpos_26.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_27 = (a_27 * 17.0);
      highp float tmpvar_28;
      tmpvar_28 = (scrpos_26.y / 4.0);
      highp float tmpvar_29;
      tmpvar_29 = (fract(abs(tmpvar_28)) * 4.0);
      highp float tmpvar_30;
      if ((tmpvar_28 >= 0.0)) {
        tmpvar_30 = tmpvar_29;
      } else {
        tmpvar_30 = -(tmpvar_29);
      };
      highp float tmpvar_31;
      tmpvar_31 = (scrpos_26.x / 4.0);
      highp float tmpvar_32;
      tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
      highp float tmpvar_33;
      if ((tmpvar_31 >= 0.0)) {
        tmpvar_33 = tmpvar_32;
      } else {
        tmpvar_33 = -(tmpvar_32);
      };
      highp float x_34;
      x_34 = ((a_27 - _DITHERMATRIX[
        int(tmpvar_30)
      ][
        int(tmpvar_33)
      ]) - 0.01);
      if ((x_34 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 tmpvar_18;
  highp vec3 N_19;
  N_19 = N_3;
  highp vec3 V_20;
  V_20 = V_2;
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = pow (clamp ((1.001 - 
    dot (V_20, N_19)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_21 = (_RGBias + (tmpvar_22 * _RGScale));
  mediump vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_21 * _RGColor).xyz;
  mediump float tmpvar_24;
  tmpvar_24 = clamp (tmpvar_21, 0.0, 1.0);
  highp vec3 tmpvar_25;
  tmpvar_25 = mix (outColor_5.xyz, tmpvar_23, vec3((tmpvar_24 * _RGRatio)));
  tmpvar_18 = tmpvar_25;
  outColor_5.xyz = tmpvar_18;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_26;
    scrpos_26 = xlv_TEXCOORD3;
    mediump float a_27;
    a_27 = xlv_TEXCOORD3.z;
    if ((a_27 < 0.95)) {
      scrpos_26.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_27 = (a_27 * 17.0);
      highp float tmpvar_28;
      tmpvar_28 = (scrpos_26.y / 4.0);
      highp float tmpvar_29;
      tmpvar_29 = (fract(abs(tmpvar_28)) * 4.0);
      highp float tmpvar_30;
      if ((tmpvar_28 >= 0.0)) {
        tmpvar_30 = tmpvar_29;
      } else {
        tmpvar_30 = -(tmpvar_29);
      };
      highp float tmpvar_31;
      tmpvar_31 = (scrpos_26.x / 4.0);
      highp float tmpvar_32;
      tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
      highp float tmpvar_33;
      if ((tmpvar_31 >= 0.0)) {
        tmpvar_33 = tmpvar_32;
      } else {
        tmpvar_33 = -(tmpvar_32);
      };
      highp float x_34;
      x_34 = ((a_27 - _DITHERMATRIX[
        int(tmpvar_30)
      ][
        int(tmpvar_33)
      ]) - 0.01);
      if ((x_34 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 tmpvar_18;
  highp vec3 N_19;
  N_19 = N_3;
  highp vec3 V_20;
  V_20 = V_2;
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = pow (clamp ((1.001 - 
    dot (V_20, N_19)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_21 = (_RGBias + (tmpvar_22 * _RGScale));
  mediump vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_21 * _RGColor).xyz;
  mediump float tmpvar_24;
  tmpvar_24 = clamp (tmpvar_21, 0.0, 1.0);
  highp vec3 tmpvar_25;
  tmpvar_25 = mix (outColor_5.xyz, tmpvar_23, vec3((tmpvar_24 * _RGRatio)));
  tmpvar_18 = tmpvar_25;
  outColor_5.xyz = tmpvar_18;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_26;
    scrpos_26 = xlv_TEXCOORD3;
    mediump float a_27;
    a_27 = xlv_TEXCOORD3.z;
    if ((a_27 < 0.95)) {
      scrpos_26.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_27 = (a_27 * 17.0);
      highp float tmpvar_28;
      tmpvar_28 = (scrpos_26.y / 4.0);
      highp float tmpvar_29;
      tmpvar_29 = (fract(abs(tmpvar_28)) * 4.0);
      highp float tmpvar_30;
      if ((tmpvar_28 >= 0.0)) {
        tmpvar_30 = tmpvar_29;
      } else {
        tmpvar_30 = -(tmpvar_29);
      };
      highp float tmpvar_31;
      tmpvar_31 = (scrpos_26.x / 4.0);
      highp float tmpvar_32;
      tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
      highp float tmpvar_33;
      if ((tmpvar_31 >= 0.0)) {
        tmpvar_33 = tmpvar_32;
      } else {
        tmpvar_33 = -(tmpvar_32);
      };
      highp float x_34;
      x_34 = ((a_27 - _DITHERMATRIX[
        int(tmpvar_30)
      ][
        int(tmpvar_33)
      ]) - 0.01);
      if ((x_34 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 tmpvar_18;
  highp vec3 N_19;
  N_19 = N_3;
  highp vec3 V_20;
  V_20 = V_2;
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = pow (clamp ((1.001 - 
    dot (V_20, N_19)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_21 = (_RGBias + (tmpvar_22 * _RGScale));
  mediump vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_21 * _RGColor).xyz;
  mediump float tmpvar_24;
  tmpvar_24 = clamp (tmpvar_21, 0.0, 1.0);
  highp vec3 tmpvar_25;
  tmpvar_25 = mix (outColor_5.xyz, tmpvar_23, vec3((tmpvar_24 * _RGRatio)));
  tmpvar_18 = tmpvar_25;
  outColor_5.xyz = tmpvar_18;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_26;
    scrpos_26 = xlv_TEXCOORD3;
    mediump float a_27;
    a_27 = xlv_TEXCOORD3.z;
    if ((a_27 < 0.95)) {
      scrpos_26.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_27 = (a_27 * 17.0);
      highp float tmpvar_28;
      tmpvar_28 = (scrpos_26.y / 4.0);
      highp float tmpvar_29;
      tmpvar_29 = (fract(abs(tmpvar_28)) * 4.0);
      highp float tmpvar_30;
      if ((tmpvar_28 >= 0.0)) {
        tmpvar_30 = tmpvar_29;
      } else {
        tmpvar_30 = -(tmpvar_29);
      };
      highp float tmpvar_31;
      tmpvar_31 = (scrpos_26.x / 4.0);
      highp float tmpvar_32;
      tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
      highp float tmpvar_33;
      if ((tmpvar_31 >= 0.0)) {
        tmpvar_33 = tmpvar_32;
      } else {
        tmpvar_33 = -(tmpvar_32);
      };
      highp float x_34;
      x_34 = ((a_27 - _DITHERMATRIX[
        int(tmpvar_30)
      ][
        int(tmpvar_33)
      ]) - 0.01);
      if ((x_34 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 tmpvar_18;
  highp vec3 N_19;
  N_19 = N_3;
  highp vec3 V_20;
  V_20 = V_2;
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = pow (clamp ((1.001 - 
    dot (V_20, N_19)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_21 = (_RGBias + (tmpvar_22 * _RGScale));
  mediump vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_21 * _RGColor).xyz;
  mediump float tmpvar_24;
  tmpvar_24 = clamp (tmpvar_21, 0.0, 1.0);
  highp vec3 tmpvar_25;
  tmpvar_25 = mix (outColor_5.xyz, tmpvar_23, vec3((tmpvar_24 * _RGRatio)));
  tmpvar_18 = tmpvar_25;
  outColor_5.xyz = tmpvar_18;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_26;
    scrpos_26 = xlv_TEXCOORD3;
    mediump float a_27;
    a_27 = xlv_TEXCOORD3.z;
    if ((a_27 < 0.95)) {
      scrpos_26.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_27 = (a_27 * 17.0);
      highp float tmpvar_28;
      tmpvar_28 = (scrpos_26.y / 4.0);
      highp float tmpvar_29;
      tmpvar_29 = (fract(abs(tmpvar_28)) * 4.0);
      highp float tmpvar_30;
      if ((tmpvar_28 >= 0.0)) {
        tmpvar_30 = tmpvar_29;
      } else {
        tmpvar_30 = -(tmpvar_29);
      };
      highp float tmpvar_31;
      tmpvar_31 = (scrpos_26.x / 4.0);
      highp float tmpvar_32;
      tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
      highp float tmpvar_33;
      if ((tmpvar_31 >= 0.0)) {
        tmpvar_33 = tmpvar_32;
      } else {
        tmpvar_33 = -(tmpvar_32);
      };
      highp float x_34;
      x_34 = ((a_27 - _DITHERMATRIX[
        int(tmpvar_30)
      ][
        int(tmpvar_33)
      ]) - 0.01);
      if ((x_34 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 tmpvar_18;
  highp vec3 N_19;
  N_19 = N_3;
  highp vec3 V_20;
  V_20 = V_2;
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = pow (clamp ((1.001 - 
    dot (V_20, N_19)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_21 = (_RGBias + (tmpvar_22 * _RGScale));
  mediump vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_21 * _RGColor).xyz;
  mediump float tmpvar_24;
  tmpvar_24 = clamp (tmpvar_21, 0.0, 1.0);
  highp vec3 tmpvar_25;
  tmpvar_25 = mix (outColor_5.xyz, tmpvar_23, vec3((tmpvar_24 * _RGRatio)));
  tmpvar_18 = tmpvar_25;
  outColor_5.xyz = tmpvar_18;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_26;
    scrpos_26 = xlv_TEXCOORD3;
    mediump float a_27;
    a_27 = xlv_TEXCOORD3.z;
    if ((a_27 < 0.95)) {
      scrpos_26.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_27 = (a_27 * 17.0);
      highp float tmpvar_28;
      tmpvar_28 = (scrpos_26.y / 4.0);
      highp float tmpvar_29;
      tmpvar_29 = (fract(abs(tmpvar_28)) * 4.0);
      highp float tmpvar_30;
      if ((tmpvar_28 >= 0.0)) {
        tmpvar_30 = tmpvar_29;
      } else {
        tmpvar_30 = -(tmpvar_29);
      };
      highp float tmpvar_31;
      tmpvar_31 = (scrpos_26.x / 4.0);
      highp float tmpvar_32;
      tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
      highp float tmpvar_33;
      if ((tmpvar_31 >= 0.0)) {
        tmpvar_33 = tmpvar_32;
      } else {
        tmpvar_33 = -(tmpvar_32);
      };
      highp float x_34;
      x_34 = ((a_27 - _DITHERMATRIX[
        int(tmpvar_30)
      ][
        int(tmpvar_33)
      ]) - 0.01);
      if ((x_34 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 tmpvar_18;
  highp vec3 N_19;
  N_19 = N_3;
  highp vec3 V_20;
  V_20 = V_2;
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = pow (clamp ((1.001 - 
    dot (V_20, N_19)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_21 = (_RGBias + (tmpvar_22 * _RGScale));
  mediump vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_21 * _RGColor).xyz;
  mediump float tmpvar_24;
  tmpvar_24 = clamp (tmpvar_21, 0.0, 1.0);
  highp vec3 tmpvar_25;
  tmpvar_25 = mix (outColor_5.xyz, tmpvar_23, vec3((tmpvar_24 * _RGRatio)));
  tmpvar_18 = tmpvar_25;
  outColor_5.xyz = tmpvar_18;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_26;
    scrpos_26 = xlv_TEXCOORD3;
    mediump float a_27;
    a_27 = xlv_TEXCOORD3.z;
    if ((a_27 < 0.95)) {
      scrpos_26.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_27 = (a_27 * 17.0);
      highp float tmpvar_28;
      tmpvar_28 = (scrpos_26.y / 4.0);
      highp float tmpvar_29;
      tmpvar_29 = (fract(abs(tmpvar_28)) * 4.0);
      highp float tmpvar_30;
      if ((tmpvar_28 >= 0.0)) {
        tmpvar_30 = tmpvar_29;
      } else {
        tmpvar_30 = -(tmpvar_29);
      };
      highp float tmpvar_31;
      tmpvar_31 = (scrpos_26.x / 4.0);
      highp float tmpvar_32;
      tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
      highp float tmpvar_33;
      if ((tmpvar_31 >= 0.0)) {
        tmpvar_33 = tmpvar_32;
      } else {
        tmpvar_33 = -(tmpvar_32);
      };
      highp float x_34;
      x_34 = ((a_27 - _DITHERMATRIX[
        int(tmpvar_30)
      ][
        int(tmpvar_33)
      ]) - 0.01);
      if ((x_34 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 tmpvar_18;
  highp vec3 N_19;
  N_19 = N_3;
  highp vec3 V_20;
  V_20 = V_2;
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = pow (clamp ((1.001 - 
    dot (V_20, N_19)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_21 = (_RGBias + (tmpvar_22 * _RGScale));
  mediump vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_21 * _RGColor).xyz;
  mediump float tmpvar_24;
  tmpvar_24 = clamp (tmpvar_21, 0.0, 1.0);
  highp vec3 tmpvar_25;
  tmpvar_25 = mix (outColor_5.xyz, tmpvar_23, vec3((tmpvar_24 * _RGRatio)));
  tmpvar_18 = tmpvar_25;
  outColor_5.xyz = tmpvar_18;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_26;
    scrpos_26 = xlv_TEXCOORD3;
    mediump float a_27;
    a_27 = xlv_TEXCOORD3.z;
    if ((a_27 < 0.95)) {
      scrpos_26.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_27 = (a_27 * 17.0);
      highp float tmpvar_28;
      tmpvar_28 = (scrpos_26.y / 4.0);
      highp float tmpvar_29;
      tmpvar_29 = (fract(abs(tmpvar_28)) * 4.0);
      highp float tmpvar_30;
      if ((tmpvar_28 >= 0.0)) {
        tmpvar_30 = tmpvar_29;
      } else {
        tmpvar_30 = -(tmpvar_29);
      };
      highp float tmpvar_31;
      tmpvar_31 = (scrpos_26.x / 4.0);
      highp float tmpvar_32;
      tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
      highp float tmpvar_33;
      if ((tmpvar_31 >= 0.0)) {
        tmpvar_33 = tmpvar_32;
      } else {
        tmpvar_33 = -(tmpvar_32);
      };
      highp float x_34;
      x_34 = ((a_27 - _DITHERMATRIX[
        int(tmpvar_30)
      ][
        int(tmpvar_33)
      ]) - 0.01);
      if ((x_34 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 tmpvar_18;
  highp vec3 N_19;
  N_19 = N_3;
  highp vec3 V_20;
  V_20 = V_2;
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = pow (clamp ((1.001 - 
    dot (V_20, N_19)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_21 = (_RGBias + (tmpvar_22 * _RGScale));
  mediump vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_21 * _RGColor).xyz;
  mediump float tmpvar_24;
  tmpvar_24 = clamp (tmpvar_21, 0.0, 1.0);
  highp vec3 tmpvar_25;
  tmpvar_25 = mix (outColor_5.xyz, tmpvar_23, vec3((tmpvar_24 * _RGRatio)));
  tmpvar_18 = tmpvar_25;
  outColor_5.xyz = tmpvar_18;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_26;
    scrpos_26 = xlv_TEXCOORD3;
    mediump float a_27;
    a_27 = xlv_TEXCOORD3.z;
    if ((a_27 < 0.95)) {
      scrpos_26.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_27 = (a_27 * 17.0);
      highp float tmpvar_28;
      tmpvar_28 = (scrpos_26.y / 4.0);
      highp float tmpvar_29;
      tmpvar_29 = (fract(abs(tmpvar_28)) * 4.0);
      highp float tmpvar_30;
      if ((tmpvar_28 >= 0.0)) {
        tmpvar_30 = tmpvar_29;
      } else {
        tmpvar_30 = -(tmpvar_29);
      };
      highp float tmpvar_31;
      tmpvar_31 = (scrpos_26.x / 4.0);
      highp float tmpvar_32;
      tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
      highp float tmpvar_33;
      if ((tmpvar_31 >= 0.0)) {
        tmpvar_33 = tmpvar_32;
      } else {
        tmpvar_33 = -(tmpvar_32);
      };
      highp float x_34;
      x_34 = ((a_27 - _DITHERMATRIX[
        int(tmpvar_30)
      ][
        int(tmpvar_33)
      ]) - 0.01);
      if ((x_34 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 tmpvar_18;
  highp vec3 N_19;
  N_19 = N_3;
  highp vec3 V_20;
  V_20 = V_2;
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = pow (clamp ((1.001 - 
    dot (V_20, N_19)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_21 = (_RGBias + (tmpvar_22 * _RGScale));
  mediump vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_21 * _RGColor).xyz;
  mediump float tmpvar_24;
  tmpvar_24 = clamp (tmpvar_21, 0.0, 1.0);
  highp vec3 tmpvar_25;
  tmpvar_25 = mix (outColor_5.xyz, tmpvar_23, vec3((tmpvar_24 * _RGRatio)));
  tmpvar_18 = tmpvar_25;
  outColor_5.xyz = tmpvar_18;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_26;
    scrpos_26 = xlv_TEXCOORD3;
    mediump float a_27;
    a_27 = xlv_TEXCOORD3.z;
    if ((a_27 < 0.95)) {
      scrpos_26.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_27 = (a_27 * 17.0);
      highp float tmpvar_28;
      tmpvar_28 = (scrpos_26.y / 4.0);
      highp float tmpvar_29;
      tmpvar_29 = (fract(abs(tmpvar_28)) * 4.0);
      highp float tmpvar_30;
      if ((tmpvar_28 >= 0.0)) {
        tmpvar_30 = tmpvar_29;
      } else {
        tmpvar_30 = -(tmpvar_29);
      };
      highp float tmpvar_31;
      tmpvar_31 = (scrpos_26.x / 4.0);
      highp float tmpvar_32;
      tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
      highp float tmpvar_33;
      if ((tmpvar_31 >= 0.0)) {
        tmpvar_33 = tmpvar_32;
      } else {
        tmpvar_33 = -(tmpvar_32);
      };
      highp float x_34;
      x_34 = ((a_27 - _DITHERMATRIX[
        int(tmpvar_30)
      ][
        int(tmpvar_33)
      ]) - 0.01);
      if ((x_34 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 tmpvar_18;
  highp vec3 N_19;
  N_19 = N_3;
  highp vec3 V_20;
  V_20 = V_2;
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = pow (clamp ((1.001 - 
    dot (V_20, N_19)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_21 = (_RGBias + (tmpvar_22 * _RGScale));
  mediump vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_21 * _RGColor).xyz;
  mediump float tmpvar_24;
  tmpvar_24 = clamp (tmpvar_21, 0.0, 1.0);
  highp vec3 tmpvar_25;
  tmpvar_25 = mix (outColor_5.xyz, tmpvar_23, vec3((tmpvar_24 * _RGRatio)));
  tmpvar_18 = tmpvar_25;
  outColor_5.xyz = tmpvar_18;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_26;
    scrpos_26 = xlv_TEXCOORD3;
    mediump float a_27;
    a_27 = xlv_TEXCOORD3.z;
    if ((a_27 < 0.95)) {
      scrpos_26.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_27 = (a_27 * 17.0);
      highp float tmpvar_28;
      tmpvar_28 = (scrpos_26.y / 4.0);
      highp float tmpvar_29;
      tmpvar_29 = (fract(abs(tmpvar_28)) * 4.0);
      highp float tmpvar_30;
      if ((tmpvar_28 >= 0.0)) {
        tmpvar_30 = tmpvar_29;
      } else {
        tmpvar_30 = -(tmpvar_29);
      };
      highp float tmpvar_31;
      tmpvar_31 = (scrpos_26.x / 4.0);
      highp float tmpvar_32;
      tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
      highp float tmpvar_33;
      if ((tmpvar_31 >= 0.0)) {
        tmpvar_33 = tmpvar_32;
      } else {
        tmpvar_33 = -(tmpvar_32);
      };
      highp float x_34;
      x_34 = ((a_27 - _DITHERMATRIX[
        int(tmpvar_30)
      ][
        int(tmpvar_33)
      ]) - 0.01);
      if ((x_34 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 tmpvar_18;
  highp vec3 N_19;
  N_19 = N_3;
  highp vec3 V_20;
  V_20 = V_2;
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = pow (clamp ((1.001 - 
    dot (V_20, N_19)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_21 = (_RGBias + (tmpvar_22 * _RGScale));
  mediump vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_21 * _RGColor).xyz;
  mediump float tmpvar_24;
  tmpvar_24 = clamp (tmpvar_21, 0.0, 1.0);
  highp vec3 tmpvar_25;
  tmpvar_25 = mix (outColor_5.xyz, tmpvar_23, vec3((tmpvar_24 * _RGRatio)));
  tmpvar_18 = tmpvar_25;
  outColor_5.xyz = tmpvar_18;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_26;
    scrpos_26 = xlv_TEXCOORD3;
    mediump float a_27;
    a_27 = xlv_TEXCOORD3.z;
    if ((a_27 < 0.95)) {
      scrpos_26.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_27 = (a_27 * 17.0);
      highp float tmpvar_28;
      tmpvar_28 = (scrpos_26.y / 4.0);
      highp float tmpvar_29;
      tmpvar_29 = (fract(abs(tmpvar_28)) * 4.0);
      highp float tmpvar_30;
      if ((tmpvar_28 >= 0.0)) {
        tmpvar_30 = tmpvar_29;
      } else {
        tmpvar_30 = -(tmpvar_29);
      };
      highp float tmpvar_31;
      tmpvar_31 = (scrpos_26.x / 4.0);
      highp float tmpvar_32;
      tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
      highp float tmpvar_33;
      if ((tmpvar_31 >= 0.0)) {
        tmpvar_33 = tmpvar_32;
      } else {
        tmpvar_33 = -(tmpvar_32);
      };
      highp float x_34;
      x_34 = ((a_27 - _DITHERMATRIX[
        int(tmpvar_30)
      ][
        int(tmpvar_33)
      ]) - 0.01);
      if ((x_34 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 tmpvar_18;
  highp vec3 N_19;
  N_19 = N_3;
  highp vec3 V_20;
  V_20 = V_2;
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = pow (clamp ((1.001 - 
    dot (V_20, N_19)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_21 = (_RGBias + (tmpvar_22 * _RGScale));
  mediump vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_21 * _RGColor).xyz;
  mediump float tmpvar_24;
  tmpvar_24 = clamp (tmpvar_21, 0.0, 1.0);
  highp vec3 tmpvar_25;
  tmpvar_25 = mix (outColor_5.xyz, tmpvar_23, vec3((tmpvar_24 * _RGRatio)));
  tmpvar_18 = tmpvar_25;
  outColor_5.xyz = tmpvar_18;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_26;
    scrpos_26 = xlv_TEXCOORD3;
    mediump float a_27;
    a_27 = xlv_TEXCOORD3.z;
    if ((a_27 < 0.95)) {
      scrpos_26.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_27 = (a_27 * 17.0);
      highp float tmpvar_28;
      tmpvar_28 = (scrpos_26.y / 4.0);
      highp float tmpvar_29;
      tmpvar_29 = (fract(abs(tmpvar_28)) * 4.0);
      highp float tmpvar_30;
      if ((tmpvar_28 >= 0.0)) {
        tmpvar_30 = tmpvar_29;
      } else {
        tmpvar_30 = -(tmpvar_29);
      };
      highp float tmpvar_31;
      tmpvar_31 = (scrpos_26.x / 4.0);
      highp float tmpvar_32;
      tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
      highp float tmpvar_33;
      if ((tmpvar_31 >= 0.0)) {
        tmpvar_33 = tmpvar_32;
      } else {
        tmpvar_33 = -(tmpvar_32);
      };
      highp float x_34;
      x_34 = ((a_27 - _DITHERMATRIX[
        int(tmpvar_30)
      ][
        int(tmpvar_33)
      ]) - 0.01);
      if ((x_34 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 tmpvar_18;
  highp vec3 N_19;
  N_19 = N_3;
  highp vec3 V_20;
  V_20 = V_2;
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = pow (clamp ((1.001 - 
    dot (V_20, N_19)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_21 = (_RGBias + (tmpvar_22 * _RGScale));
  mediump vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_21 * _RGColor).xyz;
  mediump float tmpvar_24;
  tmpvar_24 = clamp (tmpvar_21, 0.0, 1.0);
  highp vec3 tmpvar_25;
  tmpvar_25 = mix (outColor_5.xyz, tmpvar_23, vec3((tmpvar_24 * _RGRatio)));
  tmpvar_18 = tmpvar_25;
  outColor_5.xyz = tmpvar_18;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_26;
    scrpos_26 = xlv_TEXCOORD3;
    mediump float a_27;
    a_27 = xlv_TEXCOORD3.z;
    if ((a_27 < 0.95)) {
      scrpos_26.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_27 = (a_27 * 17.0);
      highp float tmpvar_28;
      tmpvar_28 = (scrpos_26.y / 4.0);
      highp float tmpvar_29;
      tmpvar_29 = (fract(abs(tmpvar_28)) * 4.0);
      highp float tmpvar_30;
      if ((tmpvar_28 >= 0.0)) {
        tmpvar_30 = tmpvar_29;
      } else {
        tmpvar_30 = -(tmpvar_29);
      };
      highp float tmpvar_31;
      tmpvar_31 = (scrpos_26.x / 4.0);
      highp float tmpvar_32;
      tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
      highp float tmpvar_33;
      if ((tmpvar_31 >= 0.0)) {
        tmpvar_33 = tmpvar_32;
      } else {
        tmpvar_33 = -(tmpvar_32);
      };
      highp float x_34;
      x_34 = ((a_27 - _DITHERMATRIX[
        int(tmpvar_30)
      ][
        int(tmpvar_33)
      ]) - 0.01);
      if ((x_34 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 tmpvar_18;
  highp vec3 N_19;
  N_19 = N_3;
  highp vec3 V_20;
  V_20 = V_2;
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = pow (clamp ((1.001 - 
    dot (V_20, N_19)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_21 = (_RGBias + (tmpvar_22 * _RGScale));
  mediump vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_21 * _RGColor).xyz;
  mediump float tmpvar_24;
  tmpvar_24 = clamp (tmpvar_21, 0.0, 1.0);
  highp vec3 tmpvar_25;
  tmpvar_25 = mix (outColor_5.xyz, tmpvar_23, vec3((tmpvar_24 * _RGRatio)));
  tmpvar_18 = tmpvar_25;
  outColor_5.xyz = tmpvar_18;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_26;
    scrpos_26 = xlv_TEXCOORD3;
    mediump float a_27;
    a_27 = xlv_TEXCOORD3.z;
    if ((a_27 < 0.95)) {
      scrpos_26.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_27 = (a_27 * 17.0);
      highp float tmpvar_28;
      tmpvar_28 = (scrpos_26.y / 4.0);
      highp float tmpvar_29;
      tmpvar_29 = (fract(abs(tmpvar_28)) * 4.0);
      highp float tmpvar_30;
      if ((tmpvar_28 >= 0.0)) {
        tmpvar_30 = tmpvar_29;
      } else {
        tmpvar_30 = -(tmpvar_29);
      };
      highp float tmpvar_31;
      tmpvar_31 = (scrpos_26.x / 4.0);
      highp float tmpvar_32;
      tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
      highp float tmpvar_33;
      if ((tmpvar_31 >= 0.0)) {
        tmpvar_33 = tmpvar_32;
      } else {
        tmpvar_33 = -(tmpvar_32);
      };
      highp float x_34;
      x_34 = ((a_27 - _DITHERMATRIX[
        int(tmpvar_30)
      ][
        int(tmpvar_33)
      ]) - 0.01);
      if ((x_34 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 tmpvar_18;
  highp vec3 N_19;
  N_19 = N_3;
  highp vec3 V_20;
  V_20 = V_2;
  mediump float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = pow (clamp ((1.001 - 
    dot (V_20, N_19)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_21 = (_RGBias + (tmpvar_22 * _RGScale));
  mediump vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_21 * _RGColor).xyz;
  mediump float tmpvar_24;
  tmpvar_24 = clamp (tmpvar_21, 0.0, 1.0);
  highp vec3 tmpvar_25;
  tmpvar_25 = mix (outColor_5.xyz, tmpvar_23, vec3((tmpvar_24 * _RGRatio)));
  tmpvar_18 = tmpvar_25;
  outColor_5.xyz = tmpvar_18;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_26;
    scrpos_26 = xlv_TEXCOORD3;
    mediump float a_27;
    a_27 = xlv_TEXCOORD3.z;
    if ((a_27 < 0.95)) {
      scrpos_26.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_27 = (a_27 * 17.0);
      highp float tmpvar_28;
      tmpvar_28 = (scrpos_26.y / 4.0);
      highp float tmpvar_29;
      tmpvar_29 = (fract(abs(tmpvar_28)) * 4.0);
      highp float tmpvar_30;
      if ((tmpvar_28 >= 0.0)) {
        tmpvar_30 = tmpvar_29;
      } else {
        tmpvar_30 = -(tmpvar_29);
      };
      highp float tmpvar_31;
      tmpvar_31 = (scrpos_26.x / 4.0);
      highp float tmpvar_32;
      tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
      highp float tmpvar_33;
      if ((tmpvar_31 >= 0.0)) {
        tmpvar_33 = tmpvar_32;
      } else {
        tmpvar_33 = -(tmpvar_32);
      };
      highp float x_34;
      x_34 = ((a_27 - _DITHERMATRIX[
        int(tmpvar_30)
      ][
        int(tmpvar_33)
      ]) - 0.01);
      if ((x_34 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = tmpvar_5;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_8;
  tmpvar_8 = tmpvar_7.w;
  mediump vec2 tmpvar_9;
  tmpvar_9.y = 0.0;
  tmpvar_9.x = tmpvar_8;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_tableTex, tmpvar_9).xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 1.0;
  tmpvar_12.x = tmpvar_8;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = mix (tmpvar_11, tmpvar_14, tmpvar_6.xxx);
  tmpvar_15.w = tmpvar_6.y;
  mediump float x_16;
  x_16 = (tmpvar_6.y - _AlphaClipThreshold);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_15.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_15.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_18 * _Color.xyz) * _EnvColor.xyz) + color_22);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.y);
  mediump vec3 tmpvar_27;
  highp vec3 N_28;
  N_28 = N_3;
  highp vec3 V_29;
  V_29 = V_2;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = pow (clamp ((1.001 - 
    dot (V_29, N_28)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_30 = (_RGBias + (tmpvar_31 * _RGScale));
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * _RGColor).xyz;
  mediump float tmpvar_33;
  tmpvar_33 = clamp (tmpvar_30, 0.0, 1.0);
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (outColor_4.xyz, tmpvar_32, vec3((tmpvar_33 * _RGRatio)));
  tmpvar_27 = tmpvar_34;
  outColor_4.xyz = tmpvar_27;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_35;
    scrpos_35 = xlv_TEXCOORD3;
    mediump float a_36;
    a_36 = xlv_TEXCOORD3.z;
    if ((a_36 < 0.95)) {
      scrpos_35.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_36 = (a_36 * 17.0);
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_35.y / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float tmpvar_40;
      tmpvar_40 = (scrpos_35.x / 4.0);
      highp float tmpvar_41;
      tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
      highp float tmpvar_42;
      if ((tmpvar_40 >= 0.0)) {
        tmpvar_42 = tmpvar_41;
      } else {
        tmpvar_42 = -(tmpvar_41);
      };
      highp float x_43;
      x_43 = ((a_36 - _DITHERMATRIX[
        int(tmpvar_39)
      ][
        int(tmpvar_42)
      ]) - 0.01);
      if ((x_43 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = tmpvar_5;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_8;
  tmpvar_8 = tmpvar_7.w;
  mediump vec2 tmpvar_9;
  tmpvar_9.y = 0.0;
  tmpvar_9.x = tmpvar_8;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_tableTex, tmpvar_9).xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 1.0;
  tmpvar_12.x = tmpvar_8;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = mix (tmpvar_11, tmpvar_14, tmpvar_6.xxx);
  tmpvar_15.w = tmpvar_6.y;
  mediump float x_16;
  x_16 = (tmpvar_6.y - _AlphaClipThreshold);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_15.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_15.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_18 * _Color.xyz) * _EnvColor.xyz) + color_22);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.y);
  mediump vec3 tmpvar_27;
  highp vec3 N_28;
  N_28 = N_3;
  highp vec3 V_29;
  V_29 = V_2;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = pow (clamp ((1.001 - 
    dot (V_29, N_28)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_30 = (_RGBias + (tmpvar_31 * _RGScale));
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * _RGColor).xyz;
  mediump float tmpvar_33;
  tmpvar_33 = clamp (tmpvar_30, 0.0, 1.0);
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (outColor_4.xyz, tmpvar_32, vec3((tmpvar_33 * _RGRatio)));
  tmpvar_27 = tmpvar_34;
  outColor_4.xyz = tmpvar_27;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_35;
    scrpos_35 = xlv_TEXCOORD3;
    mediump float a_36;
    a_36 = xlv_TEXCOORD3.z;
    if ((a_36 < 0.95)) {
      scrpos_35.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_36 = (a_36 * 17.0);
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_35.y / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float tmpvar_40;
      tmpvar_40 = (scrpos_35.x / 4.0);
      highp float tmpvar_41;
      tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
      highp float tmpvar_42;
      if ((tmpvar_40 >= 0.0)) {
        tmpvar_42 = tmpvar_41;
      } else {
        tmpvar_42 = -(tmpvar_41);
      };
      highp float x_43;
      x_43 = ((a_36 - _DITHERMATRIX[
        int(tmpvar_39)
      ][
        int(tmpvar_42)
      ]) - 0.01);
      if ((x_43 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = tmpvar_5;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_8;
  tmpvar_8 = tmpvar_7.w;
  mediump vec2 tmpvar_9;
  tmpvar_9.y = 0.0;
  tmpvar_9.x = tmpvar_8;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_tableTex, tmpvar_9).xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 1.0;
  tmpvar_12.x = tmpvar_8;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = mix (tmpvar_11, tmpvar_14, tmpvar_6.xxx);
  tmpvar_15.w = tmpvar_6.y;
  mediump float x_16;
  x_16 = (tmpvar_6.y - _AlphaClipThreshold);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_15.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_15.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_18 * _Color.xyz) * _EnvColor.xyz) + color_22);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.y);
  mediump vec3 tmpvar_27;
  highp vec3 N_28;
  N_28 = N_3;
  highp vec3 V_29;
  V_29 = V_2;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = pow (clamp ((1.001 - 
    dot (V_29, N_28)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_30 = (_RGBias + (tmpvar_31 * _RGScale));
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * _RGColor).xyz;
  mediump float tmpvar_33;
  tmpvar_33 = clamp (tmpvar_30, 0.0, 1.0);
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (outColor_4.xyz, tmpvar_32, vec3((tmpvar_33 * _RGRatio)));
  tmpvar_27 = tmpvar_34;
  outColor_4.xyz = tmpvar_27;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_35;
    scrpos_35 = xlv_TEXCOORD3;
    mediump float a_36;
    a_36 = xlv_TEXCOORD3.z;
    if ((a_36 < 0.95)) {
      scrpos_35.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_36 = (a_36 * 17.0);
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_35.y / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float tmpvar_40;
      tmpvar_40 = (scrpos_35.x / 4.0);
      highp float tmpvar_41;
      tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
      highp float tmpvar_42;
      if ((tmpvar_40 >= 0.0)) {
        tmpvar_42 = tmpvar_41;
      } else {
        tmpvar_42 = -(tmpvar_41);
      };
      highp float x_43;
      x_43 = ((a_36 - _DITHERMATRIX[
        int(tmpvar_39)
      ][
        int(tmpvar_42)
      ]) - 0.01);
      if ((x_43 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = tmpvar_5;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_8;
  tmpvar_8 = tmpvar_7.w;
  mediump vec2 tmpvar_9;
  tmpvar_9.y = 0.0;
  tmpvar_9.x = tmpvar_8;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_tableTex, tmpvar_9).xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 1.0;
  tmpvar_12.x = tmpvar_8;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = mix (tmpvar_11, tmpvar_14, tmpvar_6.xxx);
  tmpvar_15.w = tmpvar_6.y;
  mediump float x_16;
  x_16 = (tmpvar_6.y - _AlphaClipThreshold);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_15.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_15.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_18 * _Color.xyz) * _EnvColor.xyz) + color_22);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.y);
  mediump vec3 tmpvar_27;
  highp vec3 N_28;
  N_28 = N_3;
  highp vec3 V_29;
  V_29 = V_2;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = pow (clamp ((1.001 - 
    dot (V_29, N_28)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_30 = (_RGBias + (tmpvar_31 * _RGScale));
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * _RGColor).xyz;
  mediump float tmpvar_33;
  tmpvar_33 = clamp (tmpvar_30, 0.0, 1.0);
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (outColor_4.xyz, tmpvar_32, vec3((tmpvar_33 * _RGRatio)));
  tmpvar_27 = tmpvar_34;
  outColor_4.xyz = tmpvar_27;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_35;
    scrpos_35 = xlv_TEXCOORD3;
    mediump float a_36;
    a_36 = xlv_TEXCOORD3.z;
    if ((a_36 < 0.95)) {
      scrpos_35.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_36 = (a_36 * 17.0);
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_35.y / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float tmpvar_40;
      tmpvar_40 = (scrpos_35.x / 4.0);
      highp float tmpvar_41;
      tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
      highp float tmpvar_42;
      if ((tmpvar_40 >= 0.0)) {
        tmpvar_42 = tmpvar_41;
      } else {
        tmpvar_42 = -(tmpvar_41);
      };
      highp float x_43;
      x_43 = ((a_36 - _DITHERMATRIX[
        int(tmpvar_39)
      ][
        int(tmpvar_42)
      ]) - 0.01);
      if ((x_43 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = tmpvar_5;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_8;
  tmpvar_8 = tmpvar_7.w;
  mediump vec2 tmpvar_9;
  tmpvar_9.y = 0.0;
  tmpvar_9.x = tmpvar_8;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_tableTex, tmpvar_9).xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 1.0;
  tmpvar_12.x = tmpvar_8;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = mix (tmpvar_11, tmpvar_14, tmpvar_6.xxx);
  tmpvar_15.w = tmpvar_6.y;
  mediump float x_16;
  x_16 = (tmpvar_6.y - _AlphaClipThreshold);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_15.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_15.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_18 * _Color.xyz) * _EnvColor.xyz) + color_22);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.y);
  mediump vec3 tmpvar_27;
  highp vec3 N_28;
  N_28 = N_3;
  highp vec3 V_29;
  V_29 = V_2;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = pow (clamp ((1.001 - 
    dot (V_29, N_28)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_30 = (_RGBias + (tmpvar_31 * _RGScale));
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * _RGColor).xyz;
  mediump float tmpvar_33;
  tmpvar_33 = clamp (tmpvar_30, 0.0, 1.0);
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (outColor_4.xyz, tmpvar_32, vec3((tmpvar_33 * _RGRatio)));
  tmpvar_27 = tmpvar_34;
  outColor_4.xyz = tmpvar_27;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_35;
    scrpos_35 = xlv_TEXCOORD3;
    mediump float a_36;
    a_36 = xlv_TEXCOORD3.z;
    if ((a_36 < 0.95)) {
      scrpos_35.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_36 = (a_36 * 17.0);
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_35.y / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float tmpvar_40;
      tmpvar_40 = (scrpos_35.x / 4.0);
      highp float tmpvar_41;
      tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
      highp float tmpvar_42;
      if ((tmpvar_40 >= 0.0)) {
        tmpvar_42 = tmpvar_41;
      } else {
        tmpvar_42 = -(tmpvar_41);
      };
      highp float x_43;
      x_43 = ((a_36 - _DITHERMATRIX[
        int(tmpvar_39)
      ][
        int(tmpvar_42)
      ]) - 0.01);
      if ((x_43 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = tmpvar_5;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_8;
  tmpvar_8 = tmpvar_7.w;
  mediump vec2 tmpvar_9;
  tmpvar_9.y = 0.0;
  tmpvar_9.x = tmpvar_8;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_tableTex, tmpvar_9).xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 1.0;
  tmpvar_12.x = tmpvar_8;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = mix (tmpvar_11, tmpvar_14, tmpvar_6.xxx);
  tmpvar_15.w = tmpvar_6.y;
  mediump float x_16;
  x_16 = (tmpvar_6.y - _AlphaClipThreshold);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_15.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_15.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_18 * _Color.xyz) * _EnvColor.xyz) + color_22);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.y);
  mediump vec3 tmpvar_27;
  highp vec3 N_28;
  N_28 = N_3;
  highp vec3 V_29;
  V_29 = V_2;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = pow (clamp ((1.001 - 
    dot (V_29, N_28)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_30 = (_RGBias + (tmpvar_31 * _RGScale));
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * _RGColor).xyz;
  mediump float tmpvar_33;
  tmpvar_33 = clamp (tmpvar_30, 0.0, 1.0);
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (outColor_4.xyz, tmpvar_32, vec3((tmpvar_33 * _RGRatio)));
  tmpvar_27 = tmpvar_34;
  outColor_4.xyz = tmpvar_27;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_35;
    scrpos_35 = xlv_TEXCOORD3;
    mediump float a_36;
    a_36 = xlv_TEXCOORD3.z;
    if ((a_36 < 0.95)) {
      scrpos_35.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_36 = (a_36 * 17.0);
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_35.y / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float tmpvar_40;
      tmpvar_40 = (scrpos_35.x / 4.0);
      highp float tmpvar_41;
      tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
      highp float tmpvar_42;
      if ((tmpvar_40 >= 0.0)) {
        tmpvar_42 = tmpvar_41;
      } else {
        tmpvar_42 = -(tmpvar_41);
      };
      highp float x_43;
      x_43 = ((a_36 - _DITHERMATRIX[
        int(tmpvar_39)
      ][
        int(tmpvar_42)
      ]) - 0.01);
      if ((x_43 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = tmpvar_5;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_8;
  tmpvar_8 = tmpvar_7.w;
  mediump vec2 tmpvar_9;
  tmpvar_9.y = 0.0;
  tmpvar_9.x = tmpvar_8;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_tableTex, tmpvar_9).xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 1.0;
  tmpvar_12.x = tmpvar_8;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = mix (tmpvar_11, tmpvar_14, tmpvar_6.xxx);
  tmpvar_15.w = tmpvar_6.y;
  mediump float x_16;
  x_16 = (tmpvar_6.y - _AlphaClipThreshold);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_15.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_15.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_18 * _Color.xyz) * _EnvColor.xyz) + color_22);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.y);
  mediump vec3 tmpvar_27;
  highp vec3 N_28;
  N_28 = N_3;
  highp vec3 V_29;
  V_29 = V_2;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = pow (clamp ((1.001 - 
    dot (V_29, N_28)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_30 = (_RGBias + (tmpvar_31 * _RGScale));
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * _RGColor).xyz;
  mediump float tmpvar_33;
  tmpvar_33 = clamp (tmpvar_30, 0.0, 1.0);
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (outColor_4.xyz, tmpvar_32, vec3((tmpvar_33 * _RGRatio)));
  tmpvar_27 = tmpvar_34;
  outColor_4.xyz = tmpvar_27;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_35;
    scrpos_35 = xlv_TEXCOORD3;
    mediump float a_36;
    a_36 = xlv_TEXCOORD3.z;
    if ((a_36 < 0.95)) {
      scrpos_35.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_36 = (a_36 * 17.0);
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_35.y / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float tmpvar_40;
      tmpvar_40 = (scrpos_35.x / 4.0);
      highp float tmpvar_41;
      tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
      highp float tmpvar_42;
      if ((tmpvar_40 >= 0.0)) {
        tmpvar_42 = tmpvar_41;
      } else {
        tmpvar_42 = -(tmpvar_41);
      };
      highp float x_43;
      x_43 = ((a_36 - _DITHERMATRIX[
        int(tmpvar_39)
      ][
        int(tmpvar_42)
      ]) - 0.01);
      if ((x_43 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = tmpvar_5;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_8;
  tmpvar_8 = tmpvar_7.w;
  mediump vec2 tmpvar_9;
  tmpvar_9.y = 0.0;
  tmpvar_9.x = tmpvar_8;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_tableTex, tmpvar_9).xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 1.0;
  tmpvar_12.x = tmpvar_8;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = mix (tmpvar_11, tmpvar_14, tmpvar_6.xxx);
  tmpvar_15.w = tmpvar_6.y;
  mediump float x_16;
  x_16 = (tmpvar_6.y - _AlphaClipThreshold);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_15.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_15.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_18 * _Color.xyz) * _EnvColor.xyz) + color_22);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.y);
  mediump vec3 tmpvar_27;
  highp vec3 N_28;
  N_28 = N_3;
  highp vec3 V_29;
  V_29 = V_2;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = pow (clamp ((1.001 - 
    dot (V_29, N_28)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_30 = (_RGBias + (tmpvar_31 * _RGScale));
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * _RGColor).xyz;
  mediump float tmpvar_33;
  tmpvar_33 = clamp (tmpvar_30, 0.0, 1.0);
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (outColor_4.xyz, tmpvar_32, vec3((tmpvar_33 * _RGRatio)));
  tmpvar_27 = tmpvar_34;
  outColor_4.xyz = tmpvar_27;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_35;
    scrpos_35 = xlv_TEXCOORD3;
    mediump float a_36;
    a_36 = xlv_TEXCOORD3.z;
    if ((a_36 < 0.95)) {
      scrpos_35.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_36 = (a_36 * 17.0);
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_35.y / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float tmpvar_40;
      tmpvar_40 = (scrpos_35.x / 4.0);
      highp float tmpvar_41;
      tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
      highp float tmpvar_42;
      if ((tmpvar_40 >= 0.0)) {
        tmpvar_42 = tmpvar_41;
      } else {
        tmpvar_42 = -(tmpvar_41);
      };
      highp float x_43;
      x_43 = ((a_36 - _DITHERMATRIX[
        int(tmpvar_39)
      ][
        int(tmpvar_42)
      ]) - 0.01);
      if ((x_43 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = tmpvar_5;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_8;
  tmpvar_8 = tmpvar_7.w;
  mediump vec2 tmpvar_9;
  tmpvar_9.y = 0.0;
  tmpvar_9.x = tmpvar_8;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_tableTex, tmpvar_9).xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 1.0;
  tmpvar_12.x = tmpvar_8;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = mix (tmpvar_11, tmpvar_14, tmpvar_6.xxx);
  tmpvar_15.w = tmpvar_6.y;
  mediump float x_16;
  x_16 = (tmpvar_6.y - _AlphaClipThreshold);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_15.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_15.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_18 * _Color.xyz) * _EnvColor.xyz) + color_22);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.y);
  mediump vec3 tmpvar_27;
  highp vec3 N_28;
  N_28 = N_3;
  highp vec3 V_29;
  V_29 = V_2;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = pow (clamp ((1.001 - 
    dot (V_29, N_28)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_30 = (_RGBias + (tmpvar_31 * _RGScale));
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * _RGColor).xyz;
  mediump float tmpvar_33;
  tmpvar_33 = clamp (tmpvar_30, 0.0, 1.0);
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (outColor_4.xyz, tmpvar_32, vec3((tmpvar_33 * _RGRatio)));
  tmpvar_27 = tmpvar_34;
  outColor_4.xyz = tmpvar_27;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_35;
    scrpos_35 = xlv_TEXCOORD3;
    mediump float a_36;
    a_36 = xlv_TEXCOORD3.z;
    if ((a_36 < 0.95)) {
      scrpos_35.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_36 = (a_36 * 17.0);
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_35.y / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float tmpvar_40;
      tmpvar_40 = (scrpos_35.x / 4.0);
      highp float tmpvar_41;
      tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
      highp float tmpvar_42;
      if ((tmpvar_40 >= 0.0)) {
        tmpvar_42 = tmpvar_41;
      } else {
        tmpvar_42 = -(tmpvar_41);
      };
      highp float x_43;
      x_43 = ((a_36 - _DITHERMATRIX[
        int(tmpvar_39)
      ][
        int(tmpvar_42)
      ]) - 0.01);
      if ((x_43 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = tmpvar_5;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_8;
  tmpvar_8 = tmpvar_7.w;
  mediump vec2 tmpvar_9;
  tmpvar_9.y = 0.0;
  tmpvar_9.x = tmpvar_8;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_tableTex, tmpvar_9).xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 1.0;
  tmpvar_12.x = tmpvar_8;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = mix (tmpvar_11, tmpvar_14, tmpvar_6.xxx);
  tmpvar_15.w = tmpvar_6.y;
  mediump float x_16;
  x_16 = (tmpvar_6.y - _AlphaClipThreshold);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_15.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_15.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_18 * _Color.xyz) * _EnvColor.xyz) + color_22);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.y);
  mediump vec3 tmpvar_27;
  highp vec3 N_28;
  N_28 = N_3;
  highp vec3 V_29;
  V_29 = V_2;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = pow (clamp ((1.001 - 
    dot (V_29, N_28)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_30 = (_RGBias + (tmpvar_31 * _RGScale));
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * _RGColor).xyz;
  mediump float tmpvar_33;
  tmpvar_33 = clamp (tmpvar_30, 0.0, 1.0);
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (outColor_4.xyz, tmpvar_32, vec3((tmpvar_33 * _RGRatio)));
  tmpvar_27 = tmpvar_34;
  outColor_4.xyz = tmpvar_27;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_35;
    scrpos_35 = xlv_TEXCOORD3;
    mediump float a_36;
    a_36 = xlv_TEXCOORD3.z;
    if ((a_36 < 0.95)) {
      scrpos_35.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_36 = (a_36 * 17.0);
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_35.y / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float tmpvar_40;
      tmpvar_40 = (scrpos_35.x / 4.0);
      highp float tmpvar_41;
      tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
      highp float tmpvar_42;
      if ((tmpvar_40 >= 0.0)) {
        tmpvar_42 = tmpvar_41;
      } else {
        tmpvar_42 = -(tmpvar_41);
      };
      highp float x_43;
      x_43 = ((a_36 - _DITHERMATRIX[
        int(tmpvar_39)
      ][
        int(tmpvar_42)
      ]) - 0.01);
      if ((x_43 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = tmpvar_5;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_8;
  tmpvar_8 = tmpvar_7.w;
  mediump vec2 tmpvar_9;
  tmpvar_9.y = 0.0;
  tmpvar_9.x = tmpvar_8;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_tableTex, tmpvar_9).xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 1.0;
  tmpvar_12.x = tmpvar_8;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = mix (tmpvar_11, tmpvar_14, tmpvar_6.xxx);
  tmpvar_15.w = tmpvar_6.y;
  mediump float x_16;
  x_16 = (tmpvar_6.y - _AlphaClipThreshold);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_15.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_15.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_18 * _Color.xyz) * _EnvColor.xyz) + color_22);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.y);
  mediump vec3 tmpvar_27;
  highp vec3 N_28;
  N_28 = N_3;
  highp vec3 V_29;
  V_29 = V_2;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = pow (clamp ((1.001 - 
    dot (V_29, N_28)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_30 = (_RGBias + (tmpvar_31 * _RGScale));
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * _RGColor).xyz;
  mediump float tmpvar_33;
  tmpvar_33 = clamp (tmpvar_30, 0.0, 1.0);
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (outColor_4.xyz, tmpvar_32, vec3((tmpvar_33 * _RGRatio)));
  tmpvar_27 = tmpvar_34;
  outColor_4.xyz = tmpvar_27;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_35;
    scrpos_35 = xlv_TEXCOORD3;
    mediump float a_36;
    a_36 = xlv_TEXCOORD3.z;
    if ((a_36 < 0.95)) {
      scrpos_35.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_36 = (a_36 * 17.0);
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_35.y / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float tmpvar_40;
      tmpvar_40 = (scrpos_35.x / 4.0);
      highp float tmpvar_41;
      tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
      highp float tmpvar_42;
      if ((tmpvar_40 >= 0.0)) {
        tmpvar_42 = tmpvar_41;
      } else {
        tmpvar_42 = -(tmpvar_41);
      };
      highp float x_43;
      x_43 = ((a_36 - _DITHERMATRIX[
        int(tmpvar_39)
      ][
        int(tmpvar_42)
      ]) - 0.01);
      if ((x_43 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = tmpvar_5;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_8;
  tmpvar_8 = tmpvar_7.w;
  mediump vec2 tmpvar_9;
  tmpvar_9.y = 0.0;
  tmpvar_9.x = tmpvar_8;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_tableTex, tmpvar_9).xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 1.0;
  tmpvar_12.x = tmpvar_8;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = mix (tmpvar_11, tmpvar_14, tmpvar_6.xxx);
  tmpvar_15.w = tmpvar_6.y;
  mediump float x_16;
  x_16 = (tmpvar_6.y - _AlphaClipThreshold);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_15.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_15.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_18 * _Color.xyz) * _EnvColor.xyz) + color_22);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.y);
  mediump vec3 tmpvar_27;
  highp vec3 N_28;
  N_28 = N_3;
  highp vec3 V_29;
  V_29 = V_2;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = pow (clamp ((1.001 - 
    dot (V_29, N_28)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_30 = (_RGBias + (tmpvar_31 * _RGScale));
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * _RGColor).xyz;
  mediump float tmpvar_33;
  tmpvar_33 = clamp (tmpvar_30, 0.0, 1.0);
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (outColor_4.xyz, tmpvar_32, vec3((tmpvar_33 * _RGRatio)));
  tmpvar_27 = tmpvar_34;
  outColor_4.xyz = tmpvar_27;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_35;
    scrpos_35 = xlv_TEXCOORD3;
    mediump float a_36;
    a_36 = xlv_TEXCOORD3.z;
    if ((a_36 < 0.95)) {
      scrpos_35.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_36 = (a_36 * 17.0);
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_35.y / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float tmpvar_40;
      tmpvar_40 = (scrpos_35.x / 4.0);
      highp float tmpvar_41;
      tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
      highp float tmpvar_42;
      if ((tmpvar_40 >= 0.0)) {
        tmpvar_42 = tmpvar_41;
      } else {
        tmpvar_42 = -(tmpvar_41);
      };
      highp float x_43;
      x_43 = ((a_36 - _DITHERMATRIX[
        int(tmpvar_39)
      ][
        int(tmpvar_42)
      ]) - 0.01);
      if ((x_43 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_5;
  highp vec2 pixelSize_6;
  pixelSize_6 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8 = floor(tmpvar_7);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract(tmpvar_7);
  highp vec2 uv_10;
  uv_10 = ((tmpvar_8 + vec2(0.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_factorTex, uv_10);
  mediump vec4 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_indexTex, uv_10);
  mediump float tmpvar_14;
  tmpvar_14 = tmpvar_13.w;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 1.0;
  tmpvar_18.x = tmpvar_14;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = mix (tmpvar_17, tmpvar_20, tmpvar_12.xxx);
  tmpvar_21.w = tmpvar_12.y;
  highp vec2 uv_22;
  uv_22 = ((tmpvar_8 + vec2(1.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_factorTex, uv_22);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_indexTex, uv_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25.w;
  mediump vec2 tmpvar_27;
  tmpvar_27.y = 0.0;
  tmpvar_27.x = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_tableTex, tmpvar_27).xyz;
  mediump vec3 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 1.0;
  tmpvar_30.x = tmpvar_26;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = mix (tmpvar_29, tmpvar_32, tmpvar_24.xxx);
  tmpvar_33.w = tmpvar_24.y;
  highp vec2 uv_34;
  uv_34 = ((tmpvar_8 + vec2(0.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_factorTex, uv_34);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_indexTex, uv_34);
  mediump float tmpvar_38;
  tmpvar_38 = tmpvar_37.w;
  mediump vec2 tmpvar_39;
  tmpvar_39.y = 0.0;
  tmpvar_39.x = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_tableTex, tmpvar_39).xyz;
  mediump vec3 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 1.0;
  tmpvar_42.x = tmpvar_38;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = mix (tmpvar_41, tmpvar_44, tmpvar_36.xxx);
  tmpvar_45.w = tmpvar_36.y;
  highp vec2 uv_46;
  uv_46 = ((tmpvar_8 + vec2(1.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_factorTex, uv_46);
  mediump vec4 tmpvar_48;
  tmpvar_48 = tmpvar_47;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_indexTex, uv_46);
  mediump float tmpvar_50;
  tmpvar_50 = tmpvar_49.w;
  mediump vec2 tmpvar_51;
  tmpvar_51.y = 0.0;
  tmpvar_51.x = tmpvar_50;
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_tableTex, tmpvar_51).xyz;
  mediump vec3 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 1.0;
  tmpvar_54.x = tmpvar_50;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = mix (tmpvar_53, tmpvar_56, tmpvar_48.xxx);
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58 = mix (mix (tmpvar_21, tmpvar_33, tmpvar_9.xxxx), mix (tmpvar_45, tmpvar_57, tmpvar_9.xxxx), tmpvar_9.yyyy);
  tmpvar_5 = tmpvar_58;
  mediump float x_59;
  x_59 = (tmpvar_5.w - _AlphaClipThreshold);
  if ((x_59 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_5.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_5.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_61 * _Color.xyz) * _EnvColor.xyz) + color_65);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_5.w);
  mediump vec3 tmpvar_70;
  highp vec3 N_71;
  N_71 = N_3;
  highp vec3 V_72;
  V_72 = V_2;
  mediump float tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = pow (clamp ((1.001 - 
    dot (V_72, N_71)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_73 = (_RGBias + (tmpvar_74 * _RGScale));
  mediump vec3 tmpvar_75;
  tmpvar_75 = (tmpvar_73 * _RGColor).xyz;
  mediump float tmpvar_76;
  tmpvar_76 = clamp (tmpvar_73, 0.0, 1.0);
  highp vec3 tmpvar_77;
  tmpvar_77 = mix (outColor_4.xyz, tmpvar_75, vec3((tmpvar_76 * _RGRatio)));
  tmpvar_70 = tmpvar_77;
  outColor_4.xyz = tmpvar_70;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_78;
    scrpos_78 = xlv_TEXCOORD3;
    mediump float a_79;
    a_79 = xlv_TEXCOORD3.z;
    if ((a_79 < 0.95)) {
      scrpos_78.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_79 = (a_79 * 17.0);
      highp float tmpvar_80;
      tmpvar_80 = (scrpos_78.y / 4.0);
      highp float tmpvar_81;
      tmpvar_81 = (fract(abs(tmpvar_80)) * 4.0);
      highp float tmpvar_82;
      if ((tmpvar_80 >= 0.0)) {
        tmpvar_82 = tmpvar_81;
      } else {
        tmpvar_82 = -(tmpvar_81);
      };
      highp float tmpvar_83;
      tmpvar_83 = (scrpos_78.x / 4.0);
      highp float tmpvar_84;
      tmpvar_84 = (fract(abs(tmpvar_83)) * 4.0);
      highp float tmpvar_85;
      if ((tmpvar_83 >= 0.0)) {
        tmpvar_85 = tmpvar_84;
      } else {
        tmpvar_85 = -(tmpvar_84);
      };
      highp float x_86;
      x_86 = ((a_79 - _DITHERMATRIX[
        int(tmpvar_82)
      ][
        int(tmpvar_85)
      ]) - 0.01);
      if ((x_86 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_5;
  highp vec2 pixelSize_6;
  pixelSize_6 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8 = floor(tmpvar_7);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract(tmpvar_7);
  highp vec2 uv_10;
  uv_10 = ((tmpvar_8 + vec2(0.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_factorTex, uv_10);
  mediump vec4 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_indexTex, uv_10);
  mediump float tmpvar_14;
  tmpvar_14 = tmpvar_13.w;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 1.0;
  tmpvar_18.x = tmpvar_14;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = mix (tmpvar_17, tmpvar_20, tmpvar_12.xxx);
  tmpvar_21.w = tmpvar_12.y;
  highp vec2 uv_22;
  uv_22 = ((tmpvar_8 + vec2(1.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_factorTex, uv_22);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_indexTex, uv_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25.w;
  mediump vec2 tmpvar_27;
  tmpvar_27.y = 0.0;
  tmpvar_27.x = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_tableTex, tmpvar_27).xyz;
  mediump vec3 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 1.0;
  tmpvar_30.x = tmpvar_26;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = mix (tmpvar_29, tmpvar_32, tmpvar_24.xxx);
  tmpvar_33.w = tmpvar_24.y;
  highp vec2 uv_34;
  uv_34 = ((tmpvar_8 + vec2(0.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_factorTex, uv_34);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_indexTex, uv_34);
  mediump float tmpvar_38;
  tmpvar_38 = tmpvar_37.w;
  mediump vec2 tmpvar_39;
  tmpvar_39.y = 0.0;
  tmpvar_39.x = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_tableTex, tmpvar_39).xyz;
  mediump vec3 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 1.0;
  tmpvar_42.x = tmpvar_38;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = mix (tmpvar_41, tmpvar_44, tmpvar_36.xxx);
  tmpvar_45.w = tmpvar_36.y;
  highp vec2 uv_46;
  uv_46 = ((tmpvar_8 + vec2(1.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_factorTex, uv_46);
  mediump vec4 tmpvar_48;
  tmpvar_48 = tmpvar_47;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_indexTex, uv_46);
  mediump float tmpvar_50;
  tmpvar_50 = tmpvar_49.w;
  mediump vec2 tmpvar_51;
  tmpvar_51.y = 0.0;
  tmpvar_51.x = tmpvar_50;
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_tableTex, tmpvar_51).xyz;
  mediump vec3 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 1.0;
  tmpvar_54.x = tmpvar_50;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = mix (tmpvar_53, tmpvar_56, tmpvar_48.xxx);
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58 = mix (mix (tmpvar_21, tmpvar_33, tmpvar_9.xxxx), mix (tmpvar_45, tmpvar_57, tmpvar_9.xxxx), tmpvar_9.yyyy);
  tmpvar_5 = tmpvar_58;
  mediump float x_59;
  x_59 = (tmpvar_5.w - _AlphaClipThreshold);
  if ((x_59 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_5.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_5.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_61 * _Color.xyz) * _EnvColor.xyz) + color_65);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_5.w);
  mediump vec3 tmpvar_70;
  highp vec3 N_71;
  N_71 = N_3;
  highp vec3 V_72;
  V_72 = V_2;
  mediump float tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = pow (clamp ((1.001 - 
    dot (V_72, N_71)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_73 = (_RGBias + (tmpvar_74 * _RGScale));
  mediump vec3 tmpvar_75;
  tmpvar_75 = (tmpvar_73 * _RGColor).xyz;
  mediump float tmpvar_76;
  tmpvar_76 = clamp (tmpvar_73, 0.0, 1.0);
  highp vec3 tmpvar_77;
  tmpvar_77 = mix (outColor_4.xyz, tmpvar_75, vec3((tmpvar_76 * _RGRatio)));
  tmpvar_70 = tmpvar_77;
  outColor_4.xyz = tmpvar_70;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_78;
    scrpos_78 = xlv_TEXCOORD3;
    mediump float a_79;
    a_79 = xlv_TEXCOORD3.z;
    if ((a_79 < 0.95)) {
      scrpos_78.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_79 = (a_79 * 17.0);
      highp float tmpvar_80;
      tmpvar_80 = (scrpos_78.y / 4.0);
      highp float tmpvar_81;
      tmpvar_81 = (fract(abs(tmpvar_80)) * 4.0);
      highp float tmpvar_82;
      if ((tmpvar_80 >= 0.0)) {
        tmpvar_82 = tmpvar_81;
      } else {
        tmpvar_82 = -(tmpvar_81);
      };
      highp float tmpvar_83;
      tmpvar_83 = (scrpos_78.x / 4.0);
      highp float tmpvar_84;
      tmpvar_84 = (fract(abs(tmpvar_83)) * 4.0);
      highp float tmpvar_85;
      if ((tmpvar_83 >= 0.0)) {
        tmpvar_85 = tmpvar_84;
      } else {
        tmpvar_85 = -(tmpvar_84);
      };
      highp float x_86;
      x_86 = ((a_79 - _DITHERMATRIX[
        int(tmpvar_82)
      ][
        int(tmpvar_85)
      ]) - 0.01);
      if ((x_86 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_5;
  highp vec2 pixelSize_6;
  pixelSize_6 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8 = floor(tmpvar_7);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract(tmpvar_7);
  highp vec2 uv_10;
  uv_10 = ((tmpvar_8 + vec2(0.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_factorTex, uv_10);
  mediump vec4 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_indexTex, uv_10);
  mediump float tmpvar_14;
  tmpvar_14 = tmpvar_13.w;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 1.0;
  tmpvar_18.x = tmpvar_14;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = mix (tmpvar_17, tmpvar_20, tmpvar_12.xxx);
  tmpvar_21.w = tmpvar_12.y;
  highp vec2 uv_22;
  uv_22 = ((tmpvar_8 + vec2(1.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_factorTex, uv_22);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_indexTex, uv_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25.w;
  mediump vec2 tmpvar_27;
  tmpvar_27.y = 0.0;
  tmpvar_27.x = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_tableTex, tmpvar_27).xyz;
  mediump vec3 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 1.0;
  tmpvar_30.x = tmpvar_26;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = mix (tmpvar_29, tmpvar_32, tmpvar_24.xxx);
  tmpvar_33.w = tmpvar_24.y;
  highp vec2 uv_34;
  uv_34 = ((tmpvar_8 + vec2(0.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_factorTex, uv_34);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_indexTex, uv_34);
  mediump float tmpvar_38;
  tmpvar_38 = tmpvar_37.w;
  mediump vec2 tmpvar_39;
  tmpvar_39.y = 0.0;
  tmpvar_39.x = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_tableTex, tmpvar_39).xyz;
  mediump vec3 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 1.0;
  tmpvar_42.x = tmpvar_38;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = mix (tmpvar_41, tmpvar_44, tmpvar_36.xxx);
  tmpvar_45.w = tmpvar_36.y;
  highp vec2 uv_46;
  uv_46 = ((tmpvar_8 + vec2(1.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_factorTex, uv_46);
  mediump vec4 tmpvar_48;
  tmpvar_48 = tmpvar_47;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_indexTex, uv_46);
  mediump float tmpvar_50;
  tmpvar_50 = tmpvar_49.w;
  mediump vec2 tmpvar_51;
  tmpvar_51.y = 0.0;
  tmpvar_51.x = tmpvar_50;
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_tableTex, tmpvar_51).xyz;
  mediump vec3 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 1.0;
  tmpvar_54.x = tmpvar_50;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = mix (tmpvar_53, tmpvar_56, tmpvar_48.xxx);
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58 = mix (mix (tmpvar_21, tmpvar_33, tmpvar_9.xxxx), mix (tmpvar_45, tmpvar_57, tmpvar_9.xxxx), tmpvar_9.yyyy);
  tmpvar_5 = tmpvar_58;
  mediump float x_59;
  x_59 = (tmpvar_5.w - _AlphaClipThreshold);
  if ((x_59 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_5.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_5.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_61 * _Color.xyz) * _EnvColor.xyz) + color_65);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_5.w);
  mediump vec3 tmpvar_70;
  highp vec3 N_71;
  N_71 = N_3;
  highp vec3 V_72;
  V_72 = V_2;
  mediump float tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = pow (clamp ((1.001 - 
    dot (V_72, N_71)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_73 = (_RGBias + (tmpvar_74 * _RGScale));
  mediump vec3 tmpvar_75;
  tmpvar_75 = (tmpvar_73 * _RGColor).xyz;
  mediump float tmpvar_76;
  tmpvar_76 = clamp (tmpvar_73, 0.0, 1.0);
  highp vec3 tmpvar_77;
  tmpvar_77 = mix (outColor_4.xyz, tmpvar_75, vec3((tmpvar_76 * _RGRatio)));
  tmpvar_70 = tmpvar_77;
  outColor_4.xyz = tmpvar_70;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_78;
    scrpos_78 = xlv_TEXCOORD3;
    mediump float a_79;
    a_79 = xlv_TEXCOORD3.z;
    if ((a_79 < 0.95)) {
      scrpos_78.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_79 = (a_79 * 17.0);
      highp float tmpvar_80;
      tmpvar_80 = (scrpos_78.y / 4.0);
      highp float tmpvar_81;
      tmpvar_81 = (fract(abs(tmpvar_80)) * 4.0);
      highp float tmpvar_82;
      if ((tmpvar_80 >= 0.0)) {
        tmpvar_82 = tmpvar_81;
      } else {
        tmpvar_82 = -(tmpvar_81);
      };
      highp float tmpvar_83;
      tmpvar_83 = (scrpos_78.x / 4.0);
      highp float tmpvar_84;
      tmpvar_84 = (fract(abs(tmpvar_83)) * 4.0);
      highp float tmpvar_85;
      if ((tmpvar_83 >= 0.0)) {
        tmpvar_85 = tmpvar_84;
      } else {
        tmpvar_85 = -(tmpvar_84);
      };
      highp float x_86;
      x_86 = ((a_79 - _DITHERMATRIX[
        int(tmpvar_82)
      ][
        int(tmpvar_85)
      ]) - 0.01);
      if ((x_86 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_5;
  highp vec2 pixelSize_6;
  pixelSize_6 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8 = floor(tmpvar_7);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract(tmpvar_7);
  highp vec2 uv_10;
  uv_10 = ((tmpvar_8 + vec2(0.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_factorTex, uv_10);
  mediump vec4 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_indexTex, uv_10);
  mediump float tmpvar_14;
  tmpvar_14 = tmpvar_13.w;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 1.0;
  tmpvar_18.x = tmpvar_14;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = mix (tmpvar_17, tmpvar_20, tmpvar_12.xxx);
  tmpvar_21.w = tmpvar_12.y;
  highp vec2 uv_22;
  uv_22 = ((tmpvar_8 + vec2(1.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_factorTex, uv_22);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_indexTex, uv_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25.w;
  mediump vec2 tmpvar_27;
  tmpvar_27.y = 0.0;
  tmpvar_27.x = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_tableTex, tmpvar_27).xyz;
  mediump vec3 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 1.0;
  tmpvar_30.x = tmpvar_26;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = mix (tmpvar_29, tmpvar_32, tmpvar_24.xxx);
  tmpvar_33.w = tmpvar_24.y;
  highp vec2 uv_34;
  uv_34 = ((tmpvar_8 + vec2(0.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_factorTex, uv_34);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_indexTex, uv_34);
  mediump float tmpvar_38;
  tmpvar_38 = tmpvar_37.w;
  mediump vec2 tmpvar_39;
  tmpvar_39.y = 0.0;
  tmpvar_39.x = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_tableTex, tmpvar_39).xyz;
  mediump vec3 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 1.0;
  tmpvar_42.x = tmpvar_38;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = mix (tmpvar_41, tmpvar_44, tmpvar_36.xxx);
  tmpvar_45.w = tmpvar_36.y;
  highp vec2 uv_46;
  uv_46 = ((tmpvar_8 + vec2(1.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_factorTex, uv_46);
  mediump vec4 tmpvar_48;
  tmpvar_48 = tmpvar_47;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_indexTex, uv_46);
  mediump float tmpvar_50;
  tmpvar_50 = tmpvar_49.w;
  mediump vec2 tmpvar_51;
  tmpvar_51.y = 0.0;
  tmpvar_51.x = tmpvar_50;
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_tableTex, tmpvar_51).xyz;
  mediump vec3 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 1.0;
  tmpvar_54.x = tmpvar_50;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = mix (tmpvar_53, tmpvar_56, tmpvar_48.xxx);
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58 = mix (mix (tmpvar_21, tmpvar_33, tmpvar_9.xxxx), mix (tmpvar_45, tmpvar_57, tmpvar_9.xxxx), tmpvar_9.yyyy);
  tmpvar_5 = tmpvar_58;
  mediump float x_59;
  x_59 = (tmpvar_5.w - _AlphaClipThreshold);
  if ((x_59 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_5.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_5.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_61 * _Color.xyz) * _EnvColor.xyz) + color_65);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_5.w);
  mediump vec3 tmpvar_70;
  highp vec3 N_71;
  N_71 = N_3;
  highp vec3 V_72;
  V_72 = V_2;
  mediump float tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = pow (clamp ((1.001 - 
    dot (V_72, N_71)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_73 = (_RGBias + (tmpvar_74 * _RGScale));
  mediump vec3 tmpvar_75;
  tmpvar_75 = (tmpvar_73 * _RGColor).xyz;
  mediump float tmpvar_76;
  tmpvar_76 = clamp (tmpvar_73, 0.0, 1.0);
  highp vec3 tmpvar_77;
  tmpvar_77 = mix (outColor_4.xyz, tmpvar_75, vec3((tmpvar_76 * _RGRatio)));
  tmpvar_70 = tmpvar_77;
  outColor_4.xyz = tmpvar_70;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_78;
    scrpos_78 = xlv_TEXCOORD3;
    mediump float a_79;
    a_79 = xlv_TEXCOORD3.z;
    if ((a_79 < 0.95)) {
      scrpos_78.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_79 = (a_79 * 17.0);
      highp float tmpvar_80;
      tmpvar_80 = (scrpos_78.y / 4.0);
      highp float tmpvar_81;
      tmpvar_81 = (fract(abs(tmpvar_80)) * 4.0);
      highp float tmpvar_82;
      if ((tmpvar_80 >= 0.0)) {
        tmpvar_82 = tmpvar_81;
      } else {
        tmpvar_82 = -(tmpvar_81);
      };
      highp float tmpvar_83;
      tmpvar_83 = (scrpos_78.x / 4.0);
      highp float tmpvar_84;
      tmpvar_84 = (fract(abs(tmpvar_83)) * 4.0);
      highp float tmpvar_85;
      if ((tmpvar_83 >= 0.0)) {
        tmpvar_85 = tmpvar_84;
      } else {
        tmpvar_85 = -(tmpvar_84);
      };
      highp float x_86;
      x_86 = ((a_79 - _DITHERMATRIX[
        int(tmpvar_82)
      ][
        int(tmpvar_85)
      ]) - 0.01);
      if ((x_86 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_5;
  highp vec2 pixelSize_6;
  pixelSize_6 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8 = floor(tmpvar_7);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract(tmpvar_7);
  highp vec2 uv_10;
  uv_10 = ((tmpvar_8 + vec2(0.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_factorTex, uv_10);
  mediump vec4 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_indexTex, uv_10);
  mediump float tmpvar_14;
  tmpvar_14 = tmpvar_13.w;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 1.0;
  tmpvar_18.x = tmpvar_14;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = mix (tmpvar_17, tmpvar_20, tmpvar_12.xxx);
  tmpvar_21.w = tmpvar_12.y;
  highp vec2 uv_22;
  uv_22 = ((tmpvar_8 + vec2(1.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_factorTex, uv_22);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_indexTex, uv_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25.w;
  mediump vec2 tmpvar_27;
  tmpvar_27.y = 0.0;
  tmpvar_27.x = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_tableTex, tmpvar_27).xyz;
  mediump vec3 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 1.0;
  tmpvar_30.x = tmpvar_26;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = mix (tmpvar_29, tmpvar_32, tmpvar_24.xxx);
  tmpvar_33.w = tmpvar_24.y;
  highp vec2 uv_34;
  uv_34 = ((tmpvar_8 + vec2(0.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_factorTex, uv_34);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_indexTex, uv_34);
  mediump float tmpvar_38;
  tmpvar_38 = tmpvar_37.w;
  mediump vec2 tmpvar_39;
  tmpvar_39.y = 0.0;
  tmpvar_39.x = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_tableTex, tmpvar_39).xyz;
  mediump vec3 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 1.0;
  tmpvar_42.x = tmpvar_38;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = mix (tmpvar_41, tmpvar_44, tmpvar_36.xxx);
  tmpvar_45.w = tmpvar_36.y;
  highp vec2 uv_46;
  uv_46 = ((tmpvar_8 + vec2(1.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_factorTex, uv_46);
  mediump vec4 tmpvar_48;
  tmpvar_48 = tmpvar_47;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_indexTex, uv_46);
  mediump float tmpvar_50;
  tmpvar_50 = tmpvar_49.w;
  mediump vec2 tmpvar_51;
  tmpvar_51.y = 0.0;
  tmpvar_51.x = tmpvar_50;
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_tableTex, tmpvar_51).xyz;
  mediump vec3 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 1.0;
  tmpvar_54.x = tmpvar_50;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = mix (tmpvar_53, tmpvar_56, tmpvar_48.xxx);
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58 = mix (mix (tmpvar_21, tmpvar_33, tmpvar_9.xxxx), mix (tmpvar_45, tmpvar_57, tmpvar_9.xxxx), tmpvar_9.yyyy);
  tmpvar_5 = tmpvar_58;
  mediump float x_59;
  x_59 = (tmpvar_5.w - _AlphaClipThreshold);
  if ((x_59 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_5.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_5.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_61 * _Color.xyz) * _EnvColor.xyz) + color_65);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_5.w);
  mediump vec3 tmpvar_70;
  highp vec3 N_71;
  N_71 = N_3;
  highp vec3 V_72;
  V_72 = V_2;
  mediump float tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = pow (clamp ((1.001 - 
    dot (V_72, N_71)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_73 = (_RGBias + (tmpvar_74 * _RGScale));
  mediump vec3 tmpvar_75;
  tmpvar_75 = (tmpvar_73 * _RGColor).xyz;
  mediump float tmpvar_76;
  tmpvar_76 = clamp (tmpvar_73, 0.0, 1.0);
  highp vec3 tmpvar_77;
  tmpvar_77 = mix (outColor_4.xyz, tmpvar_75, vec3((tmpvar_76 * _RGRatio)));
  tmpvar_70 = tmpvar_77;
  outColor_4.xyz = tmpvar_70;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_78;
    scrpos_78 = xlv_TEXCOORD3;
    mediump float a_79;
    a_79 = xlv_TEXCOORD3.z;
    if ((a_79 < 0.95)) {
      scrpos_78.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_79 = (a_79 * 17.0);
      highp float tmpvar_80;
      tmpvar_80 = (scrpos_78.y / 4.0);
      highp float tmpvar_81;
      tmpvar_81 = (fract(abs(tmpvar_80)) * 4.0);
      highp float tmpvar_82;
      if ((tmpvar_80 >= 0.0)) {
        tmpvar_82 = tmpvar_81;
      } else {
        tmpvar_82 = -(tmpvar_81);
      };
      highp float tmpvar_83;
      tmpvar_83 = (scrpos_78.x / 4.0);
      highp float tmpvar_84;
      tmpvar_84 = (fract(abs(tmpvar_83)) * 4.0);
      highp float tmpvar_85;
      if ((tmpvar_83 >= 0.0)) {
        tmpvar_85 = tmpvar_84;
      } else {
        tmpvar_85 = -(tmpvar_84);
      };
      highp float x_86;
      x_86 = ((a_79 - _DITHERMATRIX[
        int(tmpvar_82)
      ][
        int(tmpvar_85)
      ]) - 0.01);
      if ((x_86 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_5;
  highp vec2 pixelSize_6;
  pixelSize_6 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8 = floor(tmpvar_7);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract(tmpvar_7);
  highp vec2 uv_10;
  uv_10 = ((tmpvar_8 + vec2(0.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_factorTex, uv_10);
  mediump vec4 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_indexTex, uv_10);
  mediump float tmpvar_14;
  tmpvar_14 = tmpvar_13.w;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 1.0;
  tmpvar_18.x = tmpvar_14;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = mix (tmpvar_17, tmpvar_20, tmpvar_12.xxx);
  tmpvar_21.w = tmpvar_12.y;
  highp vec2 uv_22;
  uv_22 = ((tmpvar_8 + vec2(1.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_factorTex, uv_22);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_indexTex, uv_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25.w;
  mediump vec2 tmpvar_27;
  tmpvar_27.y = 0.0;
  tmpvar_27.x = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_tableTex, tmpvar_27).xyz;
  mediump vec3 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 1.0;
  tmpvar_30.x = tmpvar_26;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = mix (tmpvar_29, tmpvar_32, tmpvar_24.xxx);
  tmpvar_33.w = tmpvar_24.y;
  highp vec2 uv_34;
  uv_34 = ((tmpvar_8 + vec2(0.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_factorTex, uv_34);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_indexTex, uv_34);
  mediump float tmpvar_38;
  tmpvar_38 = tmpvar_37.w;
  mediump vec2 tmpvar_39;
  tmpvar_39.y = 0.0;
  tmpvar_39.x = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_tableTex, tmpvar_39).xyz;
  mediump vec3 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 1.0;
  tmpvar_42.x = tmpvar_38;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = mix (tmpvar_41, tmpvar_44, tmpvar_36.xxx);
  tmpvar_45.w = tmpvar_36.y;
  highp vec2 uv_46;
  uv_46 = ((tmpvar_8 + vec2(1.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_factorTex, uv_46);
  mediump vec4 tmpvar_48;
  tmpvar_48 = tmpvar_47;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_indexTex, uv_46);
  mediump float tmpvar_50;
  tmpvar_50 = tmpvar_49.w;
  mediump vec2 tmpvar_51;
  tmpvar_51.y = 0.0;
  tmpvar_51.x = tmpvar_50;
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_tableTex, tmpvar_51).xyz;
  mediump vec3 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 1.0;
  tmpvar_54.x = tmpvar_50;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = mix (tmpvar_53, tmpvar_56, tmpvar_48.xxx);
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58 = mix (mix (tmpvar_21, tmpvar_33, tmpvar_9.xxxx), mix (tmpvar_45, tmpvar_57, tmpvar_9.xxxx), tmpvar_9.yyyy);
  tmpvar_5 = tmpvar_58;
  mediump float x_59;
  x_59 = (tmpvar_5.w - _AlphaClipThreshold);
  if ((x_59 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_5.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_5.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_61 * _Color.xyz) * _EnvColor.xyz) + color_65);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_5.w);
  mediump vec3 tmpvar_70;
  highp vec3 N_71;
  N_71 = N_3;
  highp vec3 V_72;
  V_72 = V_2;
  mediump float tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = pow (clamp ((1.001 - 
    dot (V_72, N_71)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_73 = (_RGBias + (tmpvar_74 * _RGScale));
  mediump vec3 tmpvar_75;
  tmpvar_75 = (tmpvar_73 * _RGColor).xyz;
  mediump float tmpvar_76;
  tmpvar_76 = clamp (tmpvar_73, 0.0, 1.0);
  highp vec3 tmpvar_77;
  tmpvar_77 = mix (outColor_4.xyz, tmpvar_75, vec3((tmpvar_76 * _RGRatio)));
  tmpvar_70 = tmpvar_77;
  outColor_4.xyz = tmpvar_70;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_78;
    scrpos_78 = xlv_TEXCOORD3;
    mediump float a_79;
    a_79 = xlv_TEXCOORD3.z;
    if ((a_79 < 0.95)) {
      scrpos_78.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_79 = (a_79 * 17.0);
      highp float tmpvar_80;
      tmpvar_80 = (scrpos_78.y / 4.0);
      highp float tmpvar_81;
      tmpvar_81 = (fract(abs(tmpvar_80)) * 4.0);
      highp float tmpvar_82;
      if ((tmpvar_80 >= 0.0)) {
        tmpvar_82 = tmpvar_81;
      } else {
        tmpvar_82 = -(tmpvar_81);
      };
      highp float tmpvar_83;
      tmpvar_83 = (scrpos_78.x / 4.0);
      highp float tmpvar_84;
      tmpvar_84 = (fract(abs(tmpvar_83)) * 4.0);
      highp float tmpvar_85;
      if ((tmpvar_83 >= 0.0)) {
        tmpvar_85 = tmpvar_84;
      } else {
        tmpvar_85 = -(tmpvar_84);
      };
      highp float x_86;
      x_86 = ((a_79 - _DITHERMATRIX[
        int(tmpvar_82)
      ][
        int(tmpvar_85)
      ]) - 0.01);
      if ((x_86 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_5;
  highp vec2 pixelSize_6;
  pixelSize_6 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8 = floor(tmpvar_7);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract(tmpvar_7);
  highp vec2 uv_10;
  uv_10 = ((tmpvar_8 + vec2(0.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_factorTex, uv_10);
  mediump vec4 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_indexTex, uv_10);
  mediump float tmpvar_14;
  tmpvar_14 = tmpvar_13.w;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 1.0;
  tmpvar_18.x = tmpvar_14;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = mix (tmpvar_17, tmpvar_20, tmpvar_12.xxx);
  tmpvar_21.w = tmpvar_12.y;
  highp vec2 uv_22;
  uv_22 = ((tmpvar_8 + vec2(1.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_factorTex, uv_22);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_indexTex, uv_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25.w;
  mediump vec2 tmpvar_27;
  tmpvar_27.y = 0.0;
  tmpvar_27.x = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_tableTex, tmpvar_27).xyz;
  mediump vec3 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 1.0;
  tmpvar_30.x = tmpvar_26;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = mix (tmpvar_29, tmpvar_32, tmpvar_24.xxx);
  tmpvar_33.w = tmpvar_24.y;
  highp vec2 uv_34;
  uv_34 = ((tmpvar_8 + vec2(0.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_factorTex, uv_34);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_indexTex, uv_34);
  mediump float tmpvar_38;
  tmpvar_38 = tmpvar_37.w;
  mediump vec2 tmpvar_39;
  tmpvar_39.y = 0.0;
  tmpvar_39.x = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_tableTex, tmpvar_39).xyz;
  mediump vec3 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 1.0;
  tmpvar_42.x = tmpvar_38;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = mix (tmpvar_41, tmpvar_44, tmpvar_36.xxx);
  tmpvar_45.w = tmpvar_36.y;
  highp vec2 uv_46;
  uv_46 = ((tmpvar_8 + vec2(1.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_factorTex, uv_46);
  mediump vec4 tmpvar_48;
  tmpvar_48 = tmpvar_47;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_indexTex, uv_46);
  mediump float tmpvar_50;
  tmpvar_50 = tmpvar_49.w;
  mediump vec2 tmpvar_51;
  tmpvar_51.y = 0.0;
  tmpvar_51.x = tmpvar_50;
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_tableTex, tmpvar_51).xyz;
  mediump vec3 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 1.0;
  tmpvar_54.x = tmpvar_50;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = mix (tmpvar_53, tmpvar_56, tmpvar_48.xxx);
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58 = mix (mix (tmpvar_21, tmpvar_33, tmpvar_9.xxxx), mix (tmpvar_45, tmpvar_57, tmpvar_9.xxxx), tmpvar_9.yyyy);
  tmpvar_5 = tmpvar_58;
  mediump float x_59;
  x_59 = (tmpvar_5.w - _AlphaClipThreshold);
  if ((x_59 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_5.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_5.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_61 * _Color.xyz) * _EnvColor.xyz) + color_65);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_5.w);
  mediump vec3 tmpvar_70;
  highp vec3 N_71;
  N_71 = N_3;
  highp vec3 V_72;
  V_72 = V_2;
  mediump float tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = pow (clamp ((1.001 - 
    dot (V_72, N_71)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_73 = (_RGBias + (tmpvar_74 * _RGScale));
  mediump vec3 tmpvar_75;
  tmpvar_75 = (tmpvar_73 * _RGColor).xyz;
  mediump float tmpvar_76;
  tmpvar_76 = clamp (tmpvar_73, 0.0, 1.0);
  highp vec3 tmpvar_77;
  tmpvar_77 = mix (outColor_4.xyz, tmpvar_75, vec3((tmpvar_76 * _RGRatio)));
  tmpvar_70 = tmpvar_77;
  outColor_4.xyz = tmpvar_70;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_78;
    scrpos_78 = xlv_TEXCOORD3;
    mediump float a_79;
    a_79 = xlv_TEXCOORD3.z;
    if ((a_79 < 0.95)) {
      scrpos_78.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_79 = (a_79 * 17.0);
      highp float tmpvar_80;
      tmpvar_80 = (scrpos_78.y / 4.0);
      highp float tmpvar_81;
      tmpvar_81 = (fract(abs(tmpvar_80)) * 4.0);
      highp float tmpvar_82;
      if ((tmpvar_80 >= 0.0)) {
        tmpvar_82 = tmpvar_81;
      } else {
        tmpvar_82 = -(tmpvar_81);
      };
      highp float tmpvar_83;
      tmpvar_83 = (scrpos_78.x / 4.0);
      highp float tmpvar_84;
      tmpvar_84 = (fract(abs(tmpvar_83)) * 4.0);
      highp float tmpvar_85;
      if ((tmpvar_83 >= 0.0)) {
        tmpvar_85 = tmpvar_84;
      } else {
        tmpvar_85 = -(tmpvar_84);
      };
      highp float x_86;
      x_86 = ((a_79 - _DITHERMATRIX[
        int(tmpvar_82)
      ][
        int(tmpvar_85)
      ]) - 0.01);
      if ((x_86 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_5;
  highp vec2 pixelSize_6;
  pixelSize_6 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8 = floor(tmpvar_7);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract(tmpvar_7);
  highp vec2 uv_10;
  uv_10 = ((tmpvar_8 + vec2(0.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_factorTex, uv_10);
  mediump vec4 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_indexTex, uv_10);
  mediump float tmpvar_14;
  tmpvar_14 = tmpvar_13.w;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 1.0;
  tmpvar_18.x = tmpvar_14;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = mix (tmpvar_17, tmpvar_20, tmpvar_12.xxx);
  tmpvar_21.w = tmpvar_12.y;
  highp vec2 uv_22;
  uv_22 = ((tmpvar_8 + vec2(1.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_factorTex, uv_22);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_indexTex, uv_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25.w;
  mediump vec2 tmpvar_27;
  tmpvar_27.y = 0.0;
  tmpvar_27.x = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_tableTex, tmpvar_27).xyz;
  mediump vec3 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 1.0;
  tmpvar_30.x = tmpvar_26;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = mix (tmpvar_29, tmpvar_32, tmpvar_24.xxx);
  tmpvar_33.w = tmpvar_24.y;
  highp vec2 uv_34;
  uv_34 = ((tmpvar_8 + vec2(0.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_factorTex, uv_34);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_indexTex, uv_34);
  mediump float tmpvar_38;
  tmpvar_38 = tmpvar_37.w;
  mediump vec2 tmpvar_39;
  tmpvar_39.y = 0.0;
  tmpvar_39.x = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_tableTex, tmpvar_39).xyz;
  mediump vec3 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 1.0;
  tmpvar_42.x = tmpvar_38;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = mix (tmpvar_41, tmpvar_44, tmpvar_36.xxx);
  tmpvar_45.w = tmpvar_36.y;
  highp vec2 uv_46;
  uv_46 = ((tmpvar_8 + vec2(1.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_factorTex, uv_46);
  mediump vec4 tmpvar_48;
  tmpvar_48 = tmpvar_47;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_indexTex, uv_46);
  mediump float tmpvar_50;
  tmpvar_50 = tmpvar_49.w;
  mediump vec2 tmpvar_51;
  tmpvar_51.y = 0.0;
  tmpvar_51.x = tmpvar_50;
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_tableTex, tmpvar_51).xyz;
  mediump vec3 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 1.0;
  tmpvar_54.x = tmpvar_50;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = mix (tmpvar_53, tmpvar_56, tmpvar_48.xxx);
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58 = mix (mix (tmpvar_21, tmpvar_33, tmpvar_9.xxxx), mix (tmpvar_45, tmpvar_57, tmpvar_9.xxxx), tmpvar_9.yyyy);
  tmpvar_5 = tmpvar_58;
  mediump float x_59;
  x_59 = (tmpvar_5.w - _AlphaClipThreshold);
  if ((x_59 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_5.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_5.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_61 * _Color.xyz) * _EnvColor.xyz) + color_65);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_5.w);
  mediump vec3 tmpvar_70;
  highp vec3 N_71;
  N_71 = N_3;
  highp vec3 V_72;
  V_72 = V_2;
  mediump float tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = pow (clamp ((1.001 - 
    dot (V_72, N_71)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_73 = (_RGBias + (tmpvar_74 * _RGScale));
  mediump vec3 tmpvar_75;
  tmpvar_75 = (tmpvar_73 * _RGColor).xyz;
  mediump float tmpvar_76;
  tmpvar_76 = clamp (tmpvar_73, 0.0, 1.0);
  highp vec3 tmpvar_77;
  tmpvar_77 = mix (outColor_4.xyz, tmpvar_75, vec3((tmpvar_76 * _RGRatio)));
  tmpvar_70 = tmpvar_77;
  outColor_4.xyz = tmpvar_70;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_78;
    scrpos_78 = xlv_TEXCOORD3;
    mediump float a_79;
    a_79 = xlv_TEXCOORD3.z;
    if ((a_79 < 0.95)) {
      scrpos_78.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_79 = (a_79 * 17.0);
      highp float tmpvar_80;
      tmpvar_80 = (scrpos_78.y / 4.0);
      highp float tmpvar_81;
      tmpvar_81 = (fract(abs(tmpvar_80)) * 4.0);
      highp float tmpvar_82;
      if ((tmpvar_80 >= 0.0)) {
        tmpvar_82 = tmpvar_81;
      } else {
        tmpvar_82 = -(tmpvar_81);
      };
      highp float tmpvar_83;
      tmpvar_83 = (scrpos_78.x / 4.0);
      highp float tmpvar_84;
      tmpvar_84 = (fract(abs(tmpvar_83)) * 4.0);
      highp float tmpvar_85;
      if ((tmpvar_83 >= 0.0)) {
        tmpvar_85 = tmpvar_84;
      } else {
        tmpvar_85 = -(tmpvar_84);
      };
      highp float x_86;
      x_86 = ((a_79 - _DITHERMATRIX[
        int(tmpvar_82)
      ][
        int(tmpvar_85)
      ]) - 0.01);
      if ((x_86 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_5;
  highp vec2 pixelSize_6;
  pixelSize_6 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8 = floor(tmpvar_7);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract(tmpvar_7);
  highp vec2 uv_10;
  uv_10 = ((tmpvar_8 + vec2(0.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_factorTex, uv_10);
  mediump vec4 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_indexTex, uv_10);
  mediump float tmpvar_14;
  tmpvar_14 = tmpvar_13.w;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 1.0;
  tmpvar_18.x = tmpvar_14;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = mix (tmpvar_17, tmpvar_20, tmpvar_12.xxx);
  tmpvar_21.w = tmpvar_12.y;
  highp vec2 uv_22;
  uv_22 = ((tmpvar_8 + vec2(1.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_factorTex, uv_22);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_indexTex, uv_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25.w;
  mediump vec2 tmpvar_27;
  tmpvar_27.y = 0.0;
  tmpvar_27.x = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_tableTex, tmpvar_27).xyz;
  mediump vec3 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 1.0;
  tmpvar_30.x = tmpvar_26;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = mix (tmpvar_29, tmpvar_32, tmpvar_24.xxx);
  tmpvar_33.w = tmpvar_24.y;
  highp vec2 uv_34;
  uv_34 = ((tmpvar_8 + vec2(0.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_factorTex, uv_34);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_indexTex, uv_34);
  mediump float tmpvar_38;
  tmpvar_38 = tmpvar_37.w;
  mediump vec2 tmpvar_39;
  tmpvar_39.y = 0.0;
  tmpvar_39.x = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_tableTex, tmpvar_39).xyz;
  mediump vec3 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 1.0;
  tmpvar_42.x = tmpvar_38;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = mix (tmpvar_41, tmpvar_44, tmpvar_36.xxx);
  tmpvar_45.w = tmpvar_36.y;
  highp vec2 uv_46;
  uv_46 = ((tmpvar_8 + vec2(1.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_factorTex, uv_46);
  mediump vec4 tmpvar_48;
  tmpvar_48 = tmpvar_47;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_indexTex, uv_46);
  mediump float tmpvar_50;
  tmpvar_50 = tmpvar_49.w;
  mediump vec2 tmpvar_51;
  tmpvar_51.y = 0.0;
  tmpvar_51.x = tmpvar_50;
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_tableTex, tmpvar_51).xyz;
  mediump vec3 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 1.0;
  tmpvar_54.x = tmpvar_50;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = mix (tmpvar_53, tmpvar_56, tmpvar_48.xxx);
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58 = mix (mix (tmpvar_21, tmpvar_33, tmpvar_9.xxxx), mix (tmpvar_45, tmpvar_57, tmpvar_9.xxxx), tmpvar_9.yyyy);
  tmpvar_5 = tmpvar_58;
  mediump float x_59;
  x_59 = (tmpvar_5.w - _AlphaClipThreshold);
  if ((x_59 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_5.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_5.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_61 * _Color.xyz) * _EnvColor.xyz) + color_65);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_5.w);
  mediump vec3 tmpvar_70;
  highp vec3 N_71;
  N_71 = N_3;
  highp vec3 V_72;
  V_72 = V_2;
  mediump float tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = pow (clamp ((1.001 - 
    dot (V_72, N_71)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_73 = (_RGBias + (tmpvar_74 * _RGScale));
  mediump vec3 tmpvar_75;
  tmpvar_75 = (tmpvar_73 * _RGColor).xyz;
  mediump float tmpvar_76;
  tmpvar_76 = clamp (tmpvar_73, 0.0, 1.0);
  highp vec3 tmpvar_77;
  tmpvar_77 = mix (outColor_4.xyz, tmpvar_75, vec3((tmpvar_76 * _RGRatio)));
  tmpvar_70 = tmpvar_77;
  outColor_4.xyz = tmpvar_70;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_78;
    scrpos_78 = xlv_TEXCOORD3;
    mediump float a_79;
    a_79 = xlv_TEXCOORD3.z;
    if ((a_79 < 0.95)) {
      scrpos_78.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_79 = (a_79 * 17.0);
      highp float tmpvar_80;
      tmpvar_80 = (scrpos_78.y / 4.0);
      highp float tmpvar_81;
      tmpvar_81 = (fract(abs(tmpvar_80)) * 4.0);
      highp float tmpvar_82;
      if ((tmpvar_80 >= 0.0)) {
        tmpvar_82 = tmpvar_81;
      } else {
        tmpvar_82 = -(tmpvar_81);
      };
      highp float tmpvar_83;
      tmpvar_83 = (scrpos_78.x / 4.0);
      highp float tmpvar_84;
      tmpvar_84 = (fract(abs(tmpvar_83)) * 4.0);
      highp float tmpvar_85;
      if ((tmpvar_83 >= 0.0)) {
        tmpvar_85 = tmpvar_84;
      } else {
        tmpvar_85 = -(tmpvar_84);
      };
      highp float x_86;
      x_86 = ((a_79 - _DITHERMATRIX[
        int(tmpvar_82)
      ][
        int(tmpvar_85)
      ]) - 0.01);
      if ((x_86 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_5;
  highp vec2 pixelSize_6;
  pixelSize_6 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8 = floor(tmpvar_7);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract(tmpvar_7);
  highp vec2 uv_10;
  uv_10 = ((tmpvar_8 + vec2(0.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_factorTex, uv_10);
  mediump vec4 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_indexTex, uv_10);
  mediump float tmpvar_14;
  tmpvar_14 = tmpvar_13.w;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 1.0;
  tmpvar_18.x = tmpvar_14;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = mix (tmpvar_17, tmpvar_20, tmpvar_12.xxx);
  tmpvar_21.w = tmpvar_12.y;
  highp vec2 uv_22;
  uv_22 = ((tmpvar_8 + vec2(1.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_factorTex, uv_22);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_indexTex, uv_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25.w;
  mediump vec2 tmpvar_27;
  tmpvar_27.y = 0.0;
  tmpvar_27.x = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_tableTex, tmpvar_27).xyz;
  mediump vec3 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 1.0;
  tmpvar_30.x = tmpvar_26;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = mix (tmpvar_29, tmpvar_32, tmpvar_24.xxx);
  tmpvar_33.w = tmpvar_24.y;
  highp vec2 uv_34;
  uv_34 = ((tmpvar_8 + vec2(0.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_factorTex, uv_34);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_indexTex, uv_34);
  mediump float tmpvar_38;
  tmpvar_38 = tmpvar_37.w;
  mediump vec2 tmpvar_39;
  tmpvar_39.y = 0.0;
  tmpvar_39.x = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_tableTex, tmpvar_39).xyz;
  mediump vec3 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 1.0;
  tmpvar_42.x = tmpvar_38;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = mix (tmpvar_41, tmpvar_44, tmpvar_36.xxx);
  tmpvar_45.w = tmpvar_36.y;
  highp vec2 uv_46;
  uv_46 = ((tmpvar_8 + vec2(1.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_factorTex, uv_46);
  mediump vec4 tmpvar_48;
  tmpvar_48 = tmpvar_47;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_indexTex, uv_46);
  mediump float tmpvar_50;
  tmpvar_50 = tmpvar_49.w;
  mediump vec2 tmpvar_51;
  tmpvar_51.y = 0.0;
  tmpvar_51.x = tmpvar_50;
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_tableTex, tmpvar_51).xyz;
  mediump vec3 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 1.0;
  tmpvar_54.x = tmpvar_50;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = mix (tmpvar_53, tmpvar_56, tmpvar_48.xxx);
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58 = mix (mix (tmpvar_21, tmpvar_33, tmpvar_9.xxxx), mix (tmpvar_45, tmpvar_57, tmpvar_9.xxxx), tmpvar_9.yyyy);
  tmpvar_5 = tmpvar_58;
  mediump float x_59;
  x_59 = (tmpvar_5.w - _AlphaClipThreshold);
  if ((x_59 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_5.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_5.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_61 * _Color.xyz) * _EnvColor.xyz) + color_65);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_5.w);
  mediump vec3 tmpvar_70;
  highp vec3 N_71;
  N_71 = N_3;
  highp vec3 V_72;
  V_72 = V_2;
  mediump float tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = pow (clamp ((1.001 - 
    dot (V_72, N_71)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_73 = (_RGBias + (tmpvar_74 * _RGScale));
  mediump vec3 tmpvar_75;
  tmpvar_75 = (tmpvar_73 * _RGColor).xyz;
  mediump float tmpvar_76;
  tmpvar_76 = clamp (tmpvar_73, 0.0, 1.0);
  highp vec3 tmpvar_77;
  tmpvar_77 = mix (outColor_4.xyz, tmpvar_75, vec3((tmpvar_76 * _RGRatio)));
  tmpvar_70 = tmpvar_77;
  outColor_4.xyz = tmpvar_70;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_78;
    scrpos_78 = xlv_TEXCOORD3;
    mediump float a_79;
    a_79 = xlv_TEXCOORD3.z;
    if ((a_79 < 0.95)) {
      scrpos_78.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_79 = (a_79 * 17.0);
      highp float tmpvar_80;
      tmpvar_80 = (scrpos_78.y / 4.0);
      highp float tmpvar_81;
      tmpvar_81 = (fract(abs(tmpvar_80)) * 4.0);
      highp float tmpvar_82;
      if ((tmpvar_80 >= 0.0)) {
        tmpvar_82 = tmpvar_81;
      } else {
        tmpvar_82 = -(tmpvar_81);
      };
      highp float tmpvar_83;
      tmpvar_83 = (scrpos_78.x / 4.0);
      highp float tmpvar_84;
      tmpvar_84 = (fract(abs(tmpvar_83)) * 4.0);
      highp float tmpvar_85;
      if ((tmpvar_83 >= 0.0)) {
        tmpvar_85 = tmpvar_84;
      } else {
        tmpvar_85 = -(tmpvar_84);
      };
      highp float x_86;
      x_86 = ((a_79 - _DITHERMATRIX[
        int(tmpvar_82)
      ][
        int(tmpvar_85)
      ]) - 0.01);
      if ((x_86 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_5;
  highp vec2 pixelSize_6;
  pixelSize_6 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8 = floor(tmpvar_7);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract(tmpvar_7);
  highp vec2 uv_10;
  uv_10 = ((tmpvar_8 + vec2(0.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_factorTex, uv_10);
  mediump vec4 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_indexTex, uv_10);
  mediump float tmpvar_14;
  tmpvar_14 = tmpvar_13.w;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 1.0;
  tmpvar_18.x = tmpvar_14;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = mix (tmpvar_17, tmpvar_20, tmpvar_12.xxx);
  tmpvar_21.w = tmpvar_12.y;
  highp vec2 uv_22;
  uv_22 = ((tmpvar_8 + vec2(1.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_factorTex, uv_22);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_indexTex, uv_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25.w;
  mediump vec2 tmpvar_27;
  tmpvar_27.y = 0.0;
  tmpvar_27.x = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_tableTex, tmpvar_27).xyz;
  mediump vec3 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 1.0;
  tmpvar_30.x = tmpvar_26;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = mix (tmpvar_29, tmpvar_32, tmpvar_24.xxx);
  tmpvar_33.w = tmpvar_24.y;
  highp vec2 uv_34;
  uv_34 = ((tmpvar_8 + vec2(0.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_factorTex, uv_34);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_indexTex, uv_34);
  mediump float tmpvar_38;
  tmpvar_38 = tmpvar_37.w;
  mediump vec2 tmpvar_39;
  tmpvar_39.y = 0.0;
  tmpvar_39.x = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_tableTex, tmpvar_39).xyz;
  mediump vec3 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 1.0;
  tmpvar_42.x = tmpvar_38;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = mix (tmpvar_41, tmpvar_44, tmpvar_36.xxx);
  tmpvar_45.w = tmpvar_36.y;
  highp vec2 uv_46;
  uv_46 = ((tmpvar_8 + vec2(1.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_factorTex, uv_46);
  mediump vec4 tmpvar_48;
  tmpvar_48 = tmpvar_47;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_indexTex, uv_46);
  mediump float tmpvar_50;
  tmpvar_50 = tmpvar_49.w;
  mediump vec2 tmpvar_51;
  tmpvar_51.y = 0.0;
  tmpvar_51.x = tmpvar_50;
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_tableTex, tmpvar_51).xyz;
  mediump vec3 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 1.0;
  tmpvar_54.x = tmpvar_50;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = mix (tmpvar_53, tmpvar_56, tmpvar_48.xxx);
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58 = mix (mix (tmpvar_21, tmpvar_33, tmpvar_9.xxxx), mix (tmpvar_45, tmpvar_57, tmpvar_9.xxxx), tmpvar_9.yyyy);
  tmpvar_5 = tmpvar_58;
  mediump float x_59;
  x_59 = (tmpvar_5.w - _AlphaClipThreshold);
  if ((x_59 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_5.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_5.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_61 * _Color.xyz) * _EnvColor.xyz) + color_65);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_5.w);
  mediump vec3 tmpvar_70;
  highp vec3 N_71;
  N_71 = N_3;
  highp vec3 V_72;
  V_72 = V_2;
  mediump float tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = pow (clamp ((1.001 - 
    dot (V_72, N_71)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_73 = (_RGBias + (tmpvar_74 * _RGScale));
  mediump vec3 tmpvar_75;
  tmpvar_75 = (tmpvar_73 * _RGColor).xyz;
  mediump float tmpvar_76;
  tmpvar_76 = clamp (tmpvar_73, 0.0, 1.0);
  highp vec3 tmpvar_77;
  tmpvar_77 = mix (outColor_4.xyz, tmpvar_75, vec3((tmpvar_76 * _RGRatio)));
  tmpvar_70 = tmpvar_77;
  outColor_4.xyz = tmpvar_70;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_78;
    scrpos_78 = xlv_TEXCOORD3;
    mediump float a_79;
    a_79 = xlv_TEXCOORD3.z;
    if ((a_79 < 0.95)) {
      scrpos_78.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_79 = (a_79 * 17.0);
      highp float tmpvar_80;
      tmpvar_80 = (scrpos_78.y / 4.0);
      highp float tmpvar_81;
      tmpvar_81 = (fract(abs(tmpvar_80)) * 4.0);
      highp float tmpvar_82;
      if ((tmpvar_80 >= 0.0)) {
        tmpvar_82 = tmpvar_81;
      } else {
        tmpvar_82 = -(tmpvar_81);
      };
      highp float tmpvar_83;
      tmpvar_83 = (scrpos_78.x / 4.0);
      highp float tmpvar_84;
      tmpvar_84 = (fract(abs(tmpvar_83)) * 4.0);
      highp float tmpvar_85;
      if ((tmpvar_83 >= 0.0)) {
        tmpvar_85 = tmpvar_84;
      } else {
        tmpvar_85 = -(tmpvar_84);
      };
      highp float x_86;
      x_86 = ((a_79 - _DITHERMATRIX[
        int(tmpvar_82)
      ][
        int(tmpvar_85)
      ]) - 0.01);
      if ((x_86 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_13.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_5;
  highp vec2 pixelSize_6;
  pixelSize_6 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8 = floor(tmpvar_7);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract(tmpvar_7);
  highp vec2 uv_10;
  uv_10 = ((tmpvar_8 + vec2(0.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_factorTex, uv_10);
  mediump vec4 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_indexTex, uv_10);
  mediump float tmpvar_14;
  tmpvar_14 = tmpvar_13.w;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 1.0;
  tmpvar_18.x = tmpvar_14;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = mix (tmpvar_17, tmpvar_20, tmpvar_12.xxx);
  tmpvar_21.w = tmpvar_12.y;
  highp vec2 uv_22;
  uv_22 = ((tmpvar_8 + vec2(1.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_factorTex, uv_22);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_indexTex, uv_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25.w;
  mediump vec2 tmpvar_27;
  tmpvar_27.y = 0.0;
  tmpvar_27.x = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_tableTex, tmpvar_27).xyz;
  mediump vec3 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 1.0;
  tmpvar_30.x = tmpvar_26;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = mix (tmpvar_29, tmpvar_32, tmpvar_24.xxx);
  tmpvar_33.w = tmpvar_24.y;
  highp vec2 uv_34;
  uv_34 = ((tmpvar_8 + vec2(0.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_factorTex, uv_34);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_indexTex, uv_34);
  mediump float tmpvar_38;
  tmpvar_38 = tmpvar_37.w;
  mediump vec2 tmpvar_39;
  tmpvar_39.y = 0.0;
  tmpvar_39.x = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_tableTex, tmpvar_39).xyz;
  mediump vec3 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 1.0;
  tmpvar_42.x = tmpvar_38;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = mix (tmpvar_41, tmpvar_44, tmpvar_36.xxx);
  tmpvar_45.w = tmpvar_36.y;
  highp vec2 uv_46;
  uv_46 = ((tmpvar_8 + vec2(1.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_factorTex, uv_46);
  mediump vec4 tmpvar_48;
  tmpvar_48 = tmpvar_47;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_indexTex, uv_46);
  mediump float tmpvar_50;
  tmpvar_50 = tmpvar_49.w;
  mediump vec2 tmpvar_51;
  tmpvar_51.y = 0.0;
  tmpvar_51.x = tmpvar_50;
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_tableTex, tmpvar_51).xyz;
  mediump vec3 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 1.0;
  tmpvar_54.x = tmpvar_50;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = mix (tmpvar_53, tmpvar_56, tmpvar_48.xxx);
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58 = mix (mix (tmpvar_21, tmpvar_33, tmpvar_9.xxxx), mix (tmpvar_45, tmpvar_57, tmpvar_9.xxxx), tmpvar_9.yyyy);
  tmpvar_5 = tmpvar_58;
  mediump float x_59;
  x_59 = (tmpvar_5.w - _AlphaClipThreshold);
  if ((x_59 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_5.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_5.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_61 * _Color.xyz) * _EnvColor.xyz) + color_65);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_5.w);
  mediump vec3 tmpvar_70;
  highp vec3 N_71;
  N_71 = N_3;
  highp vec3 V_72;
  V_72 = V_2;
  mediump float tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = pow (clamp ((1.001 - 
    dot (V_72, N_71)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_73 = (_RGBias + (tmpvar_74 * _RGScale));
  mediump vec3 tmpvar_75;
  tmpvar_75 = (tmpvar_73 * _RGColor).xyz;
  mediump float tmpvar_76;
  tmpvar_76 = clamp (tmpvar_73, 0.0, 1.0);
  highp vec3 tmpvar_77;
  tmpvar_77 = mix (outColor_4.xyz, tmpvar_75, vec3((tmpvar_76 * _RGRatio)));
  tmpvar_70 = tmpvar_77;
  outColor_4.xyz = tmpvar_70;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_78;
    scrpos_78 = xlv_TEXCOORD3;
    mediump float a_79;
    a_79 = xlv_TEXCOORD3.z;
    if ((a_79 < 0.95)) {
      scrpos_78.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_79 = (a_79 * 17.0);
      highp float tmpvar_80;
      tmpvar_80 = (scrpos_78.y / 4.0);
      highp float tmpvar_81;
      tmpvar_81 = (fract(abs(tmpvar_80)) * 4.0);
      highp float tmpvar_82;
      if ((tmpvar_80 >= 0.0)) {
        tmpvar_82 = tmpvar_81;
      } else {
        tmpvar_82 = -(tmpvar_81);
      };
      highp float tmpvar_83;
      tmpvar_83 = (scrpos_78.x / 4.0);
      highp float tmpvar_84;
      tmpvar_84 = (fract(abs(tmpvar_83)) * 4.0);
      highp float tmpvar_85;
      if ((tmpvar_83 >= 0.0)) {
        tmpvar_85 = tmpvar_84;
      } else {
        tmpvar_85 = -(tmpvar_84);
      };
      highp float x_86;
      x_86 = ((a_79 - _DITHERMATRIX[
        int(tmpvar_82)
      ][
        int(tmpvar_85)
      ]) - 0.01);
      if ((x_86 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 reflection_18;
  mediump vec3 R_19;
  mediump float intensity_20;
  mediump vec4 noiseTex_21;
  mediump vec4 spColor_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_22.xyz = tmpvar_23.xyz;
  spColor_22.w = outColor_5.w;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_21 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (((1.99 * noiseTex_21.x) * _SPNoiseScaler) - 1.0);
  intensity_20 = tmpvar_25;
  highp vec3 tmpvar_26;
  highp vec3 I_27;
  I_27 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_21 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_26 = (I_27 - (2.0 * (
    dot (N_3, I_27)
   * N_3)));
  R_19 = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = textureCube (_SPCubeMap, R_19).xyz;
  reflection_18 = tmpvar_28;
  highp vec3 tmpvar_29;
  mediump vec3 x_30;
  x_30 = (spColor_22.xyz * _SPOldColor.xyz);
  tmpvar_29 = mix (x_30, ((reflection_18 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_22.xyz = tmpvar_29;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_20 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_20 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_31;
      tmpvar_31 = mix (spColor_22, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_20) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_22 = tmpvar_31;
    };
  };
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (outColor_5.xyz, spColor_22.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_22.xyz = tmpvar_32;
  outColor_5 = spColor_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_22.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 reflection_18;
  mediump vec3 R_19;
  mediump float intensity_20;
  mediump vec4 noiseTex_21;
  mediump vec4 spColor_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_22.xyz = tmpvar_23.xyz;
  spColor_22.w = outColor_5.w;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_21 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (((1.99 * noiseTex_21.x) * _SPNoiseScaler) - 1.0);
  intensity_20 = tmpvar_25;
  highp vec3 tmpvar_26;
  highp vec3 I_27;
  I_27 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_21 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_26 = (I_27 - (2.0 * (
    dot (N_3, I_27)
   * N_3)));
  R_19 = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = textureCube (_SPCubeMap, R_19).xyz;
  reflection_18 = tmpvar_28;
  highp vec3 tmpvar_29;
  mediump vec3 x_30;
  x_30 = (spColor_22.xyz * _SPOldColor.xyz);
  tmpvar_29 = mix (x_30, ((reflection_18 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_22.xyz = tmpvar_29;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_20 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_20 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_31;
      tmpvar_31 = mix (spColor_22, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_20) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_22 = tmpvar_31;
    };
  };
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (outColor_5.xyz, spColor_22.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_22.xyz = tmpvar_32;
  outColor_5 = spColor_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_22.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 reflection_18;
  mediump vec3 R_19;
  mediump float intensity_20;
  mediump vec4 noiseTex_21;
  mediump vec4 spColor_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_22.xyz = tmpvar_23.xyz;
  spColor_22.w = outColor_5.w;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_21 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (((1.99 * noiseTex_21.x) * _SPNoiseScaler) - 1.0);
  intensity_20 = tmpvar_25;
  highp vec3 tmpvar_26;
  highp vec3 I_27;
  I_27 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_21 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_26 = (I_27 - (2.0 * (
    dot (N_3, I_27)
   * N_3)));
  R_19 = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = textureCube (_SPCubeMap, R_19).xyz;
  reflection_18 = tmpvar_28;
  highp vec3 tmpvar_29;
  mediump vec3 x_30;
  x_30 = (spColor_22.xyz * _SPOldColor.xyz);
  tmpvar_29 = mix (x_30, ((reflection_18 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_22.xyz = tmpvar_29;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_20 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_20 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_31;
      tmpvar_31 = mix (spColor_22, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_20) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_22 = tmpvar_31;
    };
  };
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (outColor_5.xyz, spColor_22.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_22.xyz = tmpvar_32;
  outColor_5 = spColor_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_22.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 reflection_18;
  mediump vec3 R_19;
  mediump float intensity_20;
  mediump vec4 noiseTex_21;
  mediump vec4 spColor_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_22.xyz = tmpvar_23.xyz;
  spColor_22.w = outColor_5.w;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_21 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (((1.99 * noiseTex_21.x) * _SPNoiseScaler) - 1.0);
  intensity_20 = tmpvar_25;
  highp vec3 tmpvar_26;
  highp vec3 I_27;
  I_27 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_21 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_26 = (I_27 - (2.0 * (
    dot (N_3, I_27)
   * N_3)));
  R_19 = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = textureCube (_SPCubeMap, R_19).xyz;
  reflection_18 = tmpvar_28;
  highp vec3 tmpvar_29;
  mediump vec3 x_30;
  x_30 = (spColor_22.xyz * _SPOldColor.xyz);
  tmpvar_29 = mix (x_30, ((reflection_18 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_22.xyz = tmpvar_29;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_20 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_20 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_31;
      tmpvar_31 = mix (spColor_22, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_20) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_22 = tmpvar_31;
    };
  };
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (outColor_5.xyz, spColor_22.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_22.xyz = tmpvar_32;
  outColor_5 = spColor_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_22.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 reflection_18;
  mediump vec3 R_19;
  mediump float intensity_20;
  mediump vec4 noiseTex_21;
  mediump vec4 spColor_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_22.xyz = tmpvar_23.xyz;
  spColor_22.w = outColor_5.w;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_21 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (((1.99 * noiseTex_21.x) * _SPNoiseScaler) - 1.0);
  intensity_20 = tmpvar_25;
  highp vec3 tmpvar_26;
  highp vec3 I_27;
  I_27 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_21 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_26 = (I_27 - (2.0 * (
    dot (N_3, I_27)
   * N_3)));
  R_19 = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = textureCube (_SPCubeMap, R_19).xyz;
  reflection_18 = tmpvar_28;
  highp vec3 tmpvar_29;
  mediump vec3 x_30;
  x_30 = (spColor_22.xyz * _SPOldColor.xyz);
  tmpvar_29 = mix (x_30, ((reflection_18 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_22.xyz = tmpvar_29;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_20 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_20 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_31;
      tmpvar_31 = mix (spColor_22, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_20) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_22 = tmpvar_31;
    };
  };
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (outColor_5.xyz, spColor_22.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_22.xyz = tmpvar_32;
  outColor_5 = spColor_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_22.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 reflection_18;
  mediump vec3 R_19;
  mediump float intensity_20;
  mediump vec4 noiseTex_21;
  mediump vec4 spColor_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_22.xyz = tmpvar_23.xyz;
  spColor_22.w = outColor_5.w;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_21 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (((1.99 * noiseTex_21.x) * _SPNoiseScaler) - 1.0);
  intensity_20 = tmpvar_25;
  highp vec3 tmpvar_26;
  highp vec3 I_27;
  I_27 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_21 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_26 = (I_27 - (2.0 * (
    dot (N_3, I_27)
   * N_3)));
  R_19 = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = textureCube (_SPCubeMap, R_19).xyz;
  reflection_18 = tmpvar_28;
  highp vec3 tmpvar_29;
  mediump vec3 x_30;
  x_30 = (spColor_22.xyz * _SPOldColor.xyz);
  tmpvar_29 = mix (x_30, ((reflection_18 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_22.xyz = tmpvar_29;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_20 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_20 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_31;
      tmpvar_31 = mix (spColor_22, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_20) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_22 = tmpvar_31;
    };
  };
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (outColor_5.xyz, spColor_22.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_22.xyz = tmpvar_32;
  outColor_5 = spColor_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_22.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 reflection_18;
  mediump vec3 R_19;
  mediump float intensity_20;
  mediump vec4 noiseTex_21;
  mediump vec4 spColor_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_22.xyz = tmpvar_23.xyz;
  spColor_22.w = outColor_5.w;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_21 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (((1.99 * noiseTex_21.x) * _SPNoiseScaler) - 1.0);
  intensity_20 = tmpvar_25;
  highp vec3 tmpvar_26;
  highp vec3 I_27;
  I_27 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_21 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_26 = (I_27 - (2.0 * (
    dot (N_3, I_27)
   * N_3)));
  R_19 = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = textureCube (_SPCubeMap, R_19).xyz;
  reflection_18 = tmpvar_28;
  highp vec3 tmpvar_29;
  mediump vec3 x_30;
  x_30 = (spColor_22.xyz * _SPOldColor.xyz);
  tmpvar_29 = mix (x_30, ((reflection_18 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_22.xyz = tmpvar_29;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_20 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_20 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_31;
      tmpvar_31 = mix (spColor_22, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_20) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_22 = tmpvar_31;
    };
  };
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (outColor_5.xyz, spColor_22.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_22.xyz = tmpvar_32;
  outColor_5 = spColor_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_22.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 reflection_18;
  mediump vec3 R_19;
  mediump float intensity_20;
  mediump vec4 noiseTex_21;
  mediump vec4 spColor_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_22.xyz = tmpvar_23.xyz;
  spColor_22.w = outColor_5.w;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_21 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (((1.99 * noiseTex_21.x) * _SPNoiseScaler) - 1.0);
  intensity_20 = tmpvar_25;
  highp vec3 tmpvar_26;
  highp vec3 I_27;
  I_27 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_21 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_26 = (I_27 - (2.0 * (
    dot (N_3, I_27)
   * N_3)));
  R_19 = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = textureCube (_SPCubeMap, R_19).xyz;
  reflection_18 = tmpvar_28;
  highp vec3 tmpvar_29;
  mediump vec3 x_30;
  x_30 = (spColor_22.xyz * _SPOldColor.xyz);
  tmpvar_29 = mix (x_30, ((reflection_18 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_22.xyz = tmpvar_29;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_20 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_20 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_31;
      tmpvar_31 = mix (spColor_22, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_20) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_22 = tmpvar_31;
    };
  };
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (outColor_5.xyz, spColor_22.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_22.xyz = tmpvar_32;
  outColor_5 = spColor_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_22.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 reflection_18;
  mediump vec3 R_19;
  mediump float intensity_20;
  mediump vec4 noiseTex_21;
  mediump vec4 spColor_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_22.xyz = tmpvar_23.xyz;
  spColor_22.w = outColor_5.w;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_21 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (((1.99 * noiseTex_21.x) * _SPNoiseScaler) - 1.0);
  intensity_20 = tmpvar_25;
  highp vec3 tmpvar_26;
  highp vec3 I_27;
  I_27 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_21 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_26 = (I_27 - (2.0 * (
    dot (N_3, I_27)
   * N_3)));
  R_19 = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = textureCube (_SPCubeMap, R_19).xyz;
  reflection_18 = tmpvar_28;
  highp vec3 tmpvar_29;
  mediump vec3 x_30;
  x_30 = (spColor_22.xyz * _SPOldColor.xyz);
  tmpvar_29 = mix (x_30, ((reflection_18 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_22.xyz = tmpvar_29;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_20 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_20 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_31;
      tmpvar_31 = mix (spColor_22, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_20) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_22 = tmpvar_31;
    };
  };
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (outColor_5.xyz, spColor_22.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_22.xyz = tmpvar_32;
  outColor_5 = spColor_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_22.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 reflection_18;
  mediump vec3 R_19;
  mediump float intensity_20;
  mediump vec4 noiseTex_21;
  mediump vec4 spColor_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_22.xyz = tmpvar_23.xyz;
  spColor_22.w = outColor_5.w;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_21 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (((1.99 * noiseTex_21.x) * _SPNoiseScaler) - 1.0);
  intensity_20 = tmpvar_25;
  highp vec3 tmpvar_26;
  highp vec3 I_27;
  I_27 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_21 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_26 = (I_27 - (2.0 * (
    dot (N_3, I_27)
   * N_3)));
  R_19 = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = textureCube (_SPCubeMap, R_19).xyz;
  reflection_18 = tmpvar_28;
  highp vec3 tmpvar_29;
  mediump vec3 x_30;
  x_30 = (spColor_22.xyz * _SPOldColor.xyz);
  tmpvar_29 = mix (x_30, ((reflection_18 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_22.xyz = tmpvar_29;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_20 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_20 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_31;
      tmpvar_31 = mix (spColor_22, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_20) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_22 = tmpvar_31;
    };
  };
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (outColor_5.xyz, spColor_22.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_22.xyz = tmpvar_32;
  outColor_5 = spColor_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_22.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 reflection_18;
  mediump vec3 R_19;
  mediump float intensity_20;
  mediump vec4 noiseTex_21;
  mediump vec4 spColor_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_22.xyz = tmpvar_23.xyz;
  spColor_22.w = outColor_5.w;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_21 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (((1.99 * noiseTex_21.x) * _SPNoiseScaler) - 1.0);
  intensity_20 = tmpvar_25;
  highp vec3 tmpvar_26;
  highp vec3 I_27;
  I_27 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_21 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_26 = (I_27 - (2.0 * (
    dot (N_3, I_27)
   * N_3)));
  R_19 = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = textureCube (_SPCubeMap, R_19).xyz;
  reflection_18 = tmpvar_28;
  highp vec3 tmpvar_29;
  mediump vec3 x_30;
  x_30 = (spColor_22.xyz * _SPOldColor.xyz);
  tmpvar_29 = mix (x_30, ((reflection_18 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_22.xyz = tmpvar_29;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_20 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_20 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_31;
      tmpvar_31 = mix (spColor_22, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_20) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_22 = tmpvar_31;
    };
  };
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (outColor_5.xyz, spColor_22.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_22.xyz = tmpvar_32;
  outColor_5 = spColor_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_22.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 reflection_18;
  mediump vec3 R_19;
  mediump float intensity_20;
  mediump vec4 noiseTex_21;
  mediump vec4 spColor_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_22.xyz = tmpvar_23.xyz;
  spColor_22.w = outColor_5.w;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_21 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (((1.99 * noiseTex_21.x) * _SPNoiseScaler) - 1.0);
  intensity_20 = tmpvar_25;
  highp vec3 tmpvar_26;
  highp vec3 I_27;
  I_27 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_21 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_26 = (I_27 - (2.0 * (
    dot (N_3, I_27)
   * N_3)));
  R_19 = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = textureCube (_SPCubeMap, R_19).xyz;
  reflection_18 = tmpvar_28;
  highp vec3 tmpvar_29;
  mediump vec3 x_30;
  x_30 = (spColor_22.xyz * _SPOldColor.xyz);
  tmpvar_29 = mix (x_30, ((reflection_18 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_22.xyz = tmpvar_29;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_20 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_20 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_31;
      tmpvar_31 = mix (spColor_22, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_20) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_22 = tmpvar_31;
    };
  };
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (outColor_5.xyz, spColor_22.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_22.xyz = tmpvar_32;
  outColor_5 = spColor_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_22.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 reflection_18;
  mediump vec3 R_19;
  mediump float intensity_20;
  mediump vec4 noiseTex_21;
  mediump vec4 spColor_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_22.xyz = tmpvar_23.xyz;
  spColor_22.w = outColor_5.w;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_21 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (((1.99 * noiseTex_21.x) * _SPNoiseScaler) - 1.0);
  intensity_20 = tmpvar_25;
  highp vec3 tmpvar_26;
  highp vec3 I_27;
  I_27 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_21 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_26 = (I_27 - (2.0 * (
    dot (N_3, I_27)
   * N_3)));
  R_19 = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = textureCube (_SPCubeMap, R_19).xyz;
  reflection_18 = tmpvar_28;
  highp vec3 tmpvar_29;
  mediump vec3 x_30;
  x_30 = (spColor_22.xyz * _SPOldColor.xyz);
  tmpvar_29 = mix (x_30, ((reflection_18 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_22.xyz = tmpvar_29;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_20 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_20 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_31;
      tmpvar_31 = mix (spColor_22, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_20) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_22 = tmpvar_31;
    };
  };
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (outColor_5.xyz, spColor_22.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_22.xyz = tmpvar_32;
  outColor_5 = spColor_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_22.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 reflection_18;
  mediump vec3 R_19;
  mediump float intensity_20;
  mediump vec4 noiseTex_21;
  mediump vec4 spColor_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_22.xyz = tmpvar_23.xyz;
  spColor_22.w = outColor_5.w;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_21 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (((1.99 * noiseTex_21.x) * _SPNoiseScaler) - 1.0);
  intensity_20 = tmpvar_25;
  highp vec3 tmpvar_26;
  highp vec3 I_27;
  I_27 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_21 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_26 = (I_27 - (2.0 * (
    dot (N_3, I_27)
   * N_3)));
  R_19 = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = textureCube (_SPCubeMap, R_19).xyz;
  reflection_18 = tmpvar_28;
  highp vec3 tmpvar_29;
  mediump vec3 x_30;
  x_30 = (spColor_22.xyz * _SPOldColor.xyz);
  tmpvar_29 = mix (x_30, ((reflection_18 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_22.xyz = tmpvar_29;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_20 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_20 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_31;
      tmpvar_31 = mix (spColor_22, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_20) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_22 = tmpvar_31;
    };
  };
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (outColor_5.xyz, spColor_22.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_22.xyz = tmpvar_32;
  outColor_5 = spColor_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_22.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 reflection_18;
  mediump vec3 R_19;
  mediump float intensity_20;
  mediump vec4 noiseTex_21;
  mediump vec4 spColor_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_22.xyz = tmpvar_23.xyz;
  spColor_22.w = outColor_5.w;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_21 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (((1.99 * noiseTex_21.x) * _SPNoiseScaler) - 1.0);
  intensity_20 = tmpvar_25;
  highp vec3 tmpvar_26;
  highp vec3 I_27;
  I_27 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_21 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_26 = (I_27 - (2.0 * (
    dot (N_3, I_27)
   * N_3)));
  R_19 = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = textureCube (_SPCubeMap, R_19).xyz;
  reflection_18 = tmpvar_28;
  highp vec3 tmpvar_29;
  mediump vec3 x_30;
  x_30 = (spColor_22.xyz * _SPOldColor.xyz);
  tmpvar_29 = mix (x_30, ((reflection_18 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_22.xyz = tmpvar_29;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_20 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_20 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_31;
      tmpvar_31 = mix (spColor_22, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_20) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_22 = tmpvar_31;
    };
  };
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (outColor_5.xyz, spColor_22.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_22.xyz = tmpvar_32;
  outColor_5 = spColor_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_22.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 reflection_18;
  mediump vec3 R_19;
  mediump float intensity_20;
  mediump vec4 noiseTex_21;
  mediump vec4 spColor_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_22.xyz = tmpvar_23.xyz;
  spColor_22.w = outColor_5.w;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_21 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (((1.99 * noiseTex_21.x) * _SPNoiseScaler) - 1.0);
  intensity_20 = tmpvar_25;
  highp vec3 tmpvar_26;
  highp vec3 I_27;
  I_27 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_21 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_26 = (I_27 - (2.0 * (
    dot (N_3, I_27)
   * N_3)));
  R_19 = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = textureCube (_SPCubeMap, R_19).xyz;
  reflection_18 = tmpvar_28;
  highp vec3 tmpvar_29;
  mediump vec3 x_30;
  x_30 = (spColor_22.xyz * _SPOldColor.xyz);
  tmpvar_29 = mix (x_30, ((reflection_18 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_22.xyz = tmpvar_29;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_20 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_20 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_31;
      tmpvar_31 = mix (spColor_22, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_20) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_22 = tmpvar_31;
    };
  };
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (outColor_5.xyz, spColor_22.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_22.xyz = tmpvar_32;
  outColor_5 = spColor_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_22.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 reflection_18;
  mediump vec3 R_19;
  mediump float intensity_20;
  mediump vec4 noiseTex_21;
  mediump vec4 spColor_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_22.xyz = tmpvar_23.xyz;
  spColor_22.w = outColor_5.w;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_21 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (((1.99 * noiseTex_21.x) * _SPNoiseScaler) - 1.0);
  intensity_20 = tmpvar_25;
  highp vec3 tmpvar_26;
  highp vec3 I_27;
  I_27 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_21 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_26 = (I_27 - (2.0 * (
    dot (N_3, I_27)
   * N_3)));
  R_19 = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = textureCube (_SPCubeMap, R_19).xyz;
  reflection_18 = tmpvar_28;
  highp vec3 tmpvar_29;
  mediump vec3 x_30;
  x_30 = (spColor_22.xyz * _SPOldColor.xyz);
  tmpvar_29 = mix (x_30, ((reflection_18 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_22.xyz = tmpvar_29;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_20 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_20 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_31;
      tmpvar_31 = mix (spColor_22, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_20) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_22 = tmpvar_31;
    };
  };
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (outColor_5.xyz, spColor_22.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_22.xyz = tmpvar_32;
  outColor_5 = spColor_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_22.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 reflection_18;
  mediump vec3 R_19;
  mediump float intensity_20;
  mediump vec4 noiseTex_21;
  mediump vec4 spColor_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_22.xyz = tmpvar_23.xyz;
  spColor_22.w = outColor_5.w;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_21 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (((1.99 * noiseTex_21.x) * _SPNoiseScaler) - 1.0);
  intensity_20 = tmpvar_25;
  highp vec3 tmpvar_26;
  highp vec3 I_27;
  I_27 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_21 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_26 = (I_27 - (2.0 * (
    dot (N_3, I_27)
   * N_3)));
  R_19 = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = textureCube (_SPCubeMap, R_19).xyz;
  reflection_18 = tmpvar_28;
  highp vec3 tmpvar_29;
  mediump vec3 x_30;
  x_30 = (spColor_22.xyz * _SPOldColor.xyz);
  tmpvar_29 = mix (x_30, ((reflection_18 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_22.xyz = tmpvar_29;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_20 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_20 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_31;
      tmpvar_31 = mix (spColor_22, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_20) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_22 = tmpvar_31;
    };
  };
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (outColor_5.xyz, spColor_22.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_22.xyz = tmpvar_32;
  outColor_5 = spColor_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_22.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 reflection_18;
  mediump vec3 R_19;
  mediump float intensity_20;
  mediump vec4 noiseTex_21;
  mediump vec4 spColor_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_22.xyz = tmpvar_23.xyz;
  spColor_22.w = outColor_5.w;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_21 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (((1.99 * noiseTex_21.x) * _SPNoiseScaler) - 1.0);
  intensity_20 = tmpvar_25;
  highp vec3 tmpvar_26;
  highp vec3 I_27;
  I_27 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_21 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_26 = (I_27 - (2.0 * (
    dot (N_3, I_27)
   * N_3)));
  R_19 = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = textureCube (_SPCubeMap, R_19).xyz;
  reflection_18 = tmpvar_28;
  highp vec3 tmpvar_29;
  mediump vec3 x_30;
  x_30 = (spColor_22.xyz * _SPOldColor.xyz);
  tmpvar_29 = mix (x_30, ((reflection_18 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_22.xyz = tmpvar_29;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_20 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_20 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_31;
      tmpvar_31 = mix (spColor_22, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_20) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_22 = tmpvar_31;
    };
  };
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (outColor_5.xyz, spColor_22.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_22.xyz = tmpvar_32;
  outColor_5 = spColor_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_22.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 reflection_18;
  mediump vec3 R_19;
  mediump float intensity_20;
  mediump vec4 noiseTex_21;
  mediump vec4 spColor_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_22.xyz = tmpvar_23.xyz;
  spColor_22.w = outColor_5.w;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_21 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (((1.99 * noiseTex_21.x) * _SPNoiseScaler) - 1.0);
  intensity_20 = tmpvar_25;
  highp vec3 tmpvar_26;
  highp vec3 I_27;
  I_27 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_21 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_26 = (I_27 - (2.0 * (
    dot (N_3, I_27)
   * N_3)));
  R_19 = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = textureCube (_SPCubeMap, R_19).xyz;
  reflection_18 = tmpvar_28;
  highp vec3 tmpvar_29;
  mediump vec3 x_30;
  x_30 = (spColor_22.xyz * _SPOldColor.xyz);
  tmpvar_29 = mix (x_30, ((reflection_18 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_22.xyz = tmpvar_29;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_20 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_20 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_31;
      tmpvar_31 = mix (spColor_22, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_20) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_22 = tmpvar_31;
    };
  };
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (outColor_5.xyz, spColor_22.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_22.xyz = tmpvar_32;
  outColor_5 = spColor_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_22.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 reflection_18;
  mediump vec3 R_19;
  mediump float intensity_20;
  mediump vec4 noiseTex_21;
  mediump vec4 spColor_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_22.xyz = tmpvar_23.xyz;
  spColor_22.w = outColor_5.w;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_21 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (((1.99 * noiseTex_21.x) * _SPNoiseScaler) - 1.0);
  intensity_20 = tmpvar_25;
  highp vec3 tmpvar_26;
  highp vec3 I_27;
  I_27 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_21 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_26 = (I_27 - (2.0 * (
    dot (N_3, I_27)
   * N_3)));
  R_19 = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = textureCube (_SPCubeMap, R_19).xyz;
  reflection_18 = tmpvar_28;
  highp vec3 tmpvar_29;
  mediump vec3 x_30;
  x_30 = (spColor_22.xyz * _SPOldColor.xyz);
  tmpvar_29 = mix (x_30, ((reflection_18 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_22.xyz = tmpvar_29;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_20 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_20 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_31;
      tmpvar_31 = mix (spColor_22, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_20) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_22 = tmpvar_31;
    };
  };
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (outColor_5.xyz, spColor_22.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_22.xyz = tmpvar_32;
  outColor_5 = spColor_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_22.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 reflection_18;
  mediump vec3 R_19;
  mediump float intensity_20;
  mediump vec4 noiseTex_21;
  mediump vec4 spColor_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_22.xyz = tmpvar_23.xyz;
  spColor_22.w = outColor_5.w;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_21 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (((1.99 * noiseTex_21.x) * _SPNoiseScaler) - 1.0);
  intensity_20 = tmpvar_25;
  highp vec3 tmpvar_26;
  highp vec3 I_27;
  I_27 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_21 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_26 = (I_27 - (2.0 * (
    dot (N_3, I_27)
   * N_3)));
  R_19 = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = textureCube (_SPCubeMap, R_19).xyz;
  reflection_18 = tmpvar_28;
  highp vec3 tmpvar_29;
  mediump vec3 x_30;
  x_30 = (spColor_22.xyz * _SPOldColor.xyz);
  tmpvar_29 = mix (x_30, ((reflection_18 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_22.xyz = tmpvar_29;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_20 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_20 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_31;
      tmpvar_31 = mix (spColor_22, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_20) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_22 = tmpvar_31;
    };
  };
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (outColor_5.xyz, spColor_22.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_22.xyz = tmpvar_32;
  outColor_5 = spColor_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_22.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 reflection_18;
  mediump vec3 R_19;
  mediump float intensity_20;
  mediump vec4 noiseTex_21;
  mediump vec4 spColor_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_22.xyz = tmpvar_23.xyz;
  spColor_22.w = outColor_5.w;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_21 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (((1.99 * noiseTex_21.x) * _SPNoiseScaler) - 1.0);
  intensity_20 = tmpvar_25;
  highp vec3 tmpvar_26;
  highp vec3 I_27;
  I_27 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_21 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_26 = (I_27 - (2.0 * (
    dot (N_3, I_27)
   * N_3)));
  R_19 = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = textureCube (_SPCubeMap, R_19).xyz;
  reflection_18 = tmpvar_28;
  highp vec3 tmpvar_29;
  mediump vec3 x_30;
  x_30 = (spColor_22.xyz * _SPOldColor.xyz);
  tmpvar_29 = mix (x_30, ((reflection_18 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_22.xyz = tmpvar_29;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_20 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_20 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_31;
      tmpvar_31 = mix (spColor_22, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_20) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_22 = tmpvar_31;
    };
  };
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (outColor_5.xyz, spColor_22.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_22.xyz = tmpvar_32;
  outColor_5 = spColor_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_22.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 reflection_18;
  mediump vec3 R_19;
  mediump float intensity_20;
  mediump vec4 noiseTex_21;
  mediump vec4 spColor_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_22.xyz = tmpvar_23.xyz;
  spColor_22.w = outColor_5.w;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_21 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (((1.99 * noiseTex_21.x) * _SPNoiseScaler) - 1.0);
  intensity_20 = tmpvar_25;
  highp vec3 tmpvar_26;
  highp vec3 I_27;
  I_27 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_21 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_26 = (I_27 - (2.0 * (
    dot (N_3, I_27)
   * N_3)));
  R_19 = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = textureCube (_SPCubeMap, R_19).xyz;
  reflection_18 = tmpvar_28;
  highp vec3 tmpvar_29;
  mediump vec3 x_30;
  x_30 = (spColor_22.xyz * _SPOldColor.xyz);
  tmpvar_29 = mix (x_30, ((reflection_18 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_22.xyz = tmpvar_29;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_20 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_20 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_31;
      tmpvar_31 = mix (spColor_22, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_20) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_22 = tmpvar_31;
    };
  };
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (outColor_5.xyz, spColor_22.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_22.xyz = tmpvar_32;
  outColor_5 = spColor_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_22.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = tmpvar_5;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_8;
  tmpvar_8 = tmpvar_7.w;
  mediump vec2 tmpvar_9;
  tmpvar_9.y = 0.0;
  tmpvar_9.x = tmpvar_8;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_tableTex, tmpvar_9).xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 1.0;
  tmpvar_12.x = tmpvar_8;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = mix (tmpvar_11, tmpvar_14, tmpvar_6.xxx);
  tmpvar_15.w = tmpvar_6.y;
  mediump float x_16;
  x_16 = (tmpvar_6.y - _AlphaClipThreshold);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_15.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_15.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_18 * _Color.xyz) * _EnvColor.xyz) + color_22);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.y);
  mediump vec3 reflection_27;
  mediump vec3 R_28;
  mediump float intensity_29;
  mediump vec4 noiseTex_30;
  mediump vec4 spColor_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_31.xyz = tmpvar_32.xyz;
  spColor_31.w = outColor_4.w;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_30 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = (((1.99 * noiseTex_30.x) * _SPNoiseScaler) - 1.0);
  intensity_29 = tmpvar_34;
  highp vec3 tmpvar_35;
  highp vec3 I_36;
  I_36 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_30 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_35 = (I_36 - (2.0 * (
    dot (N_3, I_36)
   * N_3)));
  R_28 = tmpvar_35;
  lowp vec3 tmpvar_37;
  tmpvar_37 = textureCube (_SPCubeMap, R_28).xyz;
  reflection_27 = tmpvar_37;
  highp vec3 tmpvar_38;
  mediump vec3 x_39;
  x_39 = (spColor_31.xyz * _SPOldColor.xyz);
  tmpvar_38 = mix (x_39, ((reflection_27 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_31.xyz = tmpvar_38;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_29 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_29 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_40;
      tmpvar_40 = mix (spColor_31, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_29) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_31 = tmpvar_40;
    };
  };
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (outColor_4.xyz, spColor_31.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_31.xyz = tmpvar_41;
  outColor_4 = spColor_31;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_42;
    scrpos_42 = xlv_TEXCOORD3;
    mediump float a_43;
    a_43 = xlv_TEXCOORD3.z;
    if ((a_43 < 0.95)) {
      scrpos_42.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_43 = (a_43 * 17.0);
      highp float tmpvar_44;
      tmpvar_44 = (scrpos_42.y / 4.0);
      highp float tmpvar_45;
      tmpvar_45 = (fract(abs(tmpvar_44)) * 4.0);
      highp float tmpvar_46;
      if ((tmpvar_44 >= 0.0)) {
        tmpvar_46 = tmpvar_45;
      } else {
        tmpvar_46 = -(tmpvar_45);
      };
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_42.x / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float x_50;
      x_50 = ((a_43 - _DITHERMATRIX[
        int(tmpvar_46)
      ][
        int(tmpvar_49)
      ]) - 0.01);
      if ((x_50 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_31.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = tmpvar_5;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_8;
  tmpvar_8 = tmpvar_7.w;
  mediump vec2 tmpvar_9;
  tmpvar_9.y = 0.0;
  tmpvar_9.x = tmpvar_8;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_tableTex, tmpvar_9).xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 1.0;
  tmpvar_12.x = tmpvar_8;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = mix (tmpvar_11, tmpvar_14, tmpvar_6.xxx);
  tmpvar_15.w = tmpvar_6.y;
  mediump float x_16;
  x_16 = (tmpvar_6.y - _AlphaClipThreshold);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_15.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_15.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_18 * _Color.xyz) * _EnvColor.xyz) + color_22);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.y);
  mediump vec3 reflection_27;
  mediump vec3 R_28;
  mediump float intensity_29;
  mediump vec4 noiseTex_30;
  mediump vec4 spColor_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_31.xyz = tmpvar_32.xyz;
  spColor_31.w = outColor_4.w;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_30 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = (((1.99 * noiseTex_30.x) * _SPNoiseScaler) - 1.0);
  intensity_29 = tmpvar_34;
  highp vec3 tmpvar_35;
  highp vec3 I_36;
  I_36 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_30 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_35 = (I_36 - (2.0 * (
    dot (N_3, I_36)
   * N_3)));
  R_28 = tmpvar_35;
  lowp vec3 tmpvar_37;
  tmpvar_37 = textureCube (_SPCubeMap, R_28).xyz;
  reflection_27 = tmpvar_37;
  highp vec3 tmpvar_38;
  mediump vec3 x_39;
  x_39 = (spColor_31.xyz * _SPOldColor.xyz);
  tmpvar_38 = mix (x_39, ((reflection_27 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_31.xyz = tmpvar_38;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_29 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_29 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_40;
      tmpvar_40 = mix (spColor_31, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_29) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_31 = tmpvar_40;
    };
  };
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (outColor_4.xyz, spColor_31.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_31.xyz = tmpvar_41;
  outColor_4 = spColor_31;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_42;
    scrpos_42 = xlv_TEXCOORD3;
    mediump float a_43;
    a_43 = xlv_TEXCOORD3.z;
    if ((a_43 < 0.95)) {
      scrpos_42.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_43 = (a_43 * 17.0);
      highp float tmpvar_44;
      tmpvar_44 = (scrpos_42.y / 4.0);
      highp float tmpvar_45;
      tmpvar_45 = (fract(abs(tmpvar_44)) * 4.0);
      highp float tmpvar_46;
      if ((tmpvar_44 >= 0.0)) {
        tmpvar_46 = tmpvar_45;
      } else {
        tmpvar_46 = -(tmpvar_45);
      };
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_42.x / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float x_50;
      x_50 = ((a_43 - _DITHERMATRIX[
        int(tmpvar_46)
      ][
        int(tmpvar_49)
      ]) - 0.01);
      if ((x_50 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_31.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = tmpvar_5;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_8;
  tmpvar_8 = tmpvar_7.w;
  mediump vec2 tmpvar_9;
  tmpvar_9.y = 0.0;
  tmpvar_9.x = tmpvar_8;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_tableTex, tmpvar_9).xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 1.0;
  tmpvar_12.x = tmpvar_8;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = mix (tmpvar_11, tmpvar_14, tmpvar_6.xxx);
  tmpvar_15.w = tmpvar_6.y;
  mediump float x_16;
  x_16 = (tmpvar_6.y - _AlphaClipThreshold);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_15.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_15.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_18 * _Color.xyz) * _EnvColor.xyz) + color_22);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.y);
  mediump vec3 reflection_27;
  mediump vec3 R_28;
  mediump float intensity_29;
  mediump vec4 noiseTex_30;
  mediump vec4 spColor_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_31.xyz = tmpvar_32.xyz;
  spColor_31.w = outColor_4.w;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_30 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = (((1.99 * noiseTex_30.x) * _SPNoiseScaler) - 1.0);
  intensity_29 = tmpvar_34;
  highp vec3 tmpvar_35;
  highp vec3 I_36;
  I_36 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_30 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_35 = (I_36 - (2.0 * (
    dot (N_3, I_36)
   * N_3)));
  R_28 = tmpvar_35;
  lowp vec3 tmpvar_37;
  tmpvar_37 = textureCube (_SPCubeMap, R_28).xyz;
  reflection_27 = tmpvar_37;
  highp vec3 tmpvar_38;
  mediump vec3 x_39;
  x_39 = (spColor_31.xyz * _SPOldColor.xyz);
  tmpvar_38 = mix (x_39, ((reflection_27 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_31.xyz = tmpvar_38;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_29 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_29 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_40;
      tmpvar_40 = mix (spColor_31, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_29) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_31 = tmpvar_40;
    };
  };
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (outColor_4.xyz, spColor_31.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_31.xyz = tmpvar_41;
  outColor_4 = spColor_31;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_42;
    scrpos_42 = xlv_TEXCOORD3;
    mediump float a_43;
    a_43 = xlv_TEXCOORD3.z;
    if ((a_43 < 0.95)) {
      scrpos_42.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_43 = (a_43 * 17.0);
      highp float tmpvar_44;
      tmpvar_44 = (scrpos_42.y / 4.0);
      highp float tmpvar_45;
      tmpvar_45 = (fract(abs(tmpvar_44)) * 4.0);
      highp float tmpvar_46;
      if ((tmpvar_44 >= 0.0)) {
        tmpvar_46 = tmpvar_45;
      } else {
        tmpvar_46 = -(tmpvar_45);
      };
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_42.x / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float x_50;
      x_50 = ((a_43 - _DITHERMATRIX[
        int(tmpvar_46)
      ][
        int(tmpvar_49)
      ]) - 0.01);
      if ((x_50 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_31.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = tmpvar_5;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_8;
  tmpvar_8 = tmpvar_7.w;
  mediump vec2 tmpvar_9;
  tmpvar_9.y = 0.0;
  tmpvar_9.x = tmpvar_8;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_tableTex, tmpvar_9).xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 1.0;
  tmpvar_12.x = tmpvar_8;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = mix (tmpvar_11, tmpvar_14, tmpvar_6.xxx);
  tmpvar_15.w = tmpvar_6.y;
  mediump float x_16;
  x_16 = (tmpvar_6.y - _AlphaClipThreshold);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_15.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_15.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_18 * _Color.xyz) * _EnvColor.xyz) + color_22);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.y);
  mediump vec3 reflection_27;
  mediump vec3 R_28;
  mediump float intensity_29;
  mediump vec4 noiseTex_30;
  mediump vec4 spColor_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_31.xyz = tmpvar_32.xyz;
  spColor_31.w = outColor_4.w;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_30 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = (((1.99 * noiseTex_30.x) * _SPNoiseScaler) - 1.0);
  intensity_29 = tmpvar_34;
  highp vec3 tmpvar_35;
  highp vec3 I_36;
  I_36 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_30 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_35 = (I_36 - (2.0 * (
    dot (N_3, I_36)
   * N_3)));
  R_28 = tmpvar_35;
  lowp vec3 tmpvar_37;
  tmpvar_37 = textureCube (_SPCubeMap, R_28).xyz;
  reflection_27 = tmpvar_37;
  highp vec3 tmpvar_38;
  mediump vec3 x_39;
  x_39 = (spColor_31.xyz * _SPOldColor.xyz);
  tmpvar_38 = mix (x_39, ((reflection_27 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_31.xyz = tmpvar_38;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_29 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_29 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_40;
      tmpvar_40 = mix (spColor_31, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_29) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_31 = tmpvar_40;
    };
  };
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (outColor_4.xyz, spColor_31.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_31.xyz = tmpvar_41;
  outColor_4 = spColor_31;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_42;
    scrpos_42 = xlv_TEXCOORD3;
    mediump float a_43;
    a_43 = xlv_TEXCOORD3.z;
    if ((a_43 < 0.95)) {
      scrpos_42.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_43 = (a_43 * 17.0);
      highp float tmpvar_44;
      tmpvar_44 = (scrpos_42.y / 4.0);
      highp float tmpvar_45;
      tmpvar_45 = (fract(abs(tmpvar_44)) * 4.0);
      highp float tmpvar_46;
      if ((tmpvar_44 >= 0.0)) {
        tmpvar_46 = tmpvar_45;
      } else {
        tmpvar_46 = -(tmpvar_45);
      };
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_42.x / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float x_50;
      x_50 = ((a_43 - _DITHERMATRIX[
        int(tmpvar_46)
      ][
        int(tmpvar_49)
      ]) - 0.01);
      if ((x_50 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_31.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = tmpvar_5;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_8;
  tmpvar_8 = tmpvar_7.w;
  mediump vec2 tmpvar_9;
  tmpvar_9.y = 0.0;
  tmpvar_9.x = tmpvar_8;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_tableTex, tmpvar_9).xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 1.0;
  tmpvar_12.x = tmpvar_8;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = mix (tmpvar_11, tmpvar_14, tmpvar_6.xxx);
  tmpvar_15.w = tmpvar_6.y;
  mediump float x_16;
  x_16 = (tmpvar_6.y - _AlphaClipThreshold);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_15.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_15.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_18 * _Color.xyz) * _EnvColor.xyz) + color_22);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.y);
  mediump vec3 reflection_27;
  mediump vec3 R_28;
  mediump float intensity_29;
  mediump vec4 noiseTex_30;
  mediump vec4 spColor_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_31.xyz = tmpvar_32.xyz;
  spColor_31.w = outColor_4.w;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_30 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = (((1.99 * noiseTex_30.x) * _SPNoiseScaler) - 1.0);
  intensity_29 = tmpvar_34;
  highp vec3 tmpvar_35;
  highp vec3 I_36;
  I_36 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_30 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_35 = (I_36 - (2.0 * (
    dot (N_3, I_36)
   * N_3)));
  R_28 = tmpvar_35;
  lowp vec3 tmpvar_37;
  tmpvar_37 = textureCube (_SPCubeMap, R_28).xyz;
  reflection_27 = tmpvar_37;
  highp vec3 tmpvar_38;
  mediump vec3 x_39;
  x_39 = (spColor_31.xyz * _SPOldColor.xyz);
  tmpvar_38 = mix (x_39, ((reflection_27 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_31.xyz = tmpvar_38;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_29 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_29 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_40;
      tmpvar_40 = mix (spColor_31, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_29) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_31 = tmpvar_40;
    };
  };
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (outColor_4.xyz, spColor_31.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_31.xyz = tmpvar_41;
  outColor_4 = spColor_31;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_42;
    scrpos_42 = xlv_TEXCOORD3;
    mediump float a_43;
    a_43 = xlv_TEXCOORD3.z;
    if ((a_43 < 0.95)) {
      scrpos_42.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_43 = (a_43 * 17.0);
      highp float tmpvar_44;
      tmpvar_44 = (scrpos_42.y / 4.0);
      highp float tmpvar_45;
      tmpvar_45 = (fract(abs(tmpvar_44)) * 4.0);
      highp float tmpvar_46;
      if ((tmpvar_44 >= 0.0)) {
        tmpvar_46 = tmpvar_45;
      } else {
        tmpvar_46 = -(tmpvar_45);
      };
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_42.x / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float x_50;
      x_50 = ((a_43 - _DITHERMATRIX[
        int(tmpvar_46)
      ][
        int(tmpvar_49)
      ]) - 0.01);
      if ((x_50 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_31.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = tmpvar_5;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_8;
  tmpvar_8 = tmpvar_7.w;
  mediump vec2 tmpvar_9;
  tmpvar_9.y = 0.0;
  tmpvar_9.x = tmpvar_8;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_tableTex, tmpvar_9).xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 1.0;
  tmpvar_12.x = tmpvar_8;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = mix (tmpvar_11, tmpvar_14, tmpvar_6.xxx);
  tmpvar_15.w = tmpvar_6.y;
  mediump float x_16;
  x_16 = (tmpvar_6.y - _AlphaClipThreshold);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_15.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_15.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_18 * _Color.xyz) * _EnvColor.xyz) + color_22);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.y);
  mediump vec3 reflection_27;
  mediump vec3 R_28;
  mediump float intensity_29;
  mediump vec4 noiseTex_30;
  mediump vec4 spColor_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_31.xyz = tmpvar_32.xyz;
  spColor_31.w = outColor_4.w;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_30 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = (((1.99 * noiseTex_30.x) * _SPNoiseScaler) - 1.0);
  intensity_29 = tmpvar_34;
  highp vec3 tmpvar_35;
  highp vec3 I_36;
  I_36 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_30 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_35 = (I_36 - (2.0 * (
    dot (N_3, I_36)
   * N_3)));
  R_28 = tmpvar_35;
  lowp vec3 tmpvar_37;
  tmpvar_37 = textureCube (_SPCubeMap, R_28).xyz;
  reflection_27 = tmpvar_37;
  highp vec3 tmpvar_38;
  mediump vec3 x_39;
  x_39 = (spColor_31.xyz * _SPOldColor.xyz);
  tmpvar_38 = mix (x_39, ((reflection_27 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_31.xyz = tmpvar_38;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_29 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_29 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_40;
      tmpvar_40 = mix (spColor_31, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_29) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_31 = tmpvar_40;
    };
  };
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (outColor_4.xyz, spColor_31.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_31.xyz = tmpvar_41;
  outColor_4 = spColor_31;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_42;
    scrpos_42 = xlv_TEXCOORD3;
    mediump float a_43;
    a_43 = xlv_TEXCOORD3.z;
    if ((a_43 < 0.95)) {
      scrpos_42.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_43 = (a_43 * 17.0);
      highp float tmpvar_44;
      tmpvar_44 = (scrpos_42.y / 4.0);
      highp float tmpvar_45;
      tmpvar_45 = (fract(abs(tmpvar_44)) * 4.0);
      highp float tmpvar_46;
      if ((tmpvar_44 >= 0.0)) {
        tmpvar_46 = tmpvar_45;
      } else {
        tmpvar_46 = -(tmpvar_45);
      };
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_42.x / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float x_50;
      x_50 = ((a_43 - _DITHERMATRIX[
        int(tmpvar_46)
      ][
        int(tmpvar_49)
      ]) - 0.01);
      if ((x_50 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_31.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = tmpvar_5;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_8;
  tmpvar_8 = tmpvar_7.w;
  mediump vec2 tmpvar_9;
  tmpvar_9.y = 0.0;
  tmpvar_9.x = tmpvar_8;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_tableTex, tmpvar_9).xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 1.0;
  tmpvar_12.x = tmpvar_8;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = mix (tmpvar_11, tmpvar_14, tmpvar_6.xxx);
  tmpvar_15.w = tmpvar_6.y;
  mediump float x_16;
  x_16 = (tmpvar_6.y - _AlphaClipThreshold);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_15.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_15.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_18 * _Color.xyz) * _EnvColor.xyz) + color_22);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.y);
  mediump vec3 reflection_27;
  mediump vec3 R_28;
  mediump float intensity_29;
  mediump vec4 noiseTex_30;
  mediump vec4 spColor_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_31.xyz = tmpvar_32.xyz;
  spColor_31.w = outColor_4.w;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_30 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = (((1.99 * noiseTex_30.x) * _SPNoiseScaler) - 1.0);
  intensity_29 = tmpvar_34;
  highp vec3 tmpvar_35;
  highp vec3 I_36;
  I_36 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_30 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_35 = (I_36 - (2.0 * (
    dot (N_3, I_36)
   * N_3)));
  R_28 = tmpvar_35;
  lowp vec3 tmpvar_37;
  tmpvar_37 = textureCube (_SPCubeMap, R_28).xyz;
  reflection_27 = tmpvar_37;
  highp vec3 tmpvar_38;
  mediump vec3 x_39;
  x_39 = (spColor_31.xyz * _SPOldColor.xyz);
  tmpvar_38 = mix (x_39, ((reflection_27 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_31.xyz = tmpvar_38;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_29 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_29 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_40;
      tmpvar_40 = mix (spColor_31, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_29) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_31 = tmpvar_40;
    };
  };
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (outColor_4.xyz, spColor_31.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_31.xyz = tmpvar_41;
  outColor_4 = spColor_31;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_42;
    scrpos_42 = xlv_TEXCOORD3;
    mediump float a_43;
    a_43 = xlv_TEXCOORD3.z;
    if ((a_43 < 0.95)) {
      scrpos_42.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_43 = (a_43 * 17.0);
      highp float tmpvar_44;
      tmpvar_44 = (scrpos_42.y / 4.0);
      highp float tmpvar_45;
      tmpvar_45 = (fract(abs(tmpvar_44)) * 4.0);
      highp float tmpvar_46;
      if ((tmpvar_44 >= 0.0)) {
        tmpvar_46 = tmpvar_45;
      } else {
        tmpvar_46 = -(tmpvar_45);
      };
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_42.x / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float x_50;
      x_50 = ((a_43 - _DITHERMATRIX[
        int(tmpvar_46)
      ][
        int(tmpvar_49)
      ]) - 0.01);
      if ((x_50 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_31.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = tmpvar_5;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_8;
  tmpvar_8 = tmpvar_7.w;
  mediump vec2 tmpvar_9;
  tmpvar_9.y = 0.0;
  tmpvar_9.x = tmpvar_8;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_tableTex, tmpvar_9).xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 1.0;
  tmpvar_12.x = tmpvar_8;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = mix (tmpvar_11, tmpvar_14, tmpvar_6.xxx);
  tmpvar_15.w = tmpvar_6.y;
  mediump float x_16;
  x_16 = (tmpvar_6.y - _AlphaClipThreshold);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_15.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_15.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_18 * _Color.xyz) * _EnvColor.xyz) + color_22);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.y);
  mediump vec3 reflection_27;
  mediump vec3 R_28;
  mediump float intensity_29;
  mediump vec4 noiseTex_30;
  mediump vec4 spColor_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_31.xyz = tmpvar_32.xyz;
  spColor_31.w = outColor_4.w;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_30 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = (((1.99 * noiseTex_30.x) * _SPNoiseScaler) - 1.0);
  intensity_29 = tmpvar_34;
  highp vec3 tmpvar_35;
  highp vec3 I_36;
  I_36 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_30 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_35 = (I_36 - (2.0 * (
    dot (N_3, I_36)
   * N_3)));
  R_28 = tmpvar_35;
  lowp vec3 tmpvar_37;
  tmpvar_37 = textureCube (_SPCubeMap, R_28).xyz;
  reflection_27 = tmpvar_37;
  highp vec3 tmpvar_38;
  mediump vec3 x_39;
  x_39 = (spColor_31.xyz * _SPOldColor.xyz);
  tmpvar_38 = mix (x_39, ((reflection_27 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_31.xyz = tmpvar_38;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_29 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_29 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_40;
      tmpvar_40 = mix (spColor_31, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_29) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_31 = tmpvar_40;
    };
  };
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (outColor_4.xyz, spColor_31.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_31.xyz = tmpvar_41;
  outColor_4 = spColor_31;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_42;
    scrpos_42 = xlv_TEXCOORD3;
    mediump float a_43;
    a_43 = xlv_TEXCOORD3.z;
    if ((a_43 < 0.95)) {
      scrpos_42.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_43 = (a_43 * 17.0);
      highp float tmpvar_44;
      tmpvar_44 = (scrpos_42.y / 4.0);
      highp float tmpvar_45;
      tmpvar_45 = (fract(abs(tmpvar_44)) * 4.0);
      highp float tmpvar_46;
      if ((tmpvar_44 >= 0.0)) {
        tmpvar_46 = tmpvar_45;
      } else {
        tmpvar_46 = -(tmpvar_45);
      };
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_42.x / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float x_50;
      x_50 = ((a_43 - _DITHERMATRIX[
        int(tmpvar_46)
      ][
        int(tmpvar_49)
      ]) - 0.01);
      if ((x_50 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_31.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = tmpvar_5;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_8;
  tmpvar_8 = tmpvar_7.w;
  mediump vec2 tmpvar_9;
  tmpvar_9.y = 0.0;
  tmpvar_9.x = tmpvar_8;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_tableTex, tmpvar_9).xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 1.0;
  tmpvar_12.x = tmpvar_8;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = mix (tmpvar_11, tmpvar_14, tmpvar_6.xxx);
  tmpvar_15.w = tmpvar_6.y;
  mediump float x_16;
  x_16 = (tmpvar_6.y - _AlphaClipThreshold);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_15.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_15.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_18 * _Color.xyz) * _EnvColor.xyz) + color_22);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.y);
  mediump vec3 reflection_27;
  mediump vec3 R_28;
  mediump float intensity_29;
  mediump vec4 noiseTex_30;
  mediump vec4 spColor_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_31.xyz = tmpvar_32.xyz;
  spColor_31.w = outColor_4.w;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_30 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = (((1.99 * noiseTex_30.x) * _SPNoiseScaler) - 1.0);
  intensity_29 = tmpvar_34;
  highp vec3 tmpvar_35;
  highp vec3 I_36;
  I_36 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_30 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_35 = (I_36 - (2.0 * (
    dot (N_3, I_36)
   * N_3)));
  R_28 = tmpvar_35;
  lowp vec3 tmpvar_37;
  tmpvar_37 = textureCube (_SPCubeMap, R_28).xyz;
  reflection_27 = tmpvar_37;
  highp vec3 tmpvar_38;
  mediump vec3 x_39;
  x_39 = (spColor_31.xyz * _SPOldColor.xyz);
  tmpvar_38 = mix (x_39, ((reflection_27 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_31.xyz = tmpvar_38;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_29 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_29 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_40;
      tmpvar_40 = mix (spColor_31, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_29) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_31 = tmpvar_40;
    };
  };
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (outColor_4.xyz, spColor_31.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_31.xyz = tmpvar_41;
  outColor_4 = spColor_31;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_42;
    scrpos_42 = xlv_TEXCOORD3;
    mediump float a_43;
    a_43 = xlv_TEXCOORD3.z;
    if ((a_43 < 0.95)) {
      scrpos_42.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_43 = (a_43 * 17.0);
      highp float tmpvar_44;
      tmpvar_44 = (scrpos_42.y / 4.0);
      highp float tmpvar_45;
      tmpvar_45 = (fract(abs(tmpvar_44)) * 4.0);
      highp float tmpvar_46;
      if ((tmpvar_44 >= 0.0)) {
        tmpvar_46 = tmpvar_45;
      } else {
        tmpvar_46 = -(tmpvar_45);
      };
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_42.x / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float x_50;
      x_50 = ((a_43 - _DITHERMATRIX[
        int(tmpvar_46)
      ][
        int(tmpvar_49)
      ]) - 0.01);
      if ((x_50 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_31.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = tmpvar_5;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_8;
  tmpvar_8 = tmpvar_7.w;
  mediump vec2 tmpvar_9;
  tmpvar_9.y = 0.0;
  tmpvar_9.x = tmpvar_8;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_tableTex, tmpvar_9).xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 1.0;
  tmpvar_12.x = tmpvar_8;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = mix (tmpvar_11, tmpvar_14, tmpvar_6.xxx);
  tmpvar_15.w = tmpvar_6.y;
  mediump float x_16;
  x_16 = (tmpvar_6.y - _AlphaClipThreshold);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_15.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_15.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_18 * _Color.xyz) * _EnvColor.xyz) + color_22);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.y);
  mediump vec3 reflection_27;
  mediump vec3 R_28;
  mediump float intensity_29;
  mediump vec4 noiseTex_30;
  mediump vec4 spColor_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_31.xyz = tmpvar_32.xyz;
  spColor_31.w = outColor_4.w;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_30 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = (((1.99 * noiseTex_30.x) * _SPNoiseScaler) - 1.0);
  intensity_29 = tmpvar_34;
  highp vec3 tmpvar_35;
  highp vec3 I_36;
  I_36 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_30 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_35 = (I_36 - (2.0 * (
    dot (N_3, I_36)
   * N_3)));
  R_28 = tmpvar_35;
  lowp vec3 tmpvar_37;
  tmpvar_37 = textureCube (_SPCubeMap, R_28).xyz;
  reflection_27 = tmpvar_37;
  highp vec3 tmpvar_38;
  mediump vec3 x_39;
  x_39 = (spColor_31.xyz * _SPOldColor.xyz);
  tmpvar_38 = mix (x_39, ((reflection_27 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_31.xyz = tmpvar_38;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_29 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_29 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_40;
      tmpvar_40 = mix (spColor_31, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_29) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_31 = tmpvar_40;
    };
  };
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (outColor_4.xyz, spColor_31.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_31.xyz = tmpvar_41;
  outColor_4 = spColor_31;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_42;
    scrpos_42 = xlv_TEXCOORD3;
    mediump float a_43;
    a_43 = xlv_TEXCOORD3.z;
    if ((a_43 < 0.95)) {
      scrpos_42.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_43 = (a_43 * 17.0);
      highp float tmpvar_44;
      tmpvar_44 = (scrpos_42.y / 4.0);
      highp float tmpvar_45;
      tmpvar_45 = (fract(abs(tmpvar_44)) * 4.0);
      highp float tmpvar_46;
      if ((tmpvar_44 >= 0.0)) {
        tmpvar_46 = tmpvar_45;
      } else {
        tmpvar_46 = -(tmpvar_45);
      };
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_42.x / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float x_50;
      x_50 = ((a_43 - _DITHERMATRIX[
        int(tmpvar_46)
      ][
        int(tmpvar_49)
      ]) - 0.01);
      if ((x_50 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_31.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = tmpvar_5;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_8;
  tmpvar_8 = tmpvar_7.w;
  mediump vec2 tmpvar_9;
  tmpvar_9.y = 0.0;
  tmpvar_9.x = tmpvar_8;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_tableTex, tmpvar_9).xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 1.0;
  tmpvar_12.x = tmpvar_8;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = mix (tmpvar_11, tmpvar_14, tmpvar_6.xxx);
  tmpvar_15.w = tmpvar_6.y;
  mediump float x_16;
  x_16 = (tmpvar_6.y - _AlphaClipThreshold);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_15.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_15.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_18 * _Color.xyz) * _EnvColor.xyz) + color_22);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.y);
  mediump vec3 reflection_27;
  mediump vec3 R_28;
  mediump float intensity_29;
  mediump vec4 noiseTex_30;
  mediump vec4 spColor_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_31.xyz = tmpvar_32.xyz;
  spColor_31.w = outColor_4.w;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_30 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = (((1.99 * noiseTex_30.x) * _SPNoiseScaler) - 1.0);
  intensity_29 = tmpvar_34;
  highp vec3 tmpvar_35;
  highp vec3 I_36;
  I_36 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_30 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_35 = (I_36 - (2.0 * (
    dot (N_3, I_36)
   * N_3)));
  R_28 = tmpvar_35;
  lowp vec3 tmpvar_37;
  tmpvar_37 = textureCube (_SPCubeMap, R_28).xyz;
  reflection_27 = tmpvar_37;
  highp vec3 tmpvar_38;
  mediump vec3 x_39;
  x_39 = (spColor_31.xyz * _SPOldColor.xyz);
  tmpvar_38 = mix (x_39, ((reflection_27 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_31.xyz = tmpvar_38;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_29 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_29 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_40;
      tmpvar_40 = mix (spColor_31, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_29) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_31 = tmpvar_40;
    };
  };
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (outColor_4.xyz, spColor_31.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_31.xyz = tmpvar_41;
  outColor_4 = spColor_31;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_42;
    scrpos_42 = xlv_TEXCOORD3;
    mediump float a_43;
    a_43 = xlv_TEXCOORD3.z;
    if ((a_43 < 0.95)) {
      scrpos_42.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_43 = (a_43 * 17.0);
      highp float tmpvar_44;
      tmpvar_44 = (scrpos_42.y / 4.0);
      highp float tmpvar_45;
      tmpvar_45 = (fract(abs(tmpvar_44)) * 4.0);
      highp float tmpvar_46;
      if ((tmpvar_44 >= 0.0)) {
        tmpvar_46 = tmpvar_45;
      } else {
        tmpvar_46 = -(tmpvar_45);
      };
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_42.x / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float x_50;
      x_50 = ((a_43 - _DITHERMATRIX[
        int(tmpvar_46)
      ][
        int(tmpvar_49)
      ]) - 0.01);
      if ((x_50 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_31.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = tmpvar_5;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_8;
  tmpvar_8 = tmpvar_7.w;
  mediump vec2 tmpvar_9;
  tmpvar_9.y = 0.0;
  tmpvar_9.x = tmpvar_8;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_tableTex, tmpvar_9).xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 1.0;
  tmpvar_12.x = tmpvar_8;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = mix (tmpvar_11, tmpvar_14, tmpvar_6.xxx);
  tmpvar_15.w = tmpvar_6.y;
  mediump float x_16;
  x_16 = (tmpvar_6.y - _AlphaClipThreshold);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_15.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_15.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_18 * _Color.xyz) * _EnvColor.xyz) + color_22);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.y);
  mediump vec3 reflection_27;
  mediump vec3 R_28;
  mediump float intensity_29;
  mediump vec4 noiseTex_30;
  mediump vec4 spColor_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_31.xyz = tmpvar_32.xyz;
  spColor_31.w = outColor_4.w;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_30 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = (((1.99 * noiseTex_30.x) * _SPNoiseScaler) - 1.0);
  intensity_29 = tmpvar_34;
  highp vec3 tmpvar_35;
  highp vec3 I_36;
  I_36 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_30 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_35 = (I_36 - (2.0 * (
    dot (N_3, I_36)
   * N_3)));
  R_28 = tmpvar_35;
  lowp vec3 tmpvar_37;
  tmpvar_37 = textureCube (_SPCubeMap, R_28).xyz;
  reflection_27 = tmpvar_37;
  highp vec3 tmpvar_38;
  mediump vec3 x_39;
  x_39 = (spColor_31.xyz * _SPOldColor.xyz);
  tmpvar_38 = mix (x_39, ((reflection_27 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_31.xyz = tmpvar_38;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_29 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_29 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_40;
      tmpvar_40 = mix (spColor_31, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_29) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_31 = tmpvar_40;
    };
  };
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (outColor_4.xyz, spColor_31.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_31.xyz = tmpvar_41;
  outColor_4 = spColor_31;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_42;
    scrpos_42 = xlv_TEXCOORD3;
    mediump float a_43;
    a_43 = xlv_TEXCOORD3.z;
    if ((a_43 < 0.95)) {
      scrpos_42.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_43 = (a_43 * 17.0);
      highp float tmpvar_44;
      tmpvar_44 = (scrpos_42.y / 4.0);
      highp float tmpvar_45;
      tmpvar_45 = (fract(abs(tmpvar_44)) * 4.0);
      highp float tmpvar_46;
      if ((tmpvar_44 >= 0.0)) {
        tmpvar_46 = tmpvar_45;
      } else {
        tmpvar_46 = -(tmpvar_45);
      };
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_42.x / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float x_50;
      x_50 = ((a_43 - _DITHERMATRIX[
        int(tmpvar_46)
      ][
        int(tmpvar_49)
      ]) - 0.01);
      if ((x_50 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_31.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_5;
  highp vec2 pixelSize_6;
  pixelSize_6 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8 = floor(tmpvar_7);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract(tmpvar_7);
  highp vec2 uv_10;
  uv_10 = ((tmpvar_8 + vec2(0.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_factorTex, uv_10);
  mediump vec4 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_indexTex, uv_10);
  mediump float tmpvar_14;
  tmpvar_14 = tmpvar_13.w;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 1.0;
  tmpvar_18.x = tmpvar_14;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = mix (tmpvar_17, tmpvar_20, tmpvar_12.xxx);
  tmpvar_21.w = tmpvar_12.y;
  highp vec2 uv_22;
  uv_22 = ((tmpvar_8 + vec2(1.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_factorTex, uv_22);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_indexTex, uv_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25.w;
  mediump vec2 tmpvar_27;
  tmpvar_27.y = 0.0;
  tmpvar_27.x = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_tableTex, tmpvar_27).xyz;
  mediump vec3 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 1.0;
  tmpvar_30.x = tmpvar_26;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = mix (tmpvar_29, tmpvar_32, tmpvar_24.xxx);
  tmpvar_33.w = tmpvar_24.y;
  highp vec2 uv_34;
  uv_34 = ((tmpvar_8 + vec2(0.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_factorTex, uv_34);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_indexTex, uv_34);
  mediump float tmpvar_38;
  tmpvar_38 = tmpvar_37.w;
  mediump vec2 tmpvar_39;
  tmpvar_39.y = 0.0;
  tmpvar_39.x = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_tableTex, tmpvar_39).xyz;
  mediump vec3 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 1.0;
  tmpvar_42.x = tmpvar_38;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = mix (tmpvar_41, tmpvar_44, tmpvar_36.xxx);
  tmpvar_45.w = tmpvar_36.y;
  highp vec2 uv_46;
  uv_46 = ((tmpvar_8 + vec2(1.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_factorTex, uv_46);
  mediump vec4 tmpvar_48;
  tmpvar_48 = tmpvar_47;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_indexTex, uv_46);
  mediump float tmpvar_50;
  tmpvar_50 = tmpvar_49.w;
  mediump vec2 tmpvar_51;
  tmpvar_51.y = 0.0;
  tmpvar_51.x = tmpvar_50;
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_tableTex, tmpvar_51).xyz;
  mediump vec3 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 1.0;
  tmpvar_54.x = tmpvar_50;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = mix (tmpvar_53, tmpvar_56, tmpvar_48.xxx);
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58 = mix (mix (tmpvar_21, tmpvar_33, tmpvar_9.xxxx), mix (tmpvar_45, tmpvar_57, tmpvar_9.xxxx), tmpvar_9.yyyy);
  tmpvar_5 = tmpvar_58;
  mediump float x_59;
  x_59 = (tmpvar_5.w - _AlphaClipThreshold);
  if ((x_59 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_5.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_5.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_61 * _Color.xyz) * _EnvColor.xyz) + color_65);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_5.w);
  mediump vec3 reflection_70;
  mediump vec3 R_71;
  mediump float intensity_72;
  mediump vec4 noiseTex_73;
  mediump vec4 spColor_74;
  lowp vec4 tmpvar_75;
  tmpvar_75 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_74.xyz = tmpvar_75.xyz;
  spColor_74.w = outColor_4.w;
  lowp vec4 tmpvar_76;
  tmpvar_76 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_73 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (((1.99 * noiseTex_73.x) * _SPNoiseScaler) - 1.0);
  intensity_72 = tmpvar_77;
  highp vec3 tmpvar_78;
  highp vec3 I_79;
  I_79 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_73 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_78 = (I_79 - (2.0 * (
    dot (N_3, I_79)
   * N_3)));
  R_71 = tmpvar_78;
  lowp vec3 tmpvar_80;
  tmpvar_80 = textureCube (_SPCubeMap, R_71).xyz;
  reflection_70 = tmpvar_80;
  highp vec3 tmpvar_81;
  mediump vec3 x_82;
  x_82 = (spColor_74.xyz * _SPOldColor.xyz);
  tmpvar_81 = mix (x_82, ((reflection_70 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_74.xyz = tmpvar_81;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_72 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_72 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_83;
      tmpvar_83 = mix (spColor_74, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_72) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_74 = tmpvar_83;
    };
  };
  highp vec3 tmpvar_84;
  tmpvar_84 = mix (outColor_4.xyz, spColor_74.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_74.xyz = tmpvar_84;
  outColor_4 = spColor_74;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_85;
    scrpos_85 = xlv_TEXCOORD3;
    mediump float a_86;
    a_86 = xlv_TEXCOORD3.z;
    if ((a_86 < 0.95)) {
      scrpos_85.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_86 = (a_86 * 17.0);
      highp float tmpvar_87;
      tmpvar_87 = (scrpos_85.y / 4.0);
      highp float tmpvar_88;
      tmpvar_88 = (fract(abs(tmpvar_87)) * 4.0);
      highp float tmpvar_89;
      if ((tmpvar_87 >= 0.0)) {
        tmpvar_89 = tmpvar_88;
      } else {
        tmpvar_89 = -(tmpvar_88);
      };
      highp float tmpvar_90;
      tmpvar_90 = (scrpos_85.x / 4.0);
      highp float tmpvar_91;
      tmpvar_91 = (fract(abs(tmpvar_90)) * 4.0);
      highp float tmpvar_92;
      if ((tmpvar_90 >= 0.0)) {
        tmpvar_92 = tmpvar_91;
      } else {
        tmpvar_92 = -(tmpvar_91);
      };
      highp float x_93;
      x_93 = ((a_86 - _DITHERMATRIX[
        int(tmpvar_89)
      ][
        int(tmpvar_92)
      ]) - 0.01);
      if ((x_93 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_74.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_5;
  highp vec2 pixelSize_6;
  pixelSize_6 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8 = floor(tmpvar_7);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract(tmpvar_7);
  highp vec2 uv_10;
  uv_10 = ((tmpvar_8 + vec2(0.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_factorTex, uv_10);
  mediump vec4 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_indexTex, uv_10);
  mediump float tmpvar_14;
  tmpvar_14 = tmpvar_13.w;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 1.0;
  tmpvar_18.x = tmpvar_14;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = mix (tmpvar_17, tmpvar_20, tmpvar_12.xxx);
  tmpvar_21.w = tmpvar_12.y;
  highp vec2 uv_22;
  uv_22 = ((tmpvar_8 + vec2(1.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_factorTex, uv_22);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_indexTex, uv_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25.w;
  mediump vec2 tmpvar_27;
  tmpvar_27.y = 0.0;
  tmpvar_27.x = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_tableTex, tmpvar_27).xyz;
  mediump vec3 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 1.0;
  tmpvar_30.x = tmpvar_26;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = mix (tmpvar_29, tmpvar_32, tmpvar_24.xxx);
  tmpvar_33.w = tmpvar_24.y;
  highp vec2 uv_34;
  uv_34 = ((tmpvar_8 + vec2(0.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_factorTex, uv_34);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_indexTex, uv_34);
  mediump float tmpvar_38;
  tmpvar_38 = tmpvar_37.w;
  mediump vec2 tmpvar_39;
  tmpvar_39.y = 0.0;
  tmpvar_39.x = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_tableTex, tmpvar_39).xyz;
  mediump vec3 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 1.0;
  tmpvar_42.x = tmpvar_38;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = mix (tmpvar_41, tmpvar_44, tmpvar_36.xxx);
  tmpvar_45.w = tmpvar_36.y;
  highp vec2 uv_46;
  uv_46 = ((tmpvar_8 + vec2(1.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_factorTex, uv_46);
  mediump vec4 tmpvar_48;
  tmpvar_48 = tmpvar_47;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_indexTex, uv_46);
  mediump float tmpvar_50;
  tmpvar_50 = tmpvar_49.w;
  mediump vec2 tmpvar_51;
  tmpvar_51.y = 0.0;
  tmpvar_51.x = tmpvar_50;
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_tableTex, tmpvar_51).xyz;
  mediump vec3 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 1.0;
  tmpvar_54.x = tmpvar_50;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = mix (tmpvar_53, tmpvar_56, tmpvar_48.xxx);
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58 = mix (mix (tmpvar_21, tmpvar_33, tmpvar_9.xxxx), mix (tmpvar_45, tmpvar_57, tmpvar_9.xxxx), tmpvar_9.yyyy);
  tmpvar_5 = tmpvar_58;
  mediump float x_59;
  x_59 = (tmpvar_5.w - _AlphaClipThreshold);
  if ((x_59 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_5.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_5.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_61 * _Color.xyz) * _EnvColor.xyz) + color_65);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_5.w);
  mediump vec3 reflection_70;
  mediump vec3 R_71;
  mediump float intensity_72;
  mediump vec4 noiseTex_73;
  mediump vec4 spColor_74;
  lowp vec4 tmpvar_75;
  tmpvar_75 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_74.xyz = tmpvar_75.xyz;
  spColor_74.w = outColor_4.w;
  lowp vec4 tmpvar_76;
  tmpvar_76 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_73 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (((1.99 * noiseTex_73.x) * _SPNoiseScaler) - 1.0);
  intensity_72 = tmpvar_77;
  highp vec3 tmpvar_78;
  highp vec3 I_79;
  I_79 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_73 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_78 = (I_79 - (2.0 * (
    dot (N_3, I_79)
   * N_3)));
  R_71 = tmpvar_78;
  lowp vec3 tmpvar_80;
  tmpvar_80 = textureCube (_SPCubeMap, R_71).xyz;
  reflection_70 = tmpvar_80;
  highp vec3 tmpvar_81;
  mediump vec3 x_82;
  x_82 = (spColor_74.xyz * _SPOldColor.xyz);
  tmpvar_81 = mix (x_82, ((reflection_70 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_74.xyz = tmpvar_81;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_72 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_72 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_83;
      tmpvar_83 = mix (spColor_74, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_72) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_74 = tmpvar_83;
    };
  };
  highp vec3 tmpvar_84;
  tmpvar_84 = mix (outColor_4.xyz, spColor_74.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_74.xyz = tmpvar_84;
  outColor_4 = spColor_74;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_85;
    scrpos_85 = xlv_TEXCOORD3;
    mediump float a_86;
    a_86 = xlv_TEXCOORD3.z;
    if ((a_86 < 0.95)) {
      scrpos_85.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_86 = (a_86 * 17.0);
      highp float tmpvar_87;
      tmpvar_87 = (scrpos_85.y / 4.0);
      highp float tmpvar_88;
      tmpvar_88 = (fract(abs(tmpvar_87)) * 4.0);
      highp float tmpvar_89;
      if ((tmpvar_87 >= 0.0)) {
        tmpvar_89 = tmpvar_88;
      } else {
        tmpvar_89 = -(tmpvar_88);
      };
      highp float tmpvar_90;
      tmpvar_90 = (scrpos_85.x / 4.0);
      highp float tmpvar_91;
      tmpvar_91 = (fract(abs(tmpvar_90)) * 4.0);
      highp float tmpvar_92;
      if ((tmpvar_90 >= 0.0)) {
        tmpvar_92 = tmpvar_91;
      } else {
        tmpvar_92 = -(tmpvar_91);
      };
      highp float x_93;
      x_93 = ((a_86 - _DITHERMATRIX[
        int(tmpvar_89)
      ][
        int(tmpvar_92)
      ]) - 0.01);
      if ((x_93 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_74.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_5;
  highp vec2 pixelSize_6;
  pixelSize_6 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8 = floor(tmpvar_7);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract(tmpvar_7);
  highp vec2 uv_10;
  uv_10 = ((tmpvar_8 + vec2(0.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_factorTex, uv_10);
  mediump vec4 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_indexTex, uv_10);
  mediump float tmpvar_14;
  tmpvar_14 = tmpvar_13.w;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 1.0;
  tmpvar_18.x = tmpvar_14;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = mix (tmpvar_17, tmpvar_20, tmpvar_12.xxx);
  tmpvar_21.w = tmpvar_12.y;
  highp vec2 uv_22;
  uv_22 = ((tmpvar_8 + vec2(1.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_factorTex, uv_22);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_indexTex, uv_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25.w;
  mediump vec2 tmpvar_27;
  tmpvar_27.y = 0.0;
  tmpvar_27.x = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_tableTex, tmpvar_27).xyz;
  mediump vec3 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 1.0;
  tmpvar_30.x = tmpvar_26;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = mix (tmpvar_29, tmpvar_32, tmpvar_24.xxx);
  tmpvar_33.w = tmpvar_24.y;
  highp vec2 uv_34;
  uv_34 = ((tmpvar_8 + vec2(0.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_factorTex, uv_34);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_indexTex, uv_34);
  mediump float tmpvar_38;
  tmpvar_38 = tmpvar_37.w;
  mediump vec2 tmpvar_39;
  tmpvar_39.y = 0.0;
  tmpvar_39.x = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_tableTex, tmpvar_39).xyz;
  mediump vec3 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 1.0;
  tmpvar_42.x = tmpvar_38;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = mix (tmpvar_41, tmpvar_44, tmpvar_36.xxx);
  tmpvar_45.w = tmpvar_36.y;
  highp vec2 uv_46;
  uv_46 = ((tmpvar_8 + vec2(1.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_factorTex, uv_46);
  mediump vec4 tmpvar_48;
  tmpvar_48 = tmpvar_47;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_indexTex, uv_46);
  mediump float tmpvar_50;
  tmpvar_50 = tmpvar_49.w;
  mediump vec2 tmpvar_51;
  tmpvar_51.y = 0.0;
  tmpvar_51.x = tmpvar_50;
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_tableTex, tmpvar_51).xyz;
  mediump vec3 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 1.0;
  tmpvar_54.x = tmpvar_50;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = mix (tmpvar_53, tmpvar_56, tmpvar_48.xxx);
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58 = mix (mix (tmpvar_21, tmpvar_33, tmpvar_9.xxxx), mix (tmpvar_45, tmpvar_57, tmpvar_9.xxxx), tmpvar_9.yyyy);
  tmpvar_5 = tmpvar_58;
  mediump float x_59;
  x_59 = (tmpvar_5.w - _AlphaClipThreshold);
  if ((x_59 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_5.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_5.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_61 * _Color.xyz) * _EnvColor.xyz) + color_65);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_5.w);
  mediump vec3 reflection_70;
  mediump vec3 R_71;
  mediump float intensity_72;
  mediump vec4 noiseTex_73;
  mediump vec4 spColor_74;
  lowp vec4 tmpvar_75;
  tmpvar_75 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_74.xyz = tmpvar_75.xyz;
  spColor_74.w = outColor_4.w;
  lowp vec4 tmpvar_76;
  tmpvar_76 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_73 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (((1.99 * noiseTex_73.x) * _SPNoiseScaler) - 1.0);
  intensity_72 = tmpvar_77;
  highp vec3 tmpvar_78;
  highp vec3 I_79;
  I_79 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_73 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_78 = (I_79 - (2.0 * (
    dot (N_3, I_79)
   * N_3)));
  R_71 = tmpvar_78;
  lowp vec3 tmpvar_80;
  tmpvar_80 = textureCube (_SPCubeMap, R_71).xyz;
  reflection_70 = tmpvar_80;
  highp vec3 tmpvar_81;
  mediump vec3 x_82;
  x_82 = (spColor_74.xyz * _SPOldColor.xyz);
  tmpvar_81 = mix (x_82, ((reflection_70 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_74.xyz = tmpvar_81;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_72 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_72 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_83;
      tmpvar_83 = mix (spColor_74, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_72) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_74 = tmpvar_83;
    };
  };
  highp vec3 tmpvar_84;
  tmpvar_84 = mix (outColor_4.xyz, spColor_74.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_74.xyz = tmpvar_84;
  outColor_4 = spColor_74;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_85;
    scrpos_85 = xlv_TEXCOORD3;
    mediump float a_86;
    a_86 = xlv_TEXCOORD3.z;
    if ((a_86 < 0.95)) {
      scrpos_85.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_86 = (a_86 * 17.0);
      highp float tmpvar_87;
      tmpvar_87 = (scrpos_85.y / 4.0);
      highp float tmpvar_88;
      tmpvar_88 = (fract(abs(tmpvar_87)) * 4.0);
      highp float tmpvar_89;
      if ((tmpvar_87 >= 0.0)) {
        tmpvar_89 = tmpvar_88;
      } else {
        tmpvar_89 = -(tmpvar_88);
      };
      highp float tmpvar_90;
      tmpvar_90 = (scrpos_85.x / 4.0);
      highp float tmpvar_91;
      tmpvar_91 = (fract(abs(tmpvar_90)) * 4.0);
      highp float tmpvar_92;
      if ((tmpvar_90 >= 0.0)) {
        tmpvar_92 = tmpvar_91;
      } else {
        tmpvar_92 = -(tmpvar_91);
      };
      highp float x_93;
      x_93 = ((a_86 - _DITHERMATRIX[
        int(tmpvar_89)
      ][
        int(tmpvar_92)
      ]) - 0.01);
      if ((x_93 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_74.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_5;
  highp vec2 pixelSize_6;
  pixelSize_6 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8 = floor(tmpvar_7);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract(tmpvar_7);
  highp vec2 uv_10;
  uv_10 = ((tmpvar_8 + vec2(0.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_factorTex, uv_10);
  mediump vec4 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_indexTex, uv_10);
  mediump float tmpvar_14;
  tmpvar_14 = tmpvar_13.w;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 1.0;
  tmpvar_18.x = tmpvar_14;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = mix (tmpvar_17, tmpvar_20, tmpvar_12.xxx);
  tmpvar_21.w = tmpvar_12.y;
  highp vec2 uv_22;
  uv_22 = ((tmpvar_8 + vec2(1.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_factorTex, uv_22);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_indexTex, uv_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25.w;
  mediump vec2 tmpvar_27;
  tmpvar_27.y = 0.0;
  tmpvar_27.x = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_tableTex, tmpvar_27).xyz;
  mediump vec3 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 1.0;
  tmpvar_30.x = tmpvar_26;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = mix (tmpvar_29, tmpvar_32, tmpvar_24.xxx);
  tmpvar_33.w = tmpvar_24.y;
  highp vec2 uv_34;
  uv_34 = ((tmpvar_8 + vec2(0.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_factorTex, uv_34);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_indexTex, uv_34);
  mediump float tmpvar_38;
  tmpvar_38 = tmpvar_37.w;
  mediump vec2 tmpvar_39;
  tmpvar_39.y = 0.0;
  tmpvar_39.x = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_tableTex, tmpvar_39).xyz;
  mediump vec3 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 1.0;
  tmpvar_42.x = tmpvar_38;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = mix (tmpvar_41, tmpvar_44, tmpvar_36.xxx);
  tmpvar_45.w = tmpvar_36.y;
  highp vec2 uv_46;
  uv_46 = ((tmpvar_8 + vec2(1.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_factorTex, uv_46);
  mediump vec4 tmpvar_48;
  tmpvar_48 = tmpvar_47;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_indexTex, uv_46);
  mediump float tmpvar_50;
  tmpvar_50 = tmpvar_49.w;
  mediump vec2 tmpvar_51;
  tmpvar_51.y = 0.0;
  tmpvar_51.x = tmpvar_50;
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_tableTex, tmpvar_51).xyz;
  mediump vec3 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 1.0;
  tmpvar_54.x = tmpvar_50;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = mix (tmpvar_53, tmpvar_56, tmpvar_48.xxx);
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58 = mix (mix (tmpvar_21, tmpvar_33, tmpvar_9.xxxx), mix (tmpvar_45, tmpvar_57, tmpvar_9.xxxx), tmpvar_9.yyyy);
  tmpvar_5 = tmpvar_58;
  mediump float x_59;
  x_59 = (tmpvar_5.w - _AlphaClipThreshold);
  if ((x_59 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_5.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_5.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_61 * _Color.xyz) * _EnvColor.xyz) + color_65);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_5.w);
  mediump vec3 reflection_70;
  mediump vec3 R_71;
  mediump float intensity_72;
  mediump vec4 noiseTex_73;
  mediump vec4 spColor_74;
  lowp vec4 tmpvar_75;
  tmpvar_75 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_74.xyz = tmpvar_75.xyz;
  spColor_74.w = outColor_4.w;
  lowp vec4 tmpvar_76;
  tmpvar_76 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_73 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (((1.99 * noiseTex_73.x) * _SPNoiseScaler) - 1.0);
  intensity_72 = tmpvar_77;
  highp vec3 tmpvar_78;
  highp vec3 I_79;
  I_79 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_73 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_78 = (I_79 - (2.0 * (
    dot (N_3, I_79)
   * N_3)));
  R_71 = tmpvar_78;
  lowp vec3 tmpvar_80;
  tmpvar_80 = textureCube (_SPCubeMap, R_71).xyz;
  reflection_70 = tmpvar_80;
  highp vec3 tmpvar_81;
  mediump vec3 x_82;
  x_82 = (spColor_74.xyz * _SPOldColor.xyz);
  tmpvar_81 = mix (x_82, ((reflection_70 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_74.xyz = tmpvar_81;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_72 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_72 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_83;
      tmpvar_83 = mix (spColor_74, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_72) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_74 = tmpvar_83;
    };
  };
  highp vec3 tmpvar_84;
  tmpvar_84 = mix (outColor_4.xyz, spColor_74.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_74.xyz = tmpvar_84;
  outColor_4 = spColor_74;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_85;
    scrpos_85 = xlv_TEXCOORD3;
    mediump float a_86;
    a_86 = xlv_TEXCOORD3.z;
    if ((a_86 < 0.95)) {
      scrpos_85.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_86 = (a_86 * 17.0);
      highp float tmpvar_87;
      tmpvar_87 = (scrpos_85.y / 4.0);
      highp float tmpvar_88;
      tmpvar_88 = (fract(abs(tmpvar_87)) * 4.0);
      highp float tmpvar_89;
      if ((tmpvar_87 >= 0.0)) {
        tmpvar_89 = tmpvar_88;
      } else {
        tmpvar_89 = -(tmpvar_88);
      };
      highp float tmpvar_90;
      tmpvar_90 = (scrpos_85.x / 4.0);
      highp float tmpvar_91;
      tmpvar_91 = (fract(abs(tmpvar_90)) * 4.0);
      highp float tmpvar_92;
      if ((tmpvar_90 >= 0.0)) {
        tmpvar_92 = tmpvar_91;
      } else {
        tmpvar_92 = -(tmpvar_91);
      };
      highp float x_93;
      x_93 = ((a_86 - _DITHERMATRIX[
        int(tmpvar_89)
      ][
        int(tmpvar_92)
      ]) - 0.01);
      if ((x_93 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_74.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_5;
  highp vec2 pixelSize_6;
  pixelSize_6 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8 = floor(tmpvar_7);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract(tmpvar_7);
  highp vec2 uv_10;
  uv_10 = ((tmpvar_8 + vec2(0.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_factorTex, uv_10);
  mediump vec4 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_indexTex, uv_10);
  mediump float tmpvar_14;
  tmpvar_14 = tmpvar_13.w;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 1.0;
  tmpvar_18.x = tmpvar_14;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = mix (tmpvar_17, tmpvar_20, tmpvar_12.xxx);
  tmpvar_21.w = tmpvar_12.y;
  highp vec2 uv_22;
  uv_22 = ((tmpvar_8 + vec2(1.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_factorTex, uv_22);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_indexTex, uv_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25.w;
  mediump vec2 tmpvar_27;
  tmpvar_27.y = 0.0;
  tmpvar_27.x = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_tableTex, tmpvar_27).xyz;
  mediump vec3 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 1.0;
  tmpvar_30.x = tmpvar_26;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = mix (tmpvar_29, tmpvar_32, tmpvar_24.xxx);
  tmpvar_33.w = tmpvar_24.y;
  highp vec2 uv_34;
  uv_34 = ((tmpvar_8 + vec2(0.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_factorTex, uv_34);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_indexTex, uv_34);
  mediump float tmpvar_38;
  tmpvar_38 = tmpvar_37.w;
  mediump vec2 tmpvar_39;
  tmpvar_39.y = 0.0;
  tmpvar_39.x = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_tableTex, tmpvar_39).xyz;
  mediump vec3 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 1.0;
  tmpvar_42.x = tmpvar_38;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = mix (tmpvar_41, tmpvar_44, tmpvar_36.xxx);
  tmpvar_45.w = tmpvar_36.y;
  highp vec2 uv_46;
  uv_46 = ((tmpvar_8 + vec2(1.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_factorTex, uv_46);
  mediump vec4 tmpvar_48;
  tmpvar_48 = tmpvar_47;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_indexTex, uv_46);
  mediump float tmpvar_50;
  tmpvar_50 = tmpvar_49.w;
  mediump vec2 tmpvar_51;
  tmpvar_51.y = 0.0;
  tmpvar_51.x = tmpvar_50;
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_tableTex, tmpvar_51).xyz;
  mediump vec3 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 1.0;
  tmpvar_54.x = tmpvar_50;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = mix (tmpvar_53, tmpvar_56, tmpvar_48.xxx);
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58 = mix (mix (tmpvar_21, tmpvar_33, tmpvar_9.xxxx), mix (tmpvar_45, tmpvar_57, tmpvar_9.xxxx), tmpvar_9.yyyy);
  tmpvar_5 = tmpvar_58;
  mediump float x_59;
  x_59 = (tmpvar_5.w - _AlphaClipThreshold);
  if ((x_59 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_5.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_5.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_61 * _Color.xyz) * _EnvColor.xyz) + color_65);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_5.w);
  mediump vec3 reflection_70;
  mediump vec3 R_71;
  mediump float intensity_72;
  mediump vec4 noiseTex_73;
  mediump vec4 spColor_74;
  lowp vec4 tmpvar_75;
  tmpvar_75 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_74.xyz = tmpvar_75.xyz;
  spColor_74.w = outColor_4.w;
  lowp vec4 tmpvar_76;
  tmpvar_76 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_73 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (((1.99 * noiseTex_73.x) * _SPNoiseScaler) - 1.0);
  intensity_72 = tmpvar_77;
  highp vec3 tmpvar_78;
  highp vec3 I_79;
  I_79 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_73 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_78 = (I_79 - (2.0 * (
    dot (N_3, I_79)
   * N_3)));
  R_71 = tmpvar_78;
  lowp vec3 tmpvar_80;
  tmpvar_80 = textureCube (_SPCubeMap, R_71).xyz;
  reflection_70 = tmpvar_80;
  highp vec3 tmpvar_81;
  mediump vec3 x_82;
  x_82 = (spColor_74.xyz * _SPOldColor.xyz);
  tmpvar_81 = mix (x_82, ((reflection_70 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_74.xyz = tmpvar_81;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_72 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_72 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_83;
      tmpvar_83 = mix (spColor_74, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_72) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_74 = tmpvar_83;
    };
  };
  highp vec3 tmpvar_84;
  tmpvar_84 = mix (outColor_4.xyz, spColor_74.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_74.xyz = tmpvar_84;
  outColor_4 = spColor_74;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_85;
    scrpos_85 = xlv_TEXCOORD3;
    mediump float a_86;
    a_86 = xlv_TEXCOORD3.z;
    if ((a_86 < 0.95)) {
      scrpos_85.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_86 = (a_86 * 17.0);
      highp float tmpvar_87;
      tmpvar_87 = (scrpos_85.y / 4.0);
      highp float tmpvar_88;
      tmpvar_88 = (fract(abs(tmpvar_87)) * 4.0);
      highp float tmpvar_89;
      if ((tmpvar_87 >= 0.0)) {
        tmpvar_89 = tmpvar_88;
      } else {
        tmpvar_89 = -(tmpvar_88);
      };
      highp float tmpvar_90;
      tmpvar_90 = (scrpos_85.x / 4.0);
      highp float tmpvar_91;
      tmpvar_91 = (fract(abs(tmpvar_90)) * 4.0);
      highp float tmpvar_92;
      if ((tmpvar_90 >= 0.0)) {
        tmpvar_92 = tmpvar_91;
      } else {
        tmpvar_92 = -(tmpvar_91);
      };
      highp float x_93;
      x_93 = ((a_86 - _DITHERMATRIX[
        int(tmpvar_89)
      ][
        int(tmpvar_92)
      ]) - 0.01);
      if ((x_93 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_74.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_5;
  highp vec2 pixelSize_6;
  pixelSize_6 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8 = floor(tmpvar_7);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract(tmpvar_7);
  highp vec2 uv_10;
  uv_10 = ((tmpvar_8 + vec2(0.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_factorTex, uv_10);
  mediump vec4 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_indexTex, uv_10);
  mediump float tmpvar_14;
  tmpvar_14 = tmpvar_13.w;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 1.0;
  tmpvar_18.x = tmpvar_14;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = mix (tmpvar_17, tmpvar_20, tmpvar_12.xxx);
  tmpvar_21.w = tmpvar_12.y;
  highp vec2 uv_22;
  uv_22 = ((tmpvar_8 + vec2(1.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_factorTex, uv_22);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_indexTex, uv_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25.w;
  mediump vec2 tmpvar_27;
  tmpvar_27.y = 0.0;
  tmpvar_27.x = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_tableTex, tmpvar_27).xyz;
  mediump vec3 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 1.0;
  tmpvar_30.x = tmpvar_26;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = mix (tmpvar_29, tmpvar_32, tmpvar_24.xxx);
  tmpvar_33.w = tmpvar_24.y;
  highp vec2 uv_34;
  uv_34 = ((tmpvar_8 + vec2(0.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_factorTex, uv_34);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_indexTex, uv_34);
  mediump float tmpvar_38;
  tmpvar_38 = tmpvar_37.w;
  mediump vec2 tmpvar_39;
  tmpvar_39.y = 0.0;
  tmpvar_39.x = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_tableTex, tmpvar_39).xyz;
  mediump vec3 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 1.0;
  tmpvar_42.x = tmpvar_38;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = mix (tmpvar_41, tmpvar_44, tmpvar_36.xxx);
  tmpvar_45.w = tmpvar_36.y;
  highp vec2 uv_46;
  uv_46 = ((tmpvar_8 + vec2(1.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_factorTex, uv_46);
  mediump vec4 tmpvar_48;
  tmpvar_48 = tmpvar_47;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_indexTex, uv_46);
  mediump float tmpvar_50;
  tmpvar_50 = tmpvar_49.w;
  mediump vec2 tmpvar_51;
  tmpvar_51.y = 0.0;
  tmpvar_51.x = tmpvar_50;
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_tableTex, tmpvar_51).xyz;
  mediump vec3 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 1.0;
  tmpvar_54.x = tmpvar_50;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = mix (tmpvar_53, tmpvar_56, tmpvar_48.xxx);
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58 = mix (mix (tmpvar_21, tmpvar_33, tmpvar_9.xxxx), mix (tmpvar_45, tmpvar_57, tmpvar_9.xxxx), tmpvar_9.yyyy);
  tmpvar_5 = tmpvar_58;
  mediump float x_59;
  x_59 = (tmpvar_5.w - _AlphaClipThreshold);
  if ((x_59 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_5.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_5.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_61 * _Color.xyz) * _EnvColor.xyz) + color_65);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_5.w);
  mediump vec3 reflection_70;
  mediump vec3 R_71;
  mediump float intensity_72;
  mediump vec4 noiseTex_73;
  mediump vec4 spColor_74;
  lowp vec4 tmpvar_75;
  tmpvar_75 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_74.xyz = tmpvar_75.xyz;
  spColor_74.w = outColor_4.w;
  lowp vec4 tmpvar_76;
  tmpvar_76 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_73 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (((1.99 * noiseTex_73.x) * _SPNoiseScaler) - 1.0);
  intensity_72 = tmpvar_77;
  highp vec3 tmpvar_78;
  highp vec3 I_79;
  I_79 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_73 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_78 = (I_79 - (2.0 * (
    dot (N_3, I_79)
   * N_3)));
  R_71 = tmpvar_78;
  lowp vec3 tmpvar_80;
  tmpvar_80 = textureCube (_SPCubeMap, R_71).xyz;
  reflection_70 = tmpvar_80;
  highp vec3 tmpvar_81;
  mediump vec3 x_82;
  x_82 = (spColor_74.xyz * _SPOldColor.xyz);
  tmpvar_81 = mix (x_82, ((reflection_70 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_74.xyz = tmpvar_81;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_72 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_72 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_83;
      tmpvar_83 = mix (spColor_74, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_72) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_74 = tmpvar_83;
    };
  };
  highp vec3 tmpvar_84;
  tmpvar_84 = mix (outColor_4.xyz, spColor_74.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_74.xyz = tmpvar_84;
  outColor_4 = spColor_74;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_85;
    scrpos_85 = xlv_TEXCOORD3;
    mediump float a_86;
    a_86 = xlv_TEXCOORD3.z;
    if ((a_86 < 0.95)) {
      scrpos_85.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_86 = (a_86 * 17.0);
      highp float tmpvar_87;
      tmpvar_87 = (scrpos_85.y / 4.0);
      highp float tmpvar_88;
      tmpvar_88 = (fract(abs(tmpvar_87)) * 4.0);
      highp float tmpvar_89;
      if ((tmpvar_87 >= 0.0)) {
        tmpvar_89 = tmpvar_88;
      } else {
        tmpvar_89 = -(tmpvar_88);
      };
      highp float tmpvar_90;
      tmpvar_90 = (scrpos_85.x / 4.0);
      highp float tmpvar_91;
      tmpvar_91 = (fract(abs(tmpvar_90)) * 4.0);
      highp float tmpvar_92;
      if ((tmpvar_90 >= 0.0)) {
        tmpvar_92 = tmpvar_91;
      } else {
        tmpvar_92 = -(tmpvar_91);
      };
      highp float x_93;
      x_93 = ((a_86 - _DITHERMATRIX[
        int(tmpvar_89)
      ][
        int(tmpvar_92)
      ]) - 0.01);
      if ((x_93 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_74.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_5;
  highp vec2 pixelSize_6;
  pixelSize_6 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8 = floor(tmpvar_7);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract(tmpvar_7);
  highp vec2 uv_10;
  uv_10 = ((tmpvar_8 + vec2(0.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_factorTex, uv_10);
  mediump vec4 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_indexTex, uv_10);
  mediump float tmpvar_14;
  tmpvar_14 = tmpvar_13.w;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 1.0;
  tmpvar_18.x = tmpvar_14;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = mix (tmpvar_17, tmpvar_20, tmpvar_12.xxx);
  tmpvar_21.w = tmpvar_12.y;
  highp vec2 uv_22;
  uv_22 = ((tmpvar_8 + vec2(1.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_factorTex, uv_22);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_indexTex, uv_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25.w;
  mediump vec2 tmpvar_27;
  tmpvar_27.y = 0.0;
  tmpvar_27.x = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_tableTex, tmpvar_27).xyz;
  mediump vec3 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 1.0;
  tmpvar_30.x = tmpvar_26;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = mix (tmpvar_29, tmpvar_32, tmpvar_24.xxx);
  tmpvar_33.w = tmpvar_24.y;
  highp vec2 uv_34;
  uv_34 = ((tmpvar_8 + vec2(0.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_factorTex, uv_34);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_indexTex, uv_34);
  mediump float tmpvar_38;
  tmpvar_38 = tmpvar_37.w;
  mediump vec2 tmpvar_39;
  tmpvar_39.y = 0.0;
  tmpvar_39.x = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_tableTex, tmpvar_39).xyz;
  mediump vec3 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 1.0;
  tmpvar_42.x = tmpvar_38;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = mix (tmpvar_41, tmpvar_44, tmpvar_36.xxx);
  tmpvar_45.w = tmpvar_36.y;
  highp vec2 uv_46;
  uv_46 = ((tmpvar_8 + vec2(1.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_factorTex, uv_46);
  mediump vec4 tmpvar_48;
  tmpvar_48 = tmpvar_47;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_indexTex, uv_46);
  mediump float tmpvar_50;
  tmpvar_50 = tmpvar_49.w;
  mediump vec2 tmpvar_51;
  tmpvar_51.y = 0.0;
  tmpvar_51.x = tmpvar_50;
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_tableTex, tmpvar_51).xyz;
  mediump vec3 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 1.0;
  tmpvar_54.x = tmpvar_50;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = mix (tmpvar_53, tmpvar_56, tmpvar_48.xxx);
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58 = mix (mix (tmpvar_21, tmpvar_33, tmpvar_9.xxxx), mix (tmpvar_45, tmpvar_57, tmpvar_9.xxxx), tmpvar_9.yyyy);
  tmpvar_5 = tmpvar_58;
  mediump float x_59;
  x_59 = (tmpvar_5.w - _AlphaClipThreshold);
  if ((x_59 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_5.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_5.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_61 * _Color.xyz) * _EnvColor.xyz) + color_65);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_5.w);
  mediump vec3 reflection_70;
  mediump vec3 R_71;
  mediump float intensity_72;
  mediump vec4 noiseTex_73;
  mediump vec4 spColor_74;
  lowp vec4 tmpvar_75;
  tmpvar_75 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_74.xyz = tmpvar_75.xyz;
  spColor_74.w = outColor_4.w;
  lowp vec4 tmpvar_76;
  tmpvar_76 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_73 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (((1.99 * noiseTex_73.x) * _SPNoiseScaler) - 1.0);
  intensity_72 = tmpvar_77;
  highp vec3 tmpvar_78;
  highp vec3 I_79;
  I_79 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_73 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_78 = (I_79 - (2.0 * (
    dot (N_3, I_79)
   * N_3)));
  R_71 = tmpvar_78;
  lowp vec3 tmpvar_80;
  tmpvar_80 = textureCube (_SPCubeMap, R_71).xyz;
  reflection_70 = tmpvar_80;
  highp vec3 tmpvar_81;
  mediump vec3 x_82;
  x_82 = (spColor_74.xyz * _SPOldColor.xyz);
  tmpvar_81 = mix (x_82, ((reflection_70 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_74.xyz = tmpvar_81;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_72 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_72 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_83;
      tmpvar_83 = mix (spColor_74, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_72) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_74 = tmpvar_83;
    };
  };
  highp vec3 tmpvar_84;
  tmpvar_84 = mix (outColor_4.xyz, spColor_74.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_74.xyz = tmpvar_84;
  outColor_4 = spColor_74;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_85;
    scrpos_85 = xlv_TEXCOORD3;
    mediump float a_86;
    a_86 = xlv_TEXCOORD3.z;
    if ((a_86 < 0.95)) {
      scrpos_85.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_86 = (a_86 * 17.0);
      highp float tmpvar_87;
      tmpvar_87 = (scrpos_85.y / 4.0);
      highp float tmpvar_88;
      tmpvar_88 = (fract(abs(tmpvar_87)) * 4.0);
      highp float tmpvar_89;
      if ((tmpvar_87 >= 0.0)) {
        tmpvar_89 = tmpvar_88;
      } else {
        tmpvar_89 = -(tmpvar_88);
      };
      highp float tmpvar_90;
      tmpvar_90 = (scrpos_85.x / 4.0);
      highp float tmpvar_91;
      tmpvar_91 = (fract(abs(tmpvar_90)) * 4.0);
      highp float tmpvar_92;
      if ((tmpvar_90 >= 0.0)) {
        tmpvar_92 = tmpvar_91;
      } else {
        tmpvar_92 = -(tmpvar_91);
      };
      highp float x_93;
      x_93 = ((a_86 - _DITHERMATRIX[
        int(tmpvar_89)
      ][
        int(tmpvar_92)
      ]) - 0.01);
      if ((x_93 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_74.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_5;
  highp vec2 pixelSize_6;
  pixelSize_6 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8 = floor(tmpvar_7);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract(tmpvar_7);
  highp vec2 uv_10;
  uv_10 = ((tmpvar_8 + vec2(0.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_factorTex, uv_10);
  mediump vec4 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_indexTex, uv_10);
  mediump float tmpvar_14;
  tmpvar_14 = tmpvar_13.w;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 1.0;
  tmpvar_18.x = tmpvar_14;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = mix (tmpvar_17, tmpvar_20, tmpvar_12.xxx);
  tmpvar_21.w = tmpvar_12.y;
  highp vec2 uv_22;
  uv_22 = ((tmpvar_8 + vec2(1.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_factorTex, uv_22);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_indexTex, uv_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25.w;
  mediump vec2 tmpvar_27;
  tmpvar_27.y = 0.0;
  tmpvar_27.x = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_tableTex, tmpvar_27).xyz;
  mediump vec3 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 1.0;
  tmpvar_30.x = tmpvar_26;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = mix (tmpvar_29, tmpvar_32, tmpvar_24.xxx);
  tmpvar_33.w = tmpvar_24.y;
  highp vec2 uv_34;
  uv_34 = ((tmpvar_8 + vec2(0.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_factorTex, uv_34);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_indexTex, uv_34);
  mediump float tmpvar_38;
  tmpvar_38 = tmpvar_37.w;
  mediump vec2 tmpvar_39;
  tmpvar_39.y = 0.0;
  tmpvar_39.x = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_tableTex, tmpvar_39).xyz;
  mediump vec3 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 1.0;
  tmpvar_42.x = tmpvar_38;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = mix (tmpvar_41, tmpvar_44, tmpvar_36.xxx);
  tmpvar_45.w = tmpvar_36.y;
  highp vec2 uv_46;
  uv_46 = ((tmpvar_8 + vec2(1.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_factorTex, uv_46);
  mediump vec4 tmpvar_48;
  tmpvar_48 = tmpvar_47;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_indexTex, uv_46);
  mediump float tmpvar_50;
  tmpvar_50 = tmpvar_49.w;
  mediump vec2 tmpvar_51;
  tmpvar_51.y = 0.0;
  tmpvar_51.x = tmpvar_50;
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_tableTex, tmpvar_51).xyz;
  mediump vec3 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 1.0;
  tmpvar_54.x = tmpvar_50;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = mix (tmpvar_53, tmpvar_56, tmpvar_48.xxx);
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58 = mix (mix (tmpvar_21, tmpvar_33, tmpvar_9.xxxx), mix (tmpvar_45, tmpvar_57, tmpvar_9.xxxx), tmpvar_9.yyyy);
  tmpvar_5 = tmpvar_58;
  mediump float x_59;
  x_59 = (tmpvar_5.w - _AlphaClipThreshold);
  if ((x_59 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_5.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_5.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_61 * _Color.xyz) * _EnvColor.xyz) + color_65);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_5.w);
  mediump vec3 reflection_70;
  mediump vec3 R_71;
  mediump float intensity_72;
  mediump vec4 noiseTex_73;
  mediump vec4 spColor_74;
  lowp vec4 tmpvar_75;
  tmpvar_75 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_74.xyz = tmpvar_75.xyz;
  spColor_74.w = outColor_4.w;
  lowp vec4 tmpvar_76;
  tmpvar_76 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_73 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (((1.99 * noiseTex_73.x) * _SPNoiseScaler) - 1.0);
  intensity_72 = tmpvar_77;
  highp vec3 tmpvar_78;
  highp vec3 I_79;
  I_79 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_73 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_78 = (I_79 - (2.0 * (
    dot (N_3, I_79)
   * N_3)));
  R_71 = tmpvar_78;
  lowp vec3 tmpvar_80;
  tmpvar_80 = textureCube (_SPCubeMap, R_71).xyz;
  reflection_70 = tmpvar_80;
  highp vec3 tmpvar_81;
  mediump vec3 x_82;
  x_82 = (spColor_74.xyz * _SPOldColor.xyz);
  tmpvar_81 = mix (x_82, ((reflection_70 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_74.xyz = tmpvar_81;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_72 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_72 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_83;
      tmpvar_83 = mix (spColor_74, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_72) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_74 = tmpvar_83;
    };
  };
  highp vec3 tmpvar_84;
  tmpvar_84 = mix (outColor_4.xyz, spColor_74.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_74.xyz = tmpvar_84;
  outColor_4 = spColor_74;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_85;
    scrpos_85 = xlv_TEXCOORD3;
    mediump float a_86;
    a_86 = xlv_TEXCOORD3.z;
    if ((a_86 < 0.95)) {
      scrpos_85.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_86 = (a_86 * 17.0);
      highp float tmpvar_87;
      tmpvar_87 = (scrpos_85.y / 4.0);
      highp float tmpvar_88;
      tmpvar_88 = (fract(abs(tmpvar_87)) * 4.0);
      highp float tmpvar_89;
      if ((tmpvar_87 >= 0.0)) {
        tmpvar_89 = tmpvar_88;
      } else {
        tmpvar_89 = -(tmpvar_88);
      };
      highp float tmpvar_90;
      tmpvar_90 = (scrpos_85.x / 4.0);
      highp float tmpvar_91;
      tmpvar_91 = (fract(abs(tmpvar_90)) * 4.0);
      highp float tmpvar_92;
      if ((tmpvar_90 >= 0.0)) {
        tmpvar_92 = tmpvar_91;
      } else {
        tmpvar_92 = -(tmpvar_91);
      };
      highp float x_93;
      x_93 = ((a_86 - _DITHERMATRIX[
        int(tmpvar_89)
      ][
        int(tmpvar_92)
      ]) - 0.01);
      if ((x_93 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_74.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_5;
  highp vec2 pixelSize_6;
  pixelSize_6 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8 = floor(tmpvar_7);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract(tmpvar_7);
  highp vec2 uv_10;
  uv_10 = ((tmpvar_8 + vec2(0.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_factorTex, uv_10);
  mediump vec4 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_indexTex, uv_10);
  mediump float tmpvar_14;
  tmpvar_14 = tmpvar_13.w;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 1.0;
  tmpvar_18.x = tmpvar_14;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = mix (tmpvar_17, tmpvar_20, tmpvar_12.xxx);
  tmpvar_21.w = tmpvar_12.y;
  highp vec2 uv_22;
  uv_22 = ((tmpvar_8 + vec2(1.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_factorTex, uv_22);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_indexTex, uv_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25.w;
  mediump vec2 tmpvar_27;
  tmpvar_27.y = 0.0;
  tmpvar_27.x = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_tableTex, tmpvar_27).xyz;
  mediump vec3 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 1.0;
  tmpvar_30.x = tmpvar_26;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = mix (tmpvar_29, tmpvar_32, tmpvar_24.xxx);
  tmpvar_33.w = tmpvar_24.y;
  highp vec2 uv_34;
  uv_34 = ((tmpvar_8 + vec2(0.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_factorTex, uv_34);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_indexTex, uv_34);
  mediump float tmpvar_38;
  tmpvar_38 = tmpvar_37.w;
  mediump vec2 tmpvar_39;
  tmpvar_39.y = 0.0;
  tmpvar_39.x = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_tableTex, tmpvar_39).xyz;
  mediump vec3 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 1.0;
  tmpvar_42.x = tmpvar_38;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = mix (tmpvar_41, tmpvar_44, tmpvar_36.xxx);
  tmpvar_45.w = tmpvar_36.y;
  highp vec2 uv_46;
  uv_46 = ((tmpvar_8 + vec2(1.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_factorTex, uv_46);
  mediump vec4 tmpvar_48;
  tmpvar_48 = tmpvar_47;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_indexTex, uv_46);
  mediump float tmpvar_50;
  tmpvar_50 = tmpvar_49.w;
  mediump vec2 tmpvar_51;
  tmpvar_51.y = 0.0;
  tmpvar_51.x = tmpvar_50;
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_tableTex, tmpvar_51).xyz;
  mediump vec3 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 1.0;
  tmpvar_54.x = tmpvar_50;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = mix (tmpvar_53, tmpvar_56, tmpvar_48.xxx);
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58 = mix (mix (tmpvar_21, tmpvar_33, tmpvar_9.xxxx), mix (tmpvar_45, tmpvar_57, tmpvar_9.xxxx), tmpvar_9.yyyy);
  tmpvar_5 = tmpvar_58;
  mediump float x_59;
  x_59 = (tmpvar_5.w - _AlphaClipThreshold);
  if ((x_59 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_5.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_5.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_61 * _Color.xyz) * _EnvColor.xyz) + color_65);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_5.w);
  mediump vec3 reflection_70;
  mediump vec3 R_71;
  mediump float intensity_72;
  mediump vec4 noiseTex_73;
  mediump vec4 spColor_74;
  lowp vec4 tmpvar_75;
  tmpvar_75 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_74.xyz = tmpvar_75.xyz;
  spColor_74.w = outColor_4.w;
  lowp vec4 tmpvar_76;
  tmpvar_76 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_73 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (((1.99 * noiseTex_73.x) * _SPNoiseScaler) - 1.0);
  intensity_72 = tmpvar_77;
  highp vec3 tmpvar_78;
  highp vec3 I_79;
  I_79 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_73 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_78 = (I_79 - (2.0 * (
    dot (N_3, I_79)
   * N_3)));
  R_71 = tmpvar_78;
  lowp vec3 tmpvar_80;
  tmpvar_80 = textureCube (_SPCubeMap, R_71).xyz;
  reflection_70 = tmpvar_80;
  highp vec3 tmpvar_81;
  mediump vec3 x_82;
  x_82 = (spColor_74.xyz * _SPOldColor.xyz);
  tmpvar_81 = mix (x_82, ((reflection_70 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_74.xyz = tmpvar_81;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_72 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_72 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_83;
      tmpvar_83 = mix (spColor_74, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_72) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_74 = tmpvar_83;
    };
  };
  highp vec3 tmpvar_84;
  tmpvar_84 = mix (outColor_4.xyz, spColor_74.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_74.xyz = tmpvar_84;
  outColor_4 = spColor_74;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_85;
    scrpos_85 = xlv_TEXCOORD3;
    mediump float a_86;
    a_86 = xlv_TEXCOORD3.z;
    if ((a_86 < 0.95)) {
      scrpos_85.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_86 = (a_86 * 17.0);
      highp float tmpvar_87;
      tmpvar_87 = (scrpos_85.y / 4.0);
      highp float tmpvar_88;
      tmpvar_88 = (fract(abs(tmpvar_87)) * 4.0);
      highp float tmpvar_89;
      if ((tmpvar_87 >= 0.0)) {
        tmpvar_89 = tmpvar_88;
      } else {
        tmpvar_89 = -(tmpvar_88);
      };
      highp float tmpvar_90;
      tmpvar_90 = (scrpos_85.x / 4.0);
      highp float tmpvar_91;
      tmpvar_91 = (fract(abs(tmpvar_90)) * 4.0);
      highp float tmpvar_92;
      if ((tmpvar_90 >= 0.0)) {
        tmpvar_92 = tmpvar_91;
      } else {
        tmpvar_92 = -(tmpvar_91);
      };
      highp float x_93;
      x_93 = ((a_86 - _DITHERMATRIX[
        int(tmpvar_89)
      ][
        int(tmpvar_92)
      ]) - 0.01);
      if ((x_93 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_74.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_5;
  highp vec2 pixelSize_6;
  pixelSize_6 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8 = floor(tmpvar_7);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract(tmpvar_7);
  highp vec2 uv_10;
  uv_10 = ((tmpvar_8 + vec2(0.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_factorTex, uv_10);
  mediump vec4 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_indexTex, uv_10);
  mediump float tmpvar_14;
  tmpvar_14 = tmpvar_13.w;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 1.0;
  tmpvar_18.x = tmpvar_14;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = mix (tmpvar_17, tmpvar_20, tmpvar_12.xxx);
  tmpvar_21.w = tmpvar_12.y;
  highp vec2 uv_22;
  uv_22 = ((tmpvar_8 + vec2(1.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_factorTex, uv_22);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_indexTex, uv_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25.w;
  mediump vec2 tmpvar_27;
  tmpvar_27.y = 0.0;
  tmpvar_27.x = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_tableTex, tmpvar_27).xyz;
  mediump vec3 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 1.0;
  tmpvar_30.x = tmpvar_26;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = mix (tmpvar_29, tmpvar_32, tmpvar_24.xxx);
  tmpvar_33.w = tmpvar_24.y;
  highp vec2 uv_34;
  uv_34 = ((tmpvar_8 + vec2(0.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_factorTex, uv_34);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_indexTex, uv_34);
  mediump float tmpvar_38;
  tmpvar_38 = tmpvar_37.w;
  mediump vec2 tmpvar_39;
  tmpvar_39.y = 0.0;
  tmpvar_39.x = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_tableTex, tmpvar_39).xyz;
  mediump vec3 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 1.0;
  tmpvar_42.x = tmpvar_38;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = mix (tmpvar_41, tmpvar_44, tmpvar_36.xxx);
  tmpvar_45.w = tmpvar_36.y;
  highp vec2 uv_46;
  uv_46 = ((tmpvar_8 + vec2(1.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_factorTex, uv_46);
  mediump vec4 tmpvar_48;
  tmpvar_48 = tmpvar_47;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_indexTex, uv_46);
  mediump float tmpvar_50;
  tmpvar_50 = tmpvar_49.w;
  mediump vec2 tmpvar_51;
  tmpvar_51.y = 0.0;
  tmpvar_51.x = tmpvar_50;
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_tableTex, tmpvar_51).xyz;
  mediump vec3 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 1.0;
  tmpvar_54.x = tmpvar_50;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = mix (tmpvar_53, tmpvar_56, tmpvar_48.xxx);
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58 = mix (mix (tmpvar_21, tmpvar_33, tmpvar_9.xxxx), mix (tmpvar_45, tmpvar_57, tmpvar_9.xxxx), tmpvar_9.yyyy);
  tmpvar_5 = tmpvar_58;
  mediump float x_59;
  x_59 = (tmpvar_5.w - _AlphaClipThreshold);
  if ((x_59 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_5.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_5.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_61 * _Color.xyz) * _EnvColor.xyz) + color_65);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_5.w);
  mediump vec3 reflection_70;
  mediump vec3 R_71;
  mediump float intensity_72;
  mediump vec4 noiseTex_73;
  mediump vec4 spColor_74;
  lowp vec4 tmpvar_75;
  tmpvar_75 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_74.xyz = tmpvar_75.xyz;
  spColor_74.w = outColor_4.w;
  lowp vec4 tmpvar_76;
  tmpvar_76 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_73 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (((1.99 * noiseTex_73.x) * _SPNoiseScaler) - 1.0);
  intensity_72 = tmpvar_77;
  highp vec3 tmpvar_78;
  highp vec3 I_79;
  I_79 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_73 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_78 = (I_79 - (2.0 * (
    dot (N_3, I_79)
   * N_3)));
  R_71 = tmpvar_78;
  lowp vec3 tmpvar_80;
  tmpvar_80 = textureCube (_SPCubeMap, R_71).xyz;
  reflection_70 = tmpvar_80;
  highp vec3 tmpvar_81;
  mediump vec3 x_82;
  x_82 = (spColor_74.xyz * _SPOldColor.xyz);
  tmpvar_81 = mix (x_82, ((reflection_70 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_74.xyz = tmpvar_81;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_72 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_72 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_83;
      tmpvar_83 = mix (spColor_74, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_72) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_74 = tmpvar_83;
    };
  };
  highp vec3 tmpvar_84;
  tmpvar_84 = mix (outColor_4.xyz, spColor_74.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_74.xyz = tmpvar_84;
  outColor_4 = spColor_74;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_85;
    scrpos_85 = xlv_TEXCOORD3;
    mediump float a_86;
    a_86 = xlv_TEXCOORD3.z;
    if ((a_86 < 0.95)) {
      scrpos_85.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_86 = (a_86 * 17.0);
      highp float tmpvar_87;
      tmpvar_87 = (scrpos_85.y / 4.0);
      highp float tmpvar_88;
      tmpvar_88 = (fract(abs(tmpvar_87)) * 4.0);
      highp float tmpvar_89;
      if ((tmpvar_87 >= 0.0)) {
        tmpvar_89 = tmpvar_88;
      } else {
        tmpvar_89 = -(tmpvar_88);
      };
      highp float tmpvar_90;
      tmpvar_90 = (scrpos_85.x / 4.0);
      highp float tmpvar_91;
      tmpvar_91 = (fract(abs(tmpvar_90)) * 4.0);
      highp float tmpvar_92;
      if ((tmpvar_90 >= 0.0)) {
        tmpvar_92 = tmpvar_91;
      } else {
        tmpvar_92 = -(tmpvar_91);
      };
      highp float x_93;
      x_93 = ((a_86 - _DITHERMATRIX[
        int(tmpvar_89)
      ][
        int(tmpvar_92)
      ]) - 0.01);
      if ((x_93 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_74.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_5;
  highp vec2 pixelSize_6;
  pixelSize_6 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8 = floor(tmpvar_7);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract(tmpvar_7);
  highp vec2 uv_10;
  uv_10 = ((tmpvar_8 + vec2(0.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_factorTex, uv_10);
  mediump vec4 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_indexTex, uv_10);
  mediump float tmpvar_14;
  tmpvar_14 = tmpvar_13.w;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 1.0;
  tmpvar_18.x = tmpvar_14;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = mix (tmpvar_17, tmpvar_20, tmpvar_12.xxx);
  tmpvar_21.w = tmpvar_12.y;
  highp vec2 uv_22;
  uv_22 = ((tmpvar_8 + vec2(1.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_factorTex, uv_22);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_indexTex, uv_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25.w;
  mediump vec2 tmpvar_27;
  tmpvar_27.y = 0.0;
  tmpvar_27.x = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_tableTex, tmpvar_27).xyz;
  mediump vec3 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 1.0;
  tmpvar_30.x = tmpvar_26;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = mix (tmpvar_29, tmpvar_32, tmpvar_24.xxx);
  tmpvar_33.w = tmpvar_24.y;
  highp vec2 uv_34;
  uv_34 = ((tmpvar_8 + vec2(0.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_factorTex, uv_34);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_indexTex, uv_34);
  mediump float tmpvar_38;
  tmpvar_38 = tmpvar_37.w;
  mediump vec2 tmpvar_39;
  tmpvar_39.y = 0.0;
  tmpvar_39.x = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_tableTex, tmpvar_39).xyz;
  mediump vec3 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 1.0;
  tmpvar_42.x = tmpvar_38;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = mix (tmpvar_41, tmpvar_44, tmpvar_36.xxx);
  tmpvar_45.w = tmpvar_36.y;
  highp vec2 uv_46;
  uv_46 = ((tmpvar_8 + vec2(1.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_factorTex, uv_46);
  mediump vec4 tmpvar_48;
  tmpvar_48 = tmpvar_47;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_indexTex, uv_46);
  mediump float tmpvar_50;
  tmpvar_50 = tmpvar_49.w;
  mediump vec2 tmpvar_51;
  tmpvar_51.y = 0.0;
  tmpvar_51.x = tmpvar_50;
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_tableTex, tmpvar_51).xyz;
  mediump vec3 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 1.0;
  tmpvar_54.x = tmpvar_50;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = mix (tmpvar_53, tmpvar_56, tmpvar_48.xxx);
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58 = mix (mix (tmpvar_21, tmpvar_33, tmpvar_9.xxxx), mix (tmpvar_45, tmpvar_57, tmpvar_9.xxxx), tmpvar_9.yyyy);
  tmpvar_5 = tmpvar_58;
  mediump float x_59;
  x_59 = (tmpvar_5.w - _AlphaClipThreshold);
  if ((x_59 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_5.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_5.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_61 * _Color.xyz) * _EnvColor.xyz) + color_65);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_5.w);
  mediump vec3 reflection_70;
  mediump vec3 R_71;
  mediump float intensity_72;
  mediump vec4 noiseTex_73;
  mediump vec4 spColor_74;
  lowp vec4 tmpvar_75;
  tmpvar_75 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_74.xyz = tmpvar_75.xyz;
  spColor_74.w = outColor_4.w;
  lowp vec4 tmpvar_76;
  tmpvar_76 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_73 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (((1.99 * noiseTex_73.x) * _SPNoiseScaler) - 1.0);
  intensity_72 = tmpvar_77;
  highp vec3 tmpvar_78;
  highp vec3 I_79;
  I_79 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_73 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_78 = (I_79 - (2.0 * (
    dot (N_3, I_79)
   * N_3)));
  R_71 = tmpvar_78;
  lowp vec3 tmpvar_80;
  tmpvar_80 = textureCube (_SPCubeMap, R_71).xyz;
  reflection_70 = tmpvar_80;
  highp vec3 tmpvar_81;
  mediump vec3 x_82;
  x_82 = (spColor_74.xyz * _SPOldColor.xyz);
  tmpvar_81 = mix (x_82, ((reflection_70 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_74.xyz = tmpvar_81;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_72 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_72 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_83;
      tmpvar_83 = mix (spColor_74, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_72) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_74 = tmpvar_83;
    };
  };
  highp vec3 tmpvar_84;
  tmpvar_84 = mix (outColor_4.xyz, spColor_74.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_74.xyz = tmpvar_84;
  outColor_4 = spColor_74;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_85;
    scrpos_85 = xlv_TEXCOORD3;
    mediump float a_86;
    a_86 = xlv_TEXCOORD3.z;
    if ((a_86 < 0.95)) {
      scrpos_85.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_86 = (a_86 * 17.0);
      highp float tmpvar_87;
      tmpvar_87 = (scrpos_85.y / 4.0);
      highp float tmpvar_88;
      tmpvar_88 = (fract(abs(tmpvar_87)) * 4.0);
      highp float tmpvar_89;
      if ((tmpvar_87 >= 0.0)) {
        tmpvar_89 = tmpvar_88;
      } else {
        tmpvar_89 = -(tmpvar_88);
      };
      highp float tmpvar_90;
      tmpvar_90 = (scrpos_85.x / 4.0);
      highp float tmpvar_91;
      tmpvar_91 = (fract(abs(tmpvar_90)) * 4.0);
      highp float tmpvar_92;
      if ((tmpvar_90 >= 0.0)) {
        tmpvar_92 = tmpvar_91;
      } else {
        tmpvar_92 = -(tmpvar_91);
      };
      highp float x_93;
      x_93 = ((a_86 - _DITHERMATRIX[
        int(tmpvar_89)
      ][
        int(tmpvar_92)
      ]) - 0.01);
      if ((x_93 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_74.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_5;
  highp vec2 pixelSize_6;
  pixelSize_6 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8 = floor(tmpvar_7);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract(tmpvar_7);
  highp vec2 uv_10;
  uv_10 = ((tmpvar_8 + vec2(0.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_factorTex, uv_10);
  mediump vec4 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_indexTex, uv_10);
  mediump float tmpvar_14;
  tmpvar_14 = tmpvar_13.w;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 1.0;
  tmpvar_18.x = tmpvar_14;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = mix (tmpvar_17, tmpvar_20, tmpvar_12.xxx);
  tmpvar_21.w = tmpvar_12.y;
  highp vec2 uv_22;
  uv_22 = ((tmpvar_8 + vec2(1.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_factorTex, uv_22);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_indexTex, uv_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25.w;
  mediump vec2 tmpvar_27;
  tmpvar_27.y = 0.0;
  tmpvar_27.x = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_tableTex, tmpvar_27).xyz;
  mediump vec3 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 1.0;
  tmpvar_30.x = tmpvar_26;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = mix (tmpvar_29, tmpvar_32, tmpvar_24.xxx);
  tmpvar_33.w = tmpvar_24.y;
  highp vec2 uv_34;
  uv_34 = ((tmpvar_8 + vec2(0.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_factorTex, uv_34);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_indexTex, uv_34);
  mediump float tmpvar_38;
  tmpvar_38 = tmpvar_37.w;
  mediump vec2 tmpvar_39;
  tmpvar_39.y = 0.0;
  tmpvar_39.x = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_tableTex, tmpvar_39).xyz;
  mediump vec3 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 1.0;
  tmpvar_42.x = tmpvar_38;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = mix (tmpvar_41, tmpvar_44, tmpvar_36.xxx);
  tmpvar_45.w = tmpvar_36.y;
  highp vec2 uv_46;
  uv_46 = ((tmpvar_8 + vec2(1.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_factorTex, uv_46);
  mediump vec4 tmpvar_48;
  tmpvar_48 = tmpvar_47;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_indexTex, uv_46);
  mediump float tmpvar_50;
  tmpvar_50 = tmpvar_49.w;
  mediump vec2 tmpvar_51;
  tmpvar_51.y = 0.0;
  tmpvar_51.x = tmpvar_50;
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_tableTex, tmpvar_51).xyz;
  mediump vec3 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 1.0;
  tmpvar_54.x = tmpvar_50;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = mix (tmpvar_53, tmpvar_56, tmpvar_48.xxx);
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58 = mix (mix (tmpvar_21, tmpvar_33, tmpvar_9.xxxx), mix (tmpvar_45, tmpvar_57, tmpvar_9.xxxx), tmpvar_9.yyyy);
  tmpvar_5 = tmpvar_58;
  mediump float x_59;
  x_59 = (tmpvar_5.w - _AlphaClipThreshold);
  if ((x_59 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_5.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_5.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_61 * _Color.xyz) * _EnvColor.xyz) + color_65);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_5.w);
  mediump vec3 reflection_70;
  mediump vec3 R_71;
  mediump float intensity_72;
  mediump vec4 noiseTex_73;
  mediump vec4 spColor_74;
  lowp vec4 tmpvar_75;
  tmpvar_75 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_74.xyz = tmpvar_75.xyz;
  spColor_74.w = outColor_4.w;
  lowp vec4 tmpvar_76;
  tmpvar_76 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_73 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (((1.99 * noiseTex_73.x) * _SPNoiseScaler) - 1.0);
  intensity_72 = tmpvar_77;
  highp vec3 tmpvar_78;
  highp vec3 I_79;
  I_79 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_73 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_78 = (I_79 - (2.0 * (
    dot (N_3, I_79)
   * N_3)));
  R_71 = tmpvar_78;
  lowp vec3 tmpvar_80;
  tmpvar_80 = textureCube (_SPCubeMap, R_71).xyz;
  reflection_70 = tmpvar_80;
  highp vec3 tmpvar_81;
  mediump vec3 x_82;
  x_82 = (spColor_74.xyz * _SPOldColor.xyz);
  tmpvar_81 = mix (x_82, ((reflection_70 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_74.xyz = tmpvar_81;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_72 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_72 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_83;
      tmpvar_83 = mix (spColor_74, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_72) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_74 = tmpvar_83;
    };
  };
  highp vec3 tmpvar_84;
  tmpvar_84 = mix (outColor_4.xyz, spColor_74.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_74.xyz = tmpvar_84;
  outColor_4 = spColor_74;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_85;
    scrpos_85 = xlv_TEXCOORD3;
    mediump float a_86;
    a_86 = xlv_TEXCOORD3.z;
    if ((a_86 < 0.95)) {
      scrpos_85.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_86 = (a_86 * 17.0);
      highp float tmpvar_87;
      tmpvar_87 = (scrpos_85.y / 4.0);
      highp float tmpvar_88;
      tmpvar_88 = (fract(abs(tmpvar_87)) * 4.0);
      highp float tmpvar_89;
      if ((tmpvar_87 >= 0.0)) {
        tmpvar_89 = tmpvar_88;
      } else {
        tmpvar_89 = -(tmpvar_88);
      };
      highp float tmpvar_90;
      tmpvar_90 = (scrpos_85.x / 4.0);
      highp float tmpvar_91;
      tmpvar_91 = (fract(abs(tmpvar_90)) * 4.0);
      highp float tmpvar_92;
      if ((tmpvar_90 >= 0.0)) {
        tmpvar_92 = tmpvar_91;
      } else {
        tmpvar_92 = -(tmpvar_91);
      };
      highp float x_93;
      x_93 = ((a_86 - _DITHERMATRIX[
        int(tmpvar_89)
      ][
        int(tmpvar_92)
      ]) - 0.01);
      if ((x_93 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_74.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 reflection_18;
  mediump vec3 R_19;
  mediump float intensity_20;
  mediump vec4 noiseTex_21;
  mediump vec4 spColor_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_22.xyz = tmpvar_23.xyz;
  spColor_22.w = outColor_5.w;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_21 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (((1.99 * noiseTex_21.x) * _SPNoiseScaler) - 1.0);
  intensity_20 = tmpvar_25;
  highp vec3 tmpvar_26;
  highp vec3 I_27;
  I_27 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_21 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_26 = (I_27 - (2.0 * (
    dot (N_3, I_27)
   * N_3)));
  R_19 = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = textureCube (_SPCubeMap, R_19).xyz;
  reflection_18 = tmpvar_28;
  highp vec3 tmpvar_29;
  mediump vec3 x_30;
  x_30 = (spColor_22.xyz * _SPOldColor.xyz);
  tmpvar_29 = mix (x_30, ((reflection_18 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_22.xyz = tmpvar_29;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_20 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_20 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_31;
      tmpvar_31 = mix (spColor_22, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_20) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_22 = tmpvar_31;
    };
  };
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (outColor_5.xyz, spColor_22.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_22.xyz = tmpvar_32;
  outColor_5.w = spColor_22.w;
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = N_3;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (spColor_22.xyz, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_41;
    scrpos_41 = xlv_TEXCOORD3;
    mediump float a_42;
    a_42 = xlv_TEXCOORD3.z;
    if ((a_42 < 0.95)) {
      scrpos_41.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_42 = (a_42 * 17.0);
      highp float tmpvar_43;
      tmpvar_43 = (scrpos_41.y / 4.0);
      highp float tmpvar_44;
      tmpvar_44 = (fract(abs(tmpvar_43)) * 4.0);
      highp float tmpvar_45;
      if ((tmpvar_43 >= 0.0)) {
        tmpvar_45 = tmpvar_44;
      } else {
        tmpvar_45 = -(tmpvar_44);
      };
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_41.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float x_49;
      x_49 = ((a_42 - _DITHERMATRIX[
        int(tmpvar_45)
      ][
        int(tmpvar_48)
      ]) - 0.01);
      if ((x_49 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_22.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 reflection_18;
  mediump vec3 R_19;
  mediump float intensity_20;
  mediump vec4 noiseTex_21;
  mediump vec4 spColor_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_22.xyz = tmpvar_23.xyz;
  spColor_22.w = outColor_5.w;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_21 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (((1.99 * noiseTex_21.x) * _SPNoiseScaler) - 1.0);
  intensity_20 = tmpvar_25;
  highp vec3 tmpvar_26;
  highp vec3 I_27;
  I_27 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_21 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_26 = (I_27 - (2.0 * (
    dot (N_3, I_27)
   * N_3)));
  R_19 = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = textureCube (_SPCubeMap, R_19).xyz;
  reflection_18 = tmpvar_28;
  highp vec3 tmpvar_29;
  mediump vec3 x_30;
  x_30 = (spColor_22.xyz * _SPOldColor.xyz);
  tmpvar_29 = mix (x_30, ((reflection_18 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_22.xyz = tmpvar_29;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_20 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_20 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_31;
      tmpvar_31 = mix (spColor_22, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_20) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_22 = tmpvar_31;
    };
  };
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (outColor_5.xyz, spColor_22.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_22.xyz = tmpvar_32;
  outColor_5.w = spColor_22.w;
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = N_3;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (spColor_22.xyz, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_41;
    scrpos_41 = xlv_TEXCOORD3;
    mediump float a_42;
    a_42 = xlv_TEXCOORD3.z;
    if ((a_42 < 0.95)) {
      scrpos_41.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_42 = (a_42 * 17.0);
      highp float tmpvar_43;
      tmpvar_43 = (scrpos_41.y / 4.0);
      highp float tmpvar_44;
      tmpvar_44 = (fract(abs(tmpvar_43)) * 4.0);
      highp float tmpvar_45;
      if ((tmpvar_43 >= 0.0)) {
        tmpvar_45 = tmpvar_44;
      } else {
        tmpvar_45 = -(tmpvar_44);
      };
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_41.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float x_49;
      x_49 = ((a_42 - _DITHERMATRIX[
        int(tmpvar_45)
      ][
        int(tmpvar_48)
      ]) - 0.01);
      if ((x_49 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_22.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 reflection_18;
  mediump vec3 R_19;
  mediump float intensity_20;
  mediump vec4 noiseTex_21;
  mediump vec4 spColor_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_22.xyz = tmpvar_23.xyz;
  spColor_22.w = outColor_5.w;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_21 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (((1.99 * noiseTex_21.x) * _SPNoiseScaler) - 1.0);
  intensity_20 = tmpvar_25;
  highp vec3 tmpvar_26;
  highp vec3 I_27;
  I_27 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_21 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_26 = (I_27 - (2.0 * (
    dot (N_3, I_27)
   * N_3)));
  R_19 = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = textureCube (_SPCubeMap, R_19).xyz;
  reflection_18 = tmpvar_28;
  highp vec3 tmpvar_29;
  mediump vec3 x_30;
  x_30 = (spColor_22.xyz * _SPOldColor.xyz);
  tmpvar_29 = mix (x_30, ((reflection_18 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_22.xyz = tmpvar_29;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_20 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_20 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_31;
      tmpvar_31 = mix (spColor_22, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_20) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_22 = tmpvar_31;
    };
  };
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (outColor_5.xyz, spColor_22.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_22.xyz = tmpvar_32;
  outColor_5.w = spColor_22.w;
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = N_3;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (spColor_22.xyz, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_41;
    scrpos_41 = xlv_TEXCOORD3;
    mediump float a_42;
    a_42 = xlv_TEXCOORD3.z;
    if ((a_42 < 0.95)) {
      scrpos_41.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_42 = (a_42 * 17.0);
      highp float tmpvar_43;
      tmpvar_43 = (scrpos_41.y / 4.0);
      highp float tmpvar_44;
      tmpvar_44 = (fract(abs(tmpvar_43)) * 4.0);
      highp float tmpvar_45;
      if ((tmpvar_43 >= 0.0)) {
        tmpvar_45 = tmpvar_44;
      } else {
        tmpvar_45 = -(tmpvar_44);
      };
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_41.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float x_49;
      x_49 = ((a_42 - _DITHERMATRIX[
        int(tmpvar_45)
      ][
        int(tmpvar_48)
      ]) - 0.01);
      if ((x_49 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_22.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 reflection_18;
  mediump vec3 R_19;
  mediump float intensity_20;
  mediump vec4 noiseTex_21;
  mediump vec4 spColor_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_22.xyz = tmpvar_23.xyz;
  spColor_22.w = outColor_5.w;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_21 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (((1.99 * noiseTex_21.x) * _SPNoiseScaler) - 1.0);
  intensity_20 = tmpvar_25;
  highp vec3 tmpvar_26;
  highp vec3 I_27;
  I_27 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_21 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_26 = (I_27 - (2.0 * (
    dot (N_3, I_27)
   * N_3)));
  R_19 = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = textureCube (_SPCubeMap, R_19).xyz;
  reflection_18 = tmpvar_28;
  highp vec3 tmpvar_29;
  mediump vec3 x_30;
  x_30 = (spColor_22.xyz * _SPOldColor.xyz);
  tmpvar_29 = mix (x_30, ((reflection_18 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_22.xyz = tmpvar_29;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_20 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_20 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_31;
      tmpvar_31 = mix (spColor_22, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_20) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_22 = tmpvar_31;
    };
  };
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (outColor_5.xyz, spColor_22.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_22.xyz = tmpvar_32;
  outColor_5.w = spColor_22.w;
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = N_3;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (spColor_22.xyz, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_41;
    scrpos_41 = xlv_TEXCOORD3;
    mediump float a_42;
    a_42 = xlv_TEXCOORD3.z;
    if ((a_42 < 0.95)) {
      scrpos_41.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_42 = (a_42 * 17.0);
      highp float tmpvar_43;
      tmpvar_43 = (scrpos_41.y / 4.0);
      highp float tmpvar_44;
      tmpvar_44 = (fract(abs(tmpvar_43)) * 4.0);
      highp float tmpvar_45;
      if ((tmpvar_43 >= 0.0)) {
        tmpvar_45 = tmpvar_44;
      } else {
        tmpvar_45 = -(tmpvar_44);
      };
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_41.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float x_49;
      x_49 = ((a_42 - _DITHERMATRIX[
        int(tmpvar_45)
      ][
        int(tmpvar_48)
      ]) - 0.01);
      if ((x_49 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_22.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 reflection_18;
  mediump vec3 R_19;
  mediump float intensity_20;
  mediump vec4 noiseTex_21;
  mediump vec4 spColor_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_22.xyz = tmpvar_23.xyz;
  spColor_22.w = outColor_5.w;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_21 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (((1.99 * noiseTex_21.x) * _SPNoiseScaler) - 1.0);
  intensity_20 = tmpvar_25;
  highp vec3 tmpvar_26;
  highp vec3 I_27;
  I_27 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_21 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_26 = (I_27 - (2.0 * (
    dot (N_3, I_27)
   * N_3)));
  R_19 = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = textureCube (_SPCubeMap, R_19).xyz;
  reflection_18 = tmpvar_28;
  highp vec3 tmpvar_29;
  mediump vec3 x_30;
  x_30 = (spColor_22.xyz * _SPOldColor.xyz);
  tmpvar_29 = mix (x_30, ((reflection_18 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_22.xyz = tmpvar_29;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_20 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_20 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_31;
      tmpvar_31 = mix (spColor_22, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_20) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_22 = tmpvar_31;
    };
  };
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (outColor_5.xyz, spColor_22.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_22.xyz = tmpvar_32;
  outColor_5.w = spColor_22.w;
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = N_3;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (spColor_22.xyz, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_41;
    scrpos_41 = xlv_TEXCOORD3;
    mediump float a_42;
    a_42 = xlv_TEXCOORD3.z;
    if ((a_42 < 0.95)) {
      scrpos_41.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_42 = (a_42 * 17.0);
      highp float tmpvar_43;
      tmpvar_43 = (scrpos_41.y / 4.0);
      highp float tmpvar_44;
      tmpvar_44 = (fract(abs(tmpvar_43)) * 4.0);
      highp float tmpvar_45;
      if ((tmpvar_43 >= 0.0)) {
        tmpvar_45 = tmpvar_44;
      } else {
        tmpvar_45 = -(tmpvar_44);
      };
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_41.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float x_49;
      x_49 = ((a_42 - _DITHERMATRIX[
        int(tmpvar_45)
      ][
        int(tmpvar_48)
      ]) - 0.01);
      if ((x_49 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_22.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 reflection_18;
  mediump vec3 R_19;
  mediump float intensity_20;
  mediump vec4 noiseTex_21;
  mediump vec4 spColor_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_22.xyz = tmpvar_23.xyz;
  spColor_22.w = outColor_5.w;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_21 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (((1.99 * noiseTex_21.x) * _SPNoiseScaler) - 1.0);
  intensity_20 = tmpvar_25;
  highp vec3 tmpvar_26;
  highp vec3 I_27;
  I_27 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_21 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_26 = (I_27 - (2.0 * (
    dot (N_3, I_27)
   * N_3)));
  R_19 = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = textureCube (_SPCubeMap, R_19).xyz;
  reflection_18 = tmpvar_28;
  highp vec3 tmpvar_29;
  mediump vec3 x_30;
  x_30 = (spColor_22.xyz * _SPOldColor.xyz);
  tmpvar_29 = mix (x_30, ((reflection_18 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_22.xyz = tmpvar_29;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_20 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_20 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_31;
      tmpvar_31 = mix (spColor_22, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_20) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_22 = tmpvar_31;
    };
  };
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (outColor_5.xyz, spColor_22.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_22.xyz = tmpvar_32;
  outColor_5.w = spColor_22.w;
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = N_3;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (spColor_22.xyz, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_41;
    scrpos_41 = xlv_TEXCOORD3;
    mediump float a_42;
    a_42 = xlv_TEXCOORD3.z;
    if ((a_42 < 0.95)) {
      scrpos_41.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_42 = (a_42 * 17.0);
      highp float tmpvar_43;
      tmpvar_43 = (scrpos_41.y / 4.0);
      highp float tmpvar_44;
      tmpvar_44 = (fract(abs(tmpvar_43)) * 4.0);
      highp float tmpvar_45;
      if ((tmpvar_43 >= 0.0)) {
        tmpvar_45 = tmpvar_44;
      } else {
        tmpvar_45 = -(tmpvar_44);
      };
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_41.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float x_49;
      x_49 = ((a_42 - _DITHERMATRIX[
        int(tmpvar_45)
      ][
        int(tmpvar_48)
      ]) - 0.01);
      if ((x_49 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_22.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 reflection_18;
  mediump vec3 R_19;
  mediump float intensity_20;
  mediump vec4 noiseTex_21;
  mediump vec4 spColor_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_22.xyz = tmpvar_23.xyz;
  spColor_22.w = outColor_5.w;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_21 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (((1.99 * noiseTex_21.x) * _SPNoiseScaler) - 1.0);
  intensity_20 = tmpvar_25;
  highp vec3 tmpvar_26;
  highp vec3 I_27;
  I_27 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_21 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_26 = (I_27 - (2.0 * (
    dot (N_3, I_27)
   * N_3)));
  R_19 = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = textureCube (_SPCubeMap, R_19).xyz;
  reflection_18 = tmpvar_28;
  highp vec3 tmpvar_29;
  mediump vec3 x_30;
  x_30 = (spColor_22.xyz * _SPOldColor.xyz);
  tmpvar_29 = mix (x_30, ((reflection_18 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_22.xyz = tmpvar_29;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_20 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_20 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_31;
      tmpvar_31 = mix (spColor_22, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_20) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_22 = tmpvar_31;
    };
  };
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (outColor_5.xyz, spColor_22.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_22.xyz = tmpvar_32;
  outColor_5.w = spColor_22.w;
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = N_3;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (spColor_22.xyz, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_41;
    scrpos_41 = xlv_TEXCOORD3;
    mediump float a_42;
    a_42 = xlv_TEXCOORD3.z;
    if ((a_42 < 0.95)) {
      scrpos_41.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_42 = (a_42 * 17.0);
      highp float tmpvar_43;
      tmpvar_43 = (scrpos_41.y / 4.0);
      highp float tmpvar_44;
      tmpvar_44 = (fract(abs(tmpvar_43)) * 4.0);
      highp float tmpvar_45;
      if ((tmpvar_43 >= 0.0)) {
        tmpvar_45 = tmpvar_44;
      } else {
        tmpvar_45 = -(tmpvar_44);
      };
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_41.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float x_49;
      x_49 = ((a_42 - _DITHERMATRIX[
        int(tmpvar_45)
      ][
        int(tmpvar_48)
      ]) - 0.01);
      if ((x_49 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_22.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 reflection_18;
  mediump vec3 R_19;
  mediump float intensity_20;
  mediump vec4 noiseTex_21;
  mediump vec4 spColor_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_22.xyz = tmpvar_23.xyz;
  spColor_22.w = outColor_5.w;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_21 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (((1.99 * noiseTex_21.x) * _SPNoiseScaler) - 1.0);
  intensity_20 = tmpvar_25;
  highp vec3 tmpvar_26;
  highp vec3 I_27;
  I_27 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_21 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_26 = (I_27 - (2.0 * (
    dot (N_3, I_27)
   * N_3)));
  R_19 = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = textureCube (_SPCubeMap, R_19).xyz;
  reflection_18 = tmpvar_28;
  highp vec3 tmpvar_29;
  mediump vec3 x_30;
  x_30 = (spColor_22.xyz * _SPOldColor.xyz);
  tmpvar_29 = mix (x_30, ((reflection_18 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_22.xyz = tmpvar_29;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_20 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_20 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_31;
      tmpvar_31 = mix (spColor_22, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_20) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_22 = tmpvar_31;
    };
  };
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (outColor_5.xyz, spColor_22.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_22.xyz = tmpvar_32;
  outColor_5.w = spColor_22.w;
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = N_3;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (spColor_22.xyz, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_41;
    scrpos_41 = xlv_TEXCOORD3;
    mediump float a_42;
    a_42 = xlv_TEXCOORD3.z;
    if ((a_42 < 0.95)) {
      scrpos_41.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_42 = (a_42 * 17.0);
      highp float tmpvar_43;
      tmpvar_43 = (scrpos_41.y / 4.0);
      highp float tmpvar_44;
      tmpvar_44 = (fract(abs(tmpvar_43)) * 4.0);
      highp float tmpvar_45;
      if ((tmpvar_43 >= 0.0)) {
        tmpvar_45 = tmpvar_44;
      } else {
        tmpvar_45 = -(tmpvar_44);
      };
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_41.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float x_49;
      x_49 = ((a_42 - _DITHERMATRIX[
        int(tmpvar_45)
      ][
        int(tmpvar_48)
      ]) - 0.01);
      if ((x_49 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_22.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 reflection_18;
  mediump vec3 R_19;
  mediump float intensity_20;
  mediump vec4 noiseTex_21;
  mediump vec4 spColor_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_22.xyz = tmpvar_23.xyz;
  spColor_22.w = outColor_5.w;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_21 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (((1.99 * noiseTex_21.x) * _SPNoiseScaler) - 1.0);
  intensity_20 = tmpvar_25;
  highp vec3 tmpvar_26;
  highp vec3 I_27;
  I_27 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_21 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_26 = (I_27 - (2.0 * (
    dot (N_3, I_27)
   * N_3)));
  R_19 = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = textureCube (_SPCubeMap, R_19).xyz;
  reflection_18 = tmpvar_28;
  highp vec3 tmpvar_29;
  mediump vec3 x_30;
  x_30 = (spColor_22.xyz * _SPOldColor.xyz);
  tmpvar_29 = mix (x_30, ((reflection_18 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_22.xyz = tmpvar_29;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_20 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_20 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_31;
      tmpvar_31 = mix (spColor_22, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_20) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_22 = tmpvar_31;
    };
  };
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (outColor_5.xyz, spColor_22.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_22.xyz = tmpvar_32;
  outColor_5.w = spColor_22.w;
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = N_3;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (spColor_22.xyz, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_41;
    scrpos_41 = xlv_TEXCOORD3;
    mediump float a_42;
    a_42 = xlv_TEXCOORD3.z;
    if ((a_42 < 0.95)) {
      scrpos_41.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_42 = (a_42 * 17.0);
      highp float tmpvar_43;
      tmpvar_43 = (scrpos_41.y / 4.0);
      highp float tmpvar_44;
      tmpvar_44 = (fract(abs(tmpvar_43)) * 4.0);
      highp float tmpvar_45;
      if ((tmpvar_43 >= 0.0)) {
        tmpvar_45 = tmpvar_44;
      } else {
        tmpvar_45 = -(tmpvar_44);
      };
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_41.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float x_49;
      x_49 = ((a_42 - _DITHERMATRIX[
        int(tmpvar_45)
      ][
        int(tmpvar_48)
      ]) - 0.01);
      if ((x_49 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_22.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 reflection_18;
  mediump vec3 R_19;
  mediump float intensity_20;
  mediump vec4 noiseTex_21;
  mediump vec4 spColor_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_22.xyz = tmpvar_23.xyz;
  spColor_22.w = outColor_5.w;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_21 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (((1.99 * noiseTex_21.x) * _SPNoiseScaler) - 1.0);
  intensity_20 = tmpvar_25;
  highp vec3 tmpvar_26;
  highp vec3 I_27;
  I_27 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_21 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_26 = (I_27 - (2.0 * (
    dot (N_3, I_27)
   * N_3)));
  R_19 = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = textureCube (_SPCubeMap, R_19).xyz;
  reflection_18 = tmpvar_28;
  highp vec3 tmpvar_29;
  mediump vec3 x_30;
  x_30 = (spColor_22.xyz * _SPOldColor.xyz);
  tmpvar_29 = mix (x_30, ((reflection_18 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_22.xyz = tmpvar_29;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_20 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_20 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_31;
      tmpvar_31 = mix (spColor_22, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_20) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_22 = tmpvar_31;
    };
  };
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (outColor_5.xyz, spColor_22.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_22.xyz = tmpvar_32;
  outColor_5.w = spColor_22.w;
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = N_3;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (spColor_22.xyz, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_41;
    scrpos_41 = xlv_TEXCOORD3;
    mediump float a_42;
    a_42 = xlv_TEXCOORD3.z;
    if ((a_42 < 0.95)) {
      scrpos_41.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_42 = (a_42 * 17.0);
      highp float tmpvar_43;
      tmpvar_43 = (scrpos_41.y / 4.0);
      highp float tmpvar_44;
      tmpvar_44 = (fract(abs(tmpvar_43)) * 4.0);
      highp float tmpvar_45;
      if ((tmpvar_43 >= 0.0)) {
        tmpvar_45 = tmpvar_44;
      } else {
        tmpvar_45 = -(tmpvar_44);
      };
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_41.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float x_49;
      x_49 = ((a_42 - _DITHERMATRIX[
        int(tmpvar_45)
      ][
        int(tmpvar_48)
      ]) - 0.01);
      if ((x_49 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_22.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 reflection_18;
  mediump vec3 R_19;
  mediump float intensity_20;
  mediump vec4 noiseTex_21;
  mediump vec4 spColor_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_22.xyz = tmpvar_23.xyz;
  spColor_22.w = outColor_5.w;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_21 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (((1.99 * noiseTex_21.x) * _SPNoiseScaler) - 1.0);
  intensity_20 = tmpvar_25;
  highp vec3 tmpvar_26;
  highp vec3 I_27;
  I_27 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_21 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_26 = (I_27 - (2.0 * (
    dot (N_3, I_27)
   * N_3)));
  R_19 = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = textureCube (_SPCubeMap, R_19).xyz;
  reflection_18 = tmpvar_28;
  highp vec3 tmpvar_29;
  mediump vec3 x_30;
  x_30 = (spColor_22.xyz * _SPOldColor.xyz);
  tmpvar_29 = mix (x_30, ((reflection_18 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_22.xyz = tmpvar_29;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_20 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_20 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_31;
      tmpvar_31 = mix (spColor_22, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_20) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_22 = tmpvar_31;
    };
  };
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (outColor_5.xyz, spColor_22.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_22.xyz = tmpvar_32;
  outColor_5.w = spColor_22.w;
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = N_3;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (spColor_22.xyz, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_41;
    scrpos_41 = xlv_TEXCOORD3;
    mediump float a_42;
    a_42 = xlv_TEXCOORD3.z;
    if ((a_42 < 0.95)) {
      scrpos_41.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_42 = (a_42 * 17.0);
      highp float tmpvar_43;
      tmpvar_43 = (scrpos_41.y / 4.0);
      highp float tmpvar_44;
      tmpvar_44 = (fract(abs(tmpvar_43)) * 4.0);
      highp float tmpvar_45;
      if ((tmpvar_43 >= 0.0)) {
        tmpvar_45 = tmpvar_44;
      } else {
        tmpvar_45 = -(tmpvar_44);
      };
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_41.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float x_49;
      x_49 = ((a_42 - _DITHERMATRIX[
        int(tmpvar_45)
      ][
        int(tmpvar_48)
      ]) - 0.01);
      if ((x_49 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_22.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 reflection_18;
  mediump vec3 R_19;
  mediump float intensity_20;
  mediump vec4 noiseTex_21;
  mediump vec4 spColor_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_22.xyz = tmpvar_23.xyz;
  spColor_22.w = outColor_5.w;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_21 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (((1.99 * noiseTex_21.x) * _SPNoiseScaler) - 1.0);
  intensity_20 = tmpvar_25;
  highp vec3 tmpvar_26;
  highp vec3 I_27;
  I_27 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_21 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_26 = (I_27 - (2.0 * (
    dot (N_3, I_27)
   * N_3)));
  R_19 = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = textureCube (_SPCubeMap, R_19).xyz;
  reflection_18 = tmpvar_28;
  highp vec3 tmpvar_29;
  mediump vec3 x_30;
  x_30 = (spColor_22.xyz * _SPOldColor.xyz);
  tmpvar_29 = mix (x_30, ((reflection_18 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_22.xyz = tmpvar_29;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_20 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_20 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_31;
      tmpvar_31 = mix (spColor_22, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_20) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_22 = tmpvar_31;
    };
  };
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (outColor_5.xyz, spColor_22.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_22.xyz = tmpvar_32;
  outColor_5.w = spColor_22.w;
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = N_3;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (spColor_22.xyz, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_41;
    scrpos_41 = xlv_TEXCOORD3;
    mediump float a_42;
    a_42 = xlv_TEXCOORD3.z;
    if ((a_42 < 0.95)) {
      scrpos_41.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_42 = (a_42 * 17.0);
      highp float tmpvar_43;
      tmpvar_43 = (scrpos_41.y / 4.0);
      highp float tmpvar_44;
      tmpvar_44 = (fract(abs(tmpvar_43)) * 4.0);
      highp float tmpvar_45;
      if ((tmpvar_43 >= 0.0)) {
        tmpvar_45 = tmpvar_44;
      } else {
        tmpvar_45 = -(tmpvar_44);
      };
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_41.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float x_49;
      x_49 = ((a_42 - _DITHERMATRIX[
        int(tmpvar_45)
      ][
        int(tmpvar_48)
      ]) - 0.01);
      if ((x_49 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_22.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 reflection_18;
  mediump vec3 R_19;
  mediump float intensity_20;
  mediump vec4 noiseTex_21;
  mediump vec4 spColor_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_22.xyz = tmpvar_23.xyz;
  spColor_22.w = outColor_5.w;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_21 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (((1.99 * noiseTex_21.x) * _SPNoiseScaler) - 1.0);
  intensity_20 = tmpvar_25;
  highp vec3 tmpvar_26;
  highp vec3 I_27;
  I_27 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_21 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_26 = (I_27 - (2.0 * (
    dot (N_3, I_27)
   * N_3)));
  R_19 = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = textureCube (_SPCubeMap, R_19).xyz;
  reflection_18 = tmpvar_28;
  highp vec3 tmpvar_29;
  mediump vec3 x_30;
  x_30 = (spColor_22.xyz * _SPOldColor.xyz);
  tmpvar_29 = mix (x_30, ((reflection_18 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_22.xyz = tmpvar_29;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_20 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_20 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_31;
      tmpvar_31 = mix (spColor_22, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_20) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_22 = tmpvar_31;
    };
  };
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (outColor_5.xyz, spColor_22.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_22.xyz = tmpvar_32;
  outColor_5.w = spColor_22.w;
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = N_3;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (spColor_22.xyz, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_41;
    scrpos_41 = xlv_TEXCOORD3;
    mediump float a_42;
    a_42 = xlv_TEXCOORD3.z;
    if ((a_42 < 0.95)) {
      scrpos_41.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_42 = (a_42 * 17.0);
      highp float tmpvar_43;
      tmpvar_43 = (scrpos_41.y / 4.0);
      highp float tmpvar_44;
      tmpvar_44 = (fract(abs(tmpvar_43)) * 4.0);
      highp float tmpvar_45;
      if ((tmpvar_43 >= 0.0)) {
        tmpvar_45 = tmpvar_44;
      } else {
        tmpvar_45 = -(tmpvar_44);
      };
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_41.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float x_49;
      x_49 = ((a_42 - _DITHERMATRIX[
        int(tmpvar_45)
      ][
        int(tmpvar_48)
      ]) - 0.01);
      if ((x_49 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_22.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 reflection_18;
  mediump vec3 R_19;
  mediump float intensity_20;
  mediump vec4 noiseTex_21;
  mediump vec4 spColor_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_22.xyz = tmpvar_23.xyz;
  spColor_22.w = outColor_5.w;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_21 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (((1.99 * noiseTex_21.x) * _SPNoiseScaler) - 1.0);
  intensity_20 = tmpvar_25;
  highp vec3 tmpvar_26;
  highp vec3 I_27;
  I_27 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_21 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_26 = (I_27 - (2.0 * (
    dot (N_3, I_27)
   * N_3)));
  R_19 = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = textureCube (_SPCubeMap, R_19).xyz;
  reflection_18 = tmpvar_28;
  highp vec3 tmpvar_29;
  mediump vec3 x_30;
  x_30 = (spColor_22.xyz * _SPOldColor.xyz);
  tmpvar_29 = mix (x_30, ((reflection_18 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_22.xyz = tmpvar_29;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_20 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_20 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_31;
      tmpvar_31 = mix (spColor_22, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_20) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_22 = tmpvar_31;
    };
  };
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (outColor_5.xyz, spColor_22.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_22.xyz = tmpvar_32;
  outColor_5.w = spColor_22.w;
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = N_3;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (spColor_22.xyz, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_41;
    scrpos_41 = xlv_TEXCOORD3;
    mediump float a_42;
    a_42 = xlv_TEXCOORD3.z;
    if ((a_42 < 0.95)) {
      scrpos_41.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_42 = (a_42 * 17.0);
      highp float tmpvar_43;
      tmpvar_43 = (scrpos_41.y / 4.0);
      highp float tmpvar_44;
      tmpvar_44 = (fract(abs(tmpvar_43)) * 4.0);
      highp float tmpvar_45;
      if ((tmpvar_43 >= 0.0)) {
        tmpvar_45 = tmpvar_44;
      } else {
        tmpvar_45 = -(tmpvar_44);
      };
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_41.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float x_49;
      x_49 = ((a_42 - _DITHERMATRIX[
        int(tmpvar_45)
      ][
        int(tmpvar_48)
      ]) - 0.01);
      if ((x_49 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_22.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 reflection_18;
  mediump vec3 R_19;
  mediump float intensity_20;
  mediump vec4 noiseTex_21;
  mediump vec4 spColor_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_22.xyz = tmpvar_23.xyz;
  spColor_22.w = outColor_5.w;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_21 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (((1.99 * noiseTex_21.x) * _SPNoiseScaler) - 1.0);
  intensity_20 = tmpvar_25;
  highp vec3 tmpvar_26;
  highp vec3 I_27;
  I_27 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_21 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_26 = (I_27 - (2.0 * (
    dot (N_3, I_27)
   * N_3)));
  R_19 = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = textureCube (_SPCubeMap, R_19).xyz;
  reflection_18 = tmpvar_28;
  highp vec3 tmpvar_29;
  mediump vec3 x_30;
  x_30 = (spColor_22.xyz * _SPOldColor.xyz);
  tmpvar_29 = mix (x_30, ((reflection_18 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_22.xyz = tmpvar_29;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_20 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_20 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_31;
      tmpvar_31 = mix (spColor_22, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_20) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_22 = tmpvar_31;
    };
  };
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (outColor_5.xyz, spColor_22.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_22.xyz = tmpvar_32;
  outColor_5.w = spColor_22.w;
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = N_3;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (spColor_22.xyz, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_41;
    scrpos_41 = xlv_TEXCOORD3;
    mediump float a_42;
    a_42 = xlv_TEXCOORD3.z;
    if ((a_42 < 0.95)) {
      scrpos_41.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_42 = (a_42 * 17.0);
      highp float tmpvar_43;
      tmpvar_43 = (scrpos_41.y / 4.0);
      highp float tmpvar_44;
      tmpvar_44 = (fract(abs(tmpvar_43)) * 4.0);
      highp float tmpvar_45;
      if ((tmpvar_43 >= 0.0)) {
        tmpvar_45 = tmpvar_44;
      } else {
        tmpvar_45 = -(tmpvar_44);
      };
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_41.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float x_49;
      x_49 = ((a_42 - _DITHERMATRIX[
        int(tmpvar_45)
      ][
        int(tmpvar_48)
      ]) - 0.01);
      if ((x_49 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_22.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 reflection_18;
  mediump vec3 R_19;
  mediump float intensity_20;
  mediump vec4 noiseTex_21;
  mediump vec4 spColor_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_22.xyz = tmpvar_23.xyz;
  spColor_22.w = outColor_5.w;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_21 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (((1.99 * noiseTex_21.x) * _SPNoiseScaler) - 1.0);
  intensity_20 = tmpvar_25;
  highp vec3 tmpvar_26;
  highp vec3 I_27;
  I_27 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_21 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_26 = (I_27 - (2.0 * (
    dot (N_3, I_27)
   * N_3)));
  R_19 = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = textureCube (_SPCubeMap, R_19).xyz;
  reflection_18 = tmpvar_28;
  highp vec3 tmpvar_29;
  mediump vec3 x_30;
  x_30 = (spColor_22.xyz * _SPOldColor.xyz);
  tmpvar_29 = mix (x_30, ((reflection_18 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_22.xyz = tmpvar_29;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_20 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_20 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_31;
      tmpvar_31 = mix (spColor_22, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_20) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_22 = tmpvar_31;
    };
  };
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (outColor_5.xyz, spColor_22.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_22.xyz = tmpvar_32;
  outColor_5.w = spColor_22.w;
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = N_3;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (spColor_22.xyz, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_41;
    scrpos_41 = xlv_TEXCOORD3;
    mediump float a_42;
    a_42 = xlv_TEXCOORD3.z;
    if ((a_42 < 0.95)) {
      scrpos_41.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_42 = (a_42 * 17.0);
      highp float tmpvar_43;
      tmpvar_43 = (scrpos_41.y / 4.0);
      highp float tmpvar_44;
      tmpvar_44 = (fract(abs(tmpvar_43)) * 4.0);
      highp float tmpvar_45;
      if ((tmpvar_43 >= 0.0)) {
        tmpvar_45 = tmpvar_44;
      } else {
        tmpvar_45 = -(tmpvar_44);
      };
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_41.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float x_49;
      x_49 = ((a_42 - _DITHERMATRIX[
        int(tmpvar_45)
      ][
        int(tmpvar_48)
      ]) - 0.01);
      if ((x_49 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_22.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 reflection_18;
  mediump vec3 R_19;
  mediump float intensity_20;
  mediump vec4 noiseTex_21;
  mediump vec4 spColor_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_22.xyz = tmpvar_23.xyz;
  spColor_22.w = outColor_5.w;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_21 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (((1.99 * noiseTex_21.x) * _SPNoiseScaler) - 1.0);
  intensity_20 = tmpvar_25;
  highp vec3 tmpvar_26;
  highp vec3 I_27;
  I_27 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_21 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_26 = (I_27 - (2.0 * (
    dot (N_3, I_27)
   * N_3)));
  R_19 = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = textureCube (_SPCubeMap, R_19).xyz;
  reflection_18 = tmpvar_28;
  highp vec3 tmpvar_29;
  mediump vec3 x_30;
  x_30 = (spColor_22.xyz * _SPOldColor.xyz);
  tmpvar_29 = mix (x_30, ((reflection_18 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_22.xyz = tmpvar_29;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_20 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_20 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_31;
      tmpvar_31 = mix (spColor_22, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_20) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_22 = tmpvar_31;
    };
  };
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (outColor_5.xyz, spColor_22.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_22.xyz = tmpvar_32;
  outColor_5.w = spColor_22.w;
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = N_3;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (spColor_22.xyz, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_41;
    scrpos_41 = xlv_TEXCOORD3;
    mediump float a_42;
    a_42 = xlv_TEXCOORD3.z;
    if ((a_42 < 0.95)) {
      scrpos_41.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_42 = (a_42 * 17.0);
      highp float tmpvar_43;
      tmpvar_43 = (scrpos_41.y / 4.0);
      highp float tmpvar_44;
      tmpvar_44 = (fract(abs(tmpvar_43)) * 4.0);
      highp float tmpvar_45;
      if ((tmpvar_43 >= 0.0)) {
        tmpvar_45 = tmpvar_44;
      } else {
        tmpvar_45 = -(tmpvar_44);
      };
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_41.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float x_49;
      x_49 = ((a_42 - _DITHERMATRIX[
        int(tmpvar_45)
      ][
        int(tmpvar_48)
      ]) - 0.01);
      if ((x_49 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_22.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 reflection_18;
  mediump vec3 R_19;
  mediump float intensity_20;
  mediump vec4 noiseTex_21;
  mediump vec4 spColor_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_22.xyz = tmpvar_23.xyz;
  spColor_22.w = outColor_5.w;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_21 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (((1.99 * noiseTex_21.x) * _SPNoiseScaler) - 1.0);
  intensity_20 = tmpvar_25;
  highp vec3 tmpvar_26;
  highp vec3 I_27;
  I_27 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_21 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_26 = (I_27 - (2.0 * (
    dot (N_3, I_27)
   * N_3)));
  R_19 = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = textureCube (_SPCubeMap, R_19).xyz;
  reflection_18 = tmpvar_28;
  highp vec3 tmpvar_29;
  mediump vec3 x_30;
  x_30 = (spColor_22.xyz * _SPOldColor.xyz);
  tmpvar_29 = mix (x_30, ((reflection_18 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_22.xyz = tmpvar_29;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_20 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_20 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_31;
      tmpvar_31 = mix (spColor_22, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_20) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_22 = tmpvar_31;
    };
  };
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (outColor_5.xyz, spColor_22.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_22.xyz = tmpvar_32;
  outColor_5.w = spColor_22.w;
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = N_3;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (spColor_22.xyz, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_41;
    scrpos_41 = xlv_TEXCOORD3;
    mediump float a_42;
    a_42 = xlv_TEXCOORD3.z;
    if ((a_42 < 0.95)) {
      scrpos_41.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_42 = (a_42 * 17.0);
      highp float tmpvar_43;
      tmpvar_43 = (scrpos_41.y / 4.0);
      highp float tmpvar_44;
      tmpvar_44 = (fract(abs(tmpvar_43)) * 4.0);
      highp float tmpvar_45;
      if ((tmpvar_43 >= 0.0)) {
        tmpvar_45 = tmpvar_44;
      } else {
        tmpvar_45 = -(tmpvar_44);
      };
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_41.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float x_49;
      x_49 = ((a_42 - _DITHERMATRIX[
        int(tmpvar_45)
      ][
        int(tmpvar_48)
      ]) - 0.01);
      if ((x_49 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_22.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 reflection_18;
  mediump vec3 R_19;
  mediump float intensity_20;
  mediump vec4 noiseTex_21;
  mediump vec4 spColor_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_22.xyz = tmpvar_23.xyz;
  spColor_22.w = outColor_5.w;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_21 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (((1.99 * noiseTex_21.x) * _SPNoiseScaler) - 1.0);
  intensity_20 = tmpvar_25;
  highp vec3 tmpvar_26;
  highp vec3 I_27;
  I_27 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_21 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_26 = (I_27 - (2.0 * (
    dot (N_3, I_27)
   * N_3)));
  R_19 = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = textureCube (_SPCubeMap, R_19).xyz;
  reflection_18 = tmpvar_28;
  highp vec3 tmpvar_29;
  mediump vec3 x_30;
  x_30 = (spColor_22.xyz * _SPOldColor.xyz);
  tmpvar_29 = mix (x_30, ((reflection_18 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_22.xyz = tmpvar_29;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_20 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_20 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_31;
      tmpvar_31 = mix (spColor_22, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_20) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_22 = tmpvar_31;
    };
  };
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (outColor_5.xyz, spColor_22.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_22.xyz = tmpvar_32;
  outColor_5.w = spColor_22.w;
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = N_3;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (spColor_22.xyz, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_41;
    scrpos_41 = xlv_TEXCOORD3;
    mediump float a_42;
    a_42 = xlv_TEXCOORD3.z;
    if ((a_42 < 0.95)) {
      scrpos_41.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_42 = (a_42 * 17.0);
      highp float tmpvar_43;
      tmpvar_43 = (scrpos_41.y / 4.0);
      highp float tmpvar_44;
      tmpvar_44 = (fract(abs(tmpvar_43)) * 4.0);
      highp float tmpvar_45;
      if ((tmpvar_43 >= 0.0)) {
        tmpvar_45 = tmpvar_44;
      } else {
        tmpvar_45 = -(tmpvar_44);
      };
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_41.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float x_49;
      x_49 = ((a_42 - _DITHERMATRIX[
        int(tmpvar_45)
      ][
        int(tmpvar_48)
      ]) - 0.01);
      if ((x_49 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_22.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 reflection_18;
  mediump vec3 R_19;
  mediump float intensity_20;
  mediump vec4 noiseTex_21;
  mediump vec4 spColor_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_22.xyz = tmpvar_23.xyz;
  spColor_22.w = outColor_5.w;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_21 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (((1.99 * noiseTex_21.x) * _SPNoiseScaler) - 1.0);
  intensity_20 = tmpvar_25;
  highp vec3 tmpvar_26;
  highp vec3 I_27;
  I_27 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_21 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_26 = (I_27 - (2.0 * (
    dot (N_3, I_27)
   * N_3)));
  R_19 = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = textureCube (_SPCubeMap, R_19).xyz;
  reflection_18 = tmpvar_28;
  highp vec3 tmpvar_29;
  mediump vec3 x_30;
  x_30 = (spColor_22.xyz * _SPOldColor.xyz);
  tmpvar_29 = mix (x_30, ((reflection_18 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_22.xyz = tmpvar_29;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_20 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_20 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_31;
      tmpvar_31 = mix (spColor_22, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_20) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_22 = tmpvar_31;
    };
  };
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (outColor_5.xyz, spColor_22.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_22.xyz = tmpvar_32;
  outColor_5.w = spColor_22.w;
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = N_3;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (spColor_22.xyz, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_41;
    scrpos_41 = xlv_TEXCOORD3;
    mediump float a_42;
    a_42 = xlv_TEXCOORD3.z;
    if ((a_42 < 0.95)) {
      scrpos_41.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_42 = (a_42 * 17.0);
      highp float tmpvar_43;
      tmpvar_43 = (scrpos_41.y / 4.0);
      highp float tmpvar_44;
      tmpvar_44 = (fract(abs(tmpvar_43)) * 4.0);
      highp float tmpvar_45;
      if ((tmpvar_43 >= 0.0)) {
        tmpvar_45 = tmpvar_44;
      } else {
        tmpvar_45 = -(tmpvar_44);
      };
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_41.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float x_49;
      x_49 = ((a_42 - _DITHERMATRIX[
        int(tmpvar_45)
      ][
        int(tmpvar_48)
      ]) - 0.01);
      if ((x_49 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_22.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 reflection_18;
  mediump vec3 R_19;
  mediump float intensity_20;
  mediump vec4 noiseTex_21;
  mediump vec4 spColor_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_22.xyz = tmpvar_23.xyz;
  spColor_22.w = outColor_5.w;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_21 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (((1.99 * noiseTex_21.x) * _SPNoiseScaler) - 1.0);
  intensity_20 = tmpvar_25;
  highp vec3 tmpvar_26;
  highp vec3 I_27;
  I_27 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_21 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_26 = (I_27 - (2.0 * (
    dot (N_3, I_27)
   * N_3)));
  R_19 = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = textureCube (_SPCubeMap, R_19).xyz;
  reflection_18 = tmpvar_28;
  highp vec3 tmpvar_29;
  mediump vec3 x_30;
  x_30 = (spColor_22.xyz * _SPOldColor.xyz);
  tmpvar_29 = mix (x_30, ((reflection_18 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_22.xyz = tmpvar_29;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_20 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_20 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_31;
      tmpvar_31 = mix (spColor_22, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_20) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_22 = tmpvar_31;
    };
  };
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (outColor_5.xyz, spColor_22.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_22.xyz = tmpvar_32;
  outColor_5.w = spColor_22.w;
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = N_3;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (spColor_22.xyz, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_41;
    scrpos_41 = xlv_TEXCOORD3;
    mediump float a_42;
    a_42 = xlv_TEXCOORD3.z;
    if ((a_42 < 0.95)) {
      scrpos_41.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_42 = (a_42 * 17.0);
      highp float tmpvar_43;
      tmpvar_43 = (scrpos_41.y / 4.0);
      highp float tmpvar_44;
      tmpvar_44 = (fract(abs(tmpvar_43)) * 4.0);
      highp float tmpvar_45;
      if ((tmpvar_43 >= 0.0)) {
        tmpvar_45 = tmpvar_44;
      } else {
        tmpvar_45 = -(tmpvar_44);
      };
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_41.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float x_49;
      x_49 = ((a_42 - _DITHERMATRIX[
        int(tmpvar_45)
      ][
        int(tmpvar_48)
      ]) - 0.01);
      if ((x_49 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_22.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 reflection_18;
  mediump vec3 R_19;
  mediump float intensity_20;
  mediump vec4 noiseTex_21;
  mediump vec4 spColor_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_22.xyz = tmpvar_23.xyz;
  spColor_22.w = outColor_5.w;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_21 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (((1.99 * noiseTex_21.x) * _SPNoiseScaler) - 1.0);
  intensity_20 = tmpvar_25;
  highp vec3 tmpvar_26;
  highp vec3 I_27;
  I_27 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_21 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_26 = (I_27 - (2.0 * (
    dot (N_3, I_27)
   * N_3)));
  R_19 = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = textureCube (_SPCubeMap, R_19).xyz;
  reflection_18 = tmpvar_28;
  highp vec3 tmpvar_29;
  mediump vec3 x_30;
  x_30 = (spColor_22.xyz * _SPOldColor.xyz);
  tmpvar_29 = mix (x_30, ((reflection_18 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_22.xyz = tmpvar_29;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_20 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_20 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_31;
      tmpvar_31 = mix (spColor_22, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_20) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_22 = tmpvar_31;
    };
  };
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (outColor_5.xyz, spColor_22.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_22.xyz = tmpvar_32;
  outColor_5.w = spColor_22.w;
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = N_3;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (spColor_22.xyz, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_41;
    scrpos_41 = xlv_TEXCOORD3;
    mediump float a_42;
    a_42 = xlv_TEXCOORD3.z;
    if ((a_42 < 0.95)) {
      scrpos_41.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_42 = (a_42 * 17.0);
      highp float tmpvar_43;
      tmpvar_43 = (scrpos_41.y / 4.0);
      highp float tmpvar_44;
      tmpvar_44 = (fract(abs(tmpvar_43)) * 4.0);
      highp float tmpvar_45;
      if ((tmpvar_43 >= 0.0)) {
        tmpvar_45 = tmpvar_44;
      } else {
        tmpvar_45 = -(tmpvar_44);
      };
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_41.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float x_49;
      x_49 = ((a_42 - _DITHERMATRIX[
        int(tmpvar_45)
      ][
        int(tmpvar_48)
      ]) - 0.01);
      if ((x_49 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_22.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 reflection_18;
  mediump vec3 R_19;
  mediump float intensity_20;
  mediump vec4 noiseTex_21;
  mediump vec4 spColor_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_22.xyz = tmpvar_23.xyz;
  spColor_22.w = outColor_5.w;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_21 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (((1.99 * noiseTex_21.x) * _SPNoiseScaler) - 1.0);
  intensity_20 = tmpvar_25;
  highp vec3 tmpvar_26;
  highp vec3 I_27;
  I_27 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_21 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_26 = (I_27 - (2.0 * (
    dot (N_3, I_27)
   * N_3)));
  R_19 = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = textureCube (_SPCubeMap, R_19).xyz;
  reflection_18 = tmpvar_28;
  highp vec3 tmpvar_29;
  mediump vec3 x_30;
  x_30 = (spColor_22.xyz * _SPOldColor.xyz);
  tmpvar_29 = mix (x_30, ((reflection_18 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_22.xyz = tmpvar_29;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_20 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_20 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_31;
      tmpvar_31 = mix (spColor_22, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_20) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_22 = tmpvar_31;
    };
  };
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (outColor_5.xyz, spColor_22.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_22.xyz = tmpvar_32;
  outColor_5.w = spColor_22.w;
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = N_3;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (spColor_22.xyz, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_41;
    scrpos_41 = xlv_TEXCOORD3;
    mediump float a_42;
    a_42 = xlv_TEXCOORD3.z;
    if ((a_42 < 0.95)) {
      scrpos_41.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_42 = (a_42 * 17.0);
      highp float tmpvar_43;
      tmpvar_43 = (scrpos_41.y / 4.0);
      highp float tmpvar_44;
      tmpvar_44 = (fract(abs(tmpvar_43)) * 4.0);
      highp float tmpvar_45;
      if ((tmpvar_43 >= 0.0)) {
        tmpvar_45 = tmpvar_44;
      } else {
        tmpvar_45 = -(tmpvar_44);
      };
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_41.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float x_49;
      x_49 = ((a_42 - _DITHERMATRIX[
        int(tmpvar_45)
      ][
        int(tmpvar_48)
      ]) - 0.01);
      if ((x_49 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_22.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 baseTexColor_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_4 = tmpvar_6;
  mediump float x_7;
  x_7 = (baseTexColor_4.w - _AlphaClipThreshold);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = baseTexColor_4.xyz;
  mediump vec3 diffColor_9;
  diffColor_9 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_9 = (baseTexColor_4.xyz * _FirstShadowMultColor);
  } else {
    diffColor_9 = tmpvar_8;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 H_14;
  H_14 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_15;
    highp vec3 tmpvar_16;
    tmpvar_16 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_15 = tmpvar_16;
    H_14 = normalize((_CustomLightDir.xyz + V_15));
  };
  mediump float tmpvar_17;
  tmpvar_17 = pow (max (dot (N_3, H_14), 0.0), _Shininess);
  if ((tmpvar_17 >= _SpecularThreshold)) {
    color_13 = (_LightSpecColor * _SpecMulti);
  } else {
    color_13 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_9 * _Color.xyz) * _EnvColor.xyz) + color_13);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_4.w);
  mediump vec3 reflection_18;
  mediump vec3 R_19;
  mediump float intensity_20;
  mediump vec4 noiseTex_21;
  mediump vec4 spColor_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_22.xyz = tmpvar_23.xyz;
  spColor_22.w = outColor_5.w;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_21 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (((1.99 * noiseTex_21.x) * _SPNoiseScaler) - 1.0);
  intensity_20 = tmpvar_25;
  highp vec3 tmpvar_26;
  highp vec3 I_27;
  I_27 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_21 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_26 = (I_27 - (2.0 * (
    dot (N_3, I_27)
   * N_3)));
  R_19 = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = textureCube (_SPCubeMap, R_19).xyz;
  reflection_18 = tmpvar_28;
  highp vec3 tmpvar_29;
  mediump vec3 x_30;
  x_30 = (spColor_22.xyz * _SPOldColor.xyz);
  tmpvar_29 = mix (x_30, ((reflection_18 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_22.xyz = tmpvar_29;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_20 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_20 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_31;
      tmpvar_31 = mix (spColor_22, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_20) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_22 = tmpvar_31;
    };
  };
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (outColor_5.xyz, spColor_22.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_22.xyz = tmpvar_32;
  outColor_5.w = spColor_22.w;
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = N_3;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (spColor_22.xyz, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_41;
    scrpos_41 = xlv_TEXCOORD3;
    mediump float a_42;
    a_42 = xlv_TEXCOORD3.z;
    if ((a_42 < 0.95)) {
      scrpos_41.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_42 = (a_42 * 17.0);
      highp float tmpvar_43;
      tmpvar_43 = (scrpos_41.y / 4.0);
      highp float tmpvar_44;
      tmpvar_44 = (fract(abs(tmpvar_43)) * 4.0);
      highp float tmpvar_45;
      if ((tmpvar_43 >= 0.0)) {
        tmpvar_45 = tmpvar_44;
      } else {
        tmpvar_45 = -(tmpvar_44);
      };
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_41.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float x_49;
      x_49 = ((a_42 - _DITHERMATRIX[
        int(tmpvar_45)
      ][
        int(tmpvar_48)
      ]) - 0.01);
      if ((x_49 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_22.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = tmpvar_5;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_8;
  tmpvar_8 = tmpvar_7.w;
  mediump vec2 tmpvar_9;
  tmpvar_9.y = 0.0;
  tmpvar_9.x = tmpvar_8;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_tableTex, tmpvar_9).xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 1.0;
  tmpvar_12.x = tmpvar_8;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = mix (tmpvar_11, tmpvar_14, tmpvar_6.xxx);
  tmpvar_15.w = tmpvar_6.y;
  mediump float x_16;
  x_16 = (tmpvar_6.y - _AlphaClipThreshold);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_15.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_15.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_18 * _Color.xyz) * _EnvColor.xyz) + color_22);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.y);
  mediump vec3 reflection_27;
  mediump vec3 R_28;
  mediump float intensity_29;
  mediump vec4 noiseTex_30;
  mediump vec4 spColor_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_31.xyz = tmpvar_32.xyz;
  spColor_31.w = outColor_4.w;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_30 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = (((1.99 * noiseTex_30.x) * _SPNoiseScaler) - 1.0);
  intensity_29 = tmpvar_34;
  highp vec3 tmpvar_35;
  highp vec3 I_36;
  I_36 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_30 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_35 = (I_36 - (2.0 * (
    dot (N_3, I_36)
   * N_3)));
  R_28 = tmpvar_35;
  lowp vec3 tmpvar_37;
  tmpvar_37 = textureCube (_SPCubeMap, R_28).xyz;
  reflection_27 = tmpvar_37;
  highp vec3 tmpvar_38;
  mediump vec3 x_39;
  x_39 = (spColor_31.xyz * _SPOldColor.xyz);
  tmpvar_38 = mix (x_39, ((reflection_27 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_31.xyz = tmpvar_38;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_29 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_29 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_40;
      tmpvar_40 = mix (spColor_31, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_29) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_31 = tmpvar_40;
    };
  };
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (outColor_4.xyz, spColor_31.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_31.xyz = tmpvar_41;
  outColor_4.w = spColor_31.w;
  mediump vec3 tmpvar_42;
  highp vec3 N_43;
  N_43 = N_3;
  highp vec3 V_44;
  V_44 = V_2;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = pow (clamp ((1.001 - 
    dot (V_44, N_43)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_45 = (_RGBias + (tmpvar_46 * _RGScale));
  mediump vec3 tmpvar_47;
  tmpvar_47 = (tmpvar_45 * _RGColor).xyz;
  mediump float tmpvar_48;
  tmpvar_48 = clamp (tmpvar_45, 0.0, 1.0);
  highp vec3 tmpvar_49;
  tmpvar_49 = mix (spColor_31.xyz, tmpvar_47, vec3((tmpvar_48 * _RGRatio)));
  tmpvar_42 = tmpvar_49;
  outColor_4.xyz = tmpvar_42;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_50;
    scrpos_50 = xlv_TEXCOORD3;
    mediump float a_51;
    a_51 = xlv_TEXCOORD3.z;
    if ((a_51 < 0.95)) {
      scrpos_50.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_51 = (a_51 * 17.0);
      highp float tmpvar_52;
      tmpvar_52 = (scrpos_50.y / 4.0);
      highp float tmpvar_53;
      tmpvar_53 = (fract(abs(tmpvar_52)) * 4.0);
      highp float tmpvar_54;
      if ((tmpvar_52 >= 0.0)) {
        tmpvar_54 = tmpvar_53;
      } else {
        tmpvar_54 = -(tmpvar_53);
      };
      highp float tmpvar_55;
      tmpvar_55 = (scrpos_50.x / 4.0);
      highp float tmpvar_56;
      tmpvar_56 = (fract(abs(tmpvar_55)) * 4.0);
      highp float tmpvar_57;
      if ((tmpvar_55 >= 0.0)) {
        tmpvar_57 = tmpvar_56;
      } else {
        tmpvar_57 = -(tmpvar_56);
      };
      highp float x_58;
      x_58 = ((a_51 - _DITHERMATRIX[
        int(tmpvar_54)
      ][
        int(tmpvar_57)
      ]) - 0.01);
      if ((x_58 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_31.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = tmpvar_5;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_8;
  tmpvar_8 = tmpvar_7.w;
  mediump vec2 tmpvar_9;
  tmpvar_9.y = 0.0;
  tmpvar_9.x = tmpvar_8;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_tableTex, tmpvar_9).xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 1.0;
  tmpvar_12.x = tmpvar_8;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = mix (tmpvar_11, tmpvar_14, tmpvar_6.xxx);
  tmpvar_15.w = tmpvar_6.y;
  mediump float x_16;
  x_16 = (tmpvar_6.y - _AlphaClipThreshold);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_15.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_15.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_18 * _Color.xyz) * _EnvColor.xyz) + color_22);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.y);
  mediump vec3 reflection_27;
  mediump vec3 R_28;
  mediump float intensity_29;
  mediump vec4 noiseTex_30;
  mediump vec4 spColor_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_31.xyz = tmpvar_32.xyz;
  spColor_31.w = outColor_4.w;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_30 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = (((1.99 * noiseTex_30.x) * _SPNoiseScaler) - 1.0);
  intensity_29 = tmpvar_34;
  highp vec3 tmpvar_35;
  highp vec3 I_36;
  I_36 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_30 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_35 = (I_36 - (2.0 * (
    dot (N_3, I_36)
   * N_3)));
  R_28 = tmpvar_35;
  lowp vec3 tmpvar_37;
  tmpvar_37 = textureCube (_SPCubeMap, R_28).xyz;
  reflection_27 = tmpvar_37;
  highp vec3 tmpvar_38;
  mediump vec3 x_39;
  x_39 = (spColor_31.xyz * _SPOldColor.xyz);
  tmpvar_38 = mix (x_39, ((reflection_27 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_31.xyz = tmpvar_38;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_29 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_29 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_40;
      tmpvar_40 = mix (spColor_31, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_29) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_31 = tmpvar_40;
    };
  };
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (outColor_4.xyz, spColor_31.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_31.xyz = tmpvar_41;
  outColor_4.w = spColor_31.w;
  mediump vec3 tmpvar_42;
  highp vec3 N_43;
  N_43 = N_3;
  highp vec3 V_44;
  V_44 = V_2;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = pow (clamp ((1.001 - 
    dot (V_44, N_43)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_45 = (_RGBias + (tmpvar_46 * _RGScale));
  mediump vec3 tmpvar_47;
  tmpvar_47 = (tmpvar_45 * _RGColor).xyz;
  mediump float tmpvar_48;
  tmpvar_48 = clamp (tmpvar_45, 0.0, 1.0);
  highp vec3 tmpvar_49;
  tmpvar_49 = mix (spColor_31.xyz, tmpvar_47, vec3((tmpvar_48 * _RGRatio)));
  tmpvar_42 = tmpvar_49;
  outColor_4.xyz = tmpvar_42;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_50;
    scrpos_50 = xlv_TEXCOORD3;
    mediump float a_51;
    a_51 = xlv_TEXCOORD3.z;
    if ((a_51 < 0.95)) {
      scrpos_50.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_51 = (a_51 * 17.0);
      highp float tmpvar_52;
      tmpvar_52 = (scrpos_50.y / 4.0);
      highp float tmpvar_53;
      tmpvar_53 = (fract(abs(tmpvar_52)) * 4.0);
      highp float tmpvar_54;
      if ((tmpvar_52 >= 0.0)) {
        tmpvar_54 = tmpvar_53;
      } else {
        tmpvar_54 = -(tmpvar_53);
      };
      highp float tmpvar_55;
      tmpvar_55 = (scrpos_50.x / 4.0);
      highp float tmpvar_56;
      tmpvar_56 = (fract(abs(tmpvar_55)) * 4.0);
      highp float tmpvar_57;
      if ((tmpvar_55 >= 0.0)) {
        tmpvar_57 = tmpvar_56;
      } else {
        tmpvar_57 = -(tmpvar_56);
      };
      highp float x_58;
      x_58 = ((a_51 - _DITHERMATRIX[
        int(tmpvar_54)
      ][
        int(tmpvar_57)
      ]) - 0.01);
      if ((x_58 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_31.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = tmpvar_5;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_8;
  tmpvar_8 = tmpvar_7.w;
  mediump vec2 tmpvar_9;
  tmpvar_9.y = 0.0;
  tmpvar_9.x = tmpvar_8;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_tableTex, tmpvar_9).xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 1.0;
  tmpvar_12.x = tmpvar_8;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = mix (tmpvar_11, tmpvar_14, tmpvar_6.xxx);
  tmpvar_15.w = tmpvar_6.y;
  mediump float x_16;
  x_16 = (tmpvar_6.y - _AlphaClipThreshold);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_15.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_15.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_18 * _Color.xyz) * _EnvColor.xyz) + color_22);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.y);
  mediump vec3 reflection_27;
  mediump vec3 R_28;
  mediump float intensity_29;
  mediump vec4 noiseTex_30;
  mediump vec4 spColor_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_31.xyz = tmpvar_32.xyz;
  spColor_31.w = outColor_4.w;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_30 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = (((1.99 * noiseTex_30.x) * _SPNoiseScaler) - 1.0);
  intensity_29 = tmpvar_34;
  highp vec3 tmpvar_35;
  highp vec3 I_36;
  I_36 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_30 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_35 = (I_36 - (2.0 * (
    dot (N_3, I_36)
   * N_3)));
  R_28 = tmpvar_35;
  lowp vec3 tmpvar_37;
  tmpvar_37 = textureCube (_SPCubeMap, R_28).xyz;
  reflection_27 = tmpvar_37;
  highp vec3 tmpvar_38;
  mediump vec3 x_39;
  x_39 = (spColor_31.xyz * _SPOldColor.xyz);
  tmpvar_38 = mix (x_39, ((reflection_27 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_31.xyz = tmpvar_38;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_29 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_29 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_40;
      tmpvar_40 = mix (spColor_31, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_29) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_31 = tmpvar_40;
    };
  };
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (outColor_4.xyz, spColor_31.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_31.xyz = tmpvar_41;
  outColor_4.w = spColor_31.w;
  mediump vec3 tmpvar_42;
  highp vec3 N_43;
  N_43 = N_3;
  highp vec3 V_44;
  V_44 = V_2;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = pow (clamp ((1.001 - 
    dot (V_44, N_43)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_45 = (_RGBias + (tmpvar_46 * _RGScale));
  mediump vec3 tmpvar_47;
  tmpvar_47 = (tmpvar_45 * _RGColor).xyz;
  mediump float tmpvar_48;
  tmpvar_48 = clamp (tmpvar_45, 0.0, 1.0);
  highp vec3 tmpvar_49;
  tmpvar_49 = mix (spColor_31.xyz, tmpvar_47, vec3((tmpvar_48 * _RGRatio)));
  tmpvar_42 = tmpvar_49;
  outColor_4.xyz = tmpvar_42;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_50;
    scrpos_50 = xlv_TEXCOORD3;
    mediump float a_51;
    a_51 = xlv_TEXCOORD3.z;
    if ((a_51 < 0.95)) {
      scrpos_50.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_51 = (a_51 * 17.0);
      highp float tmpvar_52;
      tmpvar_52 = (scrpos_50.y / 4.0);
      highp float tmpvar_53;
      tmpvar_53 = (fract(abs(tmpvar_52)) * 4.0);
      highp float tmpvar_54;
      if ((tmpvar_52 >= 0.0)) {
        tmpvar_54 = tmpvar_53;
      } else {
        tmpvar_54 = -(tmpvar_53);
      };
      highp float tmpvar_55;
      tmpvar_55 = (scrpos_50.x / 4.0);
      highp float tmpvar_56;
      tmpvar_56 = (fract(abs(tmpvar_55)) * 4.0);
      highp float tmpvar_57;
      if ((tmpvar_55 >= 0.0)) {
        tmpvar_57 = tmpvar_56;
      } else {
        tmpvar_57 = -(tmpvar_56);
      };
      highp float x_58;
      x_58 = ((a_51 - _DITHERMATRIX[
        int(tmpvar_54)
      ][
        int(tmpvar_57)
      ]) - 0.01);
      if ((x_58 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_31.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = tmpvar_5;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_8;
  tmpvar_8 = tmpvar_7.w;
  mediump vec2 tmpvar_9;
  tmpvar_9.y = 0.0;
  tmpvar_9.x = tmpvar_8;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_tableTex, tmpvar_9).xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 1.0;
  tmpvar_12.x = tmpvar_8;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = mix (tmpvar_11, tmpvar_14, tmpvar_6.xxx);
  tmpvar_15.w = tmpvar_6.y;
  mediump float x_16;
  x_16 = (tmpvar_6.y - _AlphaClipThreshold);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_15.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_15.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_18 * _Color.xyz) * _EnvColor.xyz) + color_22);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.y);
  mediump vec3 reflection_27;
  mediump vec3 R_28;
  mediump float intensity_29;
  mediump vec4 noiseTex_30;
  mediump vec4 spColor_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_31.xyz = tmpvar_32.xyz;
  spColor_31.w = outColor_4.w;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_30 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = (((1.99 * noiseTex_30.x) * _SPNoiseScaler) - 1.0);
  intensity_29 = tmpvar_34;
  highp vec3 tmpvar_35;
  highp vec3 I_36;
  I_36 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_30 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_35 = (I_36 - (2.0 * (
    dot (N_3, I_36)
   * N_3)));
  R_28 = tmpvar_35;
  lowp vec3 tmpvar_37;
  tmpvar_37 = textureCube (_SPCubeMap, R_28).xyz;
  reflection_27 = tmpvar_37;
  highp vec3 tmpvar_38;
  mediump vec3 x_39;
  x_39 = (spColor_31.xyz * _SPOldColor.xyz);
  tmpvar_38 = mix (x_39, ((reflection_27 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_31.xyz = tmpvar_38;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_29 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_29 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_40;
      tmpvar_40 = mix (spColor_31, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_29) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_31 = tmpvar_40;
    };
  };
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (outColor_4.xyz, spColor_31.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_31.xyz = tmpvar_41;
  outColor_4.w = spColor_31.w;
  mediump vec3 tmpvar_42;
  highp vec3 N_43;
  N_43 = N_3;
  highp vec3 V_44;
  V_44 = V_2;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = pow (clamp ((1.001 - 
    dot (V_44, N_43)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_45 = (_RGBias + (tmpvar_46 * _RGScale));
  mediump vec3 tmpvar_47;
  tmpvar_47 = (tmpvar_45 * _RGColor).xyz;
  mediump float tmpvar_48;
  tmpvar_48 = clamp (tmpvar_45, 0.0, 1.0);
  highp vec3 tmpvar_49;
  tmpvar_49 = mix (spColor_31.xyz, tmpvar_47, vec3((tmpvar_48 * _RGRatio)));
  tmpvar_42 = tmpvar_49;
  outColor_4.xyz = tmpvar_42;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_50;
    scrpos_50 = xlv_TEXCOORD3;
    mediump float a_51;
    a_51 = xlv_TEXCOORD3.z;
    if ((a_51 < 0.95)) {
      scrpos_50.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_51 = (a_51 * 17.0);
      highp float tmpvar_52;
      tmpvar_52 = (scrpos_50.y / 4.0);
      highp float tmpvar_53;
      tmpvar_53 = (fract(abs(tmpvar_52)) * 4.0);
      highp float tmpvar_54;
      if ((tmpvar_52 >= 0.0)) {
        tmpvar_54 = tmpvar_53;
      } else {
        tmpvar_54 = -(tmpvar_53);
      };
      highp float tmpvar_55;
      tmpvar_55 = (scrpos_50.x / 4.0);
      highp float tmpvar_56;
      tmpvar_56 = (fract(abs(tmpvar_55)) * 4.0);
      highp float tmpvar_57;
      if ((tmpvar_55 >= 0.0)) {
        tmpvar_57 = tmpvar_56;
      } else {
        tmpvar_57 = -(tmpvar_56);
      };
      highp float x_58;
      x_58 = ((a_51 - _DITHERMATRIX[
        int(tmpvar_54)
      ][
        int(tmpvar_57)
      ]) - 0.01);
      if ((x_58 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_31.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = tmpvar_5;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_8;
  tmpvar_8 = tmpvar_7.w;
  mediump vec2 tmpvar_9;
  tmpvar_9.y = 0.0;
  tmpvar_9.x = tmpvar_8;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_tableTex, tmpvar_9).xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 1.0;
  tmpvar_12.x = tmpvar_8;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = mix (tmpvar_11, tmpvar_14, tmpvar_6.xxx);
  tmpvar_15.w = tmpvar_6.y;
  mediump float x_16;
  x_16 = (tmpvar_6.y - _AlphaClipThreshold);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_15.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_15.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_18 * _Color.xyz) * _EnvColor.xyz) + color_22);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.y);
  mediump vec3 reflection_27;
  mediump vec3 R_28;
  mediump float intensity_29;
  mediump vec4 noiseTex_30;
  mediump vec4 spColor_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_31.xyz = tmpvar_32.xyz;
  spColor_31.w = outColor_4.w;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_30 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = (((1.99 * noiseTex_30.x) * _SPNoiseScaler) - 1.0);
  intensity_29 = tmpvar_34;
  highp vec3 tmpvar_35;
  highp vec3 I_36;
  I_36 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_30 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_35 = (I_36 - (2.0 * (
    dot (N_3, I_36)
   * N_3)));
  R_28 = tmpvar_35;
  lowp vec3 tmpvar_37;
  tmpvar_37 = textureCube (_SPCubeMap, R_28).xyz;
  reflection_27 = tmpvar_37;
  highp vec3 tmpvar_38;
  mediump vec3 x_39;
  x_39 = (spColor_31.xyz * _SPOldColor.xyz);
  tmpvar_38 = mix (x_39, ((reflection_27 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_31.xyz = tmpvar_38;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_29 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_29 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_40;
      tmpvar_40 = mix (spColor_31, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_29) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_31 = tmpvar_40;
    };
  };
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (outColor_4.xyz, spColor_31.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_31.xyz = tmpvar_41;
  outColor_4.w = spColor_31.w;
  mediump vec3 tmpvar_42;
  highp vec3 N_43;
  N_43 = N_3;
  highp vec3 V_44;
  V_44 = V_2;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = pow (clamp ((1.001 - 
    dot (V_44, N_43)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_45 = (_RGBias + (tmpvar_46 * _RGScale));
  mediump vec3 tmpvar_47;
  tmpvar_47 = (tmpvar_45 * _RGColor).xyz;
  mediump float tmpvar_48;
  tmpvar_48 = clamp (tmpvar_45, 0.0, 1.0);
  highp vec3 tmpvar_49;
  tmpvar_49 = mix (spColor_31.xyz, tmpvar_47, vec3((tmpvar_48 * _RGRatio)));
  tmpvar_42 = tmpvar_49;
  outColor_4.xyz = tmpvar_42;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_50;
    scrpos_50 = xlv_TEXCOORD3;
    mediump float a_51;
    a_51 = xlv_TEXCOORD3.z;
    if ((a_51 < 0.95)) {
      scrpos_50.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_51 = (a_51 * 17.0);
      highp float tmpvar_52;
      tmpvar_52 = (scrpos_50.y / 4.0);
      highp float tmpvar_53;
      tmpvar_53 = (fract(abs(tmpvar_52)) * 4.0);
      highp float tmpvar_54;
      if ((tmpvar_52 >= 0.0)) {
        tmpvar_54 = tmpvar_53;
      } else {
        tmpvar_54 = -(tmpvar_53);
      };
      highp float tmpvar_55;
      tmpvar_55 = (scrpos_50.x / 4.0);
      highp float tmpvar_56;
      tmpvar_56 = (fract(abs(tmpvar_55)) * 4.0);
      highp float tmpvar_57;
      if ((tmpvar_55 >= 0.0)) {
        tmpvar_57 = tmpvar_56;
      } else {
        tmpvar_57 = -(tmpvar_56);
      };
      highp float x_58;
      x_58 = ((a_51 - _DITHERMATRIX[
        int(tmpvar_54)
      ][
        int(tmpvar_57)
      ]) - 0.01);
      if ((x_58 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_31.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = tmpvar_5;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_8;
  tmpvar_8 = tmpvar_7.w;
  mediump vec2 tmpvar_9;
  tmpvar_9.y = 0.0;
  tmpvar_9.x = tmpvar_8;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_tableTex, tmpvar_9).xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 1.0;
  tmpvar_12.x = tmpvar_8;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = mix (tmpvar_11, tmpvar_14, tmpvar_6.xxx);
  tmpvar_15.w = tmpvar_6.y;
  mediump float x_16;
  x_16 = (tmpvar_6.y - _AlphaClipThreshold);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_15.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_15.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_18 * _Color.xyz) * _EnvColor.xyz) + color_22);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.y);
  mediump vec3 reflection_27;
  mediump vec3 R_28;
  mediump float intensity_29;
  mediump vec4 noiseTex_30;
  mediump vec4 spColor_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_31.xyz = tmpvar_32.xyz;
  spColor_31.w = outColor_4.w;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_30 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = (((1.99 * noiseTex_30.x) * _SPNoiseScaler) - 1.0);
  intensity_29 = tmpvar_34;
  highp vec3 tmpvar_35;
  highp vec3 I_36;
  I_36 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_30 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_35 = (I_36 - (2.0 * (
    dot (N_3, I_36)
   * N_3)));
  R_28 = tmpvar_35;
  lowp vec3 tmpvar_37;
  tmpvar_37 = textureCube (_SPCubeMap, R_28).xyz;
  reflection_27 = tmpvar_37;
  highp vec3 tmpvar_38;
  mediump vec3 x_39;
  x_39 = (spColor_31.xyz * _SPOldColor.xyz);
  tmpvar_38 = mix (x_39, ((reflection_27 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_31.xyz = tmpvar_38;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_29 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_29 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_40;
      tmpvar_40 = mix (spColor_31, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_29) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_31 = tmpvar_40;
    };
  };
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (outColor_4.xyz, spColor_31.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_31.xyz = tmpvar_41;
  outColor_4.w = spColor_31.w;
  mediump vec3 tmpvar_42;
  highp vec3 N_43;
  N_43 = N_3;
  highp vec3 V_44;
  V_44 = V_2;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = pow (clamp ((1.001 - 
    dot (V_44, N_43)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_45 = (_RGBias + (tmpvar_46 * _RGScale));
  mediump vec3 tmpvar_47;
  tmpvar_47 = (tmpvar_45 * _RGColor).xyz;
  mediump float tmpvar_48;
  tmpvar_48 = clamp (tmpvar_45, 0.0, 1.0);
  highp vec3 tmpvar_49;
  tmpvar_49 = mix (spColor_31.xyz, tmpvar_47, vec3((tmpvar_48 * _RGRatio)));
  tmpvar_42 = tmpvar_49;
  outColor_4.xyz = tmpvar_42;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_50;
    scrpos_50 = xlv_TEXCOORD3;
    mediump float a_51;
    a_51 = xlv_TEXCOORD3.z;
    if ((a_51 < 0.95)) {
      scrpos_50.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_51 = (a_51 * 17.0);
      highp float tmpvar_52;
      tmpvar_52 = (scrpos_50.y / 4.0);
      highp float tmpvar_53;
      tmpvar_53 = (fract(abs(tmpvar_52)) * 4.0);
      highp float tmpvar_54;
      if ((tmpvar_52 >= 0.0)) {
        tmpvar_54 = tmpvar_53;
      } else {
        tmpvar_54 = -(tmpvar_53);
      };
      highp float tmpvar_55;
      tmpvar_55 = (scrpos_50.x / 4.0);
      highp float tmpvar_56;
      tmpvar_56 = (fract(abs(tmpvar_55)) * 4.0);
      highp float tmpvar_57;
      if ((tmpvar_55 >= 0.0)) {
        tmpvar_57 = tmpvar_56;
      } else {
        tmpvar_57 = -(tmpvar_56);
      };
      highp float x_58;
      x_58 = ((a_51 - _DITHERMATRIX[
        int(tmpvar_54)
      ][
        int(tmpvar_57)
      ]) - 0.01);
      if ((x_58 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_31.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = tmpvar_5;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_8;
  tmpvar_8 = tmpvar_7.w;
  mediump vec2 tmpvar_9;
  tmpvar_9.y = 0.0;
  tmpvar_9.x = tmpvar_8;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_tableTex, tmpvar_9).xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 1.0;
  tmpvar_12.x = tmpvar_8;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = mix (tmpvar_11, tmpvar_14, tmpvar_6.xxx);
  tmpvar_15.w = tmpvar_6.y;
  mediump float x_16;
  x_16 = (tmpvar_6.y - _AlphaClipThreshold);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_15.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_15.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_18 * _Color.xyz) * _EnvColor.xyz) + color_22);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.y);
  mediump vec3 reflection_27;
  mediump vec3 R_28;
  mediump float intensity_29;
  mediump vec4 noiseTex_30;
  mediump vec4 spColor_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_31.xyz = tmpvar_32.xyz;
  spColor_31.w = outColor_4.w;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_30 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = (((1.99 * noiseTex_30.x) * _SPNoiseScaler) - 1.0);
  intensity_29 = tmpvar_34;
  highp vec3 tmpvar_35;
  highp vec3 I_36;
  I_36 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_30 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_35 = (I_36 - (2.0 * (
    dot (N_3, I_36)
   * N_3)));
  R_28 = tmpvar_35;
  lowp vec3 tmpvar_37;
  tmpvar_37 = textureCube (_SPCubeMap, R_28).xyz;
  reflection_27 = tmpvar_37;
  highp vec3 tmpvar_38;
  mediump vec3 x_39;
  x_39 = (spColor_31.xyz * _SPOldColor.xyz);
  tmpvar_38 = mix (x_39, ((reflection_27 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_31.xyz = tmpvar_38;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_29 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_29 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_40;
      tmpvar_40 = mix (spColor_31, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_29) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_31 = tmpvar_40;
    };
  };
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (outColor_4.xyz, spColor_31.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_31.xyz = tmpvar_41;
  outColor_4.w = spColor_31.w;
  mediump vec3 tmpvar_42;
  highp vec3 N_43;
  N_43 = N_3;
  highp vec3 V_44;
  V_44 = V_2;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = pow (clamp ((1.001 - 
    dot (V_44, N_43)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_45 = (_RGBias + (tmpvar_46 * _RGScale));
  mediump vec3 tmpvar_47;
  tmpvar_47 = (tmpvar_45 * _RGColor).xyz;
  mediump float tmpvar_48;
  tmpvar_48 = clamp (tmpvar_45, 0.0, 1.0);
  highp vec3 tmpvar_49;
  tmpvar_49 = mix (spColor_31.xyz, tmpvar_47, vec3((tmpvar_48 * _RGRatio)));
  tmpvar_42 = tmpvar_49;
  outColor_4.xyz = tmpvar_42;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_50;
    scrpos_50 = xlv_TEXCOORD3;
    mediump float a_51;
    a_51 = xlv_TEXCOORD3.z;
    if ((a_51 < 0.95)) {
      scrpos_50.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_51 = (a_51 * 17.0);
      highp float tmpvar_52;
      tmpvar_52 = (scrpos_50.y / 4.0);
      highp float tmpvar_53;
      tmpvar_53 = (fract(abs(tmpvar_52)) * 4.0);
      highp float tmpvar_54;
      if ((tmpvar_52 >= 0.0)) {
        tmpvar_54 = tmpvar_53;
      } else {
        tmpvar_54 = -(tmpvar_53);
      };
      highp float tmpvar_55;
      tmpvar_55 = (scrpos_50.x / 4.0);
      highp float tmpvar_56;
      tmpvar_56 = (fract(abs(tmpvar_55)) * 4.0);
      highp float tmpvar_57;
      if ((tmpvar_55 >= 0.0)) {
        tmpvar_57 = tmpvar_56;
      } else {
        tmpvar_57 = -(tmpvar_56);
      };
      highp float x_58;
      x_58 = ((a_51 - _DITHERMATRIX[
        int(tmpvar_54)
      ][
        int(tmpvar_57)
      ]) - 0.01);
      if ((x_58 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_31.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = tmpvar_5;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_8;
  tmpvar_8 = tmpvar_7.w;
  mediump vec2 tmpvar_9;
  tmpvar_9.y = 0.0;
  tmpvar_9.x = tmpvar_8;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_tableTex, tmpvar_9).xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 1.0;
  tmpvar_12.x = tmpvar_8;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = mix (tmpvar_11, tmpvar_14, tmpvar_6.xxx);
  tmpvar_15.w = tmpvar_6.y;
  mediump float x_16;
  x_16 = (tmpvar_6.y - _AlphaClipThreshold);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_15.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_15.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_18 * _Color.xyz) * _EnvColor.xyz) + color_22);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.y);
  mediump vec3 reflection_27;
  mediump vec3 R_28;
  mediump float intensity_29;
  mediump vec4 noiseTex_30;
  mediump vec4 spColor_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_31.xyz = tmpvar_32.xyz;
  spColor_31.w = outColor_4.w;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_30 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = (((1.99 * noiseTex_30.x) * _SPNoiseScaler) - 1.0);
  intensity_29 = tmpvar_34;
  highp vec3 tmpvar_35;
  highp vec3 I_36;
  I_36 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_30 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_35 = (I_36 - (2.0 * (
    dot (N_3, I_36)
   * N_3)));
  R_28 = tmpvar_35;
  lowp vec3 tmpvar_37;
  tmpvar_37 = textureCube (_SPCubeMap, R_28).xyz;
  reflection_27 = tmpvar_37;
  highp vec3 tmpvar_38;
  mediump vec3 x_39;
  x_39 = (spColor_31.xyz * _SPOldColor.xyz);
  tmpvar_38 = mix (x_39, ((reflection_27 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_31.xyz = tmpvar_38;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_29 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_29 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_40;
      tmpvar_40 = mix (spColor_31, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_29) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_31 = tmpvar_40;
    };
  };
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (outColor_4.xyz, spColor_31.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_31.xyz = tmpvar_41;
  outColor_4.w = spColor_31.w;
  mediump vec3 tmpvar_42;
  highp vec3 N_43;
  N_43 = N_3;
  highp vec3 V_44;
  V_44 = V_2;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = pow (clamp ((1.001 - 
    dot (V_44, N_43)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_45 = (_RGBias + (tmpvar_46 * _RGScale));
  mediump vec3 tmpvar_47;
  tmpvar_47 = (tmpvar_45 * _RGColor).xyz;
  mediump float tmpvar_48;
  tmpvar_48 = clamp (tmpvar_45, 0.0, 1.0);
  highp vec3 tmpvar_49;
  tmpvar_49 = mix (spColor_31.xyz, tmpvar_47, vec3((tmpvar_48 * _RGRatio)));
  tmpvar_42 = tmpvar_49;
  outColor_4.xyz = tmpvar_42;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_50;
    scrpos_50 = xlv_TEXCOORD3;
    mediump float a_51;
    a_51 = xlv_TEXCOORD3.z;
    if ((a_51 < 0.95)) {
      scrpos_50.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_51 = (a_51 * 17.0);
      highp float tmpvar_52;
      tmpvar_52 = (scrpos_50.y / 4.0);
      highp float tmpvar_53;
      tmpvar_53 = (fract(abs(tmpvar_52)) * 4.0);
      highp float tmpvar_54;
      if ((tmpvar_52 >= 0.0)) {
        tmpvar_54 = tmpvar_53;
      } else {
        tmpvar_54 = -(tmpvar_53);
      };
      highp float tmpvar_55;
      tmpvar_55 = (scrpos_50.x / 4.0);
      highp float tmpvar_56;
      tmpvar_56 = (fract(abs(tmpvar_55)) * 4.0);
      highp float tmpvar_57;
      if ((tmpvar_55 >= 0.0)) {
        tmpvar_57 = tmpvar_56;
      } else {
        tmpvar_57 = -(tmpvar_56);
      };
      highp float x_58;
      x_58 = ((a_51 - _DITHERMATRIX[
        int(tmpvar_54)
      ][
        int(tmpvar_57)
      ]) - 0.01);
      if ((x_58 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_31.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = tmpvar_5;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_8;
  tmpvar_8 = tmpvar_7.w;
  mediump vec2 tmpvar_9;
  tmpvar_9.y = 0.0;
  tmpvar_9.x = tmpvar_8;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_tableTex, tmpvar_9).xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 1.0;
  tmpvar_12.x = tmpvar_8;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = mix (tmpvar_11, tmpvar_14, tmpvar_6.xxx);
  tmpvar_15.w = tmpvar_6.y;
  mediump float x_16;
  x_16 = (tmpvar_6.y - _AlphaClipThreshold);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_15.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_15.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_18 * _Color.xyz) * _EnvColor.xyz) + color_22);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.y);
  mediump vec3 reflection_27;
  mediump vec3 R_28;
  mediump float intensity_29;
  mediump vec4 noiseTex_30;
  mediump vec4 spColor_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_31.xyz = tmpvar_32.xyz;
  spColor_31.w = outColor_4.w;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_30 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = (((1.99 * noiseTex_30.x) * _SPNoiseScaler) - 1.0);
  intensity_29 = tmpvar_34;
  highp vec3 tmpvar_35;
  highp vec3 I_36;
  I_36 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_30 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_35 = (I_36 - (2.0 * (
    dot (N_3, I_36)
   * N_3)));
  R_28 = tmpvar_35;
  lowp vec3 tmpvar_37;
  tmpvar_37 = textureCube (_SPCubeMap, R_28).xyz;
  reflection_27 = tmpvar_37;
  highp vec3 tmpvar_38;
  mediump vec3 x_39;
  x_39 = (spColor_31.xyz * _SPOldColor.xyz);
  tmpvar_38 = mix (x_39, ((reflection_27 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_31.xyz = tmpvar_38;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_29 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_29 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_40;
      tmpvar_40 = mix (spColor_31, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_29) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_31 = tmpvar_40;
    };
  };
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (outColor_4.xyz, spColor_31.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_31.xyz = tmpvar_41;
  outColor_4.w = spColor_31.w;
  mediump vec3 tmpvar_42;
  highp vec3 N_43;
  N_43 = N_3;
  highp vec3 V_44;
  V_44 = V_2;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = pow (clamp ((1.001 - 
    dot (V_44, N_43)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_45 = (_RGBias + (tmpvar_46 * _RGScale));
  mediump vec3 tmpvar_47;
  tmpvar_47 = (tmpvar_45 * _RGColor).xyz;
  mediump float tmpvar_48;
  tmpvar_48 = clamp (tmpvar_45, 0.0, 1.0);
  highp vec3 tmpvar_49;
  tmpvar_49 = mix (spColor_31.xyz, tmpvar_47, vec3((tmpvar_48 * _RGRatio)));
  tmpvar_42 = tmpvar_49;
  outColor_4.xyz = tmpvar_42;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_50;
    scrpos_50 = xlv_TEXCOORD3;
    mediump float a_51;
    a_51 = xlv_TEXCOORD3.z;
    if ((a_51 < 0.95)) {
      scrpos_50.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_51 = (a_51 * 17.0);
      highp float tmpvar_52;
      tmpvar_52 = (scrpos_50.y / 4.0);
      highp float tmpvar_53;
      tmpvar_53 = (fract(abs(tmpvar_52)) * 4.0);
      highp float tmpvar_54;
      if ((tmpvar_52 >= 0.0)) {
        tmpvar_54 = tmpvar_53;
      } else {
        tmpvar_54 = -(tmpvar_53);
      };
      highp float tmpvar_55;
      tmpvar_55 = (scrpos_50.x / 4.0);
      highp float tmpvar_56;
      tmpvar_56 = (fract(abs(tmpvar_55)) * 4.0);
      highp float tmpvar_57;
      if ((tmpvar_55 >= 0.0)) {
        tmpvar_57 = tmpvar_56;
      } else {
        tmpvar_57 = -(tmpvar_56);
      };
      highp float x_58;
      x_58 = ((a_51 - _DITHERMATRIX[
        int(tmpvar_54)
      ][
        int(tmpvar_57)
      ]) - 0.01);
      if ((x_58 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_31.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = tmpvar_5;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_8;
  tmpvar_8 = tmpvar_7.w;
  mediump vec2 tmpvar_9;
  tmpvar_9.y = 0.0;
  tmpvar_9.x = tmpvar_8;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_tableTex, tmpvar_9).xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 1.0;
  tmpvar_12.x = tmpvar_8;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = mix (tmpvar_11, tmpvar_14, tmpvar_6.xxx);
  tmpvar_15.w = tmpvar_6.y;
  mediump float x_16;
  x_16 = (tmpvar_6.y - _AlphaClipThreshold);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_15.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_15.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_18 * _Color.xyz) * _EnvColor.xyz) + color_22);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.y);
  mediump vec3 reflection_27;
  mediump vec3 R_28;
  mediump float intensity_29;
  mediump vec4 noiseTex_30;
  mediump vec4 spColor_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_31.xyz = tmpvar_32.xyz;
  spColor_31.w = outColor_4.w;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_30 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = (((1.99 * noiseTex_30.x) * _SPNoiseScaler) - 1.0);
  intensity_29 = tmpvar_34;
  highp vec3 tmpvar_35;
  highp vec3 I_36;
  I_36 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_30 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_35 = (I_36 - (2.0 * (
    dot (N_3, I_36)
   * N_3)));
  R_28 = tmpvar_35;
  lowp vec3 tmpvar_37;
  tmpvar_37 = textureCube (_SPCubeMap, R_28).xyz;
  reflection_27 = tmpvar_37;
  highp vec3 tmpvar_38;
  mediump vec3 x_39;
  x_39 = (spColor_31.xyz * _SPOldColor.xyz);
  tmpvar_38 = mix (x_39, ((reflection_27 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_31.xyz = tmpvar_38;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_29 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_29 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_40;
      tmpvar_40 = mix (spColor_31, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_29) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_31 = tmpvar_40;
    };
  };
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (outColor_4.xyz, spColor_31.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_31.xyz = tmpvar_41;
  outColor_4.w = spColor_31.w;
  mediump vec3 tmpvar_42;
  highp vec3 N_43;
  N_43 = N_3;
  highp vec3 V_44;
  V_44 = V_2;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = pow (clamp ((1.001 - 
    dot (V_44, N_43)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_45 = (_RGBias + (tmpvar_46 * _RGScale));
  mediump vec3 tmpvar_47;
  tmpvar_47 = (tmpvar_45 * _RGColor).xyz;
  mediump float tmpvar_48;
  tmpvar_48 = clamp (tmpvar_45, 0.0, 1.0);
  highp vec3 tmpvar_49;
  tmpvar_49 = mix (spColor_31.xyz, tmpvar_47, vec3((tmpvar_48 * _RGRatio)));
  tmpvar_42 = tmpvar_49;
  outColor_4.xyz = tmpvar_42;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_50;
    scrpos_50 = xlv_TEXCOORD3;
    mediump float a_51;
    a_51 = xlv_TEXCOORD3.z;
    if ((a_51 < 0.95)) {
      scrpos_50.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_51 = (a_51 * 17.0);
      highp float tmpvar_52;
      tmpvar_52 = (scrpos_50.y / 4.0);
      highp float tmpvar_53;
      tmpvar_53 = (fract(abs(tmpvar_52)) * 4.0);
      highp float tmpvar_54;
      if ((tmpvar_52 >= 0.0)) {
        tmpvar_54 = tmpvar_53;
      } else {
        tmpvar_54 = -(tmpvar_53);
      };
      highp float tmpvar_55;
      tmpvar_55 = (scrpos_50.x / 4.0);
      highp float tmpvar_56;
      tmpvar_56 = (fract(abs(tmpvar_55)) * 4.0);
      highp float tmpvar_57;
      if ((tmpvar_55 >= 0.0)) {
        tmpvar_57 = tmpvar_56;
      } else {
        tmpvar_57 = -(tmpvar_56);
      };
      highp float x_58;
      x_58 = ((a_51 - _DITHERMATRIX[
        int(tmpvar_54)
      ][
        int(tmpvar_57)
      ]) - 0.01);
      if ((x_58 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_31.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = tmpvar_5;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_8;
  tmpvar_8 = tmpvar_7.w;
  mediump vec2 tmpvar_9;
  tmpvar_9.y = 0.0;
  tmpvar_9.x = tmpvar_8;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_tableTex, tmpvar_9).xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 1.0;
  tmpvar_12.x = tmpvar_8;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = mix (tmpvar_11, tmpvar_14, tmpvar_6.xxx);
  tmpvar_15.w = tmpvar_6.y;
  mediump float x_16;
  x_16 = (tmpvar_6.y - _AlphaClipThreshold);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_15.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_15.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_18 * _Color.xyz) * _EnvColor.xyz) + color_22);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.y);
  mediump vec3 reflection_27;
  mediump vec3 R_28;
  mediump float intensity_29;
  mediump vec4 noiseTex_30;
  mediump vec4 spColor_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_31.xyz = tmpvar_32.xyz;
  spColor_31.w = outColor_4.w;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_30 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = (((1.99 * noiseTex_30.x) * _SPNoiseScaler) - 1.0);
  intensity_29 = tmpvar_34;
  highp vec3 tmpvar_35;
  highp vec3 I_36;
  I_36 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_30 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_35 = (I_36 - (2.0 * (
    dot (N_3, I_36)
   * N_3)));
  R_28 = tmpvar_35;
  lowp vec3 tmpvar_37;
  tmpvar_37 = textureCube (_SPCubeMap, R_28).xyz;
  reflection_27 = tmpvar_37;
  highp vec3 tmpvar_38;
  mediump vec3 x_39;
  x_39 = (spColor_31.xyz * _SPOldColor.xyz);
  tmpvar_38 = mix (x_39, ((reflection_27 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_31.xyz = tmpvar_38;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_29 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_29 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_40;
      tmpvar_40 = mix (spColor_31, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_29) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_31 = tmpvar_40;
    };
  };
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (outColor_4.xyz, spColor_31.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_31.xyz = tmpvar_41;
  outColor_4.w = spColor_31.w;
  mediump vec3 tmpvar_42;
  highp vec3 N_43;
  N_43 = N_3;
  highp vec3 V_44;
  V_44 = V_2;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = pow (clamp ((1.001 - 
    dot (V_44, N_43)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_45 = (_RGBias + (tmpvar_46 * _RGScale));
  mediump vec3 tmpvar_47;
  tmpvar_47 = (tmpvar_45 * _RGColor).xyz;
  mediump float tmpvar_48;
  tmpvar_48 = clamp (tmpvar_45, 0.0, 1.0);
  highp vec3 tmpvar_49;
  tmpvar_49 = mix (spColor_31.xyz, tmpvar_47, vec3((tmpvar_48 * _RGRatio)));
  tmpvar_42 = tmpvar_49;
  outColor_4.xyz = tmpvar_42;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_50;
    scrpos_50 = xlv_TEXCOORD3;
    mediump float a_51;
    a_51 = xlv_TEXCOORD3.z;
    if ((a_51 < 0.95)) {
      scrpos_50.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_51 = (a_51 * 17.0);
      highp float tmpvar_52;
      tmpvar_52 = (scrpos_50.y / 4.0);
      highp float tmpvar_53;
      tmpvar_53 = (fract(abs(tmpvar_52)) * 4.0);
      highp float tmpvar_54;
      if ((tmpvar_52 >= 0.0)) {
        tmpvar_54 = tmpvar_53;
      } else {
        tmpvar_54 = -(tmpvar_53);
      };
      highp float tmpvar_55;
      tmpvar_55 = (scrpos_50.x / 4.0);
      highp float tmpvar_56;
      tmpvar_56 = (fract(abs(tmpvar_55)) * 4.0);
      highp float tmpvar_57;
      if ((tmpvar_55 >= 0.0)) {
        tmpvar_57 = tmpvar_56;
      } else {
        tmpvar_57 = -(tmpvar_56);
      };
      highp float x_58;
      x_58 = ((a_51 - _DITHERMATRIX[
        int(tmpvar_54)
      ][
        int(tmpvar_57)
      ]) - 0.01);
      if ((x_58 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_31.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_factorTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = tmpvar_5;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_indexTex, xlv_TEXCOORD0);
  mediump float tmpvar_8;
  tmpvar_8 = tmpvar_7.w;
  mediump vec2 tmpvar_9;
  tmpvar_9.y = 0.0;
  tmpvar_9.x = tmpvar_8;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_tableTex, tmpvar_9).xyz;
  mediump vec3 tmpvar_11;
  tmpvar_11 = tmpvar_10;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 1.0;
  tmpvar_12.x = tmpvar_8;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = mix (tmpvar_11, tmpvar_14, tmpvar_6.xxx);
  tmpvar_15.w = tmpvar_6.y;
  mediump float x_16;
  x_16 = (tmpvar_6.y - _AlphaClipThreshold);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_15.xyz;
  mediump vec3 diffColor_18;
  diffColor_18 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_18 = (tmpvar_15.xyz * _FirstShadowMultColor);
  } else {
    diffColor_18 = tmpvar_17;
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_21;
  mediump vec3 color_22;
  mediump vec3 H_23;
  H_23 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_24 = tmpvar_25;
    H_23 = normalize((_CustomLightDir.xyz + V_24));
  };
  mediump float tmpvar_26;
  tmpvar_26 = pow (max (dot (N_3, H_23), 0.0), _Shininess);
  if ((tmpvar_26 >= _SpecularThreshold)) {
    color_22 = (_LightSpecColor * _SpecMulti);
  } else {
    color_22 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_18 * _Color.xyz) * _EnvColor.xyz) + color_22);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.y);
  mediump vec3 reflection_27;
  mediump vec3 R_28;
  mediump float intensity_29;
  mediump vec4 noiseTex_30;
  mediump vec4 spColor_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_31.xyz = tmpvar_32.xyz;
  spColor_31.w = outColor_4.w;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_30 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = (((1.99 * noiseTex_30.x) * _SPNoiseScaler) - 1.0);
  intensity_29 = tmpvar_34;
  highp vec3 tmpvar_35;
  highp vec3 I_36;
  I_36 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_30 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_35 = (I_36 - (2.0 * (
    dot (N_3, I_36)
   * N_3)));
  R_28 = tmpvar_35;
  lowp vec3 tmpvar_37;
  tmpvar_37 = textureCube (_SPCubeMap, R_28).xyz;
  reflection_27 = tmpvar_37;
  highp vec3 tmpvar_38;
  mediump vec3 x_39;
  x_39 = (spColor_31.xyz * _SPOldColor.xyz);
  tmpvar_38 = mix (x_39, ((reflection_27 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_31.xyz = tmpvar_38;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_29 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_29 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_40;
      tmpvar_40 = mix (spColor_31, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_29) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_31 = tmpvar_40;
    };
  };
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (outColor_4.xyz, spColor_31.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_31.xyz = tmpvar_41;
  outColor_4.w = spColor_31.w;
  mediump vec3 tmpvar_42;
  highp vec3 N_43;
  N_43 = N_3;
  highp vec3 V_44;
  V_44 = V_2;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = pow (clamp ((1.001 - 
    dot (V_44, N_43)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_45 = (_RGBias + (tmpvar_46 * _RGScale));
  mediump vec3 tmpvar_47;
  tmpvar_47 = (tmpvar_45 * _RGColor).xyz;
  mediump float tmpvar_48;
  tmpvar_48 = clamp (tmpvar_45, 0.0, 1.0);
  highp vec3 tmpvar_49;
  tmpvar_49 = mix (spColor_31.xyz, tmpvar_47, vec3((tmpvar_48 * _RGRatio)));
  tmpvar_42 = tmpvar_49;
  outColor_4.xyz = tmpvar_42;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_50;
    scrpos_50 = xlv_TEXCOORD3;
    mediump float a_51;
    a_51 = xlv_TEXCOORD3.z;
    if ((a_51 < 0.95)) {
      scrpos_50.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_51 = (a_51 * 17.0);
      highp float tmpvar_52;
      tmpvar_52 = (scrpos_50.y / 4.0);
      highp float tmpvar_53;
      tmpvar_53 = (fract(abs(tmpvar_52)) * 4.0);
      highp float tmpvar_54;
      if ((tmpvar_52 >= 0.0)) {
        tmpvar_54 = tmpvar_53;
      } else {
        tmpvar_54 = -(tmpvar_53);
      };
      highp float tmpvar_55;
      tmpvar_55 = (scrpos_50.x / 4.0);
      highp float tmpvar_56;
      tmpvar_56 = (fract(abs(tmpvar_55)) * 4.0);
      highp float tmpvar_57;
      if ((tmpvar_55 >= 0.0)) {
        tmpvar_57 = tmpvar_56;
      } else {
        tmpvar_57 = -(tmpvar_56);
      };
      highp float x_58;
      x_58 = ((a_51 - _DITHERMATRIX[
        int(tmpvar_54)
      ][
        int(tmpvar_57)
      ]) - 0.01);
      if ((x_58 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_31.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_5;
  highp vec2 pixelSize_6;
  pixelSize_6 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8 = floor(tmpvar_7);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract(tmpvar_7);
  highp vec2 uv_10;
  uv_10 = ((tmpvar_8 + vec2(0.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_factorTex, uv_10);
  mediump vec4 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_indexTex, uv_10);
  mediump float tmpvar_14;
  tmpvar_14 = tmpvar_13.w;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 1.0;
  tmpvar_18.x = tmpvar_14;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = mix (tmpvar_17, tmpvar_20, tmpvar_12.xxx);
  tmpvar_21.w = tmpvar_12.y;
  highp vec2 uv_22;
  uv_22 = ((tmpvar_8 + vec2(1.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_factorTex, uv_22);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_indexTex, uv_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25.w;
  mediump vec2 tmpvar_27;
  tmpvar_27.y = 0.0;
  tmpvar_27.x = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_tableTex, tmpvar_27).xyz;
  mediump vec3 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 1.0;
  tmpvar_30.x = tmpvar_26;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = mix (tmpvar_29, tmpvar_32, tmpvar_24.xxx);
  tmpvar_33.w = tmpvar_24.y;
  highp vec2 uv_34;
  uv_34 = ((tmpvar_8 + vec2(0.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_factorTex, uv_34);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_indexTex, uv_34);
  mediump float tmpvar_38;
  tmpvar_38 = tmpvar_37.w;
  mediump vec2 tmpvar_39;
  tmpvar_39.y = 0.0;
  tmpvar_39.x = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_tableTex, tmpvar_39).xyz;
  mediump vec3 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 1.0;
  tmpvar_42.x = tmpvar_38;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = mix (tmpvar_41, tmpvar_44, tmpvar_36.xxx);
  tmpvar_45.w = tmpvar_36.y;
  highp vec2 uv_46;
  uv_46 = ((tmpvar_8 + vec2(1.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_factorTex, uv_46);
  mediump vec4 tmpvar_48;
  tmpvar_48 = tmpvar_47;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_indexTex, uv_46);
  mediump float tmpvar_50;
  tmpvar_50 = tmpvar_49.w;
  mediump vec2 tmpvar_51;
  tmpvar_51.y = 0.0;
  tmpvar_51.x = tmpvar_50;
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_tableTex, tmpvar_51).xyz;
  mediump vec3 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 1.0;
  tmpvar_54.x = tmpvar_50;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = mix (tmpvar_53, tmpvar_56, tmpvar_48.xxx);
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58 = mix (mix (tmpvar_21, tmpvar_33, tmpvar_9.xxxx), mix (tmpvar_45, tmpvar_57, tmpvar_9.xxxx), tmpvar_9.yyyy);
  tmpvar_5 = tmpvar_58;
  mediump float x_59;
  x_59 = (tmpvar_5.w - _AlphaClipThreshold);
  if ((x_59 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_5.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_5.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_61 * _Color.xyz) * _EnvColor.xyz) + color_65);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_5.w);
  mediump vec3 reflection_70;
  mediump vec3 R_71;
  mediump float intensity_72;
  mediump vec4 noiseTex_73;
  mediump vec4 spColor_74;
  lowp vec4 tmpvar_75;
  tmpvar_75 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_74.xyz = tmpvar_75.xyz;
  spColor_74.w = outColor_4.w;
  lowp vec4 tmpvar_76;
  tmpvar_76 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_73 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (((1.99 * noiseTex_73.x) * _SPNoiseScaler) - 1.0);
  intensity_72 = tmpvar_77;
  highp vec3 tmpvar_78;
  highp vec3 I_79;
  I_79 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_73 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_78 = (I_79 - (2.0 * (
    dot (N_3, I_79)
   * N_3)));
  R_71 = tmpvar_78;
  lowp vec3 tmpvar_80;
  tmpvar_80 = textureCube (_SPCubeMap, R_71).xyz;
  reflection_70 = tmpvar_80;
  highp vec3 tmpvar_81;
  mediump vec3 x_82;
  x_82 = (spColor_74.xyz * _SPOldColor.xyz);
  tmpvar_81 = mix (x_82, ((reflection_70 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_74.xyz = tmpvar_81;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_72 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_72 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_83;
      tmpvar_83 = mix (spColor_74, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_72) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_74 = tmpvar_83;
    };
  };
  highp vec3 tmpvar_84;
  tmpvar_84 = mix (outColor_4.xyz, spColor_74.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_74.xyz = tmpvar_84;
  outColor_4.w = spColor_74.w;
  mediump vec3 tmpvar_85;
  highp vec3 N_86;
  N_86 = N_3;
  highp vec3 V_87;
  V_87 = V_2;
  mediump float tmpvar_88;
  highp float tmpvar_89;
  tmpvar_89 = pow (clamp ((1.001 - 
    dot (V_87, N_86)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_88 = (_RGBias + (tmpvar_89 * _RGScale));
  mediump vec3 tmpvar_90;
  tmpvar_90 = (tmpvar_88 * _RGColor).xyz;
  mediump float tmpvar_91;
  tmpvar_91 = clamp (tmpvar_88, 0.0, 1.0);
  highp vec3 tmpvar_92;
  tmpvar_92 = mix (spColor_74.xyz, tmpvar_90, vec3((tmpvar_91 * _RGRatio)));
  tmpvar_85 = tmpvar_92;
  outColor_4.xyz = tmpvar_85;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_93;
    scrpos_93 = xlv_TEXCOORD3;
    mediump float a_94;
    a_94 = xlv_TEXCOORD3.z;
    if ((a_94 < 0.95)) {
      scrpos_93.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_94 = (a_94 * 17.0);
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_93.y / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      highp float tmpvar_98;
      tmpvar_98 = (scrpos_93.x / 4.0);
      highp float tmpvar_99;
      tmpvar_99 = (fract(abs(tmpvar_98)) * 4.0);
      highp float tmpvar_100;
      if ((tmpvar_98 >= 0.0)) {
        tmpvar_100 = tmpvar_99;
      } else {
        tmpvar_100 = -(tmpvar_99);
      };
      highp float x_101;
      x_101 = ((a_94 - _DITHERMATRIX[
        int(tmpvar_97)
      ][
        int(tmpvar_100)
      ]) - 0.01);
      if ((x_101 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_74.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_5;
  highp vec2 pixelSize_6;
  pixelSize_6 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8 = floor(tmpvar_7);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract(tmpvar_7);
  highp vec2 uv_10;
  uv_10 = ((tmpvar_8 + vec2(0.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_factorTex, uv_10);
  mediump vec4 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_indexTex, uv_10);
  mediump float tmpvar_14;
  tmpvar_14 = tmpvar_13.w;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 1.0;
  tmpvar_18.x = tmpvar_14;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = mix (tmpvar_17, tmpvar_20, tmpvar_12.xxx);
  tmpvar_21.w = tmpvar_12.y;
  highp vec2 uv_22;
  uv_22 = ((tmpvar_8 + vec2(1.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_factorTex, uv_22);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_indexTex, uv_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25.w;
  mediump vec2 tmpvar_27;
  tmpvar_27.y = 0.0;
  tmpvar_27.x = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_tableTex, tmpvar_27).xyz;
  mediump vec3 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 1.0;
  tmpvar_30.x = tmpvar_26;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = mix (tmpvar_29, tmpvar_32, tmpvar_24.xxx);
  tmpvar_33.w = tmpvar_24.y;
  highp vec2 uv_34;
  uv_34 = ((tmpvar_8 + vec2(0.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_factorTex, uv_34);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_indexTex, uv_34);
  mediump float tmpvar_38;
  tmpvar_38 = tmpvar_37.w;
  mediump vec2 tmpvar_39;
  tmpvar_39.y = 0.0;
  tmpvar_39.x = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_tableTex, tmpvar_39).xyz;
  mediump vec3 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 1.0;
  tmpvar_42.x = tmpvar_38;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = mix (tmpvar_41, tmpvar_44, tmpvar_36.xxx);
  tmpvar_45.w = tmpvar_36.y;
  highp vec2 uv_46;
  uv_46 = ((tmpvar_8 + vec2(1.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_factorTex, uv_46);
  mediump vec4 tmpvar_48;
  tmpvar_48 = tmpvar_47;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_indexTex, uv_46);
  mediump float tmpvar_50;
  tmpvar_50 = tmpvar_49.w;
  mediump vec2 tmpvar_51;
  tmpvar_51.y = 0.0;
  tmpvar_51.x = tmpvar_50;
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_tableTex, tmpvar_51).xyz;
  mediump vec3 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 1.0;
  tmpvar_54.x = tmpvar_50;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = mix (tmpvar_53, tmpvar_56, tmpvar_48.xxx);
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58 = mix (mix (tmpvar_21, tmpvar_33, tmpvar_9.xxxx), mix (tmpvar_45, tmpvar_57, tmpvar_9.xxxx), tmpvar_9.yyyy);
  tmpvar_5 = tmpvar_58;
  mediump float x_59;
  x_59 = (tmpvar_5.w - _AlphaClipThreshold);
  if ((x_59 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_5.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_5.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_61 * _Color.xyz) * _EnvColor.xyz) + color_65);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_5.w);
  mediump vec3 reflection_70;
  mediump vec3 R_71;
  mediump float intensity_72;
  mediump vec4 noiseTex_73;
  mediump vec4 spColor_74;
  lowp vec4 tmpvar_75;
  tmpvar_75 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_74.xyz = tmpvar_75.xyz;
  spColor_74.w = outColor_4.w;
  lowp vec4 tmpvar_76;
  tmpvar_76 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_73 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (((1.99 * noiseTex_73.x) * _SPNoiseScaler) - 1.0);
  intensity_72 = tmpvar_77;
  highp vec3 tmpvar_78;
  highp vec3 I_79;
  I_79 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_73 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_78 = (I_79 - (2.0 * (
    dot (N_3, I_79)
   * N_3)));
  R_71 = tmpvar_78;
  lowp vec3 tmpvar_80;
  tmpvar_80 = textureCube (_SPCubeMap, R_71).xyz;
  reflection_70 = tmpvar_80;
  highp vec3 tmpvar_81;
  mediump vec3 x_82;
  x_82 = (spColor_74.xyz * _SPOldColor.xyz);
  tmpvar_81 = mix (x_82, ((reflection_70 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_74.xyz = tmpvar_81;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_72 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_72 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_83;
      tmpvar_83 = mix (spColor_74, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_72) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_74 = tmpvar_83;
    };
  };
  highp vec3 tmpvar_84;
  tmpvar_84 = mix (outColor_4.xyz, spColor_74.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_74.xyz = tmpvar_84;
  outColor_4.w = spColor_74.w;
  mediump vec3 tmpvar_85;
  highp vec3 N_86;
  N_86 = N_3;
  highp vec3 V_87;
  V_87 = V_2;
  mediump float tmpvar_88;
  highp float tmpvar_89;
  tmpvar_89 = pow (clamp ((1.001 - 
    dot (V_87, N_86)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_88 = (_RGBias + (tmpvar_89 * _RGScale));
  mediump vec3 tmpvar_90;
  tmpvar_90 = (tmpvar_88 * _RGColor).xyz;
  mediump float tmpvar_91;
  tmpvar_91 = clamp (tmpvar_88, 0.0, 1.0);
  highp vec3 tmpvar_92;
  tmpvar_92 = mix (spColor_74.xyz, tmpvar_90, vec3((tmpvar_91 * _RGRatio)));
  tmpvar_85 = tmpvar_92;
  outColor_4.xyz = tmpvar_85;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_93;
    scrpos_93 = xlv_TEXCOORD3;
    mediump float a_94;
    a_94 = xlv_TEXCOORD3.z;
    if ((a_94 < 0.95)) {
      scrpos_93.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_94 = (a_94 * 17.0);
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_93.y / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      highp float tmpvar_98;
      tmpvar_98 = (scrpos_93.x / 4.0);
      highp float tmpvar_99;
      tmpvar_99 = (fract(abs(tmpvar_98)) * 4.0);
      highp float tmpvar_100;
      if ((tmpvar_98 >= 0.0)) {
        tmpvar_100 = tmpvar_99;
      } else {
        tmpvar_100 = -(tmpvar_99);
      };
      highp float x_101;
      x_101 = ((a_94 - _DITHERMATRIX[
        int(tmpvar_97)
      ][
        int(tmpvar_100)
      ]) - 0.01);
      if ((x_101 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_74.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_5;
  highp vec2 pixelSize_6;
  pixelSize_6 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8 = floor(tmpvar_7);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract(tmpvar_7);
  highp vec2 uv_10;
  uv_10 = ((tmpvar_8 + vec2(0.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_factorTex, uv_10);
  mediump vec4 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_indexTex, uv_10);
  mediump float tmpvar_14;
  tmpvar_14 = tmpvar_13.w;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 1.0;
  tmpvar_18.x = tmpvar_14;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = mix (tmpvar_17, tmpvar_20, tmpvar_12.xxx);
  tmpvar_21.w = tmpvar_12.y;
  highp vec2 uv_22;
  uv_22 = ((tmpvar_8 + vec2(1.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_factorTex, uv_22);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_indexTex, uv_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25.w;
  mediump vec2 tmpvar_27;
  tmpvar_27.y = 0.0;
  tmpvar_27.x = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_tableTex, tmpvar_27).xyz;
  mediump vec3 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 1.0;
  tmpvar_30.x = tmpvar_26;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = mix (tmpvar_29, tmpvar_32, tmpvar_24.xxx);
  tmpvar_33.w = tmpvar_24.y;
  highp vec2 uv_34;
  uv_34 = ((tmpvar_8 + vec2(0.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_factorTex, uv_34);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_indexTex, uv_34);
  mediump float tmpvar_38;
  tmpvar_38 = tmpvar_37.w;
  mediump vec2 tmpvar_39;
  tmpvar_39.y = 0.0;
  tmpvar_39.x = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_tableTex, tmpvar_39).xyz;
  mediump vec3 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 1.0;
  tmpvar_42.x = tmpvar_38;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = mix (tmpvar_41, tmpvar_44, tmpvar_36.xxx);
  tmpvar_45.w = tmpvar_36.y;
  highp vec2 uv_46;
  uv_46 = ((tmpvar_8 + vec2(1.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_factorTex, uv_46);
  mediump vec4 tmpvar_48;
  tmpvar_48 = tmpvar_47;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_indexTex, uv_46);
  mediump float tmpvar_50;
  tmpvar_50 = tmpvar_49.w;
  mediump vec2 tmpvar_51;
  tmpvar_51.y = 0.0;
  tmpvar_51.x = tmpvar_50;
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_tableTex, tmpvar_51).xyz;
  mediump vec3 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 1.0;
  tmpvar_54.x = tmpvar_50;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = mix (tmpvar_53, tmpvar_56, tmpvar_48.xxx);
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58 = mix (mix (tmpvar_21, tmpvar_33, tmpvar_9.xxxx), mix (tmpvar_45, tmpvar_57, tmpvar_9.xxxx), tmpvar_9.yyyy);
  tmpvar_5 = tmpvar_58;
  mediump float x_59;
  x_59 = (tmpvar_5.w - _AlphaClipThreshold);
  if ((x_59 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_5.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_5.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_61 * _Color.xyz) * _EnvColor.xyz) + color_65);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_5.w);
  mediump vec3 reflection_70;
  mediump vec3 R_71;
  mediump float intensity_72;
  mediump vec4 noiseTex_73;
  mediump vec4 spColor_74;
  lowp vec4 tmpvar_75;
  tmpvar_75 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_74.xyz = tmpvar_75.xyz;
  spColor_74.w = outColor_4.w;
  lowp vec4 tmpvar_76;
  tmpvar_76 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_73 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (((1.99 * noiseTex_73.x) * _SPNoiseScaler) - 1.0);
  intensity_72 = tmpvar_77;
  highp vec3 tmpvar_78;
  highp vec3 I_79;
  I_79 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_73 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_78 = (I_79 - (2.0 * (
    dot (N_3, I_79)
   * N_3)));
  R_71 = tmpvar_78;
  lowp vec3 tmpvar_80;
  tmpvar_80 = textureCube (_SPCubeMap, R_71).xyz;
  reflection_70 = tmpvar_80;
  highp vec3 tmpvar_81;
  mediump vec3 x_82;
  x_82 = (spColor_74.xyz * _SPOldColor.xyz);
  tmpvar_81 = mix (x_82, ((reflection_70 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_74.xyz = tmpvar_81;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_72 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_72 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_83;
      tmpvar_83 = mix (spColor_74, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_72) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_74 = tmpvar_83;
    };
  };
  highp vec3 tmpvar_84;
  tmpvar_84 = mix (outColor_4.xyz, spColor_74.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_74.xyz = tmpvar_84;
  outColor_4.w = spColor_74.w;
  mediump vec3 tmpvar_85;
  highp vec3 N_86;
  N_86 = N_3;
  highp vec3 V_87;
  V_87 = V_2;
  mediump float tmpvar_88;
  highp float tmpvar_89;
  tmpvar_89 = pow (clamp ((1.001 - 
    dot (V_87, N_86)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_88 = (_RGBias + (tmpvar_89 * _RGScale));
  mediump vec3 tmpvar_90;
  tmpvar_90 = (tmpvar_88 * _RGColor).xyz;
  mediump float tmpvar_91;
  tmpvar_91 = clamp (tmpvar_88, 0.0, 1.0);
  highp vec3 tmpvar_92;
  tmpvar_92 = mix (spColor_74.xyz, tmpvar_90, vec3((tmpvar_91 * _RGRatio)));
  tmpvar_85 = tmpvar_92;
  outColor_4.xyz = tmpvar_85;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_93;
    scrpos_93 = xlv_TEXCOORD3;
    mediump float a_94;
    a_94 = xlv_TEXCOORD3.z;
    if ((a_94 < 0.95)) {
      scrpos_93.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_94 = (a_94 * 17.0);
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_93.y / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      highp float tmpvar_98;
      tmpvar_98 = (scrpos_93.x / 4.0);
      highp float tmpvar_99;
      tmpvar_99 = (fract(abs(tmpvar_98)) * 4.0);
      highp float tmpvar_100;
      if ((tmpvar_98 >= 0.0)) {
        tmpvar_100 = tmpvar_99;
      } else {
        tmpvar_100 = -(tmpvar_99);
      };
      highp float x_101;
      x_101 = ((a_94 - _DITHERMATRIX[
        int(tmpvar_97)
      ][
        int(tmpvar_100)
      ]) - 0.01);
      if ((x_101 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_74.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_5;
  highp vec2 pixelSize_6;
  pixelSize_6 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8 = floor(tmpvar_7);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract(tmpvar_7);
  highp vec2 uv_10;
  uv_10 = ((tmpvar_8 + vec2(0.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_factorTex, uv_10);
  mediump vec4 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_indexTex, uv_10);
  mediump float tmpvar_14;
  tmpvar_14 = tmpvar_13.w;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 1.0;
  tmpvar_18.x = tmpvar_14;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = mix (tmpvar_17, tmpvar_20, tmpvar_12.xxx);
  tmpvar_21.w = tmpvar_12.y;
  highp vec2 uv_22;
  uv_22 = ((tmpvar_8 + vec2(1.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_factorTex, uv_22);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_indexTex, uv_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25.w;
  mediump vec2 tmpvar_27;
  tmpvar_27.y = 0.0;
  tmpvar_27.x = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_tableTex, tmpvar_27).xyz;
  mediump vec3 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 1.0;
  tmpvar_30.x = tmpvar_26;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = mix (tmpvar_29, tmpvar_32, tmpvar_24.xxx);
  tmpvar_33.w = tmpvar_24.y;
  highp vec2 uv_34;
  uv_34 = ((tmpvar_8 + vec2(0.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_factorTex, uv_34);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_indexTex, uv_34);
  mediump float tmpvar_38;
  tmpvar_38 = tmpvar_37.w;
  mediump vec2 tmpvar_39;
  tmpvar_39.y = 0.0;
  tmpvar_39.x = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_tableTex, tmpvar_39).xyz;
  mediump vec3 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 1.0;
  tmpvar_42.x = tmpvar_38;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = mix (tmpvar_41, tmpvar_44, tmpvar_36.xxx);
  tmpvar_45.w = tmpvar_36.y;
  highp vec2 uv_46;
  uv_46 = ((tmpvar_8 + vec2(1.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_factorTex, uv_46);
  mediump vec4 tmpvar_48;
  tmpvar_48 = tmpvar_47;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_indexTex, uv_46);
  mediump float tmpvar_50;
  tmpvar_50 = tmpvar_49.w;
  mediump vec2 tmpvar_51;
  tmpvar_51.y = 0.0;
  tmpvar_51.x = tmpvar_50;
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_tableTex, tmpvar_51).xyz;
  mediump vec3 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 1.0;
  tmpvar_54.x = tmpvar_50;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = mix (tmpvar_53, tmpvar_56, tmpvar_48.xxx);
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58 = mix (mix (tmpvar_21, tmpvar_33, tmpvar_9.xxxx), mix (tmpvar_45, tmpvar_57, tmpvar_9.xxxx), tmpvar_9.yyyy);
  tmpvar_5 = tmpvar_58;
  mediump float x_59;
  x_59 = (tmpvar_5.w - _AlphaClipThreshold);
  if ((x_59 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_5.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_5.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_61 * _Color.xyz) * _EnvColor.xyz) + color_65);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_5.w);
  mediump vec3 reflection_70;
  mediump vec3 R_71;
  mediump float intensity_72;
  mediump vec4 noiseTex_73;
  mediump vec4 spColor_74;
  lowp vec4 tmpvar_75;
  tmpvar_75 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_74.xyz = tmpvar_75.xyz;
  spColor_74.w = outColor_4.w;
  lowp vec4 tmpvar_76;
  tmpvar_76 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_73 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (((1.99 * noiseTex_73.x) * _SPNoiseScaler) - 1.0);
  intensity_72 = tmpvar_77;
  highp vec3 tmpvar_78;
  highp vec3 I_79;
  I_79 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_73 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_78 = (I_79 - (2.0 * (
    dot (N_3, I_79)
   * N_3)));
  R_71 = tmpvar_78;
  lowp vec3 tmpvar_80;
  tmpvar_80 = textureCube (_SPCubeMap, R_71).xyz;
  reflection_70 = tmpvar_80;
  highp vec3 tmpvar_81;
  mediump vec3 x_82;
  x_82 = (spColor_74.xyz * _SPOldColor.xyz);
  tmpvar_81 = mix (x_82, ((reflection_70 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_74.xyz = tmpvar_81;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_72 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_72 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_83;
      tmpvar_83 = mix (spColor_74, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_72) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_74 = tmpvar_83;
    };
  };
  highp vec3 tmpvar_84;
  tmpvar_84 = mix (outColor_4.xyz, spColor_74.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_74.xyz = tmpvar_84;
  outColor_4.w = spColor_74.w;
  mediump vec3 tmpvar_85;
  highp vec3 N_86;
  N_86 = N_3;
  highp vec3 V_87;
  V_87 = V_2;
  mediump float tmpvar_88;
  highp float tmpvar_89;
  tmpvar_89 = pow (clamp ((1.001 - 
    dot (V_87, N_86)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_88 = (_RGBias + (tmpvar_89 * _RGScale));
  mediump vec3 tmpvar_90;
  tmpvar_90 = (tmpvar_88 * _RGColor).xyz;
  mediump float tmpvar_91;
  tmpvar_91 = clamp (tmpvar_88, 0.0, 1.0);
  highp vec3 tmpvar_92;
  tmpvar_92 = mix (spColor_74.xyz, tmpvar_90, vec3((tmpvar_91 * _RGRatio)));
  tmpvar_85 = tmpvar_92;
  outColor_4.xyz = tmpvar_85;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_93;
    scrpos_93 = xlv_TEXCOORD3;
    mediump float a_94;
    a_94 = xlv_TEXCOORD3.z;
    if ((a_94 < 0.95)) {
      scrpos_93.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_94 = (a_94 * 17.0);
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_93.y / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      highp float tmpvar_98;
      tmpvar_98 = (scrpos_93.x / 4.0);
      highp float tmpvar_99;
      tmpvar_99 = (fract(abs(tmpvar_98)) * 4.0);
      highp float tmpvar_100;
      if ((tmpvar_98 >= 0.0)) {
        tmpvar_100 = tmpvar_99;
      } else {
        tmpvar_100 = -(tmpvar_99);
      };
      highp float x_101;
      x_101 = ((a_94 - _DITHERMATRIX[
        int(tmpvar_97)
      ][
        int(tmpvar_100)
      ]) - 0.01);
      if ((x_101 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_74.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_5;
  highp vec2 pixelSize_6;
  pixelSize_6 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8 = floor(tmpvar_7);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract(tmpvar_7);
  highp vec2 uv_10;
  uv_10 = ((tmpvar_8 + vec2(0.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_factorTex, uv_10);
  mediump vec4 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_indexTex, uv_10);
  mediump float tmpvar_14;
  tmpvar_14 = tmpvar_13.w;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 1.0;
  tmpvar_18.x = tmpvar_14;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = mix (tmpvar_17, tmpvar_20, tmpvar_12.xxx);
  tmpvar_21.w = tmpvar_12.y;
  highp vec2 uv_22;
  uv_22 = ((tmpvar_8 + vec2(1.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_factorTex, uv_22);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_indexTex, uv_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25.w;
  mediump vec2 tmpvar_27;
  tmpvar_27.y = 0.0;
  tmpvar_27.x = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_tableTex, tmpvar_27).xyz;
  mediump vec3 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 1.0;
  tmpvar_30.x = tmpvar_26;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = mix (tmpvar_29, tmpvar_32, tmpvar_24.xxx);
  tmpvar_33.w = tmpvar_24.y;
  highp vec2 uv_34;
  uv_34 = ((tmpvar_8 + vec2(0.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_factorTex, uv_34);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_indexTex, uv_34);
  mediump float tmpvar_38;
  tmpvar_38 = tmpvar_37.w;
  mediump vec2 tmpvar_39;
  tmpvar_39.y = 0.0;
  tmpvar_39.x = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_tableTex, tmpvar_39).xyz;
  mediump vec3 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 1.0;
  tmpvar_42.x = tmpvar_38;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = mix (tmpvar_41, tmpvar_44, tmpvar_36.xxx);
  tmpvar_45.w = tmpvar_36.y;
  highp vec2 uv_46;
  uv_46 = ((tmpvar_8 + vec2(1.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_factorTex, uv_46);
  mediump vec4 tmpvar_48;
  tmpvar_48 = tmpvar_47;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_indexTex, uv_46);
  mediump float tmpvar_50;
  tmpvar_50 = tmpvar_49.w;
  mediump vec2 tmpvar_51;
  tmpvar_51.y = 0.0;
  tmpvar_51.x = tmpvar_50;
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_tableTex, tmpvar_51).xyz;
  mediump vec3 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 1.0;
  tmpvar_54.x = tmpvar_50;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = mix (tmpvar_53, tmpvar_56, tmpvar_48.xxx);
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58 = mix (mix (tmpvar_21, tmpvar_33, tmpvar_9.xxxx), mix (tmpvar_45, tmpvar_57, tmpvar_9.xxxx), tmpvar_9.yyyy);
  tmpvar_5 = tmpvar_58;
  mediump float x_59;
  x_59 = (tmpvar_5.w - _AlphaClipThreshold);
  if ((x_59 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_5.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_5.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_61 * _Color.xyz) * _EnvColor.xyz) + color_65);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_5.w);
  mediump vec3 reflection_70;
  mediump vec3 R_71;
  mediump float intensity_72;
  mediump vec4 noiseTex_73;
  mediump vec4 spColor_74;
  lowp vec4 tmpvar_75;
  tmpvar_75 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_74.xyz = tmpvar_75.xyz;
  spColor_74.w = outColor_4.w;
  lowp vec4 tmpvar_76;
  tmpvar_76 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_73 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (((1.99 * noiseTex_73.x) * _SPNoiseScaler) - 1.0);
  intensity_72 = tmpvar_77;
  highp vec3 tmpvar_78;
  highp vec3 I_79;
  I_79 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_73 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_78 = (I_79 - (2.0 * (
    dot (N_3, I_79)
   * N_3)));
  R_71 = tmpvar_78;
  lowp vec3 tmpvar_80;
  tmpvar_80 = textureCube (_SPCubeMap, R_71).xyz;
  reflection_70 = tmpvar_80;
  highp vec3 tmpvar_81;
  mediump vec3 x_82;
  x_82 = (spColor_74.xyz * _SPOldColor.xyz);
  tmpvar_81 = mix (x_82, ((reflection_70 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_74.xyz = tmpvar_81;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_72 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_72 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_83;
      tmpvar_83 = mix (spColor_74, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_72) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_74 = tmpvar_83;
    };
  };
  highp vec3 tmpvar_84;
  tmpvar_84 = mix (outColor_4.xyz, spColor_74.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_74.xyz = tmpvar_84;
  outColor_4.w = spColor_74.w;
  mediump vec3 tmpvar_85;
  highp vec3 N_86;
  N_86 = N_3;
  highp vec3 V_87;
  V_87 = V_2;
  mediump float tmpvar_88;
  highp float tmpvar_89;
  tmpvar_89 = pow (clamp ((1.001 - 
    dot (V_87, N_86)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_88 = (_RGBias + (tmpvar_89 * _RGScale));
  mediump vec3 tmpvar_90;
  tmpvar_90 = (tmpvar_88 * _RGColor).xyz;
  mediump float tmpvar_91;
  tmpvar_91 = clamp (tmpvar_88, 0.0, 1.0);
  highp vec3 tmpvar_92;
  tmpvar_92 = mix (spColor_74.xyz, tmpvar_90, vec3((tmpvar_91 * _RGRatio)));
  tmpvar_85 = tmpvar_92;
  outColor_4.xyz = tmpvar_85;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_93;
    scrpos_93 = xlv_TEXCOORD3;
    mediump float a_94;
    a_94 = xlv_TEXCOORD3.z;
    if ((a_94 < 0.95)) {
      scrpos_93.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_94 = (a_94 * 17.0);
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_93.y / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      highp float tmpvar_98;
      tmpvar_98 = (scrpos_93.x / 4.0);
      highp float tmpvar_99;
      tmpvar_99 = (fract(abs(tmpvar_98)) * 4.0);
      highp float tmpvar_100;
      if ((tmpvar_98 >= 0.0)) {
        tmpvar_100 = tmpvar_99;
      } else {
        tmpvar_100 = -(tmpvar_99);
      };
      highp float x_101;
      x_101 = ((a_94 - _DITHERMATRIX[
        int(tmpvar_97)
      ][
        int(tmpvar_100)
      ]) - 0.01);
      if ((x_101 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_74.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_5;
  highp vec2 pixelSize_6;
  pixelSize_6 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8 = floor(tmpvar_7);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract(tmpvar_7);
  highp vec2 uv_10;
  uv_10 = ((tmpvar_8 + vec2(0.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_factorTex, uv_10);
  mediump vec4 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_indexTex, uv_10);
  mediump float tmpvar_14;
  tmpvar_14 = tmpvar_13.w;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 1.0;
  tmpvar_18.x = tmpvar_14;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = mix (tmpvar_17, tmpvar_20, tmpvar_12.xxx);
  tmpvar_21.w = tmpvar_12.y;
  highp vec2 uv_22;
  uv_22 = ((tmpvar_8 + vec2(1.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_factorTex, uv_22);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_indexTex, uv_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25.w;
  mediump vec2 tmpvar_27;
  tmpvar_27.y = 0.0;
  tmpvar_27.x = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_tableTex, tmpvar_27).xyz;
  mediump vec3 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 1.0;
  tmpvar_30.x = tmpvar_26;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = mix (tmpvar_29, tmpvar_32, tmpvar_24.xxx);
  tmpvar_33.w = tmpvar_24.y;
  highp vec2 uv_34;
  uv_34 = ((tmpvar_8 + vec2(0.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_factorTex, uv_34);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_indexTex, uv_34);
  mediump float tmpvar_38;
  tmpvar_38 = tmpvar_37.w;
  mediump vec2 tmpvar_39;
  tmpvar_39.y = 0.0;
  tmpvar_39.x = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_tableTex, tmpvar_39).xyz;
  mediump vec3 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 1.0;
  tmpvar_42.x = tmpvar_38;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = mix (tmpvar_41, tmpvar_44, tmpvar_36.xxx);
  tmpvar_45.w = tmpvar_36.y;
  highp vec2 uv_46;
  uv_46 = ((tmpvar_8 + vec2(1.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_factorTex, uv_46);
  mediump vec4 tmpvar_48;
  tmpvar_48 = tmpvar_47;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_indexTex, uv_46);
  mediump float tmpvar_50;
  tmpvar_50 = tmpvar_49.w;
  mediump vec2 tmpvar_51;
  tmpvar_51.y = 0.0;
  tmpvar_51.x = tmpvar_50;
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_tableTex, tmpvar_51).xyz;
  mediump vec3 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 1.0;
  tmpvar_54.x = tmpvar_50;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = mix (tmpvar_53, tmpvar_56, tmpvar_48.xxx);
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58 = mix (mix (tmpvar_21, tmpvar_33, tmpvar_9.xxxx), mix (tmpvar_45, tmpvar_57, tmpvar_9.xxxx), tmpvar_9.yyyy);
  tmpvar_5 = tmpvar_58;
  mediump float x_59;
  x_59 = (tmpvar_5.w - _AlphaClipThreshold);
  if ((x_59 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_5.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_5.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_61 * _Color.xyz) * _EnvColor.xyz) + color_65);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_5.w);
  mediump vec3 reflection_70;
  mediump vec3 R_71;
  mediump float intensity_72;
  mediump vec4 noiseTex_73;
  mediump vec4 spColor_74;
  lowp vec4 tmpvar_75;
  tmpvar_75 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_74.xyz = tmpvar_75.xyz;
  spColor_74.w = outColor_4.w;
  lowp vec4 tmpvar_76;
  tmpvar_76 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_73 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (((1.99 * noiseTex_73.x) * _SPNoiseScaler) - 1.0);
  intensity_72 = tmpvar_77;
  highp vec3 tmpvar_78;
  highp vec3 I_79;
  I_79 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_73 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_78 = (I_79 - (2.0 * (
    dot (N_3, I_79)
   * N_3)));
  R_71 = tmpvar_78;
  lowp vec3 tmpvar_80;
  tmpvar_80 = textureCube (_SPCubeMap, R_71).xyz;
  reflection_70 = tmpvar_80;
  highp vec3 tmpvar_81;
  mediump vec3 x_82;
  x_82 = (spColor_74.xyz * _SPOldColor.xyz);
  tmpvar_81 = mix (x_82, ((reflection_70 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_74.xyz = tmpvar_81;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_72 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_72 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_83;
      tmpvar_83 = mix (spColor_74, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_72) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_74 = tmpvar_83;
    };
  };
  highp vec3 tmpvar_84;
  tmpvar_84 = mix (outColor_4.xyz, spColor_74.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_74.xyz = tmpvar_84;
  outColor_4.w = spColor_74.w;
  mediump vec3 tmpvar_85;
  highp vec3 N_86;
  N_86 = N_3;
  highp vec3 V_87;
  V_87 = V_2;
  mediump float tmpvar_88;
  highp float tmpvar_89;
  tmpvar_89 = pow (clamp ((1.001 - 
    dot (V_87, N_86)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_88 = (_RGBias + (tmpvar_89 * _RGScale));
  mediump vec3 tmpvar_90;
  tmpvar_90 = (tmpvar_88 * _RGColor).xyz;
  mediump float tmpvar_91;
  tmpvar_91 = clamp (tmpvar_88, 0.0, 1.0);
  highp vec3 tmpvar_92;
  tmpvar_92 = mix (spColor_74.xyz, tmpvar_90, vec3((tmpvar_91 * _RGRatio)));
  tmpvar_85 = tmpvar_92;
  outColor_4.xyz = tmpvar_85;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_93;
    scrpos_93 = xlv_TEXCOORD3;
    mediump float a_94;
    a_94 = xlv_TEXCOORD3.z;
    if ((a_94 < 0.95)) {
      scrpos_93.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_94 = (a_94 * 17.0);
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_93.y / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      highp float tmpvar_98;
      tmpvar_98 = (scrpos_93.x / 4.0);
      highp float tmpvar_99;
      tmpvar_99 = (fract(abs(tmpvar_98)) * 4.0);
      highp float tmpvar_100;
      if ((tmpvar_98 >= 0.0)) {
        tmpvar_100 = tmpvar_99;
      } else {
        tmpvar_100 = -(tmpvar_99);
      };
      highp float x_101;
      x_101 = ((a_94 - _DITHERMATRIX[
        int(tmpvar_97)
      ][
        int(tmpvar_100)
      ]) - 0.01);
      if ((x_101 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_74.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_5;
  highp vec2 pixelSize_6;
  pixelSize_6 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8 = floor(tmpvar_7);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract(tmpvar_7);
  highp vec2 uv_10;
  uv_10 = ((tmpvar_8 + vec2(0.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_factorTex, uv_10);
  mediump vec4 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_indexTex, uv_10);
  mediump float tmpvar_14;
  tmpvar_14 = tmpvar_13.w;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 1.0;
  tmpvar_18.x = tmpvar_14;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = mix (tmpvar_17, tmpvar_20, tmpvar_12.xxx);
  tmpvar_21.w = tmpvar_12.y;
  highp vec2 uv_22;
  uv_22 = ((tmpvar_8 + vec2(1.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_factorTex, uv_22);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_indexTex, uv_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25.w;
  mediump vec2 tmpvar_27;
  tmpvar_27.y = 0.0;
  tmpvar_27.x = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_tableTex, tmpvar_27).xyz;
  mediump vec3 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 1.0;
  tmpvar_30.x = tmpvar_26;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = mix (tmpvar_29, tmpvar_32, tmpvar_24.xxx);
  tmpvar_33.w = tmpvar_24.y;
  highp vec2 uv_34;
  uv_34 = ((tmpvar_8 + vec2(0.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_factorTex, uv_34);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_indexTex, uv_34);
  mediump float tmpvar_38;
  tmpvar_38 = tmpvar_37.w;
  mediump vec2 tmpvar_39;
  tmpvar_39.y = 0.0;
  tmpvar_39.x = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_tableTex, tmpvar_39).xyz;
  mediump vec3 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 1.0;
  tmpvar_42.x = tmpvar_38;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = mix (tmpvar_41, tmpvar_44, tmpvar_36.xxx);
  tmpvar_45.w = tmpvar_36.y;
  highp vec2 uv_46;
  uv_46 = ((tmpvar_8 + vec2(1.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_factorTex, uv_46);
  mediump vec4 tmpvar_48;
  tmpvar_48 = tmpvar_47;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_indexTex, uv_46);
  mediump float tmpvar_50;
  tmpvar_50 = tmpvar_49.w;
  mediump vec2 tmpvar_51;
  tmpvar_51.y = 0.0;
  tmpvar_51.x = tmpvar_50;
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_tableTex, tmpvar_51).xyz;
  mediump vec3 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 1.0;
  tmpvar_54.x = tmpvar_50;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = mix (tmpvar_53, tmpvar_56, tmpvar_48.xxx);
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58 = mix (mix (tmpvar_21, tmpvar_33, tmpvar_9.xxxx), mix (tmpvar_45, tmpvar_57, tmpvar_9.xxxx), tmpvar_9.yyyy);
  tmpvar_5 = tmpvar_58;
  mediump float x_59;
  x_59 = (tmpvar_5.w - _AlphaClipThreshold);
  if ((x_59 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_5.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_5.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_61 * _Color.xyz) * _EnvColor.xyz) + color_65);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_5.w);
  mediump vec3 reflection_70;
  mediump vec3 R_71;
  mediump float intensity_72;
  mediump vec4 noiseTex_73;
  mediump vec4 spColor_74;
  lowp vec4 tmpvar_75;
  tmpvar_75 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_74.xyz = tmpvar_75.xyz;
  spColor_74.w = outColor_4.w;
  lowp vec4 tmpvar_76;
  tmpvar_76 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_73 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (((1.99 * noiseTex_73.x) * _SPNoiseScaler) - 1.0);
  intensity_72 = tmpvar_77;
  highp vec3 tmpvar_78;
  highp vec3 I_79;
  I_79 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_73 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_78 = (I_79 - (2.0 * (
    dot (N_3, I_79)
   * N_3)));
  R_71 = tmpvar_78;
  lowp vec3 tmpvar_80;
  tmpvar_80 = textureCube (_SPCubeMap, R_71).xyz;
  reflection_70 = tmpvar_80;
  highp vec3 tmpvar_81;
  mediump vec3 x_82;
  x_82 = (spColor_74.xyz * _SPOldColor.xyz);
  tmpvar_81 = mix (x_82, ((reflection_70 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_74.xyz = tmpvar_81;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_72 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_72 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_83;
      tmpvar_83 = mix (spColor_74, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_72) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_74 = tmpvar_83;
    };
  };
  highp vec3 tmpvar_84;
  tmpvar_84 = mix (outColor_4.xyz, spColor_74.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_74.xyz = tmpvar_84;
  outColor_4.w = spColor_74.w;
  mediump vec3 tmpvar_85;
  highp vec3 N_86;
  N_86 = N_3;
  highp vec3 V_87;
  V_87 = V_2;
  mediump float tmpvar_88;
  highp float tmpvar_89;
  tmpvar_89 = pow (clamp ((1.001 - 
    dot (V_87, N_86)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_88 = (_RGBias + (tmpvar_89 * _RGScale));
  mediump vec3 tmpvar_90;
  tmpvar_90 = (tmpvar_88 * _RGColor).xyz;
  mediump float tmpvar_91;
  tmpvar_91 = clamp (tmpvar_88, 0.0, 1.0);
  highp vec3 tmpvar_92;
  tmpvar_92 = mix (spColor_74.xyz, tmpvar_90, vec3((tmpvar_91 * _RGRatio)));
  tmpvar_85 = tmpvar_92;
  outColor_4.xyz = tmpvar_85;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_93;
    scrpos_93 = xlv_TEXCOORD3;
    mediump float a_94;
    a_94 = xlv_TEXCOORD3.z;
    if ((a_94 < 0.95)) {
      scrpos_93.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_94 = (a_94 * 17.0);
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_93.y / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      highp float tmpvar_98;
      tmpvar_98 = (scrpos_93.x / 4.0);
      highp float tmpvar_99;
      tmpvar_99 = (fract(abs(tmpvar_98)) * 4.0);
      highp float tmpvar_100;
      if ((tmpvar_98 >= 0.0)) {
        tmpvar_100 = tmpvar_99;
      } else {
        tmpvar_100 = -(tmpvar_99);
      };
      highp float x_101;
      x_101 = ((a_94 - _DITHERMATRIX[
        int(tmpvar_97)
      ][
        int(tmpvar_100)
      ]) - 0.01);
      if ((x_101 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_74.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_5;
  highp vec2 pixelSize_6;
  pixelSize_6 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8 = floor(tmpvar_7);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract(tmpvar_7);
  highp vec2 uv_10;
  uv_10 = ((tmpvar_8 + vec2(0.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_factorTex, uv_10);
  mediump vec4 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_indexTex, uv_10);
  mediump float tmpvar_14;
  tmpvar_14 = tmpvar_13.w;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 1.0;
  tmpvar_18.x = tmpvar_14;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = mix (tmpvar_17, tmpvar_20, tmpvar_12.xxx);
  tmpvar_21.w = tmpvar_12.y;
  highp vec2 uv_22;
  uv_22 = ((tmpvar_8 + vec2(1.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_factorTex, uv_22);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_indexTex, uv_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25.w;
  mediump vec2 tmpvar_27;
  tmpvar_27.y = 0.0;
  tmpvar_27.x = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_tableTex, tmpvar_27).xyz;
  mediump vec3 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 1.0;
  tmpvar_30.x = tmpvar_26;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = mix (tmpvar_29, tmpvar_32, tmpvar_24.xxx);
  tmpvar_33.w = tmpvar_24.y;
  highp vec2 uv_34;
  uv_34 = ((tmpvar_8 + vec2(0.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_factorTex, uv_34);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_indexTex, uv_34);
  mediump float tmpvar_38;
  tmpvar_38 = tmpvar_37.w;
  mediump vec2 tmpvar_39;
  tmpvar_39.y = 0.0;
  tmpvar_39.x = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_tableTex, tmpvar_39).xyz;
  mediump vec3 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 1.0;
  tmpvar_42.x = tmpvar_38;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = mix (tmpvar_41, tmpvar_44, tmpvar_36.xxx);
  tmpvar_45.w = tmpvar_36.y;
  highp vec2 uv_46;
  uv_46 = ((tmpvar_8 + vec2(1.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_factorTex, uv_46);
  mediump vec4 tmpvar_48;
  tmpvar_48 = tmpvar_47;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_indexTex, uv_46);
  mediump float tmpvar_50;
  tmpvar_50 = tmpvar_49.w;
  mediump vec2 tmpvar_51;
  tmpvar_51.y = 0.0;
  tmpvar_51.x = tmpvar_50;
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_tableTex, tmpvar_51).xyz;
  mediump vec3 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 1.0;
  tmpvar_54.x = tmpvar_50;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = mix (tmpvar_53, tmpvar_56, tmpvar_48.xxx);
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58 = mix (mix (tmpvar_21, tmpvar_33, tmpvar_9.xxxx), mix (tmpvar_45, tmpvar_57, tmpvar_9.xxxx), tmpvar_9.yyyy);
  tmpvar_5 = tmpvar_58;
  mediump float x_59;
  x_59 = (tmpvar_5.w - _AlphaClipThreshold);
  if ((x_59 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_5.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_5.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_61 * _Color.xyz) * _EnvColor.xyz) + color_65);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_5.w);
  mediump vec3 reflection_70;
  mediump vec3 R_71;
  mediump float intensity_72;
  mediump vec4 noiseTex_73;
  mediump vec4 spColor_74;
  lowp vec4 tmpvar_75;
  tmpvar_75 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_74.xyz = tmpvar_75.xyz;
  spColor_74.w = outColor_4.w;
  lowp vec4 tmpvar_76;
  tmpvar_76 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_73 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (((1.99 * noiseTex_73.x) * _SPNoiseScaler) - 1.0);
  intensity_72 = tmpvar_77;
  highp vec3 tmpvar_78;
  highp vec3 I_79;
  I_79 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_73 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_78 = (I_79 - (2.0 * (
    dot (N_3, I_79)
   * N_3)));
  R_71 = tmpvar_78;
  lowp vec3 tmpvar_80;
  tmpvar_80 = textureCube (_SPCubeMap, R_71).xyz;
  reflection_70 = tmpvar_80;
  highp vec3 tmpvar_81;
  mediump vec3 x_82;
  x_82 = (spColor_74.xyz * _SPOldColor.xyz);
  tmpvar_81 = mix (x_82, ((reflection_70 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_74.xyz = tmpvar_81;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_72 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_72 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_83;
      tmpvar_83 = mix (spColor_74, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_72) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_74 = tmpvar_83;
    };
  };
  highp vec3 tmpvar_84;
  tmpvar_84 = mix (outColor_4.xyz, spColor_74.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_74.xyz = tmpvar_84;
  outColor_4.w = spColor_74.w;
  mediump vec3 tmpvar_85;
  highp vec3 N_86;
  N_86 = N_3;
  highp vec3 V_87;
  V_87 = V_2;
  mediump float tmpvar_88;
  highp float tmpvar_89;
  tmpvar_89 = pow (clamp ((1.001 - 
    dot (V_87, N_86)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_88 = (_RGBias + (tmpvar_89 * _RGScale));
  mediump vec3 tmpvar_90;
  tmpvar_90 = (tmpvar_88 * _RGColor).xyz;
  mediump float tmpvar_91;
  tmpvar_91 = clamp (tmpvar_88, 0.0, 1.0);
  highp vec3 tmpvar_92;
  tmpvar_92 = mix (spColor_74.xyz, tmpvar_90, vec3((tmpvar_91 * _RGRatio)));
  tmpvar_85 = tmpvar_92;
  outColor_4.xyz = tmpvar_85;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_93;
    scrpos_93 = xlv_TEXCOORD3;
    mediump float a_94;
    a_94 = xlv_TEXCOORD3.z;
    if ((a_94 < 0.95)) {
      scrpos_93.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_94 = (a_94 * 17.0);
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_93.y / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      highp float tmpvar_98;
      tmpvar_98 = (scrpos_93.x / 4.0);
      highp float tmpvar_99;
      tmpvar_99 = (fract(abs(tmpvar_98)) * 4.0);
      highp float tmpvar_100;
      if ((tmpvar_98 >= 0.0)) {
        tmpvar_100 = tmpvar_99;
      } else {
        tmpvar_100 = -(tmpvar_99);
      };
      highp float x_101;
      x_101 = ((a_94 - _DITHERMATRIX[
        int(tmpvar_97)
      ][
        int(tmpvar_100)
      ]) - 0.01);
      if ((x_101 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_74.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_5;
  highp vec2 pixelSize_6;
  pixelSize_6 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8 = floor(tmpvar_7);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract(tmpvar_7);
  highp vec2 uv_10;
  uv_10 = ((tmpvar_8 + vec2(0.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_factorTex, uv_10);
  mediump vec4 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_indexTex, uv_10);
  mediump float tmpvar_14;
  tmpvar_14 = tmpvar_13.w;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 1.0;
  tmpvar_18.x = tmpvar_14;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = mix (tmpvar_17, tmpvar_20, tmpvar_12.xxx);
  tmpvar_21.w = tmpvar_12.y;
  highp vec2 uv_22;
  uv_22 = ((tmpvar_8 + vec2(1.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_factorTex, uv_22);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_indexTex, uv_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25.w;
  mediump vec2 tmpvar_27;
  tmpvar_27.y = 0.0;
  tmpvar_27.x = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_tableTex, tmpvar_27).xyz;
  mediump vec3 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 1.0;
  tmpvar_30.x = tmpvar_26;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = mix (tmpvar_29, tmpvar_32, tmpvar_24.xxx);
  tmpvar_33.w = tmpvar_24.y;
  highp vec2 uv_34;
  uv_34 = ((tmpvar_8 + vec2(0.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_factorTex, uv_34);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_indexTex, uv_34);
  mediump float tmpvar_38;
  tmpvar_38 = tmpvar_37.w;
  mediump vec2 tmpvar_39;
  tmpvar_39.y = 0.0;
  tmpvar_39.x = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_tableTex, tmpvar_39).xyz;
  mediump vec3 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 1.0;
  tmpvar_42.x = tmpvar_38;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = mix (tmpvar_41, tmpvar_44, tmpvar_36.xxx);
  tmpvar_45.w = tmpvar_36.y;
  highp vec2 uv_46;
  uv_46 = ((tmpvar_8 + vec2(1.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_factorTex, uv_46);
  mediump vec4 tmpvar_48;
  tmpvar_48 = tmpvar_47;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_indexTex, uv_46);
  mediump float tmpvar_50;
  tmpvar_50 = tmpvar_49.w;
  mediump vec2 tmpvar_51;
  tmpvar_51.y = 0.0;
  tmpvar_51.x = tmpvar_50;
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_tableTex, tmpvar_51).xyz;
  mediump vec3 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 1.0;
  tmpvar_54.x = tmpvar_50;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = mix (tmpvar_53, tmpvar_56, tmpvar_48.xxx);
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58 = mix (mix (tmpvar_21, tmpvar_33, tmpvar_9.xxxx), mix (tmpvar_45, tmpvar_57, tmpvar_9.xxxx), tmpvar_9.yyyy);
  tmpvar_5 = tmpvar_58;
  mediump float x_59;
  x_59 = (tmpvar_5.w - _AlphaClipThreshold);
  if ((x_59 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_5.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_5.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_61 * _Color.xyz) * _EnvColor.xyz) + color_65);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_5.w);
  mediump vec3 reflection_70;
  mediump vec3 R_71;
  mediump float intensity_72;
  mediump vec4 noiseTex_73;
  mediump vec4 spColor_74;
  lowp vec4 tmpvar_75;
  tmpvar_75 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_74.xyz = tmpvar_75.xyz;
  spColor_74.w = outColor_4.w;
  lowp vec4 tmpvar_76;
  tmpvar_76 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_73 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (((1.99 * noiseTex_73.x) * _SPNoiseScaler) - 1.0);
  intensity_72 = tmpvar_77;
  highp vec3 tmpvar_78;
  highp vec3 I_79;
  I_79 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_73 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_78 = (I_79 - (2.0 * (
    dot (N_3, I_79)
   * N_3)));
  R_71 = tmpvar_78;
  lowp vec3 tmpvar_80;
  tmpvar_80 = textureCube (_SPCubeMap, R_71).xyz;
  reflection_70 = tmpvar_80;
  highp vec3 tmpvar_81;
  mediump vec3 x_82;
  x_82 = (spColor_74.xyz * _SPOldColor.xyz);
  tmpvar_81 = mix (x_82, ((reflection_70 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_74.xyz = tmpvar_81;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_72 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_72 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_83;
      tmpvar_83 = mix (spColor_74, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_72) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_74 = tmpvar_83;
    };
  };
  highp vec3 tmpvar_84;
  tmpvar_84 = mix (outColor_4.xyz, spColor_74.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_74.xyz = tmpvar_84;
  outColor_4.w = spColor_74.w;
  mediump vec3 tmpvar_85;
  highp vec3 N_86;
  N_86 = N_3;
  highp vec3 V_87;
  V_87 = V_2;
  mediump float tmpvar_88;
  highp float tmpvar_89;
  tmpvar_89 = pow (clamp ((1.001 - 
    dot (V_87, N_86)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_88 = (_RGBias + (tmpvar_89 * _RGScale));
  mediump vec3 tmpvar_90;
  tmpvar_90 = (tmpvar_88 * _RGColor).xyz;
  mediump float tmpvar_91;
  tmpvar_91 = clamp (tmpvar_88, 0.0, 1.0);
  highp vec3 tmpvar_92;
  tmpvar_92 = mix (spColor_74.xyz, tmpvar_90, vec3((tmpvar_91 * _RGRatio)));
  tmpvar_85 = tmpvar_92;
  outColor_4.xyz = tmpvar_85;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_93;
    scrpos_93 = xlv_TEXCOORD3;
    mediump float a_94;
    a_94 = xlv_TEXCOORD3.z;
    if ((a_94 < 0.95)) {
      scrpos_93.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_94 = (a_94 * 17.0);
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_93.y / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      highp float tmpvar_98;
      tmpvar_98 = (scrpos_93.x / 4.0);
      highp float tmpvar_99;
      tmpvar_99 = (fract(abs(tmpvar_98)) * 4.0);
      highp float tmpvar_100;
      if ((tmpvar_98 >= 0.0)) {
        tmpvar_100 = tmpvar_99;
      } else {
        tmpvar_100 = -(tmpvar_99);
      };
      highp float x_101;
      x_101 = ((a_94 - _DITHERMATRIX[
        int(tmpvar_97)
      ][
        int(tmpvar_100)
      ]) - 0.01);
      if ((x_101 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_74.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_5;
  highp vec2 pixelSize_6;
  pixelSize_6 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8 = floor(tmpvar_7);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract(tmpvar_7);
  highp vec2 uv_10;
  uv_10 = ((tmpvar_8 + vec2(0.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_factorTex, uv_10);
  mediump vec4 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_indexTex, uv_10);
  mediump float tmpvar_14;
  tmpvar_14 = tmpvar_13.w;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 1.0;
  tmpvar_18.x = tmpvar_14;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = mix (tmpvar_17, tmpvar_20, tmpvar_12.xxx);
  tmpvar_21.w = tmpvar_12.y;
  highp vec2 uv_22;
  uv_22 = ((tmpvar_8 + vec2(1.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_factorTex, uv_22);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_indexTex, uv_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25.w;
  mediump vec2 tmpvar_27;
  tmpvar_27.y = 0.0;
  tmpvar_27.x = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_tableTex, tmpvar_27).xyz;
  mediump vec3 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 1.0;
  tmpvar_30.x = tmpvar_26;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = mix (tmpvar_29, tmpvar_32, tmpvar_24.xxx);
  tmpvar_33.w = tmpvar_24.y;
  highp vec2 uv_34;
  uv_34 = ((tmpvar_8 + vec2(0.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_factorTex, uv_34);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_indexTex, uv_34);
  mediump float tmpvar_38;
  tmpvar_38 = tmpvar_37.w;
  mediump vec2 tmpvar_39;
  tmpvar_39.y = 0.0;
  tmpvar_39.x = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_tableTex, tmpvar_39).xyz;
  mediump vec3 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 1.0;
  tmpvar_42.x = tmpvar_38;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = mix (tmpvar_41, tmpvar_44, tmpvar_36.xxx);
  tmpvar_45.w = tmpvar_36.y;
  highp vec2 uv_46;
  uv_46 = ((tmpvar_8 + vec2(1.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_factorTex, uv_46);
  mediump vec4 tmpvar_48;
  tmpvar_48 = tmpvar_47;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_indexTex, uv_46);
  mediump float tmpvar_50;
  tmpvar_50 = tmpvar_49.w;
  mediump vec2 tmpvar_51;
  tmpvar_51.y = 0.0;
  tmpvar_51.x = tmpvar_50;
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_tableTex, tmpvar_51).xyz;
  mediump vec3 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 1.0;
  tmpvar_54.x = tmpvar_50;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = mix (tmpvar_53, tmpvar_56, tmpvar_48.xxx);
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58 = mix (mix (tmpvar_21, tmpvar_33, tmpvar_9.xxxx), mix (tmpvar_45, tmpvar_57, tmpvar_9.xxxx), tmpvar_9.yyyy);
  tmpvar_5 = tmpvar_58;
  mediump float x_59;
  x_59 = (tmpvar_5.w - _AlphaClipThreshold);
  if ((x_59 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_5.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_5.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_61 * _Color.xyz) * _EnvColor.xyz) + color_65);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_5.w);
  mediump vec3 reflection_70;
  mediump vec3 R_71;
  mediump float intensity_72;
  mediump vec4 noiseTex_73;
  mediump vec4 spColor_74;
  lowp vec4 tmpvar_75;
  tmpvar_75 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_74.xyz = tmpvar_75.xyz;
  spColor_74.w = outColor_4.w;
  lowp vec4 tmpvar_76;
  tmpvar_76 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_73 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (((1.99 * noiseTex_73.x) * _SPNoiseScaler) - 1.0);
  intensity_72 = tmpvar_77;
  highp vec3 tmpvar_78;
  highp vec3 I_79;
  I_79 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_73 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_78 = (I_79 - (2.0 * (
    dot (N_3, I_79)
   * N_3)));
  R_71 = tmpvar_78;
  lowp vec3 tmpvar_80;
  tmpvar_80 = textureCube (_SPCubeMap, R_71).xyz;
  reflection_70 = tmpvar_80;
  highp vec3 tmpvar_81;
  mediump vec3 x_82;
  x_82 = (spColor_74.xyz * _SPOldColor.xyz);
  tmpvar_81 = mix (x_82, ((reflection_70 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_74.xyz = tmpvar_81;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_72 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_72 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_83;
      tmpvar_83 = mix (spColor_74, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_72) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_74 = tmpvar_83;
    };
  };
  highp vec3 tmpvar_84;
  tmpvar_84 = mix (outColor_4.xyz, spColor_74.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_74.xyz = tmpvar_84;
  outColor_4.w = spColor_74.w;
  mediump vec3 tmpvar_85;
  highp vec3 N_86;
  N_86 = N_3;
  highp vec3 V_87;
  V_87 = V_2;
  mediump float tmpvar_88;
  highp float tmpvar_89;
  tmpvar_89 = pow (clamp ((1.001 - 
    dot (V_87, N_86)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_88 = (_RGBias + (tmpvar_89 * _RGScale));
  mediump vec3 tmpvar_90;
  tmpvar_90 = (tmpvar_88 * _RGColor).xyz;
  mediump float tmpvar_91;
  tmpvar_91 = clamp (tmpvar_88, 0.0, 1.0);
  highp vec3 tmpvar_92;
  tmpvar_92 = mix (spColor_74.xyz, tmpvar_90, vec3((tmpvar_91 * _RGRatio)));
  tmpvar_85 = tmpvar_92;
  outColor_4.xyz = tmpvar_85;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_93;
    scrpos_93 = xlv_TEXCOORD3;
    mediump float a_94;
    a_94 = xlv_TEXCOORD3.z;
    if ((a_94 < 0.95)) {
      scrpos_93.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_94 = (a_94 * 17.0);
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_93.y / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      highp float tmpvar_98;
      tmpvar_98 = (scrpos_93.x / 4.0);
      highp float tmpvar_99;
      tmpvar_99 = (fract(abs(tmpvar_98)) * 4.0);
      highp float tmpvar_100;
      if ((tmpvar_98 >= 0.0)) {
        tmpvar_100 = tmpvar_99;
      } else {
        tmpvar_100 = -(tmpvar_99);
      };
      highp float x_101;
      x_101 = ((a_94 - _DITHERMATRIX[
        int(tmpvar_97)
      ][
        int(tmpvar_100)
      ]) - 0.01);
      if ((x_101 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_74.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_5;
  highp vec2 pixelSize_6;
  pixelSize_6 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8 = floor(tmpvar_7);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract(tmpvar_7);
  highp vec2 uv_10;
  uv_10 = ((tmpvar_8 + vec2(0.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_factorTex, uv_10);
  mediump vec4 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_indexTex, uv_10);
  mediump float tmpvar_14;
  tmpvar_14 = tmpvar_13.w;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 1.0;
  tmpvar_18.x = tmpvar_14;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = mix (tmpvar_17, tmpvar_20, tmpvar_12.xxx);
  tmpvar_21.w = tmpvar_12.y;
  highp vec2 uv_22;
  uv_22 = ((tmpvar_8 + vec2(1.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_factorTex, uv_22);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_indexTex, uv_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25.w;
  mediump vec2 tmpvar_27;
  tmpvar_27.y = 0.0;
  tmpvar_27.x = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_tableTex, tmpvar_27).xyz;
  mediump vec3 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 1.0;
  tmpvar_30.x = tmpvar_26;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = mix (tmpvar_29, tmpvar_32, tmpvar_24.xxx);
  tmpvar_33.w = tmpvar_24.y;
  highp vec2 uv_34;
  uv_34 = ((tmpvar_8 + vec2(0.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_factorTex, uv_34);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_indexTex, uv_34);
  mediump float tmpvar_38;
  tmpvar_38 = tmpvar_37.w;
  mediump vec2 tmpvar_39;
  tmpvar_39.y = 0.0;
  tmpvar_39.x = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_tableTex, tmpvar_39).xyz;
  mediump vec3 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 1.0;
  tmpvar_42.x = tmpvar_38;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = mix (tmpvar_41, tmpvar_44, tmpvar_36.xxx);
  tmpvar_45.w = tmpvar_36.y;
  highp vec2 uv_46;
  uv_46 = ((tmpvar_8 + vec2(1.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_factorTex, uv_46);
  mediump vec4 tmpvar_48;
  tmpvar_48 = tmpvar_47;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_indexTex, uv_46);
  mediump float tmpvar_50;
  tmpvar_50 = tmpvar_49.w;
  mediump vec2 tmpvar_51;
  tmpvar_51.y = 0.0;
  tmpvar_51.x = tmpvar_50;
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_tableTex, tmpvar_51).xyz;
  mediump vec3 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 1.0;
  tmpvar_54.x = tmpvar_50;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = mix (tmpvar_53, tmpvar_56, tmpvar_48.xxx);
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58 = mix (mix (tmpvar_21, tmpvar_33, tmpvar_9.xxxx), mix (tmpvar_45, tmpvar_57, tmpvar_9.xxxx), tmpvar_9.yyyy);
  tmpvar_5 = tmpvar_58;
  mediump float x_59;
  x_59 = (tmpvar_5.w - _AlphaClipThreshold);
  if ((x_59 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_5.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_5.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_61 * _Color.xyz) * _EnvColor.xyz) + color_65);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_5.w);
  mediump vec3 reflection_70;
  mediump vec3 R_71;
  mediump float intensity_72;
  mediump vec4 noiseTex_73;
  mediump vec4 spColor_74;
  lowp vec4 tmpvar_75;
  tmpvar_75 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_74.xyz = tmpvar_75.xyz;
  spColor_74.w = outColor_4.w;
  lowp vec4 tmpvar_76;
  tmpvar_76 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_73 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (((1.99 * noiseTex_73.x) * _SPNoiseScaler) - 1.0);
  intensity_72 = tmpvar_77;
  highp vec3 tmpvar_78;
  highp vec3 I_79;
  I_79 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_73 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_78 = (I_79 - (2.0 * (
    dot (N_3, I_79)
   * N_3)));
  R_71 = tmpvar_78;
  lowp vec3 tmpvar_80;
  tmpvar_80 = textureCube (_SPCubeMap, R_71).xyz;
  reflection_70 = tmpvar_80;
  highp vec3 tmpvar_81;
  mediump vec3 x_82;
  x_82 = (spColor_74.xyz * _SPOldColor.xyz);
  tmpvar_81 = mix (x_82, ((reflection_70 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_74.xyz = tmpvar_81;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_72 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_72 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_83;
      tmpvar_83 = mix (spColor_74, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_72) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_74 = tmpvar_83;
    };
  };
  highp vec3 tmpvar_84;
  tmpvar_84 = mix (outColor_4.xyz, spColor_74.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_74.xyz = tmpvar_84;
  outColor_4.w = spColor_74.w;
  mediump vec3 tmpvar_85;
  highp vec3 N_86;
  N_86 = N_3;
  highp vec3 V_87;
  V_87 = V_2;
  mediump float tmpvar_88;
  highp float tmpvar_89;
  tmpvar_89 = pow (clamp ((1.001 - 
    dot (V_87, N_86)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_88 = (_RGBias + (tmpvar_89 * _RGScale));
  mediump vec3 tmpvar_90;
  tmpvar_90 = (tmpvar_88 * _RGColor).xyz;
  mediump float tmpvar_91;
  tmpvar_91 = clamp (tmpvar_88, 0.0, 1.0);
  highp vec3 tmpvar_92;
  tmpvar_92 = mix (spColor_74.xyz, tmpvar_90, vec3((tmpvar_91 * _RGRatio)));
  tmpvar_85 = tmpvar_92;
  outColor_4.xyz = tmpvar_85;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_93;
    scrpos_93 = xlv_TEXCOORD3;
    mediump float a_94;
    a_94 = xlv_TEXCOORD3.z;
    if ((a_94 < 0.95)) {
      scrpos_93.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_94 = (a_94 * 17.0);
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_93.y / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      highp float tmpvar_98;
      tmpvar_98 = (scrpos_93.x / 4.0);
      highp float tmpvar_99;
      tmpvar_99 = (fract(abs(tmpvar_98)) * 4.0);
      highp float tmpvar_100;
      if ((tmpvar_98 >= 0.0)) {
        tmpvar_100 = tmpvar_99;
      } else {
        tmpvar_100 = -(tmpvar_99);
      };
      highp float x_101;
      x_101 = ((a_94 - _DITHERMATRIX[
        int(tmpvar_97)
      ][
        int(tmpvar_100)
      ]) - 0.01);
      if ((x_101 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_74.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec2(0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  highp vec4 tmpvar_8;
  tmpvar_8 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_3 = (tmpvar_8.xyz / tmpvar_8.w);
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  mediump vec3 N_11;
  N_11 = tmpvar_10;
  mediump vec3 L_12;
  L_12 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_12 = _CustomLightDir.xyz;
  };
  tmpvar_5.x = ((dot (N_11, L_12) * 0.4975) + 0.5);
  tmpvar_5.y = 1.0;
  highp vec4 spuvs_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  spuvs_13.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spuvs_13.zw = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_6 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_6.zw;
    tmpvar_4.xyw = o_16.xyw;
    tmpvar_4.z = _DitherAlpha;
  };
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_1;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = spuvs_13;
  xlv_COLOR1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _DiffuseThreshold;
uniform mediump float _SpecularThreshold;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
mediump vec4 xlat_mutable_SPTransitionColor;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  xlat_mutable_SPTransitionColor = _SPTransitionColor;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  mediump vec4 tmpvar_5;
  highp vec2 pixelSize_6;
  pixelSize_6 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD0 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8 = floor(tmpvar_7);
  highp vec2 tmpvar_9;
  tmpvar_9 = fract(tmpvar_7);
  highp vec2 uv_10;
  uv_10 = ((tmpvar_8 + vec2(0.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_factorTex, uv_10);
  mediump vec4 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_indexTex, uv_10);
  mediump float tmpvar_14;
  tmpvar_14 = tmpvar_13.w;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 1.0;
  tmpvar_18.x = tmpvar_14;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec4 tmpvar_21;
  tmpvar_21.xyz = mix (tmpvar_17, tmpvar_20, tmpvar_12.xxx);
  tmpvar_21.w = tmpvar_12.y;
  highp vec2 uv_22;
  uv_22 = ((tmpvar_8 + vec2(1.5, 0.5)) * pixelSize_6);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_factorTex, uv_22);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_indexTex, uv_22);
  mediump float tmpvar_26;
  tmpvar_26 = tmpvar_25.w;
  mediump vec2 tmpvar_27;
  tmpvar_27.y = 0.0;
  tmpvar_27.x = tmpvar_26;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_tableTex, tmpvar_27).xyz;
  mediump vec3 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 1.0;
  tmpvar_30.x = tmpvar_26;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = mix (tmpvar_29, tmpvar_32, tmpvar_24.xxx);
  tmpvar_33.w = tmpvar_24.y;
  highp vec2 uv_34;
  uv_34 = ((tmpvar_8 + vec2(0.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_factorTex, uv_34);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_indexTex, uv_34);
  mediump float tmpvar_38;
  tmpvar_38 = tmpvar_37.w;
  mediump vec2 tmpvar_39;
  tmpvar_39.y = 0.0;
  tmpvar_39.x = tmpvar_38;
  lowp vec3 tmpvar_40;
  tmpvar_40 = texture2D (_tableTex, tmpvar_39).xyz;
  mediump vec3 tmpvar_41;
  tmpvar_41 = tmpvar_40;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 1.0;
  tmpvar_42.x = tmpvar_38;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec4 tmpvar_45;
  tmpvar_45.xyz = mix (tmpvar_41, tmpvar_44, tmpvar_36.xxx);
  tmpvar_45.w = tmpvar_36.y;
  highp vec2 uv_46;
  uv_46 = ((tmpvar_8 + vec2(1.5, 1.5)) * pixelSize_6);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_factorTex, uv_46);
  mediump vec4 tmpvar_48;
  tmpvar_48 = tmpvar_47;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_indexTex, uv_46);
  mediump float tmpvar_50;
  tmpvar_50 = tmpvar_49.w;
  mediump vec2 tmpvar_51;
  tmpvar_51.y = 0.0;
  tmpvar_51.x = tmpvar_50;
  lowp vec3 tmpvar_52;
  tmpvar_52 = texture2D (_tableTex, tmpvar_51).xyz;
  mediump vec3 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 1.0;
  tmpvar_54.x = tmpvar_50;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec4 tmpvar_57;
  tmpvar_57.xyz = mix (tmpvar_53, tmpvar_56, tmpvar_48.xxx);
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58 = mix (mix (tmpvar_21, tmpvar_33, tmpvar_9.xxxx), mix (tmpvar_45, tmpvar_57, tmpvar_9.xxxx), tmpvar_9.yyyy);
  tmpvar_5 = tmpvar_58;
  mediump float x_59;
  x_59 = (tmpvar_5.w - _AlphaClipThreshold);
  if ((x_59 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_60;
  tmpvar_60 = tmpvar_5.xyz;
  mediump vec3 diffColor_61;
  diffColor_61 = vec3(1.0, 1.0, 1.0);
  if ((xlv_COLOR1.x < _DiffuseThreshold)) {
    diffColor_61 = (tmpvar_5.xyz * _FirstShadowMultColor);
  } else {
    diffColor_61 = tmpvar_60;
  };
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(xlv_TEXCOORD1);
  N_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_64;
  mediump vec3 color_65;
  mediump vec3 H_66;
  H_66 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_67;
    highp vec3 tmpvar_68;
    tmpvar_68 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_67 = tmpvar_68;
    H_66 = normalize((_CustomLightDir.xyz + V_67));
  };
  mediump float tmpvar_69;
  tmpvar_69 = pow (max (dot (N_3, H_66), 0.0), _Shininess);
  if ((tmpvar_69 >= _SpecularThreshold)) {
    color_65 = (_LightSpecColor * _SpecMulti);
  } else {
    color_65 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_61 * _Color.xyz) * _EnvColor.xyz) + color_65);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_5.w);
  mediump vec3 reflection_70;
  mediump vec3 R_71;
  mediump float intensity_72;
  mediump vec4 noiseTex_73;
  mediump vec4 spColor_74;
  lowp vec4 tmpvar_75;
  tmpvar_75 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_74.xyz = tmpvar_75.xyz;
  spColor_74.w = outColor_4.w;
  lowp vec4 tmpvar_76;
  tmpvar_76 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_73 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = (((1.99 * noiseTex_73.x) * _SPNoiseScaler) - 1.0);
  intensity_72 = tmpvar_77;
  highp vec3 tmpvar_78;
  highp vec3 I_79;
  I_79 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_73 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_78 = (I_79 - (2.0 * (
    dot (N_3, I_79)
   * N_3)));
  R_71 = tmpvar_78;
  lowp vec3 tmpvar_80;
  tmpvar_80 = textureCube (_SPCubeMap, R_71).xyz;
  reflection_70 = tmpvar_80;
  highp vec3 tmpvar_81;
  mediump vec3 x_82;
  x_82 = (spColor_74.xyz * _SPOldColor.xyz);
  tmpvar_81 = mix (x_82, ((reflection_70 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_74.xyz = tmpvar_81;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_72 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_72 >= (1.5 * xlat_mutable_SPTransition))) {
      xlat_mutable_SPTransitionColor.xyz = (_SPTransitionColor * _SPTransitionEmissionScaler).xyz;
      xlat_mutable_SPTransitionColor.w = _SPTransitionBloomFactor;
      highp vec4 tmpvar_83;
      tmpvar_83 = mix (spColor_74, xlat_mutable_SPTransitionColor, vec4(clamp ((10.0 * 
        (-(intensity_72) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_74 = tmpvar_83;
    };
  };
  highp vec3 tmpvar_84;
  tmpvar_84 = mix (outColor_4.xyz, spColor_74.xyz, vec3(xlat_mutable_SPIntensity));
  spColor_74.xyz = tmpvar_84;
  outColor_4.w = spColor_74.w;
  mediump vec3 tmpvar_85;
  highp vec3 N_86;
  N_86 = N_3;
  highp vec3 V_87;
  V_87 = V_2;
  mediump float tmpvar_88;
  highp float tmpvar_89;
  tmpvar_89 = pow (clamp ((1.001 - 
    dot (V_87, N_86)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_88 = (_RGBias + (tmpvar_89 * _RGScale));
  mediump vec3 tmpvar_90;
  tmpvar_90 = (tmpvar_88 * _RGColor).xyz;
  mediump float tmpvar_91;
  tmpvar_91 = clamp (tmpvar_88, 0.0, 1.0);
  highp vec3 tmpvar_92;
  tmpvar_92 = mix (spColor_74.xyz, tmpvar_90, vec3((tmpvar_91 * _RGRatio)));
  tmpvar_85 = tmpvar_92;
  outColor_4.xyz = tmpvar_85;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_93;
    scrpos_93 = xlv_TEXCOORD3;
    mediump float a_94;
    a_94 = xlv_TEXCOORD3.z;
    if ((a_94 < 0.95)) {
      scrpos_93.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_94 = (a_94 * 17.0);
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_93.y / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      highp float tmpvar_98;
      tmpvar_98 = (scrpos_93.x / 4.0);
      highp float tmpvar_99;
      tmpvar_99 = (fract(abs(tmpvar_98)) * 4.0);
      highp float tmpvar_100;
      if ((tmpvar_98 >= 0.0)) {
        tmpvar_100 = tmpvar_99;
      } else {
        tmpvar_100 = -(tmpvar_99);
      };
      highp float x_101;
      x_101 = ((a_94 - _DITHERMATRIX[
        int(tmpvar_97)
      ][
        int(tmpvar_100)
      ]) - 0.01);
      if ((x_101 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_74.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
}
}
 Pass {
  Name "COMPLEX"
  LOD 200
  Tags { "Distortion" = "None" "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "OutlineType" = "Complex" "QUEUE" = "Transparent" "Reflected" = "Reflected" "RenderType" = "Transparent" }
  Cull Front
  GpuProgramID 84976
Program "vp" {
SubProgram "gles hw_tier00 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_7;
  tmpvar_7 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_7;
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_MatrixMV[0].xyz;
  tmpvar_8[1] = unity_MatrixMV[1].xyz;
  tmpvar_8[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_9.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(N_1);
  N_1 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_11));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_10.xy * tmpvar_12));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_3.zw;
    tmpvar_6.xyw = o_13.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _AlphaClipThreshold;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump float alpha_1;
  mediump vec4 color_2;
  color_2.xyz = (xlv_COLOR0.xyz * _Color.xyz);
  lowp float tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0).w;
  alpha_1 = tmpvar_3;
  mediump float x_4;
  x_4 = (alpha_1 - _AlphaClipThreshold);
  if ((x_4 < 0.0)) {
    discard;
  };
  color_2.w = (xlv_COLOR0.w * alpha_1);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_5;
    scrpos_5 = xlv_TEXCOORD3;
    mediump float a_6;
    a_6 = xlv_TEXCOORD3.z;
    if ((a_6 < 0.95)) {
      scrpos_5.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_6 = (a_6 * 17.0);
      highp float tmpvar_7;
      tmpvar_7 = (scrpos_5.y / 4.0);
      highp float tmpvar_8;
      tmpvar_8 = (fract(abs(tmpvar_7)) * 4.0);
      highp float tmpvar_9;
      if ((tmpvar_7 >= 0.0)) {
        tmpvar_9 = tmpvar_8;
      } else {
        tmpvar_9 = -(tmpvar_8);
      };
      highp float tmpvar_10;
      tmpvar_10 = (scrpos_5.x / 4.0);
      highp float tmpvar_11;
      tmpvar_11 = (fract(abs(tmpvar_10)) * 4.0);
      highp float tmpvar_12;
      if ((tmpvar_10 >= 0.0)) {
        tmpvar_12 = tmpvar_11;
      } else {
        tmpvar_12 = -(tmpvar_11);
      };
      highp float x_13;
      x_13 = ((a_6 - _DITHERMATRIX[
        int(tmpvar_9)
      ][
        int(tmpvar_12)
      ]) - 0.01);
      if ((x_13 < 0.0)) {
        discard;
      };
    };
  };
  color_2.w = clamp (color_2.w, 0.0, 1.0);
  gl_FragData[0] = color_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_7;
  tmpvar_7 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_7;
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_MatrixMV[0].xyz;
  tmpvar_8[1] = unity_MatrixMV[1].xyz;
  tmpvar_8[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_9.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(N_1);
  N_1 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_11));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_10.xy * tmpvar_12));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_3.zw;
    tmpvar_6.xyw = o_13.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _AlphaClipThreshold;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump float alpha_1;
  mediump vec4 color_2;
  color_2.xyz = (xlv_COLOR0.xyz * _Color.xyz);
  lowp float tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0).w;
  alpha_1 = tmpvar_3;
  mediump float x_4;
  x_4 = (alpha_1 - _AlphaClipThreshold);
  if ((x_4 < 0.0)) {
    discard;
  };
  color_2.w = (xlv_COLOR0.w * alpha_1);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_5;
    scrpos_5 = xlv_TEXCOORD3;
    mediump float a_6;
    a_6 = xlv_TEXCOORD3.z;
    if ((a_6 < 0.95)) {
      scrpos_5.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_6 = (a_6 * 17.0);
      highp float tmpvar_7;
      tmpvar_7 = (scrpos_5.y / 4.0);
      highp float tmpvar_8;
      tmpvar_8 = (fract(abs(tmpvar_7)) * 4.0);
      highp float tmpvar_9;
      if ((tmpvar_7 >= 0.0)) {
        tmpvar_9 = tmpvar_8;
      } else {
        tmpvar_9 = -(tmpvar_8);
      };
      highp float tmpvar_10;
      tmpvar_10 = (scrpos_5.x / 4.0);
      highp float tmpvar_11;
      tmpvar_11 = (fract(abs(tmpvar_10)) * 4.0);
      highp float tmpvar_12;
      if ((tmpvar_10 >= 0.0)) {
        tmpvar_12 = tmpvar_11;
      } else {
        tmpvar_12 = -(tmpvar_11);
      };
      highp float x_13;
      x_13 = ((a_6 - _DITHERMATRIX[
        int(tmpvar_9)
      ][
        int(tmpvar_12)
      ]) - 0.01);
      if ((x_13 < 0.0)) {
        discard;
      };
    };
  };
  color_2.w = clamp (color_2.w, 0.0, 1.0);
  gl_FragData[0] = color_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_7;
  tmpvar_7 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_7;
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_MatrixMV[0].xyz;
  tmpvar_8[1] = unity_MatrixMV[1].xyz;
  tmpvar_8[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_9.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(N_1);
  N_1 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_11));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_10.xy * tmpvar_12));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_3.zw;
    tmpvar_6.xyw = o_13.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _AlphaClipThreshold;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump float alpha_1;
  mediump vec4 color_2;
  color_2.xyz = (xlv_COLOR0.xyz * _Color.xyz);
  lowp float tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0).w;
  alpha_1 = tmpvar_3;
  mediump float x_4;
  x_4 = (alpha_1 - _AlphaClipThreshold);
  if ((x_4 < 0.0)) {
    discard;
  };
  color_2.w = (xlv_COLOR0.w * alpha_1);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_5;
    scrpos_5 = xlv_TEXCOORD3;
    mediump float a_6;
    a_6 = xlv_TEXCOORD3.z;
    if ((a_6 < 0.95)) {
      scrpos_5.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_6 = (a_6 * 17.0);
      highp float tmpvar_7;
      tmpvar_7 = (scrpos_5.y / 4.0);
      highp float tmpvar_8;
      tmpvar_8 = (fract(abs(tmpvar_7)) * 4.0);
      highp float tmpvar_9;
      if ((tmpvar_7 >= 0.0)) {
        tmpvar_9 = tmpvar_8;
      } else {
        tmpvar_9 = -(tmpvar_8);
      };
      highp float tmpvar_10;
      tmpvar_10 = (scrpos_5.x / 4.0);
      highp float tmpvar_11;
      tmpvar_11 = (fract(abs(tmpvar_10)) * 4.0);
      highp float tmpvar_12;
      if ((tmpvar_10 >= 0.0)) {
        tmpvar_12 = tmpvar_11;
      } else {
        tmpvar_12 = -(tmpvar_11);
      };
      highp float x_13;
      x_13 = ((a_6 - _DITHERMATRIX[
        int(tmpvar_9)
      ][
        int(tmpvar_12)
      ]) - 0.01);
      if ((x_13 < 0.0)) {
        discard;
      };
    };
  };
  color_2.w = clamp (color_2.w, 0.0, 1.0);
  gl_FragData[0] = color_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_7;
  tmpvar_7 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_7;
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_MatrixMV[0].xyz;
  tmpvar_8[1] = unity_MatrixMV[1].xyz;
  tmpvar_8[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_9.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(N_1);
  N_1 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_11));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_10.xy * tmpvar_12));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_3.zw;
    tmpvar_6.xyw = o_13.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump float _AlphaClipThreshold;
uniform highp float _UsingDitherAlpha;
uniform sampler2D _factorTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump float alpha_1;
  mediump vec4 color_2;
  color_2.xyz = (xlv_COLOR0.xyz * _Color.xyz);
  lowp float tmpvar_3;
  tmpvar_3 = texture2D (_factorTex, xlv_TEXCOORD0).y;
  alpha_1 = tmpvar_3;
  mediump float x_4;
  x_4 = (alpha_1 - _AlphaClipThreshold);
  if ((x_4 < 0.0)) {
    discard;
  };
  color_2.w = (xlv_COLOR0.w * alpha_1);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_5;
    scrpos_5 = xlv_TEXCOORD3;
    mediump float a_6;
    a_6 = xlv_TEXCOORD3.z;
    if ((a_6 < 0.95)) {
      scrpos_5.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_6 = (a_6 * 17.0);
      highp float tmpvar_7;
      tmpvar_7 = (scrpos_5.y / 4.0);
      highp float tmpvar_8;
      tmpvar_8 = (fract(abs(tmpvar_7)) * 4.0);
      highp float tmpvar_9;
      if ((tmpvar_7 >= 0.0)) {
        tmpvar_9 = tmpvar_8;
      } else {
        tmpvar_9 = -(tmpvar_8);
      };
      highp float tmpvar_10;
      tmpvar_10 = (scrpos_5.x / 4.0);
      highp float tmpvar_11;
      tmpvar_11 = (fract(abs(tmpvar_10)) * 4.0);
      highp float tmpvar_12;
      if ((tmpvar_10 >= 0.0)) {
        tmpvar_12 = tmpvar_11;
      } else {
        tmpvar_12 = -(tmpvar_11);
      };
      highp float x_13;
      x_13 = ((a_6 - _DITHERMATRIX[
        int(tmpvar_9)
      ][
        int(tmpvar_12)
      ]) - 0.01);
      if ((x_13 < 0.0)) {
        discard;
      };
    };
  };
  color_2.w = clamp (color_2.w, 0.0, 1.0);
  gl_FragData[0] = color_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_7;
  tmpvar_7 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_7;
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_MatrixMV[0].xyz;
  tmpvar_8[1] = unity_MatrixMV[1].xyz;
  tmpvar_8[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_9.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(N_1);
  N_1 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_11));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_10.xy * tmpvar_12));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_3.zw;
    tmpvar_6.xyw = o_13.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump float _AlphaClipThreshold;
uniform highp float _UsingDitherAlpha;
uniform sampler2D _factorTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump float alpha_1;
  mediump vec4 color_2;
  color_2.xyz = (xlv_COLOR0.xyz * _Color.xyz);
  lowp float tmpvar_3;
  tmpvar_3 = texture2D (_factorTex, xlv_TEXCOORD0).y;
  alpha_1 = tmpvar_3;
  mediump float x_4;
  x_4 = (alpha_1 - _AlphaClipThreshold);
  if ((x_4 < 0.0)) {
    discard;
  };
  color_2.w = (xlv_COLOR0.w * alpha_1);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_5;
    scrpos_5 = xlv_TEXCOORD3;
    mediump float a_6;
    a_6 = xlv_TEXCOORD3.z;
    if ((a_6 < 0.95)) {
      scrpos_5.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_6 = (a_6 * 17.0);
      highp float tmpvar_7;
      tmpvar_7 = (scrpos_5.y / 4.0);
      highp float tmpvar_8;
      tmpvar_8 = (fract(abs(tmpvar_7)) * 4.0);
      highp float tmpvar_9;
      if ((tmpvar_7 >= 0.0)) {
        tmpvar_9 = tmpvar_8;
      } else {
        tmpvar_9 = -(tmpvar_8);
      };
      highp float tmpvar_10;
      tmpvar_10 = (scrpos_5.x / 4.0);
      highp float tmpvar_11;
      tmpvar_11 = (fract(abs(tmpvar_10)) * 4.0);
      highp float tmpvar_12;
      if ((tmpvar_10 >= 0.0)) {
        tmpvar_12 = tmpvar_11;
      } else {
        tmpvar_12 = -(tmpvar_11);
      };
      highp float x_13;
      x_13 = ((a_6 - _DITHERMATRIX[
        int(tmpvar_9)
      ][
        int(tmpvar_12)
      ]) - 0.01);
      if ((x_13 < 0.0)) {
        discard;
      };
    };
  };
  color_2.w = clamp (color_2.w, 0.0, 1.0);
  gl_FragData[0] = color_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_7;
  tmpvar_7 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_7;
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_MatrixMV[0].xyz;
  tmpvar_8[1] = unity_MatrixMV[1].xyz;
  tmpvar_8[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_9.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(N_1);
  N_1 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_11));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_10.xy * tmpvar_12));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_3.zw;
    tmpvar_6.xyw = o_13.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump float _AlphaClipThreshold;
uniform highp float _UsingDitherAlpha;
uniform sampler2D _factorTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump float alpha_1;
  mediump vec4 color_2;
  color_2.xyz = (xlv_COLOR0.xyz * _Color.xyz);
  lowp float tmpvar_3;
  tmpvar_3 = texture2D (_factorTex, xlv_TEXCOORD0).y;
  alpha_1 = tmpvar_3;
  mediump float x_4;
  x_4 = (alpha_1 - _AlphaClipThreshold);
  if ((x_4 < 0.0)) {
    discard;
  };
  color_2.w = (xlv_COLOR0.w * alpha_1);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_5;
    scrpos_5 = xlv_TEXCOORD3;
    mediump float a_6;
    a_6 = xlv_TEXCOORD3.z;
    if ((a_6 < 0.95)) {
      scrpos_5.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_6 = (a_6 * 17.0);
      highp float tmpvar_7;
      tmpvar_7 = (scrpos_5.y / 4.0);
      highp float tmpvar_8;
      tmpvar_8 = (fract(abs(tmpvar_7)) * 4.0);
      highp float tmpvar_9;
      if ((tmpvar_7 >= 0.0)) {
        tmpvar_9 = tmpvar_8;
      } else {
        tmpvar_9 = -(tmpvar_8);
      };
      highp float tmpvar_10;
      tmpvar_10 = (scrpos_5.x / 4.0);
      highp float tmpvar_11;
      tmpvar_11 = (fract(abs(tmpvar_10)) * 4.0);
      highp float tmpvar_12;
      if ((tmpvar_10 >= 0.0)) {
        tmpvar_12 = tmpvar_11;
      } else {
        tmpvar_12 = -(tmpvar_11);
      };
      highp float x_13;
      x_13 = ((a_6 - _DITHERMATRIX[
        int(tmpvar_9)
      ][
        int(tmpvar_12)
      ]) - 0.01);
      if ((x_13 < 0.0)) {
        discard;
      };
    };
  };
  color_2.w = clamp (color_2.w, 0.0, 1.0);
  gl_FragData[0] = color_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_7;
  tmpvar_7 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_7;
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_MatrixMV[0].xyz;
  tmpvar_8[1] = unity_MatrixMV[1].xyz;
  tmpvar_8[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_9.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(N_1);
  N_1 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_11));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_10.xy * tmpvar_12));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  highp vec2 spnoiseuv_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spnoiseuv_13 = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_3.zw;
    tmpvar_6.xyw = o_16.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = spnoiseuv_13;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPTransition;
uniform mediump vec4 _SPOutlineColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _AlphaClipThreshold;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump float alpha_1;
  mediump vec4 color_2;
  color_2 = xlv_COLOR0;
  mediump float intensity_3;
  mediump vec4 outColor_4;
  outColor_4 = _SPOutlineColor;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_SPNoiseTex, xlv_TEXCOORD1);
  highp float tmpvar_6;
  tmpvar_6 = (((1.99 * tmpvar_5.x) * _SPNoiseScaler) - 1.0);
  intensity_3 = tmpvar_6;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_3 >= (1.7 * xlat_mutable_SPTransition))) {
    outColor_4 = xlv_COLOR0;
  };
  color_2.xyz = (outColor_4.xyz * _Color.xyz);
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0).w;
  alpha_1 = tmpvar_7;
  mediump float x_8;
  x_8 = (alpha_1 - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  color_2.w = (outColor_4.w * alpha_1);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_9;
    scrpos_9 = xlv_TEXCOORD3;
    mediump float a_10;
    a_10 = xlv_TEXCOORD3.z;
    if ((a_10 < 0.95)) {
      scrpos_9.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_10 = (a_10 * 17.0);
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_9.y / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float tmpvar_14;
      tmpvar_14 = (scrpos_9.x / 4.0);
      highp float tmpvar_15;
      tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
      highp float tmpvar_16;
      if ((tmpvar_14 >= 0.0)) {
        tmpvar_16 = tmpvar_15;
      } else {
        tmpvar_16 = -(tmpvar_15);
      };
      highp float x_17;
      x_17 = ((a_10 - _DITHERMATRIX[
        int(tmpvar_13)
      ][
        int(tmpvar_16)
      ]) - 0.01);
      if ((x_17 < 0.0)) {
        discard;
      };
    };
  };
  color_2.w = clamp (color_2.w, 0.0, 1.0);
  gl_FragData[0] = color_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_7;
  tmpvar_7 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_7;
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_MatrixMV[0].xyz;
  tmpvar_8[1] = unity_MatrixMV[1].xyz;
  tmpvar_8[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_9.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(N_1);
  N_1 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_11));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_10.xy * tmpvar_12));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  highp vec2 spnoiseuv_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spnoiseuv_13 = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_3.zw;
    tmpvar_6.xyw = o_16.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = spnoiseuv_13;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPTransition;
uniform mediump vec4 _SPOutlineColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _AlphaClipThreshold;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump float alpha_1;
  mediump vec4 color_2;
  color_2 = xlv_COLOR0;
  mediump float intensity_3;
  mediump vec4 outColor_4;
  outColor_4 = _SPOutlineColor;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_SPNoiseTex, xlv_TEXCOORD1);
  highp float tmpvar_6;
  tmpvar_6 = (((1.99 * tmpvar_5.x) * _SPNoiseScaler) - 1.0);
  intensity_3 = tmpvar_6;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_3 >= (1.7 * xlat_mutable_SPTransition))) {
    outColor_4 = xlv_COLOR0;
  };
  color_2.xyz = (outColor_4.xyz * _Color.xyz);
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0).w;
  alpha_1 = tmpvar_7;
  mediump float x_8;
  x_8 = (alpha_1 - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  color_2.w = (outColor_4.w * alpha_1);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_9;
    scrpos_9 = xlv_TEXCOORD3;
    mediump float a_10;
    a_10 = xlv_TEXCOORD3.z;
    if ((a_10 < 0.95)) {
      scrpos_9.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_10 = (a_10 * 17.0);
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_9.y / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float tmpvar_14;
      tmpvar_14 = (scrpos_9.x / 4.0);
      highp float tmpvar_15;
      tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
      highp float tmpvar_16;
      if ((tmpvar_14 >= 0.0)) {
        tmpvar_16 = tmpvar_15;
      } else {
        tmpvar_16 = -(tmpvar_15);
      };
      highp float x_17;
      x_17 = ((a_10 - _DITHERMATRIX[
        int(tmpvar_13)
      ][
        int(tmpvar_16)
      ]) - 0.01);
      if ((x_17 < 0.0)) {
        discard;
      };
    };
  };
  color_2.w = clamp (color_2.w, 0.0, 1.0);
  gl_FragData[0] = color_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_7;
  tmpvar_7 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_7;
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_MatrixMV[0].xyz;
  tmpvar_8[1] = unity_MatrixMV[1].xyz;
  tmpvar_8[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_9.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(N_1);
  N_1 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_11));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_10.xy * tmpvar_12));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  highp vec2 spnoiseuv_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spnoiseuv_13 = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_3.zw;
    tmpvar_6.xyw = o_16.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = spnoiseuv_13;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPTransition;
uniform mediump vec4 _SPOutlineColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _AlphaClipThreshold;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump float alpha_1;
  mediump vec4 color_2;
  color_2 = xlv_COLOR0;
  mediump float intensity_3;
  mediump vec4 outColor_4;
  outColor_4 = _SPOutlineColor;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_SPNoiseTex, xlv_TEXCOORD1);
  highp float tmpvar_6;
  tmpvar_6 = (((1.99 * tmpvar_5.x) * _SPNoiseScaler) - 1.0);
  intensity_3 = tmpvar_6;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_3 >= (1.7 * xlat_mutable_SPTransition))) {
    outColor_4 = xlv_COLOR0;
  };
  color_2.xyz = (outColor_4.xyz * _Color.xyz);
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0).w;
  alpha_1 = tmpvar_7;
  mediump float x_8;
  x_8 = (alpha_1 - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  color_2.w = (outColor_4.w * alpha_1);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_9;
    scrpos_9 = xlv_TEXCOORD3;
    mediump float a_10;
    a_10 = xlv_TEXCOORD3.z;
    if ((a_10 < 0.95)) {
      scrpos_9.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_10 = (a_10 * 17.0);
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_9.y / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float tmpvar_14;
      tmpvar_14 = (scrpos_9.x / 4.0);
      highp float tmpvar_15;
      tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
      highp float tmpvar_16;
      if ((tmpvar_14 >= 0.0)) {
        tmpvar_16 = tmpvar_15;
      } else {
        tmpvar_16 = -(tmpvar_15);
      };
      highp float x_17;
      x_17 = ((a_10 - _DITHERMATRIX[
        int(tmpvar_13)
      ][
        int(tmpvar_16)
      ]) - 0.01);
      if ((x_17 < 0.0)) {
        discard;
      };
    };
  };
  color_2.w = clamp (color_2.w, 0.0, 1.0);
  gl_FragData[0] = color_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_7;
  tmpvar_7 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_7;
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_MatrixMV[0].xyz;
  tmpvar_8[1] = unity_MatrixMV[1].xyz;
  tmpvar_8[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_9.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(N_1);
  N_1 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_11));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_10.xy * tmpvar_12));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  highp vec2 spnoiseuv_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spnoiseuv_13 = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_3.zw;
    tmpvar_6.xyw = o_16.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = spnoiseuv_13;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPTransition;
uniform mediump vec4 _SPOutlineColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump float _AlphaClipThreshold;
uniform highp float _UsingDitherAlpha;
uniform sampler2D _factorTex;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump float alpha_1;
  mediump vec4 color_2;
  color_2 = xlv_COLOR0;
  mediump float intensity_3;
  mediump vec4 outColor_4;
  outColor_4 = _SPOutlineColor;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_SPNoiseTex, xlv_TEXCOORD1);
  highp float tmpvar_6;
  tmpvar_6 = (((1.99 * tmpvar_5.x) * _SPNoiseScaler) - 1.0);
  intensity_3 = tmpvar_6;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_3 >= (1.7 * xlat_mutable_SPTransition))) {
    outColor_4 = xlv_COLOR0;
  };
  color_2.xyz = (outColor_4.xyz * _Color.xyz);
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0).y;
  alpha_1 = tmpvar_7;
  mediump float x_8;
  x_8 = (alpha_1 - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  color_2.w = (outColor_4.w * alpha_1);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_9;
    scrpos_9 = xlv_TEXCOORD3;
    mediump float a_10;
    a_10 = xlv_TEXCOORD3.z;
    if ((a_10 < 0.95)) {
      scrpos_9.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_10 = (a_10 * 17.0);
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_9.y / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float tmpvar_14;
      tmpvar_14 = (scrpos_9.x / 4.0);
      highp float tmpvar_15;
      tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
      highp float tmpvar_16;
      if ((tmpvar_14 >= 0.0)) {
        tmpvar_16 = tmpvar_15;
      } else {
        tmpvar_16 = -(tmpvar_15);
      };
      highp float x_17;
      x_17 = ((a_10 - _DITHERMATRIX[
        int(tmpvar_13)
      ][
        int(tmpvar_16)
      ]) - 0.01);
      if ((x_17 < 0.0)) {
        discard;
      };
    };
  };
  color_2.w = clamp (color_2.w, 0.0, 1.0);
  gl_FragData[0] = color_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_7;
  tmpvar_7 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_7;
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_MatrixMV[0].xyz;
  tmpvar_8[1] = unity_MatrixMV[1].xyz;
  tmpvar_8[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_9.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(N_1);
  N_1 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_11));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_10.xy * tmpvar_12));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  highp vec2 spnoiseuv_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spnoiseuv_13 = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_3.zw;
    tmpvar_6.xyw = o_16.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = spnoiseuv_13;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPTransition;
uniform mediump vec4 _SPOutlineColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump float _AlphaClipThreshold;
uniform highp float _UsingDitherAlpha;
uniform sampler2D _factorTex;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump float alpha_1;
  mediump vec4 color_2;
  color_2 = xlv_COLOR0;
  mediump float intensity_3;
  mediump vec4 outColor_4;
  outColor_4 = _SPOutlineColor;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_SPNoiseTex, xlv_TEXCOORD1);
  highp float tmpvar_6;
  tmpvar_6 = (((1.99 * tmpvar_5.x) * _SPNoiseScaler) - 1.0);
  intensity_3 = tmpvar_6;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_3 >= (1.7 * xlat_mutable_SPTransition))) {
    outColor_4 = xlv_COLOR0;
  };
  color_2.xyz = (outColor_4.xyz * _Color.xyz);
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0).y;
  alpha_1 = tmpvar_7;
  mediump float x_8;
  x_8 = (alpha_1 - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  color_2.w = (outColor_4.w * alpha_1);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_9;
    scrpos_9 = xlv_TEXCOORD3;
    mediump float a_10;
    a_10 = xlv_TEXCOORD3.z;
    if ((a_10 < 0.95)) {
      scrpos_9.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_10 = (a_10 * 17.0);
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_9.y / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float tmpvar_14;
      tmpvar_14 = (scrpos_9.x / 4.0);
      highp float tmpvar_15;
      tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
      highp float tmpvar_16;
      if ((tmpvar_14 >= 0.0)) {
        tmpvar_16 = tmpvar_15;
      } else {
        tmpvar_16 = -(tmpvar_15);
      };
      highp float x_17;
      x_17 = ((a_10 - _DITHERMATRIX[
        int(tmpvar_13)
      ][
        int(tmpvar_16)
      ]) - 0.01);
      if ((x_17 < 0.0)) {
        discard;
      };
    };
  };
  color_2.w = clamp (color_2.w, 0.0, 1.0);
  gl_FragData[0] = color_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_7;
  tmpvar_7 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_7;
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_MatrixMV[0].xyz;
  tmpvar_8[1] = unity_MatrixMV[1].xyz;
  tmpvar_8[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_9.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(N_1);
  N_1 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_11));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_10.xy * tmpvar_12));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  highp vec2 spnoiseuv_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spnoiseuv_13 = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_3.zw;
    tmpvar_6.xyw = o_16.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = spnoiseuv_13;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPTransition;
uniform mediump vec4 _SPOutlineColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump float _AlphaClipThreshold;
uniform highp float _UsingDitherAlpha;
uniform sampler2D _factorTex;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump float alpha_1;
  mediump vec4 color_2;
  color_2 = xlv_COLOR0;
  mediump float intensity_3;
  mediump vec4 outColor_4;
  outColor_4 = _SPOutlineColor;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_SPNoiseTex, xlv_TEXCOORD1);
  highp float tmpvar_6;
  tmpvar_6 = (((1.99 * tmpvar_5.x) * _SPNoiseScaler) - 1.0);
  intensity_3 = tmpvar_6;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_3 >= (1.7 * xlat_mutable_SPTransition))) {
    outColor_4 = xlv_COLOR0;
  };
  color_2.xyz = (outColor_4.xyz * _Color.xyz);
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0).y;
  alpha_1 = tmpvar_7;
  mediump float x_8;
  x_8 = (alpha_1 - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  color_2.w = (outColor_4.w * alpha_1);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_9;
    scrpos_9 = xlv_TEXCOORD3;
    mediump float a_10;
    a_10 = xlv_TEXCOORD3.z;
    if ((a_10 < 0.95)) {
      scrpos_9.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_10 = (a_10 * 17.0);
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_9.y / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float tmpvar_14;
      tmpvar_14 = (scrpos_9.x / 4.0);
      highp float tmpvar_15;
      tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
      highp float tmpvar_16;
      if ((tmpvar_14 >= 0.0)) {
        tmpvar_16 = tmpvar_15;
      } else {
        tmpvar_16 = -(tmpvar_15);
      };
      highp float x_17;
      x_17 = ((a_10 - _DITHERMATRIX[
        int(tmpvar_13)
      ][
        int(tmpvar_16)
      ]) - 0.01);
      if ((x_17 < 0.0)) {
        discard;
      };
    };
  };
  color_2.w = clamp (color_2.w, 0.0, 1.0);
  gl_FragData[0] = color_2;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
""
}
SubProgram "gles hw_tier01 " {
""
}
SubProgram "gles hw_tier02 " {
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
}
}
 Pass {
  LOD 200
  Tags { "Distortion" = "None" "IGNOREPROJECTOR" = "true" "OutlineType" = "Complex" "QUEUE" = "Transparent" "Reflected" = "Reflected" "RenderType" = "Transparent" }
  GpuProgramID 161180
Program "vp" {
SubProgram "gles hw_tier00 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec2 tmpvar_1;
  mediump vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  tmpvar_1 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  if (bool(_UsingBloomMask)) {
    tmpvar_2 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump float _BloomFactor;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  mediump float alpha_1;
  mediump vec4 color_2;
  color_2.xyz = vec3(0.0, 0.0, 0.0);
  lowp float tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0).w;
  alpha_1 = tmpvar_3;
  mediump float x_4;
  x_4 = (alpha_1 - _AlphaClipThreshold);
  if ((x_4 < 0.0)) {
    discard;
  };
  color_2.w = _BloomFactor;
  gl_FragData[0] = color_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec2 tmpvar_1;
  mediump vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  tmpvar_1 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  if (bool(_UsingBloomMask)) {
    tmpvar_2 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump float _BloomFactor;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  mediump float alpha_1;
  mediump vec4 color_2;
  color_2.xyz = vec3(0.0, 0.0, 0.0);
  lowp float tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0).w;
  alpha_1 = tmpvar_3;
  mediump float x_4;
  x_4 = (alpha_1 - _AlphaClipThreshold);
  if ((x_4 < 0.0)) {
    discard;
  };
  color_2.w = _BloomFactor;
  gl_FragData[0] = color_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec2 tmpvar_1;
  mediump vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  tmpvar_1 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  if (bool(_UsingBloomMask)) {
    tmpvar_2 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump float _BloomFactor;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  mediump float alpha_1;
  mediump vec4 color_2;
  color_2.xyz = vec3(0.0, 0.0, 0.0);
  lowp float tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0).w;
  alpha_1 = tmpvar_3;
  mediump float x_4;
  x_4 = (alpha_1 - _AlphaClipThreshold);
  if ((x_4 < 0.0)) {
    discard;
  };
  color_2.w = _BloomFactor;
  gl_FragData[0] = color_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec2 tmpvar_1;
  mediump vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  tmpvar_1 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  if (bool(_UsingBloomMask)) {
    tmpvar_2 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  highp vec4 tmpvar_5;
  tmpvar_5 = (_glesVertex * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = (tmpvar_5.x + (tmpvar_5.z * tmpvar_5.z));
  tmpvar_6.y = ((tmpvar_5.y + (0.5 * tmpvar_5.z)) + ((0.5 * tmpvar_5.x) * tmpvar_5.x));
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = ((tmpvar_6 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  xlv_TEXCOORD2 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPTransition;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionBloomFactor;
uniform sampler2D _MainTex;
uniform mediump float _BloomFactor;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPTransition;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  mediump float alpha_1;
  mediump vec4 color_2;
  color_2.xyz = vec3(0.0, 0.0, 0.0);
  lowp float tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0).w;
  alpha_1 = tmpvar_3;
  mediump float x_4;
  x_4 = (alpha_1 - _AlphaClipThreshold);
  if ((x_4 < 0.0)) {
    discard;
  };
  color_2.w = _BloomFactor;
  mediump float intensity_5;
  mediump float outBloomFactor_6;
  outBloomFactor_6 = color_2.w;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_SPNoiseTex, xlv_TEXCOORD1);
  highp float tmpvar_8;
  tmpvar_8 = (((1.99 * tmpvar_7.x) * _SPNoiseScaler) - 1.0);
  intensity_5 = tmpvar_8;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if (((intensity_5 >= (1.5 * xlat_mutable_SPTransition)) && (intensity_5 < (1.7 * xlat_mutable_SPTransition)))) {
    highp float tmpvar_9;
    tmpvar_9 = mix (_BloomFactor, _SPTransitionBloomFactor, clamp ((10.0 * 
      (-(intensity_5) + (1.7 * xlat_mutable_SPTransition))
    ), 0.0, 1.0));
    outBloomFactor_6 = tmpvar_9;
  } else {
    if ((intensity_5 < (1.5 * xlat_mutable_SPTransition))) {
      outBloomFactor_6 = (outBloomFactor_6 * _SPOpaqueness);
    };
  };
  color_2.w = outBloomFactor_6;
  gl_FragData[0] = color_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec2 tmpvar_1;
  mediump vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  tmpvar_1 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  if (bool(_UsingBloomMask)) {
    tmpvar_2 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  highp vec4 tmpvar_5;
  tmpvar_5 = (_glesVertex * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = (tmpvar_5.x + (tmpvar_5.z * tmpvar_5.z));
  tmpvar_6.y = ((tmpvar_5.y + (0.5 * tmpvar_5.z)) + ((0.5 * tmpvar_5.x) * tmpvar_5.x));
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = ((tmpvar_6 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  xlv_TEXCOORD2 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPTransition;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionBloomFactor;
uniform sampler2D _MainTex;
uniform mediump float _BloomFactor;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPTransition;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  mediump float alpha_1;
  mediump vec4 color_2;
  color_2.xyz = vec3(0.0, 0.0, 0.0);
  lowp float tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0).w;
  alpha_1 = tmpvar_3;
  mediump float x_4;
  x_4 = (alpha_1 - _AlphaClipThreshold);
  if ((x_4 < 0.0)) {
    discard;
  };
  color_2.w = _BloomFactor;
  mediump float intensity_5;
  mediump float outBloomFactor_6;
  outBloomFactor_6 = color_2.w;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_SPNoiseTex, xlv_TEXCOORD1);
  highp float tmpvar_8;
  tmpvar_8 = (((1.99 * tmpvar_7.x) * _SPNoiseScaler) - 1.0);
  intensity_5 = tmpvar_8;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if (((intensity_5 >= (1.5 * xlat_mutable_SPTransition)) && (intensity_5 < (1.7 * xlat_mutable_SPTransition)))) {
    highp float tmpvar_9;
    tmpvar_9 = mix (_BloomFactor, _SPTransitionBloomFactor, clamp ((10.0 * 
      (-(intensity_5) + (1.7 * xlat_mutable_SPTransition))
    ), 0.0, 1.0));
    outBloomFactor_6 = tmpvar_9;
  } else {
    if ((intensity_5 < (1.5 * xlat_mutable_SPTransition))) {
      outBloomFactor_6 = (outBloomFactor_6 * _SPOpaqueness);
    };
  };
  color_2.w = outBloomFactor_6;
  gl_FragData[0] = color_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec2 tmpvar_1;
  mediump vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  tmpvar_1 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  if (bool(_UsingBloomMask)) {
    tmpvar_2 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  highp vec4 tmpvar_5;
  tmpvar_5 = (_glesVertex * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = (tmpvar_5.x + (tmpvar_5.z * tmpvar_5.z));
  tmpvar_6.y = ((tmpvar_5.y + (0.5 * tmpvar_5.z)) + ((0.5 * tmpvar_5.x) * tmpvar_5.x));
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = ((tmpvar_6 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  xlv_TEXCOORD2 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPTransition;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionBloomFactor;
uniform sampler2D _MainTex;
uniform mediump float _BloomFactor;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPTransition;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  mediump float alpha_1;
  mediump vec4 color_2;
  color_2.xyz = vec3(0.0, 0.0, 0.0);
  lowp float tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0).w;
  alpha_1 = tmpvar_3;
  mediump float x_4;
  x_4 = (alpha_1 - _AlphaClipThreshold);
  if ((x_4 < 0.0)) {
    discard;
  };
  color_2.w = _BloomFactor;
  mediump float intensity_5;
  mediump float outBloomFactor_6;
  outBloomFactor_6 = color_2.w;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_SPNoiseTex, xlv_TEXCOORD1);
  highp float tmpvar_8;
  tmpvar_8 = (((1.99 * tmpvar_7.x) * _SPNoiseScaler) - 1.0);
  intensity_5 = tmpvar_8;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if (((intensity_5 >= (1.5 * xlat_mutable_SPTransition)) && (intensity_5 < (1.7 * xlat_mutable_SPTransition)))) {
    highp float tmpvar_9;
    tmpvar_9 = mix (_BloomFactor, _SPTransitionBloomFactor, clamp ((10.0 * 
      (-(intensity_5) + (1.7 * xlat_mutable_SPTransition))
    ), 0.0, 1.0));
    outBloomFactor_6 = tmpvar_9;
  } else {
    if ((intensity_5 < (1.5 * xlat_mutable_SPTransition))) {
      outBloomFactor_6 = (outBloomFactor_6 * _SPOpaqueness);
    };
  };
  color_2.w = outBloomFactor_6;
  gl_FragData[0] = color_2;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
""
}
SubProgram "gles hw_tier01 " {
""
}
SubProgram "gles hw_tier02 " {
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPECIAL_STATE" }
""
}
}
}
}
Fallback "Diffuse"
CustomEditor "MoleMole.CharacterShaderEditorBase"
}